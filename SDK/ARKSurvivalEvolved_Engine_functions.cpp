// ARKSurvivalEvolved (329.9) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "ARKSurvivalEvolved_Engine_parameters.hpp"

namespace sdk
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function Engine.Actor.UserConstructionScript
// ()

void AActor::UserConstructionScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UserConstructionScript");

	AActor_UserConstructionScript_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Unstasis
// ()

void AActor::Unstasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Unstasis");

	AActor_Unstasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TryMultiUse
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseIndex                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::TryMultiUse(class APlayerController* ForPC, int UseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TryMultiUse");

	AActor_TryMultiUse_Params params;
	params.ForPC = ForPC;
	params.UseIndex = UseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ThrottledTick
// ()

void AActor::ThrottledTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ThrottledTick");

	AActor_ThrottledTick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TargetingTeamChanged__DelegateSignature
// ()

void AActor::TargetingTeamChanged__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TargetingTeamChanged__DelegateSignature");

	AActor_TargetingTeamChanged__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TargetingTeamChanged
// ()

void AActor::TargetingTeamChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TargetingTeamChanged");

	AActor_TargetingTeamChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TakePointDamageSignature__DelegateSignature
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     FHitComponent                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ShotFromDirection              (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::TakePointDamageSignature__DelegateSignature(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class UDamageType* DamageType, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakePointDamageSignature__DelegateSignature");

	AActor_TakePointDamageSignature__DelegateSignature_Params params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.FHitComponent = FHitComponent;
	params.BoneName = BoneName;
	params.ShotFromDirection = ShotFromDirection;
	params.DamageType = DamageType;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TakeAnyDamageSignature__DelegateSignature
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::TakeAnyDamageSignature__DelegateSignature(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeAnyDamageSignature__DelegateSignature");

	AActor_TakeAnyDamageSignature__DelegateSignature_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopActorSound
// ()
// Parameters:
// class USoundBase*              SoundAsset                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::StopActorSound(class USoundBase* SoundAsset, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopActorSound");

	AActor_StopActorSound_Params params;
	params.SoundAsset = SoundAsset;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SnapRootComponentTo
// ()
// Parameters:
// class AActor*                  InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SnapRootComponentTo");

	AActor_SnapRootComponentTo_Params params;
	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTickFunctionEnabled
// ()
// Parameters:
// bool                           bEnableTick                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetTickFunctionEnabled(bool bEnableTick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickFunctionEnabled");

	AActor_SetTickFunctionEnabled_Params params;
	params.bEnableTick = bEnableTick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTickableWhenPaused
// ()
// Parameters:
// bool                           bTickableWhenPaused            (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickableWhenPaused");

	AActor_SetTickableWhenPaused_Params params;
	params.bTickableWhenPaused = bTickableWhenPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetReplicates
// ()
// Parameters:
// bool                           bInReplicates                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetReplicates(bool bInReplicates)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetReplicates");

	AActor_SetReplicates_Params params;
	params.bInReplicates = bInReplicates;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetOwner
// ()
// Parameters:
// class AActor*                  NewOwner                       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetOwner(class AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	AActor_SetOwner_Params params;
	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetNetworkSpatializationParent
// ()
// Parameters:
// class AActor*                  NewParent                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetNetworkSpatializationParent(class AActor* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetworkSpatializationParent");

	AActor_SetNetworkSpatializationParent_Params params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetLifeSpan
// ()
// Parameters:
// float                          InLifespan                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetLifeSpan(float InLifespan)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLifeSpan");

	AActor_SetLifeSpan_Params params;
	params.InLifespan = InLifespan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetActorTransform
// ()
// Parameters:
// struct UObject_FTransform      NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::SetActorTransform(const struct UObject_FTransform& NewTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorTransform");

	AActor_SetActorTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetActorScale3D
// ()
// Parameters:
// struct FVector                 NewScale3D                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AActor::SetActorScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorScale3D");

	AActor_SetActorScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetActorRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::SetActorRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRotation");

	AActor_SetActorRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetActorRelativeTransform
// ()
// Parameters:
// struct UObject_FTransform      NewRelativeTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorRelativeTransform(const struct UObject_FTransform& NewRelativeTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRelativeTransform");

	AActor_SetActorRelativeTransform_Params params;
	params.NewRelativeTransform = NewRelativeTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetActorRelativeScale3D
// ()
// Parameters:
// struct FVector                 NewRelativeScale               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorRelativeScale3D(const struct FVector& NewRelativeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRelativeScale3D");

	AActor_SetActorRelativeScale3D_Params params;
	params.NewRelativeScale = NewRelativeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetActorRelativeRotation
// ()
// Parameters:
// struct FRotator                NewRelativeRotation            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRelativeRotation");

	AActor_SetActorRelativeRotation_Params params;
	params.NewRelativeRotation = NewRelativeRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetActorRelativeLocation
// ()
// Parameters:
// struct FVector                 NewRelativeLocation            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorRelativeLocation");

	AActor_SetActorRelativeLocation_Params params;
	params.NewRelativeLocation = NewRelativeLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetActorLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorLocationAndRotation");

	AActor_SetActorLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetActorHiddenInGame
// ()
// Parameters:
// bool                           bNewHidden                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorHiddenInGame(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorHiddenInGame");

	AActor_SetActorHiddenInGame_Params params;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetActorEnableCollision
// ()
// Parameters:
// bool                           bNewActorEnableCollision       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::SetActorEnableCollision(bool bNewActorEnableCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetActorEnableCollision");

	AActor_SetActorEnableCollision_Params params;
	params.bNewActorEnableCollision = bNewActorEnableCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ServerSendSimpleExecCommandToEveryone
// ()
// Parameters:
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsReliable                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSendToLocalPlayer        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreRelevancy               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ServerSendSimpleExecCommandToEveryone(const struct FName& CommandName, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ServerSendSimpleExecCommandToEveryone");

	AActor_ServerSendSimpleExecCommandToEveryone_Params params;
	params.CommandName = CommandName;
	params.bIsReliable = bIsReliable;
	params.bForceSendToLocalPlayer = bForceSendToLocalPlayer;
	params.bIgnoreRelevancy = bIgnoreRelevancy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ServerSendExecCommandToPlayer
// ()
// Parameters:
// class APlayerController*       ToPC                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsReliable                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSendToLocalPlayer        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreRelevancy               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ServerSendExecCommandToPlayer(class APlayerController* ToPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ServerSendExecCommandToPlayer");

	AActor_ServerSendExecCommandToPlayer_Params params;
	params.ToPC = ToPC;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.bIsReliable = bIsReliable;
	params.bForceSendToLocalPlayer = bForceSendToLocalPlayer;
	params.bIgnoreRelevancy = bIgnoreRelevancy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ServerSendExecCommandToEveryone
// ()
// Parameters:
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsReliable                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSendToLocalPlayer        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreRelevancy               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ServerSendExecCommandToEveryone(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ServerSendExecCommandToEveryone");

	AActor_ServerSendExecCommandToEveryone_Params params;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.bIsReliable = bIsReliable;
	params.bForceSendToLocalPlayer = bForceSendToLocalPlayer;
	params.bIgnoreRelevancy = bIgnoreRelevancy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RerunConstructionScripts
// ()

void AActor::RerunConstructionScripts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RerunConstructionScripts");

	AActor_RerunConstructionScripts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReregisterAllComponents
// ()

void AActor::ReregisterAllComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReregisterAllComponents");

	AActor_ReregisterAllComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RemoveTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteComponent");

	AActor_RemoveTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RemoveTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void AActor::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RemoveTickPrerequisiteActor");

	AActor_RemoveTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RecieveMatineeUpdated
// ()

void AActor::RecieveMatineeUpdated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RecieveMatineeUpdated");

	AActor_RecieveMatineeUpdated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveTick
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveTick");

	AActor_ReceiveTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveRadialDamage
// ()
// Parameters:
// float                          DamageReceived                 (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveRadialDamage");

	AActor_ReceiveRadialDamage_Params params;
	params.DamageReceived = DamageReceived;
	params.DamageType = DamageType;
	params.Origin = Origin;
	params.HitInfo = HitInfo;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceivePointDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitNormal                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ShotFromDirection              (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceivePointDamage");

	AActor_ReceivePointDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.HitComponent = HitComponent;
	params.BoneName = BoneName;
	params.ShotFromDirection = ShotFromDirection;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveInput
// ()
// Parameters:
// class FString                  InputName                      (Parm, ZeroConstructor)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 VectorValue                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStarted                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnded                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveInput(const class FString& InputName, float Value, const struct FVector& VectorValue, bool bStarted, bool bEnded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveInput");

	AActor_ReceiveInput_Params params;
	params.InputName = InputName;
	params.Value = Value;
	params.VectorValue = VectorValue;
	params.bStarted = bStarted;
	params.bEnded = bEnded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveHit
// ()
// Parameters:
// class UPrimitiveComponent*     MyComp                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bSelfMoved                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitNormal                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void AActor::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveHit");

	AActor_ReceiveHit_Params params;
	params.MyComp = MyComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.bSelfMoved = bSelfMoved;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveEndPlay
// ()
// Parameters:
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveEndPlay");

	AActor_ReceiveEndPlay_Params params;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveDestroyed
// ()

void AActor::ReceiveDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveDestroyed");

	AActor_ReceiveDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveBeginPlay
// ()

void AActor::ReceiveBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveBeginPlay");

	AActor_ReceiveBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveAnyDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedBy                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveAnyDamage");

	AActor_ReceiveAnyDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.InstigatedBy = InstigatedBy;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorOnReleased
// ()

void AActor::ReceiveActorOnReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnReleased");

	AActor_ReceiveActorOnReleased_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorOnInputTouchLeave
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchLeave");

	AActor_ReceiveActorOnInputTouchLeave_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorOnInputTouchEnter
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnter");

	AActor_ReceiveActorOnInputTouchEnter_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorOnInputTouchEnd
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchEnd");

	AActor_ReceiveActorOnInputTouchEnd_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorOnInputTouchBegin
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnInputTouchBegin");

	AActor_ReceiveActorOnInputTouchBegin_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorOnClicked
// ()

void AActor::ReceiveActorOnClicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorOnClicked");

	AActor_ReceiveActorOnClicked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorEndOverlap
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorEndOverlap(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndOverlap");

	AActor_ReceiveActorEndOverlap_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorEndCursorOver
// ()

void AActor::ReceiveActorEndCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorEndCursorOver");

	AActor_ReceiveActorEndCursorOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorBeginOverlap
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginOverlap");

	AActor_ReceiveActorBeginOverlap_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReceiveActorBeginCursorOver
// ()

void AActor::ReceiveActorBeginCursorOver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceiveActorBeginCursorOver");

	AActor_ReceiveActorBeginCursorOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PropertyServerToClients
// ()
// Parameters:
// class AActor*                  ActorToRep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<unsigned char>          ReplicationData                (ConstParm, Parm, ZeroConstructor)

void AActor::PropertyServerToClients(class AActor* ActorToRep, const struct FName& PropertyName, TArray<unsigned char> ReplicationData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PropertyServerToClients");

	AActor_PropertyServerToClients_Params params;
	params.ActorToRep = ActorToRep;
	params.PropertyName = PropertyName;
	params.ReplicationData = ReplicationData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlaySoundOnActor
// ()
// Parameters:
// class USoundCue*               InSoundCue                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void AActor::PlaySoundOnActor(class USoundCue* InSoundCue, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySoundOnActor");

	AActor_PlaySoundOnActor_Params params;
	params.InSoundCue = InSoundCue;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlaySoundAtLocation
// ()
// Parameters:
// class USoundCue*               InSoundCue                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SoundLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void AActor::PlaySoundAtLocation(class USoundCue* InSoundCue, const struct FVector& SoundLocation, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySoundAtLocation");

	AActor_PlaySoundAtLocation_Params params;
	params.InSoundCue = InSoundCue;
	params.SoundLocation = SoundLocation;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PerformanceThrottledTick
// ()

void AActor::PerformanceThrottledTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PerformanceThrottledTick");

	AActor_PerformanceThrottledTick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnRep_ReplicatedMovement
// ()

void AActor::OnRep_ReplicatedMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_ReplicatedMovement");

	AActor_OnRep_ReplicatedMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnRep_Instigator
// ()

void AActor::OnRep_Instigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_Instigator");

	AActor_OnRep_Instigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnRep_AttachmentReplication
// ()

void AActor::OnRep_AttachmentReplication()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRep_AttachmentReplication");

	AActor_OnRep_AttachmentReplication_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnInventoryItemGrind
// ()

void AActor::OnInventoryItemGrind()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnInventoryItemGrind");

	AActor_OnInventoryItemGrind_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.NetDetachRootComponentFromAny
// ()

void AActor::NetDetachRootComponentFromAny()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NetDetachRootComponentFromAny");

	AActor_NetDetachRootComponentFromAny_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.NetAttachRootComponentTo
// ()
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RelativeLocation               (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                RelativeRotation               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::NetAttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NetAttachRootComponentTo");

	AActor_NetAttachRootComponentTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.RelativeLocation = RelativeLocation;
	params.RelativeRotation = RelativeRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastPropertyToPlayer
// ()
// Parameters:
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastPropertyToPlayer(const struct FName& PropertyName, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastPropertyToPlayer");

	AActor_MulticastPropertyToPlayer_Params params;
	params.PropertyName = PropertyName;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastProperty
// ()
// Parameters:
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastProperty(const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastProperty");

	AActor_MulticastProperty_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugString
// ()
// Parameters:
// struct FVector                 TextLocation                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Text                           (Parm, ZeroConstructor)
// class AActor*                  TestBaseActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugString(const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugString");

	AActor_MulticastDrawDebugString_Params params;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugSphere
// ()
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugSphere(const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugSphere");

	AActor_MulticastDrawDebugSphere_Params params;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugPoint
// ()
// Parameters:
// struct FVector                 Position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PointColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugPoint");

	AActor_MulticastDrawDebugPoint_Params params;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugPlane
// ()
// Parameters:
// struct FPlane                  PlaneCoordinates               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PlaneColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugPlane(const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugPlane");

	AActor_MulticastDrawDebugPlane_Params params;
	params.PlaneCoordinates = PlaneCoordinates;
	params.Location = Location;
	params.Size = Size;
	params.PlaneColor = PlaneColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugLineTraceHitResult
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm)
// struct FVector                 TraceStart                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            StartColor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            HitColor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          LineThickness                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          HitSize                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawHitNormal                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            HitNormalColor                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          HitNormalLength                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugLineTraceHitResult(const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugLineTraceHitResult");

	AActor_MulticastDrawDebugLineTraceHitResult_Params params;
	params.Hit = Hit;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.StartColor = StartColor;
	params.HitColor = HitColor;
	params.LineThickness = LineThickness;
	params.HitSize = HitSize;
	params.bDrawHitNormal = bDrawHitNormal;
	params.HitNormalColor = HitNormalColor;
	params.HitNormalLength = HitNormalLength;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugLine
// ()
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugLine");

	AActor_MulticastDrawDebugLine_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugCylinder
// ()
// Parameters:
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugCylinder");

	AActor_MulticastDrawDebugCylinder_Params params;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugCoordinateSystem
// ()
// Parameters:
// struct FVector                 AxisLoc                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AxisRot                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugCoordinateSystem");

	AActor_MulticastDrawDebugCoordinateSystem_Params params;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.Duration = Duration;
	params.Thickness = Thickness;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugCapsuleWithExtents
// ()
// Parameters:
// struct FVector                 Top                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Bottom                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugCapsuleWithExtents(const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugCapsuleWithExtents");

	AActor_MulticastDrawDebugCapsuleWithExtents_Params params;
	params.Top = Top;
	params.Bottom = Bottom;
	params.Radius = Radius;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugCapsule
// ()
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugCapsule(const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugCapsule");

	AActor_MulticastDrawDebugCapsule_Params params;
	params.Center = Center;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;
	params.Rotation = Rotation;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugCamera
// ()
// Parameters:
// class ACameraActor*            CameraActor                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            CameraColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugCamera");

	AActor_MulticastDrawDebugCamera_Params params;
	params.CameraActor = CameraActor;
	params.CameraColor = CameraColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugBox
// ()
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugBox(const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugBox");

	AActor_MulticastDrawDebugBox_Params params;
	params.Center = Center;
	params.Extent = Extent;
	params.LineColor = LineColor;
	params.Rotation = Rotation;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MulticastDrawDebugArrow
// ()
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowSize                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableInShipping               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MulticastDrawDebugArrow(const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, bool enableInShipping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MulticastDrawDebugArrow");

	AActor_MulticastDrawDebugArrow_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.ArrowSize = ArrowSize;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.enableInShipping = enableInShipping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ModifyHudMultiUseLoc
// ()
// Parameters:
// struct FVector2D               theVec                         (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ModifyHudMultiUseLoc(class APlayerController* PC, int index, struct FVector2D* theVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyHudMultiUseLoc");

	AActor_ModifyHudMultiUseLoc_Params params;
	params.PC = PC;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (theVec != nullptr)
		*theVec = params.theVec;
}


// Function Engine.Actor.MakeNoise
// ()
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   NoiseInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	AActor_MakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseInstigator = NoiseInstigator;
	params.NoiseLocation = NoiseLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MakeMIDForMaterial
// ()
// Parameters:
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* AActor::MakeMIDForMaterial(class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeMIDForMaterial");

	AActor_MakeMIDForMaterial_Params params;
	params.Parent = Parent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_TeleportTo
// ()
// Parameters:
// struct FVector                 DestLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                DestRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSimpleTeleport                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation, bool bSimpleTeleport)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_TeleportTo");

	AActor_K2_TeleportTo_Params params;
	params.DestLocation = DestLocation;
	params.DestRotation = DestRotation;
	params.bSimpleTeleport = bSimpleTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_SetActorLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_SetActorLocation");

	AActor_K2_SetActorLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_OnEndViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_OnEndViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnEndViewTarget");

	AActor_K2_OnEndViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.K2_OnBecomeViewTarget
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_OnBecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_OnBecomeViewTarget");

	AActor_K2_OnBecomeViewTarget_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.K2_GetWorld
// ()
// Parameters:
// class UWorld*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWorld* AActor::K2_GetWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetWorld");

	AActor_K2_GetWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetRootComponent
// ()
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* AActor::K2_GetRootComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetRootComponent");

	AActor_K2_GetRootComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator AActor::K2_GetActorRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorRotation");

	AActor_K2_GetActorRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_GetActorLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::K2_GetActorLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_GetActorLocation");

	AActor_K2_GetActorLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.K2_DestroyComponent
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::K2_DestroyComponent(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyComponent");

	AActor_K2_DestroyComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.K2_DestroyActor
// ()

void AActor::K2_DestroyActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_DestroyActor");

	AActor_K2_DestroyActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.K2_AttachRootComponentToActor
// ()
// Parameters:
// class AActor*                  InParentActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentToActor");

	AActor_K2_AttachRootComponentToActor_Params params;
	params.InParentActor = InParentActor;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.K2_AttachRootComponentTo
// ()
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachLocationType             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void AActor::K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.K2_AttachRootComponentTo");

	AActor_K2_AttachRootComponentTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachLocationType = AttachLocationType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsTargetable
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsTargetable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsTargetable");

	AActor_IsTargetable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsShooterCharacter
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsShooterCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsShooterCharacter");

	AActor_IsShooterCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsPrimalStructureTurret
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsPrimalStructureTurret()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPrimalStructureTurret");

	AActor_IsPrimalStructureTurret_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsPrimalStructureItemContainer
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsPrimalStructureItemContainer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPrimalStructureItemContainer");

	AActor_IsPrimalStructureItemContainer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsPrimalStructure
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsPrimalStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPrimalStructure");

	AActor_IsPrimalStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsPrimalDino
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsPrimalDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPrimalDino");

	AActor_IsPrimalDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsPrimalCharacterOrStructure
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsPrimalCharacterOrStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPrimalCharacterOrStructure");

	AActor_IsPrimalCharacterOrStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsPrimalCharacter
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsPrimalCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPrimalCharacter");

	AActor_IsPrimalCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsOwnedOrControlledBy
// ()
// Parameters:
// class AActor*                  TestOwner                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsOwnedOrControlledBy(class AActor* TestOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOwnedOrControlledBy");

	AActor_IsOwnedOrControlledBy_Params params;
	params.TestOwner = TestOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsLocallyControlledByPlayer
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsLocallyControlledByPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsLocallyControlledByPlayer");

	AActor_IsLocallyControlledByPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsFirstPersonMeshVisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsFirstPersonMeshVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsFirstPersonMeshVisible");

	AActor_IsFirstPersonMeshVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsDead
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsDead");

	AActor_IsDead_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsCorruptDino
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::IsCorruptDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsCorruptDino");

	AActor_IsCorruptDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.HasAuthority
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::HasAuthority()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HasAuthority");

	AActor_HasAuthority_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetVisibleComponentByClass
// ()
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipHiddenComponents          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* AActor::GetVisibleComponentByClass(class UClass* ComponentClass, bool bSkipHiddenComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVisibleComponentByClass");

	AActor_GetVisibleComponentByClass_Params params;
	params.ComponentClass = ComponentClass;
	params.bSkipHiddenComponents = bSkipHiddenComponents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetVerticalDistanceTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetVerticalDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVerticalDistanceTo");

	AActor_GetVerticalDistanceTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetVelocity
// ()
// Parameters:
// bool                           bIsForRagdoll                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetVelocity(bool bIsForRagdoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetVelocity");

	AActor_GetVelocity_Params params;
	params.bIsForRagdoll = bIsForRagdoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetUsablePriority
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetUsablePriority()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetUsablePriority");

	AActor_GetUsablePriority_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTransform
// ()
// Parameters:
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform AActor::GetTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTransform");

	AActor_GetTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTargetingLocation
// ()
// Parameters:
// class AActor*                  Attacker                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetTargetingLocation(class AActor* Attacker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTargetingLocation");

	AActor_GetTargetingLocation_Params params;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetSecondaryMountedActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AActor::GetSecondaryMountedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetSecondaryMountedActor");

	AActor_GetSecondaryMountedActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetOwnerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* AActor::GetOwnerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOwnerController");

	AActor_GetOwnerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetOwner
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AActor::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOwner");

	AActor_GetOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetOverlappingComponents
// ()
// Parameters:
// TArray<class UPrimitiveComponent*> OverlappingComponents          (Parm, OutParm, ZeroConstructor)

void AActor::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingComponents");

	AActor_GetOverlappingComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverlappingComponents != nullptr)
		*OverlappingComponents = params.OverlappingComponents;
}


// Function Engine.Actor.GetOverlappingActors
// ()
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetOverlappingActors");

	AActor_GetOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Engine.Actor.GetLifeSpan
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetLifeSpan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLifeSpan");

	AActor_GetLifeSpan_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInterpolatedTransform
// ()
// Parameters:
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform AActor::GetInterpolatedTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInterpolatedTransform");

	AActor_GetInterpolatedTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInterpolatedRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator AActor::GetInterpolatedRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInterpolatedRotation");

	AActor_GetInterpolatedRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInterpolatedLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetInterpolatedLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInterpolatedLocation");

	AActor_GetInterpolatedLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigatorController
// ()
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AController* AActor::GetInstigatorController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigatorController");

	AActor_GetInstigatorController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInstigator
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* AActor::GetInstigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInstigator");

	AActor_GetInstigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputVectorAxisValue
// ()
// Parameters:
// struct FKey                    InputAxisKey                   (ConstParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetInputVectorAxisValue(const struct FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputVectorAxisValue");

	AActor_GetInputVectorAxisValue_Params params;
	params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisValue
// ()
// Parameters:
// struct FName                   InputAxisName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetInputAxisValue(const struct FName& InputAxisName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisValue");

	AActor_GetInputAxisValue_Params params;
	params.InputAxisName = InputAxisName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetInputAxisKeyValue
// ()
// Parameters:
// struct FKey                    InputAxisKey                   (ConstParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetInputAxisKeyValue(const struct FKey& InputAxisKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetInputAxisKeyValue");

	AActor_GetInputAxisKeyValue_Params params;
	params.InputAxisKey = InputAxisKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDotProductTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetHorizontalDotProductTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDotProductTo");

	AActor_GetHorizontalDotProductTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetHorizontalDistanceTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetHorizontalDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHorizontalDistanceTo");

	AActor_GetHorizontalDistanceTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetDotProductTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetDotProductTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDotProductTo");

	AActor_GetDotProductTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetDistanceTo
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetDistanceTo(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDistanceTo");

	AActor_GetDistanceTo_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByCustomTag
// ()
// Parameters:
// struct FName                   TheTag                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UActorComponent*> AActor::GetComponentsByCustomTag(const struct FName& TheTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByCustomTag");

	AActor_GetComponentsByCustomTag_Params params;
	params.TheTag = TheTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentsByClass
// ()
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UActorComponent*> ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UActorComponent*> AActor::GetComponentsByClass(class UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsByClass");

	AActor_GetComponentsByClass_Params params;
	params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentByCustomTag
// ()
// Parameters:
// struct FName                   TheTag                         (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* AActor::GetComponentByCustomTag(const struct FName& TheTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentByCustomTag");

	AActor_GetComponentByCustomTag_Params params;
	params.TheTag = TheTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponentByClass
// ()
// Parameters:
// class UClass*                  ComponentClass                 (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* AActor::GetComponentByClass(class UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentByClass");

	AActor_GetComponentByClass_Params params;
	params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetCharacterController
// ()
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AController* AActor::GetCharacterController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetCharacterController");

	AActor_GetCharacterController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachedSoundVolumeMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetAttachedSoundVolumeMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachedSoundVolumeMultiplier");

	AActor_GetAttachedSoundVolumeMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachedSoundPitchMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetAttachedSoundPitchMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachedSoundPitchMultiplier");

	AActor_GetAttachedSoundPitchMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAttachedActors
// ()
// Parameters:
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void AActor::GetAttachedActors(TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAttachedActors");

	AActor_GetAttachedActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.Actor.GetAllSceneComponents
// ()
// Parameters:
// TArray<class USceneComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)

void AActor::GetAllSceneComponents(TArray<class USceneComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAllSceneComponents");

	AActor_GetAllSceneComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;
}


// Function Engine.Actor.GetActorViewDirection
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorViewDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorViewDirection");

	AActor_GetActorViewDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorUpVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorUpVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorUpVector");

	AActor_GetActorUpVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorTimeDilation
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AActor::GetActorTimeDilation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorTimeDilation");

	AActor_GetActorTimeDilation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorScale3D
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorScale3D()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorScale3D");

	AActor_GetActorScale3D_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRightVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorRightVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRightVector");

	AActor_GetActorRightVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorRelativeScale3D
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorRelativeScale3D()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorRelativeScale3D");

	AActor_GetActorRelativeScale3D_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorForwardVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::GetActorForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorForwardVector");

	AActor_GetActorForwardVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorEnableCollision
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::GetActorEnableCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEnableCollision");

	AActor_GetActorEnableCollision_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* AActor::GetActorClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorClass");

	AActor_GetActorClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorBounds
// ()
// Parameters:
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AActor::GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorBounds");

	AActor_GetActorBounds_Params params;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.Actor.ForceReplicateNowWithChannel
// ()

void AActor::ForceReplicateNowWithChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceReplicateNowWithChannel");

	AActor_ForceReplicateNowWithChannel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceReplicateNow
// ()
// Parameters:
// bool                           bForceCreateChannel            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceCreateChannelIfRelevant  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ForceReplicateNow(bool bForceCreateChannel, bool bForceCreateChannelIfRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceReplicateNow");

	AActor_ForceReplicateNow_Params params;
	params.bForceCreateChannel = bForceCreateChannel;
	params.bForceCreateChannelIfRelevant = bForceCreateChannelIfRelevant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceNetUpdate
// ()
// Parameters:
// bool                           bDormantDontReplicateProperties (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAbsoluteForceNetUpdate        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontUpdateChannel             (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ForceNetUpdate(bool bDormantDontReplicateProperties, bool bAbsoluteForceNetUpdate, bool bDontUpdateChannel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetUpdate");

	AActor_ForceNetUpdate_Params params;
	params.bDormantDontReplicateProperties = bDormantDontReplicateProperties;
	params.bAbsoluteForceNetUpdate = bAbsoluteForceNetUpdate;
	params.bDontUpdateChannel = bDontUpdateChannel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceDestroy
// ()

void AActor::ForceDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceDestroy");

	AActor_ForceDestroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FlushNetDormancy
// ()

void AActor::FlushNetDormancy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushNetDormancy");

	AActor_FlushNetDormancy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EnableInput
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::EnableInput(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EnableInput");

	AActor_EnableInput_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawInEditorViewport
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            LHSX                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            InOutLHSY                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            RHSX                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            InOutRHSY                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DrawInEditorViewport(class UCanvas* Canvas, int LHSX, int InOutLHSY, int RHSX, int InOutRHSY, const struct FVector& ViewLocation, const struct FRotator& ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawInEditorViewport");

	AActor_DrawInEditorViewport_Params params;
	params.Canvas = Canvas;
	params.LHSX = LHSX;
	params.InOutLHSY = InOutLHSY;
	params.RHSX = RHSX;
	params.InOutRHSY = InOutRHSY;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawBasicFloatingHUD
// ()
// Parameters:
// class AHUD*                    ForHUD                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DrawBasicFloatingHUD(class AHUD* ForHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawBasicFloatingHUD");

	AActor_DrawBasicFloatingHUD_Params params;
	params.ForHUD = ForHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DisableInput
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DisableInput(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisableInput");

	AActor_DisableInput_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DetachRootComponentFromParent
// ()
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::DetachRootComponentFromParent(bool bMaintainWorldPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachRootComponentFromParent");

	AActor_DetachRootComponentFromParent_Params params;
	params.bMaintainWorldPosition = bMaintainWorldPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClientMultiUse
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ClientMultiUse(class APlayerController* ForPC, int UseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClientMultiUse");

	AActor_ClientMultiUse_Params params;
	params.ForPC = ForPC;
	params.UseIndex = UseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CalculateComponentsBoundingBoxInLocalSpace
// ()
// Parameters:
// bool                           bNonColliding                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FBox                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FBox AActor::CalculateComponentsBoundingBoxInLocalSpace(bool bNonColliding)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalculateComponentsBoundingBoxInLocalSpace");

	AActor_CalculateComponentsBoundingBoxInLocalSpace_Params params;
	params.bNonColliding = bNonColliding;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPTryMultiUse
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseIndex                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPTryMultiUse(class APlayerController* ForPC, int UseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPTryMultiUse");

	AActor_BPTryMultiUse_Params params;
	params.ForPC = ForPC;
	params.UseIndex = UseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPServerHandleNetExecCommand
// ()
// Parameters:
// class APlayerController*       FromPC                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPServerHandleNetExecCommand(class APlayerController* FromPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPServerHandleNetExecCommand");

	AActor_BPServerHandleNetExecCommand_Params params;
	params.FromPC = FromPC;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPPreventAttachments
// ()
// Parameters:
// class UObject*                 ForItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPPreventAttachments(class UObject* ForItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPPreventAttachments");

	AActor_BPPreventAttachments_Params params;
	params.ForItem = ForItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPPreInitializeComponents
// ()

void AActor::BPPreInitializeComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPPreInitializeComponents");

	AActor_BPPreInitializeComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BPPostInitializeComponents
// ()

void AActor::BPPostInitializeComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPPostInitializeComponents");

	AActor_BPPostInitializeComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BPOverrideUILocation
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::BPOverrideUILocation(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPOverrideUILocation");

	AActor_BPOverrideUILocation_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPIsA
// ()
// Parameters:
// class UClass*                  anActorClass                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPIsA(class UClass* anActorClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPIsA");

	AActor_BPIsA_Params params;
	params.anActorClass = anActorClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPInventoryItemUsed
// ()
// Parameters:
// class UObject*                 InventoryItemObject            (Parm, ZeroConstructor, IsPlainOldData)

void AActor::BPInventoryItemUsed(class UObject* InventoryItemObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPInventoryItemUsed");

	AActor_BPInventoryItemUsed_Params params;
	params.InventoryItemObject = InventoryItemObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BPInventoryItemDropped
// ()
// Parameters:
// class UObject*                 InventoryItemObject            (Parm, ZeroConstructor, IsPlainOldData)

void AActor::BPInventoryItemDropped(class UObject* InventoryItemObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPInventoryItemDropped");

	AActor_BPInventoryItemDropped_Params params;
	params.InventoryItemObject = InventoryItemObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BPGetShowDebugAnimationComponents
// ()
// Parameters:
// TArray<class USkeletalMeshComponent*> SkelMeshComponents             (Parm, OutParm, ZeroConstructor)

void AActor::BPGetShowDebugAnimationComponents(TArray<class USkeletalMeshComponent*>* SkelMeshComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPGetShowDebugAnimationComponents");

	AActor_BPGetShowDebugAnimationComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SkelMeshComponents != nullptr)
		*SkelMeshComponents = params.SkelMeshComponents;
}


// Function Engine.Actor.BPGetMultiUseEntries
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FMultiUseEntry>  MultiUseEntries                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FMultiUseEntry>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FMultiUseEntry> AActor::BPGetMultiUseEntries(class APlayerController* ForPC, TArray<struct FMultiUseEntry> MultiUseEntries)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPGetMultiUseEntries");

	AActor_BPGetMultiUseEntries_Params params;
	params.ForPC = ForPC;
	params.MultiUseEntries = MultiUseEntries;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPGetMultiUseCenterText
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseIndex                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  OutCenterText                  (Parm, OutParm, ZeroConstructor)
// struct FLinearColor            OutCenterTextColor             (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPGetMultiUseCenterText(class APlayerController* ForPC, int UseIndex, class FString* OutCenterText, struct FLinearColor* OutCenterTextColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPGetMultiUseCenterText");

	AActor_BPGetMultiUseCenterText_Params params;
	params.ForPC = ForPC;
	params.UseIndex = UseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutCenterText != nullptr)
		*OutCenterText = params.OutCenterText;
	if (OutCenterTextColor != nullptr)
		*OutCenterTextColor = params.OutCenterTextColor;

	return params.ReturnValue;
}


// Function Engine.Actor.BPGetExtraSpecialBlueprintInt
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AActor::BPGetExtraSpecialBlueprintInt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPGetExtraSpecialBlueprintInt");

	AActor_BPGetExtraSpecialBlueprintInt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPGetBonesToHideOnAllocation
// ()
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> AActor::BPGetBonesToHideOnAllocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPGetBonesToHideOnAllocation");

	AActor_BPGetBonesToHideOnAllocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPGetActorEyesViewPoint
// ()
// Parameters:
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AActor::BPGetActorEyesViewPoint(struct FVector* Location, struct FRotator* Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPGetActorEyesViewPoint");

	AActor_BPGetActorEyesViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
}


// Function Engine.Actor.BPForceAllowsInventoryUse
// ()
// Parameters:
// class UObject*                 InventoryItemObject            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPForceAllowsInventoryUse(class UObject* InventoryItemObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPForceAllowsInventoryUse");

	AActor_BPForceAllowsInventoryUse_Params params;
	params.InventoryItemObject = InventoryItemObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPCustomIsRelevantForClient
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPCustomIsRelevantForClient(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPCustomIsRelevantForClient");

	AActor_BPCustomIsRelevantForClient_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPConsumeUsePinCode
// ()
// Parameters:
// class AActor*                  FromKeypadActor                (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            appledPinCode                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsActivating                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPConsumeUsePinCode(class AActor* FromKeypadActor, class APlayerController* ForPC, int appledPinCode, bool bIsActivating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPConsumeUsePinCode");

	AActor_BPConsumeUsePinCode_Params params;
	params.FromKeypadActor = FromKeypadActor;
	params.ForPC = ForPC;
	params.appledPinCode = appledPinCode;
	params.bIsActivating = bIsActivating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPConsumeSetPinCode
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            appledPinCode                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsSetting                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            TheCustomIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPConsumeSetPinCode(class APlayerController* ForPC, int appledPinCode, bool bIsSetting, int TheCustomIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPConsumeSetPinCode");

	AActor_BPConsumeSetPinCode_Params params;
	params.ForPC = ForPC;
	params.appledPinCode = appledPinCode;
	params.bIsSetting = bIsSetting;
	params.TheCustomIndex = TheCustomIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPClientHandleNetExecCommand
// ()
// Parameters:
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::BPClientHandleNetExecCommand(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPClientHandleNetExecCommand");

	AActor_BPClientHandleNetExecCommand_Params params;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPClientDoMultiUse
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ClientUseIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AActor::BPClientDoMultiUse(class APlayerController* ForPC, int ClientUseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPClientDoMultiUse");

	AActor_BPClientDoMultiUse_Params params;
	params.ForPC = ForPC;
	params.ClientUseIndex = ClientUseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BPCheckForErrors
// ()
// Parameters:
// TArray<struct FBPMapCheckEntry> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FBPMapCheckEntry> AActor::BPCheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPCheckForErrors");

	AActor_BPCheckForErrors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BPChangedActorTeam
// ()

void AActor::BPChangedActorTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPChangedActorTeam");

	AActor_BPChangedActorTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BPAttachedRootComponent
// ()

void AActor::BPAttachedRootComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BPAttachedRootComponent");

	AActor_BPAttachedRootComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BP_OverrideTargetingLocation
// ()
// Parameters:
// class AActor*                  Attacker                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::BP_OverrideTargetingLocation(class AActor* Attacker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BP_OverrideTargetingLocation");

	AActor_BP_OverrideTargetingLocation_Params params;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.BP_GetHUDWorldDrawLocation
// ()
// Parameters:
// struct FName                   HUDTag                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AActor::BP_GetHUDWorldDrawLocation(const struct FName& HUDTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BP_GetHUDWorldDrawLocation");

	AActor_BP_GetHUDWorldDrawLocation_Params params;
	params.HUDTag = HUDTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AllowManualMultiUseActivation
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::AllowManualMultiUseActivation(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllowManualMultiUseActivation");

	AActor_AllowManualMultiUseActivation_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AllowIgnoreCharacterEncroachment
// ()
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  EncroachingCharacter           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::AllowIgnoreCharacterEncroachment(class UPrimitiveComponent* HitComponent, class AActor* EncroachingCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllowIgnoreCharacterEncroachment");

	AActor_AllowIgnoreCharacterEncroachment_Params params;
	params.HitComponent = HitComponent;
	params.EncroachingCharacter = EncroachingCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AllowGrappling
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::AllowGrappling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllowGrappling");

	AActor_AllowGrappling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AddTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AActor::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteComponent");

	AActor_AddTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AddTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddTickPrerequisiteActor");

	AActor_AddTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AddComponent
// ()
// Parameters:
// struct FName                   TemplateName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bManualAttachment              (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      RelativeTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class UObject*                 ComponentTemplateContext       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* AActor::AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct UObject_FTransform& RelativeTransform, class UObject* ComponentTemplateContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddComponent");

	AActor_AddComponent_Params params;
	params.TemplateName = TemplateName;
	params.bManualAttachment = bManualAttachment;
	params.RelativeTransform = RelativeTransform;
	params.ComponentTemplateContext = ComponentTemplateContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AddActorWorldTransform
// ()
// Parameters:
// struct UObject_FTransform      DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddActorWorldTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddActorWorldTransform");

	AActor_AddActorWorldTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AddActorWorldRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddActorWorldRotation");

	AActor_AddActorWorldRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AddActorWorldOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddActorWorldOffset");

	AActor_AddActorWorldOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AddActorLocalTransform
// ()
// Parameters:
// struct UObject_FTransform      NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddActorLocalTransform(const struct UObject_FTransform& NewTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddActorLocalTransform");

	AActor_AddActorLocalTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AddActorLocalRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddActorLocalRotation");

	AActor_AddActorLocalRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AddActorLocalOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void AActor::AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddActorLocalOffset");

	AActor_AddActorLocalOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorSemaphoreTaken__DelegateSignature
// ()
// Parameters:
// struct FName                   SemaphoreName                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorSemaphoreTaken__DelegateSignature(const struct FName& SemaphoreName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorSemaphoreTaken__DelegateSignature");

	AActor_ActorSemaphoreTaken__DelegateSignature_Params params;
	params.SemaphoreName = SemaphoreName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorPlaySoundUnreliable
// ()
// Parameters:
// class USoundBase*              SoundAsset                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAttach                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocOffset                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorPlaySoundUnreliable(class USoundBase* SoundAsset, bool bAttach, const struct FName& BoneName, const struct FVector& LocOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorPlaySoundUnreliable");

	AActor_ActorPlaySoundUnreliable_Params params;
	params.SoundAsset = SoundAsset;
	params.bAttach = bAttach;
	params.BoneName = BoneName;
	params.LocOffset = LocOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorPlaySound
// ()
// Parameters:
// class USoundBase*              SoundAsset                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAttach                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocOffset                      (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorPlaySound(class USoundBase* SoundAsset, bool bAttach, const struct FName& BoneName, const struct FVector& LocOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorPlaySound");

	AActor_ActorPlaySound_Params params;
	params.SoundAsset = SoundAsset;
	params.bAttach = bAttach;
	params.BoneName = BoneName;
	params.LocOffset = LocOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorOnReleasedSignature__DelegateSignature
// ()

void AActor::ActorOnReleasedSignature__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorOnReleasedSignature__DelegateSignature");

	AActor_ActorOnReleasedSignature__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorOnInputTouchEndSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorOnInputTouchEndSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorOnInputTouchEndSignature__DelegateSignature");

	AActor_ActorOnInputTouchEndSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorOnInputTouchBeginSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorOnInputTouchBeginSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorOnInputTouchBeginSignature__DelegateSignature");

	AActor_ActorOnInputTouchBeginSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorOnClickedSignature__DelegateSignature
// ()

void AActor::ActorOnClickedSignature__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorOnClickedSignature__DelegateSignature");

	AActor_ActorOnClickedSignature__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorMatineeUpdated__DelegateSignature
// ()

void AActor::ActorMatineeUpdated__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorMatineeUpdated__DelegateSignature");

	AActor_ActorMatineeUpdated__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorHitSignature__DelegateSignature
// ()
// Parameters:
// class AActor*                  SelfActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void AActor::ActorHitSignature__DelegateSignature(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorHitSignature__DelegateSignature");

	AActor_ActorHitSignature__DelegateSignature_Params params;
	params.SelfActor = SelfActor;
	params.OtherActor = OtherActor;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorHasTag
// ()
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AActor::ActorHasTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorHasTag");

	AActor_ActorHasTag_Params params;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ActorEndTouchOverSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorEndTouchOverSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorEndTouchOverSignature__DelegateSignature");

	AActor_ActorEndTouchOverSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorEndPlaySignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorEndPlaySignature__DelegateSignature(TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorEndPlaySignature__DelegateSignature");

	AActor_ActorEndPlaySignature__DelegateSignature_Params params;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorEndOverlapSignature__DelegateSignature
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorEndOverlapSignature__DelegateSignature(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorEndOverlapSignature__DelegateSignature");

	AActor_ActorEndOverlapSignature__DelegateSignature_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorEndCursorOverSignature__DelegateSignature
// ()

void AActor::ActorEndCursorOverSignature__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorEndCursorOverSignature__DelegateSignature");

	AActor_ActorEndCursorOverSignature__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorDestroyedSignature__DelegateSignature
// ()

void AActor::ActorDestroyedSignature__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorDestroyedSignature__DelegateSignature");

	AActor_ActorDestroyedSignature__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorCustomEventSignature__DelegateSignature
// ()
// Parameters:
// struct FName                   EventCustomName                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  EventCustomString              (Parm, ZeroConstructor)
// class AActor*                  InstigatorActor                (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorCustomEventSignature__DelegateSignature(const struct FName& EventCustomName, const class FString& EventCustomString, class AActor* InstigatorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorCustomEventSignature__DelegateSignature");

	AActor_ActorCustomEventSignature__DelegateSignature_Params params;
	params.EventCustomName = EventCustomName;
	params.EventCustomString = EventCustomString;
	params.InstigatorActor = InstigatorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorBeginTouchOverSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorBeginTouchOverSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorBeginTouchOverSignature__DelegateSignature");

	AActor_ActorBeginTouchOverSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorBeginOverlapSignature__DelegateSignature
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AActor::ActorBeginOverlapSignature__DelegateSignature(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorBeginOverlapSignature__DelegateSignature");

	AActor_ActorBeginOverlapSignature__DelegateSignature_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActorBeginCursorOverSignature__DelegateSignature
// ()

void AActor::ActorBeginCursorOverSignature__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorBeginCursorOverSignature__DelegateSignature");

	AActor_ActorBeginCursorOverSignature__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.UnPossess
// ()

void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	AController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopMovement
// ()

void AController::StopMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopMovement");

	AController_StopMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetInitialLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AController::SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetInitialLocationAndRotation");

	AController_SetInitialLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetControlRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AController::SetControlRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetControlRotation");

	AController_SetControlRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveInstigatedAnyDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AController::ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveInstigatedAnyDamage");

	AController_ReceiveInstigatedAnyDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.DamagedActor = DamagedActor;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Possess
// ()
// Parameters:
// class APawn*                   inPawn                         (Parm, ZeroConstructor, IsPlainOldData)

void AController::Possess(class APawn* inPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	AController_Possess_Params params;
	params.inPawn = inPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnRep_PlayerState
// ()

void AController::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_PlayerState");

	AController_OnRep_PlayerState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnRep_Pawn
// ()

void AController::OnRep_Pawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnRep_Pawn");

	AController_OnRep_Pawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.LineOfSightTo
// ()
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ViewPoint                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlternateChecks               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	AController_LineOfSightTo_Params params;
	params.Other = Other;
	params.ViewPoint = ViewPoint;
	params.bAlternateChecks = bAlternateChecks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.K2_GetPawn
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* AController::K2_GetPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.K2_GetPawn");

	AController_K2_GetPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalPlayerController
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

	AController_IsLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalController
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AController::IsLocalController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalController");

	AController_IsLocalController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.InstigatedAnyDamageSignature__DelegateSignature
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             DamageType                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void AController::InstigatedAnyDamageSignature__DelegateSignature(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InstigatedAnyDamageSignature__DelegateSignature");

	AController_InstigatedAnyDamageSignature__DelegateSignature_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.DamagedActor = DamagedActor;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetViewTarget
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AController::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetViewTarget");

	AController_GetViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetPlayerViewPoint
// ()
// Parameters:
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AController::GetPlayerViewPoint(struct FVector* Location, struct FRotator* Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetPlayerViewPoint");

	AController_GetPlayerViewPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
}


// Function Engine.Controller.GetDesiredRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator AController::GetDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetDesiredRotation");

	AController_GetDesiredRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetControlRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator AController::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetControlRotation");

	AController_GetControlRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.ClientSetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bResetCamera                   (Parm, ZeroConstructor, IsPlainOldData)

void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	AController_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	AController_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CastToPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* AController::CastToPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CastToPlayerController");

	AController_CastToPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.UnlockAIResources
// ()
// Parameters:
// bool                           bUnlockMovement                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UnlockAILogic                  (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.UnlockAIResources");

	UAnimInstance_UnlockAIResources_Params params;
	params.bUnlockMovement = bUnlockMovement;
	params.UnlockAILogic = UnlockAILogic;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.TryGetPawnOwner
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* UAnimInstance::TryGetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.TryGetPawnOwner");

	UAnimInstance_TryGetPawnOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.StopSlotAnimation
// ()
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::StopSlotAnimation(float InBlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.StopSlotAnimation");

	UAnimInstance_StopSlotAnimation_Params params;
	params.InBlendOutTime = InBlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.SetMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::SetMorphTarget(const struct FName& MorphTargetName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.SetMorphTarget");

	UAnimInstance_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.PlaySlotAnimation
// ()
// Parameters:
// class UAnimSequenceBase*       Asset                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.PlaySlotAnimation");

	UAnimInstance_PlaySlotAnimation_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.OnMontageEndedMCDelegate__DelegateSignature
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInterrupted                   (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::OnMontageEndedMCDelegate__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.OnMontageEndedMCDelegate__DelegateSignature");

	UAnimInstance_OnMontageEndedMCDelegate__DelegateSignature_Params params;
	params.Montage = Montage;
	params.bInterrupted = bInterrupted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.OnMontageBlendingOutStartedMCDelegate__DelegateSignature
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInterrupted                   (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::OnMontageBlendingOutStartedMCDelegate__DelegateSignature(class UAnimMontage* Montage, bool bInterrupted)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.OnMontageBlendingOutStartedMCDelegate__DelegateSignature");

	UAnimInstance_OnMontageBlendingOutStartedMCDelegate__DelegateSignature_Params params;
	params.Montage = Montage;
	params.bInterrupted = bInterrupted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.Montage_Stop
// ()
// Parameters:
// float                          InBlendOutTime                 (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Stop");

	UAnimInstance_Montage_Stop_Params params;
	params.InBlendOutTime = InBlendOutTime;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.Montage_SetPosition
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_SetPosition(class UAnimMontage* Montage, float NewPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPosition");

	UAnimInstance_Montage_SetPosition_Params params;
	params.Montage = Montage;
	params.NewPosition = NewPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.Montage_SetPlayRate
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewPlayRate                    (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetPlayRate");

	UAnimInstance_Montage_SetPlayRate_Params params;
	params.Montage = Montage;
	params.NewPlayRate = NewPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.Montage_SetNextSection
// ()
// Parameters:
// struct FName                   SectionNameToChange            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   NextSection                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_SetNextSection");

	UAnimInstance_Montage_SetNextSection_Params params;
	params.SectionNameToChange = SectionNameToChange;
	params.NextSection = NextSection;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.Montage_Play_WithBlending
// ()
// Parameters:
// class UAnimMontage*            MontageToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPauseOnFinish                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::Montage_Play_WithBlending(class UAnimMontage* MontageToPlay, float BlendInTime, float BlendOutTime, float InPlayRate, bool bPauseOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Play_WithBlending");

	UAnimInstance_Montage_Play_WithBlending_Params params;
	params.MontageToPlay = MontageToPlay;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.InPlayRate = InPlayRate;
	params.bPauseOnFinish = bPauseOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_Play
// ()
// Parameters:
// class UAnimMontage*            MontageToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPauseOnFinish                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, bool bPauseOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_Play");

	UAnimInstance_Montage_Play_Params params;
	params.MontageToPlay = MontageToPlay;
	params.InPlayRate = InPlayRate;
	params.bPauseOnFinish = bPauseOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_JumpToSectionsEnd
// ()
// Parameters:
// struct FName                   SectionName                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSectionsEnd");

	UAnimInstance_Montage_JumpToSectionsEnd_Params params;
	params.SectionName = SectionName;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.Montage_JumpToSection
// ()
// Parameters:
// struct FName                   SectionName                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_JumpToSection");

	UAnimInstance_Montage_JumpToSection_Params params;
	params.SectionName = SectionName;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.Montage_IsPlaying
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeFromEndToConsiderFinished  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_IsPlaying(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsPlaying");

	UAnimInstance_Montage_IsPlaying_Params params;
	params.Montage = Montage;
	params.TimeFromEndToConsiderFinished = TimeFromEndToConsiderFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_IsActive
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_IsActive(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_IsActive");

	UAnimInstance_Montage_IsActive_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetPosition
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::Montage_GetPosition(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPosition");

	UAnimInstance_Montage_GetPosition_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetPlayRate
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::Montage_GetPlayRate(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetPlayRate");

	UAnimInstance_Montage_GetPlayRate_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetIsStopped
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_GetIsStopped(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetIsStopped");

	UAnimInstance_Montage_GetIsStopped_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetCurrentTime
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MontageTimeRemaining           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          TotalMontageDuration           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::Montage_GetCurrentTime(class UAnimMontage* Montage, float* MontageTimeRemaining, float* TotalMontageDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetCurrentTime");

	UAnimInstance_Montage_GetCurrentTime_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MontageTimeRemaining != nullptr)
		*MontageTimeRemaining = params.MontageTimeRemaining;
	if (TotalMontageDuration != nullptr)
		*TotalMontageDuration = params.TotalMontageDuration;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.Montage_GetCurrentSection
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UAnimInstance::Montage_GetCurrentSection(class UAnimMontage* Montage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.Montage_GetCurrentSection");

	UAnimInstance_Montage_GetCurrentSection_Params params;
	params.Montage = Montage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.LockAIResources
// ()
// Parameters:
// bool                           bLockMovement                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           LockAILogic                    (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::LockAIResources(bool bLockMovement, bool LockAILogic)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.LockAIResources");

	UAnimInstance_LockAIResources_Params params;
	params.bLockMovement = bLockMovement;
	params.LockAILogic = LockAILogic;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.IsPlayingSlotAnimation
// ()
// Parameters:
// class UAnimSequenceBase*       Asset                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SlotNodeName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimInstance::IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.IsPlayingSlotAnimation");

	UAnimInstance_IsPlayingSlotAnimation_Params params;
	params.Asset = Asset;
	params.SlotNodeName = SlotNodeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetStateWeight
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetStateWeight(int MachineIndex, int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetStateWeight");

	UAnimInstance_GetStateWeight_Params params;
	params.MachineIndex = MachineIndex;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningComponent
// ()
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* UAnimInstance::GetOwningComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningComponent");

	UAnimInstance_GetOwningComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetOwningActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UAnimInstance::GetOwningActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetOwningActor");

	UAnimInstance_GetOwningActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurveValue
// ()
// Parameters:
// struct FName                   CurveName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetCurveValue(const struct FName& CurveName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurveValue");

	UAnimInstance_GetCurveValue_Params params;
	params.CurveName = CurveName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentStateElapsedTime
// ()
// Parameters:
// int                            MachineIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetCurrentStateElapsedTime(int MachineIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentStateElapsedTime");

	UAnimInstance_GetCurrentStateElapsedTime_Params params;
	params.MachineIndex = MachineIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetCurrentActiveMontage
// ()
// Parameters:
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* UAnimInstance::GetCurrentActiveMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetCurrentActiveMontage");

	UAnimInstance_GetCurrentActiveMontage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction
// ()
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEndFraction");

	UAnimInstance_GetAnimAssetPlayerTimeFromEndFraction_Params params;
	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd
// ()
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFromEnd");

	UAnimInstance_GetAnimAssetPlayerTimeFromEnd_Params params;
	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction
// ()
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerTimeFraction");

	UAnimInstance_GetAnimAssetPlayerTimeFraction_Params params;
	params.AnimAsset = AnimAsset;
	params.CurrentTime = CurrentTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.GetAnimAssetPlayerLength
// ()
// Parameters:
// class UAnimationAsset*         AnimAsset                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.GetAnimAssetPlayerLength");

	UAnimInstance_GetAnimAssetPlayerLength_Params params;
	params.AnimAsset = AnimAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.ClearMorphTargets
// ()

void UAnimInstance::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.ClearMorphTargets");

	UAnimInstance_ClearMorphTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.CalculateDirection
// ()
// Parameters:
// struct FVector                 Velocity                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                BaseRotation                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimInstance::CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.CalculateDirection");

	UAnimInstance_CalculateDirection_Params params;
	params.Velocity = Velocity;
	params.BaseRotation = BaseRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimInstance.BlueprintUpdateAnimation
// ()
// Parameters:
// float                          DeltaTimeX                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::BlueprintUpdateAnimation(float DeltaTimeX)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintUpdateAnimation");

	UAnimInstance_BlueprintUpdateAnimation_Params params;
	params.DeltaTimeX = DeltaTimeX;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.BlueprintTriggerAnimationEvent
// ()
// Parameters:
// struct FName                   AnimationEventName             (Parm, ZeroConstructor, IsPlainOldData)
// float                          playedAnimLength               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::BlueprintTriggerAnimationEvent(const struct FName& AnimationEventName, float* playedAnimLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintTriggerAnimationEvent");

	UAnimInstance_BlueprintTriggerAnimationEvent_Params params;
	params.AnimationEventName = AnimationEventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (playedAnimLength != nullptr)
		*playedAnimLength = params.playedAnimLength;
}


// Function Engine.AnimInstance.BlueprintPlayAnimationEvent
// ()
// Parameters:
// class UAnimMontage*            AnimationMontage               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlayRate                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          playedAnimLength               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::BlueprintPlayAnimationEvent(class UAnimMontage* AnimationMontage, float PlayRate, float* playedAnimLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintPlayAnimationEvent");

	UAnimInstance_BlueprintPlayAnimationEvent_Params params;
	params.AnimationMontage = AnimationMontage;
	params.PlayRate = PlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (playedAnimLength != nullptr)
		*playedAnimLength = params.playedAnimLength;
}


// Function Engine.AnimInstance.BlueprintInitializeAnimation
// ()

void UAnimInstance::BlueprintInitializeAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.BlueprintInitializeAnimation");

	UAnimInstance_BlueprintInitializeAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimInstance.AnimNotify_Sound
// ()
// Parameters:
// class UAnimNotify*             Notify                         (Parm, ZeroConstructor, IsPlainOldData)

void UAnimInstance::AnimNotify_Sound(class UAnimNotify* Notify)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimInstance.AnimNotify_Sound");

	UAnimInstance_AnimNotify_Sound_Params params;
	params.Notify = Notify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify.Received_Notify
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotify::Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify.Received_Notify");

	UAnimNotify_Received_Notify_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNotify.GetNotifyName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UAnimNotify::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify.GetNotifyName");

	UAnimNotify_GetNotifyName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyTick
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FrameDeltaTime                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.Received_NotifyTick");

	UAnimNotifyState_Received_NotifyTick_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.FrameDeltaTime = FrameDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyEnd
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.Received_NotifyEnd");

	UAnimNotifyState_Received_NotifyEnd_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.Received_NotifyBegin
// ()
// Parameters:
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TotalDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAnimNotifyState::Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.Received_NotifyBegin");

	UAnimNotifyState_Received_NotifyBegin_Params params;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.TotalDuration = TotalDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNotifyState.GetNotifyName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UAnimNotifyState::GetNotifyName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotifyState.GetNotifyName");

	UAnimNotifyState_GetNotifyName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.WasInputKeyJustReleased
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::WasInputKeyJustReleased(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustReleased");

	APlayerController_WasInputKeyJustReleased_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.WasInputKeyJustPressed
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::WasInputKeyJustPressed(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WasInputKeyJustPressed");

	APlayerController_WasInputKeyJustPressed_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ToggleSpeaking
// ()
// Parameters:
// bool                           bSpeaking                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UseSuperRange                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ToggleSpeaking(bool bSpeaking, bool UseSuperRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ToggleSpeaking");

	APlayerController_ToggleSpeaking_Params params;
	params.bSpeaking = bSpeaking;
	params.UseSuperRange = UseSuperRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchLevel
// ()
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)

void APlayerController::SwitchLevel(const class FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	APlayerController_SwitchLevel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartFire
// ()
// Parameters:
// unsigned char                  FireModeNum                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

	APlayerController_StartFire_Params params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetVirtualJoystickVisibility
// ()
// Parameters:
// bool                           bVisible                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetVirtualJoystickVisibility(bool bVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetVirtualJoystickVisibility");

	APlayerController_SetVirtualJoystickVisibility_Params params;
	params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetViewTargetWithBlend
// ()
// Parameters:
// class AActor*                  NewViewTarget                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendTime                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EViewTargetBlendFunction> BlendFunc                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLockOutgoing                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTargetWithBlend");

	APlayerController_SetViewTargetWithBlend_Params params;
	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetName
// ()
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)

void APlayerController::SetName(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	APlayerController_SetName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetIgnoreMoveInput
// ()
// Parameters:
// bool                           bNewMoveInput                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetIgnoreMoveInput(bool bNewMoveInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetIgnoreMoveInput");

	APlayerController_SetIgnoreMoveInput_Params params;
	params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetIgnoreLookInput
// ()
// Parameters:
// bool                           bNewLookInput                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetIgnoreLookInput(bool bNewLookInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetIgnoreLookInput");

	APlayerController_SetIgnoreLookInput_Params params;
	params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAudioListenerOverride
// ()
// Parameters:
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::SetAudioListenerOverride(class USceneComponent* attachToComponent, const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioListenerOverride");

	APlayerController_SetAudioListenerOverride_Params params;
	params.attachToComponent = attachToComponent;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewSelf
// ()
// Parameters:
// struct FViewTargetTransitionParams TransitionParams               (Parm)

void APlayerController::ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

	APlayerController_ServerViewSelf_Params params;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewPrevPlayer
// ()

void APlayerController::ServerViewPrevPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewPrevPlayer");

	APlayerController_ServerViewPrevPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewNextPlayer
// ()

void APlayerController::ServerViewNextPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

	APlayerController_ServerViewNextPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerVerifyViewTarget
// ()

void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	APlayerController_ServerVerifyViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdateLevelVisibility
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsVisible                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

	APlayerController_ServerUpdateLevelVisibility_Params params;
	params.PackageName = PackageName;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdateCamera
// ()
// Parameters:
// struct FVector_NetQuantize     CamLoc                         (Parm)
// int                            CamPitchAndYaw                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateCamera");

	APlayerController_ServerUpdateCamera_Params params;
	params.CamLoc = CamLoc;
	params.CamPitchAndYaw = CamPitchAndYaw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUnmutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

	APlayerController_ServerUnmutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerToggleAILogging
// ()

void APlayerController::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerToggleAILogging");

	APlayerController_ServerToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerShortTimeout
// ()

void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	APlayerController_ServerShortTimeout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetSpectatorLocation
// ()
// Parameters:
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerSetSpectatorLocation(const struct FVector& NewLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetSpectatorLocation");

	APlayerController_ServerSetSpectatorLocation_Params params;
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRestartPlayer
// ()

void APlayerController::ServerRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartPlayer");

	APlayerController_ServerRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerReceivedPlayerControllerAck
// ()

void APlayerController::ServerReceivedPlayerControllerAck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerReceivedPlayerControllerAck");

	APlayerController_ServerReceivedPlayerControllerAck_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerProcessNetExecCommandUnreliable
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void APlayerController::ServerProcessNetExecCommandUnreliable(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerProcessNetExecCommandUnreliable");

	APlayerController_ServerProcessNetExecCommandUnreliable_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerProcessNetExecCommand
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void APlayerController::ServerProcessNetExecCommand(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerProcessNetExecCommand");

	APlayerController_ServerProcessNetExecCommand_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerPause
// ()

void APlayerController::ServerPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

	APlayerController_ServerPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerNotifyLoadedWorld
// ()
// Parameters:
// struct FName                   WorldPackageName               (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

	APlayerController_ServerNotifyLoadedWorld_Params params;
	params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

	APlayerController_ServerMutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCheckClientPossession
// ()

void APlayerController::ServerCheckClientPossession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCheckClientPossession");

	APlayerController_ServerCheckClientPossession_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeName
// ()
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)

void APlayerController::ServerChangeName(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

	APlayerController_ServerChangeName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCamera
// ()
// Parameters:
// struct FName                   NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerCamera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCamera");

	APlayerController_ServerCamera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAcknowledgePossession
// ()
// Parameters:
// class APawn*                   P                              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	APlayerController_ServerAcknowledgePossession_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendToConsole
// ()
// Parameters:
// class FString                  Command                        (Parm, ZeroConstructor)

void APlayerController::SendToConsole(const class FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendToConsole");

	APlayerController_SendToConsole_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RestartLevel
// ()

void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	APlayerController_RestartLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetIgnoreInputFlags
// ()

void APlayerController::ResetIgnoreInputFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetIgnoreInputFlags");

	APlayerController_ResetIgnoreInputFlags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProjectWorldLocationToScreen
// ()
// Parameters:
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProjectWorldLocationToScreen");

	APlayerController_ProjectWorldLocationToScreen_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenLocation != nullptr)
		*ScreenLocation = params.ScreenLocation;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayDynamicForceFeedback
// ()
// Parameters:
// float                          Intensity                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsLeftLarge              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsLeftSmall              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsRightLarge             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsRightSmall             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EDynamicForceFeedbackAction> Action                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void APlayerController::PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayDynamicForceFeedback");

	APlayerController_PlayDynamicForceFeedback_Params params;
	params.Intensity = Intensity;
	params.Duration = Duration;
	params.bAffectsLeftLarge = bAffectsLeftLarge;
	params.bAffectsLeftSmall = bAffectsLeftSmall;
	params.bAffectsRightLarge = bAffectsRightLarge;
	params.bAffectsRightSmall = bAffectsRightSmall;
	params.Action = Action;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Pause
// ()

void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	APlayerController_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NetSpawnActorAtLocation
// ()
// Parameters:
// class UClass*                  anActorClass                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize     AtLocation                     (Parm)
// struct FRotator_NetQuantize    AtRotation                     (Parm)
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            dataIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   attachSocketName               (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::NetSpawnActorAtLocation(class UClass* anActorClass, const struct FVector_NetQuantize& AtLocation, const struct FRotator_NetQuantize& AtRotation, class USceneComponent* attachToComponent, int dataIndex, const struct FName& attachSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NetSpawnActorAtLocation");

	APlayerController_NetSpawnActorAtLocation_Params params;
	params.anActorClass = anActorClass;
	params.AtLocation = AtLocation;
	params.AtRotation = AtRotation;
	params.attachToComponent = attachToComponent;
	params.dataIndex = dataIndex;
	params.attachSocketName = attachSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NetConnectionHasActiveActor
// ()
// Parameters:
// class AActor*                  anActor                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::NetConnectionHasActiveActor(class AActor* anActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NetConnectionHasActiveActor");

	APlayerController_NetConnectionHasActiveActor_Params params;
	params.anActor = anActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.LocalTravel
// ()
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)

void APlayerController::LocalTravel(const class FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	APlayerController_LocalTravel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMoveInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMoveInputIgnored");

	APlayerController_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsLookInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsLookInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLookInputIgnored");

	APlayerController_IsLookInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsInputKeyDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::IsInputKeyDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsInputKeyDown");

	APlayerController_IsInputKeyDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.HandleRespawned
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsFirstSpawn                   (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::HandleRespawned(class APawn* NewPawn, bool IsFirstSpawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandleRespawned");

	APlayerController_HandleRespawned_Params params;
	params.NewPawn = NewPawn;
	params.IsFirstSpawn = IsFirstSpawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetViewportSize
// ()
// Parameters:
// int                            SizeX                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            SizeY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetViewportSize(int* SizeX, int* SizeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewportSize");

	APlayerController_GetViewportSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SizeX != nullptr)
		*SizeX = params.SizeX;
	if (SizeY != nullptr)
		*SizeY = params.SizeY;
}


// Function Engine.PlayerController.GetMousePosition
// ()
// Parameters:
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bEvenWhenMouseNotAttached      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetMousePosition(bool bEvenWhenMouseNotAttached, float* LocationX, float* LocationY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetMousePosition");

	APlayerController_GetMousePosition_Params params;
	params.bEvenWhenMouseNotAttached = bEvenWhenMouseNotAttached;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputVectorKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APlayerController::GetInputVectorKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputVectorKeyState");

	APlayerController_GetInputVectorKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputTouchState
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputTouchState");

	APlayerController_GetInputTouchState_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;
}


// Function Engine.PlayerController.GetInputMouseDelta
// ()
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMouseDelta");

	APlayerController_GetInputMouseDelta_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;
}


// Function Engine.PlayerController.GetInputMotionState
// ()
// Parameters:
// struct FVector                 Tilt                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RotationRate                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Gravity                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Acceleration                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputMotionState");

	APlayerController_GetInputMotionState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Tilt != nullptr)
		*Tilt = params.Tilt;
	if (RotationRate != nullptr)
		*RotationRate = params.RotationRate;
	if (Gravity != nullptr)
		*Gravity = params.Gravity;
	if (Acceleration != nullptr)
		*Acceleration = params.Acceleration;
}


// Function Engine.PlayerController.GetInputKeyTimeDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerController::GetInputKeyTimeDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputKeyTimeDown");

	APlayerController_GetInputKeyTimeDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetInputAnalogStickState
// ()
// Parameters:
// TEnumAsByte<EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APlayerController::GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogStickState");

	APlayerController_GetInputAnalogStickState_Params params;
	params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;
}


// Function Engine.PlayerController.GetInputAnalogKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerController::GetInputAnalogKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetInputAnalogKeyState");

	APlayerController_GetInputAnalogKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHUD
// ()
// Parameters:
// class AHUD*                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AHUD* APlayerController::GetHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHUD");

	APlayerController_GetHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerForObjects
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerForObjects");

	APlayerController_GetHitResultUnderFingerForObjects_Params params;
	params.FingerIndex = FingerIndex;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFingerByChannel
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFingerByChannel");

	APlayerController_GetHitResultUnderFingerByChannel_Params params;
	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderFinger
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderFinger");

	APlayerController_GetHitResultUnderFinger_Params params;
	params.FingerIndex = FingerIndex;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorForObjects
// ()
// Parameters:
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorForObjects");

	APlayerController_GetHitResultUnderCursorForObjects_Params params;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursorByChannel
// ()
// Parameters:
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursorByChannel");

	APlayerController_GetHitResultUnderCursorByChannel_Params params;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetHitResultUnderCursor
// ()
// Parameters:
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHitResultUnderCursor");

	APlayerController_GetHitResultUnderCursor_Params params;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FOV
// ()
// Parameters:
// float                          NewFOV                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::FOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	APlayerController_FOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnableCheats
// ()
// Parameters:
// class FString                  pass                           (ConstParm, Parm, ZeroConstructor)

void APlayerController::EnableCheats(const class FString& pass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

	APlayerController_EnableCheats_Params params;
	params.pass = pass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DeprojectScreenPositionToWorld
// ()
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectScreenPositionToWorld");

	APlayerController_DeprojectScreenPositionToWorld_Params params;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.PlayerController.DeprojectMousePositionToWorld
// ()
// Parameters:
// struct FVector                 WorldLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerController::DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DeprojectMousePositionToWorld");

	APlayerController_DeprojectMousePositionToWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldLocation != nullptr)
		*WorldLocation = params.WorldLocation;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CopyStringToClipboard
// ()
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)

void APlayerController::CopyStringToClipboard(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CopyStringToClipboard");

	APlayerController_CopyStringToClipboard_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConsoleKey
// ()
// Parameters:
// struct FKey                    Key                            (Parm)

void APlayerController::ConsoleKey(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleKey");

	APlayerController_ConsoleKey_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWasKicked
// ()
// Parameters:
// struct FText                   KickReason                     (ConstParm, Parm)

void APlayerController::ClientWasKicked(const struct FText& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

	APlayerController_ClientWasKicked_Params params;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// ()

void APlayerController::ClientVoiceHandshakeComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceHandshakeComplete");

	APlayerController_ClientVoiceHandshakeComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBeLoaded             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBeVisible            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewShouldBlockOnLoad          (Parm, ZeroConstructor, IsPlainOldData)
// int                            LODIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

	APlayerController_ClientUpdateLevelStreamingStatus_Params params;
	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUnmutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

	APlayerController_ClientUnmutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTravelInternal
// ()
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)
// TEnumAsByte<ETravelType>       TravelType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FGuid                   MapPackageGuid                 (Parm, ZeroConstructor)

void APlayerController::ClientTravelInternal(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravelInternal");

	APlayerController_ClientTravelInternal_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTravel
// ()
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)
// TEnumAsByte<ETravelType>       TravelType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSeamless                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FGuid                   MapPackageGuid                 (Parm, ZeroConstructor)

void APlayerController::ClientTravel(const class FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	APlayerController_ClientTravel_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTeleportSucceeded
// ()
// Parameters:
// struct FVector                 TeleportLoc                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                TeleportRot                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSimpleTeleport                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTeleportSucceeded(const struct FVector& TeleportLoc, const struct FRotator& TeleportRot, bool bSimpleTeleport)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTeleportSucceeded");

	APlayerController_ClientTeleportSucceeded_Params params;
	params.TeleportLoc = TeleportLoc;
	params.TeleportRot = TeleportRot;
	params.bSimpleTeleport = bSimpleTeleport;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTeamMessage
// ()
// Parameters:
// class APlayerState*            SenderPlayerState              (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  S                              (Parm, ZeroConstructor)
// struct FName                   Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTeamMessage");

	APlayerController_ClientTeamMessage_Params params;
	params.SenderPlayerState = SenderPlayerState;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopForceFeedback
// ()
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedback");

	APlayerController_ClientStopForceFeedback_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopCameraShake
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopCameraShake(class UClass* Shake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShake");

	APlayerController_ClientStopCameraShake_Params params;
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopCameraAnim
// ()
// Parameters:
// class UCameraAnim*             AnimToStop                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraAnim");

	APlayerController_ClientStopCameraAnim_Params params;
	params.AnimToStop = AnimToStop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// ()
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnCameraLensEffect");

	APlayerController_ClientSpawnCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget
// ()
// Parameters:
// class AActor*                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FViewTargetTransitionParams TransitionParams               (Parm)

void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

	APlayerController_ClientSetViewTarget_Params params;
	params.A = A;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHUD
// ()
// Parameters:
// class UClass*                  NewHUDClass                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetHUD(class UClass* NewHUDClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	APlayerController_ClientSetHUD_Params params;
	params.NewHUDClass = NewHUDClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");

	APlayerController_ClientSetForceMipLevelsToBeResident_Params params;
	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCinematicMode
// ()
// Parameters:
// bool                           bInCinematicMode               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

	APlayerController_ClientSetCinematicMode_Params params;
	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCameraMode
// ()
// Parameters:
// struct FName                   NewCamMode                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

	APlayerController_ClientSetCameraMode_Params params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCameraFade
// ()
// Parameters:
// bool                           bEnableFading                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  FadeColor                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               FadeAlpha                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFadeAudio                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraFade");

	APlayerController_ClientSetCameraFade_Params params;
	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;
	params.bFadeAudio = bFadeAudio;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// ()

void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

	APlayerController_ClientSetBlockOnAsyncLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSendNetExecCommandToServer
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsReliable                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientSendNetExecCommandToServer(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSendNetExecCommandToServer");

	APlayerController_ClientSendNetExecCommandToServer_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.bIsReliable = bIsReliable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReturnToMainMenu
// ()
// Parameters:
// class FString                  ReturnReason                   (Parm, ZeroConstructor)

void APlayerController::ClientReturnToMainMenu(const class FString& ReturnReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToMainMenu");

	APlayerController_ClientReturnToMainMenu_Params params;
	params.ReturnReason = ReturnReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRetryClientRestart
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRetryClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRetryClientRestart");

	APlayerController_ClientRetryClientRestart_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRestart
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

	APlayerController_ClientRestart_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReset
// ()

void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	APlayerController_ClientReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRepObjRef
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientRepObjRef(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRepObjRef");

	APlayerController_ClientRepObjRef_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReceiveLocalizedMessage
// ()
// Parameters:
// class UClass*                  Message                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Switch                         (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerState*            RelatedPlayerState_2           (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerState*            RelatedPlayerState_3           (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 OptionalObject                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReceiveLocalizedMessage");

	APlayerController_ClientReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPlayerState_2 = RelatedPlayerState_2;
	params.RelatedPlayerState_3 = RelatedPlayerState_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientProcessSimpleNetExecCommandUnreliableBP
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientProcessSimpleNetExecCommandUnreliableBP(class AActor* forActor, const struct FName& CommandName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientProcessSimpleNetExecCommandUnreliableBP");

	APlayerController_ClientProcessSimpleNetExecCommandUnreliableBP_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientProcessSimpleNetExecCommandBP
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientProcessSimpleNetExecCommandBP(class AActor* forActor, const struct FName& CommandName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientProcessSimpleNetExecCommandBP");

	APlayerController_ClientProcessSimpleNetExecCommandBP_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientProcessNetExecCommandUnreliableBP
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void APlayerController::ClientProcessNetExecCommandUnreliableBP(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientProcessNetExecCommandUnreliableBP");

	APlayerController_ClientProcessNetExecCommandUnreliableBP_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientProcessNetExecCommandUnreliable
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FNetExecParams          ExecParams                     (Parm)

void APlayerController::ClientProcessNetExecCommandUnreliable(class AActor* forActor, const struct FName& CommandName, const struct FNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientProcessNetExecCommandUnreliable");

	APlayerController_ClientProcessNetExecCommandUnreliable_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientProcessNetExecCommandBP
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void APlayerController::ClientProcessNetExecCommandBP(class AActor* forActor, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientProcessNetExecCommandBP");

	APlayerController_ClientProcessNetExecCommandBP_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientProcessNetExecCommand
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FNetExecParams          ExecParams                     (Parm)

void APlayerController::ClientProcessNetExecCommand(class AActor* forActor, const struct FName& CommandName, const struct FNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientProcessNetExecCommand");

	APlayerController_ClientProcessNetExecCommand_Params params;
	params.forActor = forActor;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPrestreamTextures
// ()
// Parameters:
// class AActor*                  ForcedActor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ForceDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableStreaming               (Parm, ZeroConstructor, IsPlainOldData)
// int                            CinematicTextureGroups         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrestreamTextures");

	APlayerController_ClientPrestreamTextures_Params params;
	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPrepareMapChange
// ()
// Parameters:
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFirst                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLast                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

	APlayerController_ClientPrepareMapChange_Params params;
	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlaySoundAtLocation
// ()
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySoundAtLocation");

	APlayerController_ClientPlaySoundAtLocation_Params params;
	params.Sound = Sound;
	params.Location = Location;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlaySound
// ()
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

	APlayerController_ClientPlaySound_Params params;
	params.Sound = Sound;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayForceFeedback
// ()
// Parameters:
// class UForceFeedbackEffect*    ForceFeedbackEffect            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedback");

	APlayerController_ClientPlayForceFeedback_Params params;
	params.ForceFeedbackEffect = ForceFeedbackEffect;
	params.bLooping = bLooping;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayCameraShake
// ()
// Parameters:
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUseWorldCameraShakeScale (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot, float Speed, bool bForceUseWorldCameraShakeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShake");

	APlayerController_ClientPlayCameraShake_Params params;
	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;
	params.Speed = Speed;
	params.bForceUseWorldCameraShakeScale = bForceUseWorldCameraShakeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayCameraAnim
// ()
// Parameters:
// class UCameraAnim*             AnimToPlay                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> Space                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                CustomPlaySpace                (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraAnim");

	APlayerController_ClientPlayCameraAnim_Params params;
	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientNotifyRespawned
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsFirstSpawn                   (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientNotifyRespawned(class APawn* NewPawn, bool IsFirstSpawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientNotifyRespawned");

	APlayerController_ClientNotifyRespawned_Params params;
	params.NewPawn = NewPawn;
	params.IsFirstSpawn = IsFirstSpawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientNotifyReconnected
// ()
// Parameters:
// class APawn*                   NewPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientNotifyReconnected(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientNotifyReconnected");

	APlayerController_ClientNotifyReconnected_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientNetGUIDActorDeletion
// ()
// Parameters:
// struct FNetworkGUID            TheNetGUID                     (Parm)

void APlayerController::ClientNetGUIDActorDeletion(const struct FNetworkGUID& TheNetGUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientNetGUIDActorDeletion");

	APlayerController_ClientNetGUIDActorDeletion_Params params;
	params.TheNetGUID = TheNetGUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientMutePlayer
// ()
// Parameters:
// struct FUniqueNetIdRepl        PlayerId                       (Parm)

void APlayerController::ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

	APlayerController_ClientMutePlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientMessage
// ()
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)
// struct FName                   Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MsgLifeTime                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientMessage(const class FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	APlayerController_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientIgnoreMoveInput
// ()
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

	APlayerController_ClientIgnoreMoveInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientIgnoreLookInput
// ()
// Parameters:
// bool                           bIgnore                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

	APlayerController_ClientIgnoreLookInput_Params params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGotoState
// ()
// Parameters:
// struct FName                   NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientGotoState(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	APlayerController_ClientGotoState_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGameEnded
// ()
// Parameters:
// class AActor*                  EndGameFocus                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsWinner                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

	APlayerController_ClientGameEnded_Params params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientForceGarbageCollection
// ()

void APlayerController::ClientForceGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

	APlayerController_ClientForceGarbageCollection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFlushLevelStreaming
// ()

void APlayerController::ClientFlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

	APlayerController_ClientFlushLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientEnableNetworkVoice
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientEnableNetworkVoice(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEnableNetworkVoice");

	APlayerController_ClientEnableNetworkVoice_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCommitMapChange
// ()

void APlayerController::ClientCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

	APlayerController_ClientCommitMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientClearCameraLensEffects
// ()

void APlayerController::ClientClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearCameraLensEffects");

	APlayerController_ClientClearCameraLensEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCapBandwidth
// ()
// Parameters:
// int                            Cap                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	APlayerController_ClientCapBandwidth_Params params;
	params.Cap = Cap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCancelPendingMapChange
// ()

void APlayerController::ClientCancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCancelPendingMapChange");

	APlayerController_ClientCancelPendingMapChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAddTextureStreamingLoc
// ()
// Parameters:
// struct FVector                 InLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideLocation              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddTextureStreamingLoc");

	APlayerController_ClientAddTextureStreamingLoc_Params params;
	params.InLoc = InLoc;
	params.Duration = Duration;
	params.bOverrideLocation = bOverrideLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearAudioListenerOverride
// ()

void APlayerController::ClearAudioListenerOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAudioListenerOverride");

	APlayerController_ClearAudioListenerOverride_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Camera
// ()
// Parameters:
// struct FName                   NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::Camera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

	APlayerController_Camera_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BPGetAimedUseActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APlayerController::BPGetAimedUseActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BPGetAimedUseActor");

	APlayerController_BPGetAimedUseActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AddYawInput
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddYawInput(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddYawInput");

	APlayerController_AddYawInput_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddRollInput
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddRollInput(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddRollInput");

	APlayerController_AddRollInput_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddPitchInput
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::AddPitchInput(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPitchInput");

	APlayerController_AddPitchInput_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ActivateTouchInterface
// ()
// Parameters:
// class UTouchInterface*         NewTouchInterface              (Parm, ZeroConstructor, IsPlainOldData)

void APlayerController::ActivateTouchInterface(class UTouchInterface* NewTouchInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ActivateTouchInterface");

	APlayerController_ActivateTouchInterface_Params params;
	params.NewTouchInterface = NewTouchInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowHUD
// ()

void AHUD::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

	AHUD_ShowHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebugToggleSubCategory
// ()
// Parameters:
// struct FName                   Category                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebugToggleSubCategory(const struct FName& Category)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugToggleSubCategory");

	AHUD_ShowDebugToggleSubCategory_Params params;
	params.Category = Category;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebug
// ()
// Parameters:
// struct FName                   DebugType                      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ShowDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	AHUD_ShowDebug_Params params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.RemoveDebugText
// ()
// Parameters:
// class AActor*                  SrcActor                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLeaveDurationText             (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveDebugText");

	AHUD_RemoveDebugText_Params params;
	params.SrcActor = SrcActor;
	params.bLeaveDurationText = bLeaveDurationText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.RemoveAllDebugStrings
// ()

void AHUD::RemoveAllDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveAllDebugStrings");

	AHUD_RemoveAllDebugStrings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ReceiveHitBoxRelease
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxRelease(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxRelease");

	AHUD_ReceiveHitBoxRelease_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ReceiveHitBoxEndCursorOver
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxEndCursorOver(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxEndCursorOver");

	AHUD_ReceiveHitBoxEndCursorOver_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ReceiveHitBoxClick
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxClick(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxClick");

	AHUD_ReceiveHitBoxClick_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ReceiveHitBoxBeginCursorOver
// ()
// Parameters:
// struct FName                   BoxName                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveHitBoxBeginCursorOver(const struct FName& BoxName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveHitBoxBeginCursorOver");

	AHUD_ReceiveHitBoxBeginCursorOver_Params params;
	params.BoxName = BoxName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ReceiveDrawHUD
// ()
// Parameters:
// int                            SizeX                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            SizeY                          (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::ReceiveDrawHUD(int SizeX, int SizeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ReceiveDrawHUD");

	AHUD_ReceiveDrawHUD_Params params;
	params.SizeX = SizeX;
	params.SizeY = SizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Project
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AHUD::Project(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Project");

	AHUD_Project_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetTextSize
// ()
// Parameters:
// class FString                  Text                           (Parm, ZeroConstructor)
// float                          OutWidth                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHeight                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UFont*                   Font                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::GetTextSize(const class FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetTextSize");

	AHUD_GetTextSize_Params params;
	params.Text = Text;
	params.Font = Font;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutWidth != nullptr)
		*OutWidth = params.OutWidth;
	if (OutHeight != nullptr)
		*OutHeight = params.OutHeight;
}


// Function Engine.HUD.GetOwningPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* AHUD::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPlayerController");

	AHUD_GetOwningPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetOwningPawn
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* AHUD::GetOwningPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetOwningPawn");

	AHUD_GetOwningPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetActorsInSelectionRectangle
// ()
// Parameters:
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               FirstPoint                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector2D               SecondPoint                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           bIncludeNonCollidingComponents (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bActorMustBeFullyEnclosed      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetActorsInSelectionRectangle");

	AHUD_GetActorsInSelectionRectangle_Params params;
	params.ClassFilter = ClassFilter;
	params.FirstPoint = FirstPoint;
	params.SecondPoint = SecondPoint;
	params.bIncludeNonCollidingComponents = bIncludeNonCollidingComponents;
	params.bActorMustBeFullyEnclosed = bActorMustBeFullyEnclosed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.HUD.DrawTextureSimple
// ()
// Parameters:
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTextureSimple");

	AHUD_DrawTextureSimple_Params params;
	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawTexture
// ()
// Parameters:
// class UTexture*                Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureU                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureV                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureUWidth                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextureVHeight                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TintColor                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBlendMode>        BlendMode                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               RotPivot                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTexture");

	AHUD_DrawTexture_Params params;
	params.Texture = Texture;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.TextureU = TextureU;
	params.TextureV = TextureV;
	params.TextureUWidth = TextureUWidth;
	params.TextureVHeight = TextureVHeight;
	params.TintColor = TintColor;
	params.BlendMode = BlendMode;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawText
// ()
// Parameters:
// class FString                  Text                           (Parm, ZeroConstructor)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// class UFont*                   Font                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawText");

	AHUD_DrawText_Params params;
	params.Text = Text;
	params.TextColor = TextColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.Font = Font;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawRect
// ()
// Parameters:
// struct FLinearColor            RectColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRect");

	AHUD_DrawRect_Params params;
	params.RectColor = RectColor;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMaterialSimple
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterialSimple");

	AHUD_DrawMaterialSimple_Params params;
	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMaterial
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenW                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenH                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialU                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialV                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialUWidth                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaterialVHeight                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               RotPivot                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMaterial");

	AHUD_DrawMaterial_Params params;
	params.Material = Material;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;
	params.ScreenW = ScreenW;
	params.ScreenH = ScreenH;
	params.MaterialU = MaterialU;
	params.MaterialV = MaterialV;
	params.MaterialUWidth = MaterialUWidth;
	params.MaterialVHeight = MaterialVHeight;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.Rotation = Rotation;
	params.RotPivot = RotPivot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawLine
// ()
// Parameters:
// float                          StartScreenX                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartScreenY                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndScreenX                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndScreenY                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawLine");

	AHUD_DrawLine_Params params;
	params.StartScreenX = StartScreenX;
	params.StartScreenY = StartScreenY;
	params.EndScreenX = EndScreenX;
	params.EndScreenY = EndScreenY;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Deproject
// ()
// Parameters:
// float                          ScreenX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScreenY                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldPosition                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AHUD::Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Deproject");

	AHUD_Deproject_Params params;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldPosition != nullptr)
		*WorldPosition = params.WorldPosition;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.HUD.AddHitBox
// ()
// Parameters:
// struct FVector2D               Position                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bConsumesInput                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            Priority                       (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& Name, bool bConsumesInput, int Priority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddHitBox");

	AHUD_AddHitBox_Params params;
	params.Position = Position;
	params.Size = Size;
	params.Name = Name;
	params.bConsumesInput = bConsumesInput;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddDebugText
// ()
// Parameters:
// class FString                  DebugText                      (Parm, ZeroConstructor)
// class AActor*                  SrcActor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Offset                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DesiredOffset                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipOverwriteCheck            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAbsoluteLocation              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bKeepAttachedToActor           (Parm, ZeroConstructor, IsPlainOldData)
// class UFont*                   InFont                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          FontScale                      (Parm, ZeroConstructor, IsPlainOldData)

void AHUD::AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddDebugText");

	AHUD_AddDebugText_Params params;
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;
	params.FontScale = FontScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.ToggleActive
// ()

void UActorComponent::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ToggleActive");

	UActorComponent_ToggleActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetIsReplicated
// ()
// Parameters:
// bool                           ShouldReplicate                (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetIsReplicated(bool ShouldReplicate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetIsReplicated");

	UActorComponent_SetIsReplicated_Params params;
	params.ShouldReplicate = ShouldReplicate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetComponentTickEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetComponentTickEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentTickEnabled");

	UActorComponent_SetComponentTickEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetActive
// ()
// Parameters:
// bool                           bNewActive                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::SetActive(bool bNewActive, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetActive");

	UActorComponent_SetActive_Params params;
	params.bNewActive = bNewActive;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.ReregisterComponent
// ()

void UActorComponent::ReregisterComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ReregisterComponent");

	UActorComponent_ReregisterComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.RemoveTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UActorComponent::RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteComponent");

	UActorComponent_RemoveTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.RemoveTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveTickPrerequisiteActor");

	UActorComponent_RemoveTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.OnRep_IsActive
// ()

void UActorComponent::OnRep_IsActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.OnRep_IsActive");

	UActorComponent_OnRep_IsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.K2_DestroyComponent
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::K2_DestroyComponent(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.K2_DestroyComponent");

	UActorComponent_K2_DestroyComponent_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.IsActive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.IsActive");

	UActorComponent_IsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetWorld
// ()
// Parameters:
// class UWorld*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWorld* UActorComponent::GetWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetWorld");

	UActorComponent_GetWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ActorComponent.GetOwner
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UActorComponent::GetOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetOwner");

	UActorComponent_GetOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ActorComponent.Deactivate
// ()

void UActorComponent::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Deactivate");

	UActorComponent_Deactivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.ComponentHasTag
// ()
// Parameters:
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UActorComponent::ComponentHasTag(const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ComponentHasTag");

	UActorComponent_ComponentHasTag_Params params;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ActorComponent.BPTickComponent
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::BPTickComponent(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.BPTickComponent");

	UActorComponent_BPTickComponent_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.BPOnComponentTick
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::BPOnComponentTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.BPOnComponentTick");

	UActorComponent_BPOnComponentTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.BPOnComponentDestroyed
// ()

void UActorComponent::BPOnComponentDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.BPOnComponentDestroyed");

	UActorComponent_BPOnComponentDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.BPOnComponentCreated
// ()

void UActorComponent::BPOnComponentCreated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.BPOnComponentCreated");

	UActorComponent_BPOnComponentCreated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.AddTickPrerequisiteComponent
// ()
// Parameters:
// class UActorComponent*         PrerequisiteComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UActorComponent::AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteComponent");

	UActorComponent_AddTickPrerequisiteComponent_Params params;
	params.PrerequisiteComponent = PrerequisiteComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.AddTickPrerequisiteActor
// ()
// Parameters:
// class AActor*                  PrerequisiteActor              (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::AddTickPrerequisiteActor(class AActor* PrerequisiteActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddTickPrerequisiteActor");

	UActorComponent_AddTickPrerequisiteActor_Params params;
	params.PrerequisiteActor = PrerequisiteActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.AddedAsPrimalItemAttachment
// ()

void UActorComponent::AddedAsPrimalItemAttachment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddedAsPrimalItemAttachment");

	UActorComponent_AddedAsPrimalItemAttachment_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.Activate
// ()
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UActorComponent::Activate(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.Activate");

	UActorComponent_Activate_Params params;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerState.OnRep_UniqueId
// ()

void APlayerState::OnRep_UniqueId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_UniqueId");

	APlayerState_OnRep_UniqueId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerState.OnRep_Score
// ()

void APlayerState::OnRep_Score()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_Score");

	APlayerState_OnRep_Score_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerState.OnRep_PlayerName
// ()

void APlayerState::OnRep_PlayerName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_PlayerName");

	APlayerState_OnRep_PlayerName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerState.OnRep_bIsInactive
// ()

void APlayerState::OnRep_bIsInactive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.OnRep_bIsInactive");

	APlayerState_OnRep_bIsInactive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerState.GetExactPing
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerState::GetExactPing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerState.GetExactPing");

	APlayerState_GetExactPing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.ToggleVisibility
// ()
// Parameters:
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::ToggleVisibility(bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ToggleVisibility");

	USceneComponent_ToggleVisibility_Params params;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.StopSound
// ()
// Parameters:
// class USoundBase*              SoundToStop                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::StopSound(class USoundBase* SoundToStop, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.StopSound");

	USceneComponent_StopSound_Params params;
	params.SoundToStop = SoundToStop;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SnapTo
// ()
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SnapTo(class USceneComponent* InParent, const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SnapTo");

	USceneComponent_SnapTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetWorldTransform
// ()
// Parameters:
// struct UObject_FTransform      NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetWorldTransform(const struct UObject_FTransform& NewTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldTransform");

	USceneComponent_SetWorldTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetWorldScale3D
// ()
// Parameters:
// struct FVector                 NewScale                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetWorldScale3D(const struct FVector& NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldScale3D");

	USceneComponent_SetWorldScale3D_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetWorldRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetWorldRotation(const struct FRotator& NewRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldRotation");

	USceneComponent_SetWorldRotation_Params params;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetWorldLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldLocationAndRotation");

	USceneComponent_SetWorldLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetWorldLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetWorldLocation(const struct FVector& NewLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetWorldLocation");

	USceneComponent_SetWorldLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetVisibility
// ()
// Parameters:
// bool                           bNewVisibility                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetVisibility(bool bNewVisibility, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetVisibility");

	USceneComponent_SetVisibility_Params params;
	params.bNewVisibility = bNewVisibility;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetRelativeTransform
// ()
// Parameters:
// struct UObject_FTransform      NewTransform                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetRelativeTransform(const struct UObject_FTransform& NewTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeTransform");

	USceneComponent_SetRelativeTransform_Params params;
	params.NewTransform = NewTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetRelativeScale3D
// ()
// Parameters:
// struct FVector                 NewScale3D                     (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetRelativeScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeScale3D");

	USceneComponent_SetRelativeScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetRelativeRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeRotation");

	USceneComponent_SetRelativeRotation_Params params;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetRelativeLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeLocationAndRotation");

	USceneComponent_SetRelativeLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetRelativeLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetRelativeLocation(const struct FVector& NewLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetRelativeLocation");

	USceneComponent_SetRelativeLocation_Params params;
	params.NewLocation = NewLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetMobility
// ()
// Parameters:
// TEnumAsByte<EComponentMobility> NewMobility                    (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetMobility(TEnumAsByte<EComponentMobility> NewMobility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetMobility");

	USceneComponent_SetMobility_Params params;
	params.NewMobility = NewMobility;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetHiddenInGame
// ()
// Parameters:
// bool                           NewHidden                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetHiddenInGame(bool NewHidden, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetHiddenInGame");

	USceneComponent_SetHiddenInGame_Params params;
	params.NewHidden = NewHidden;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.SetAbsolute
// ()
// Parameters:
// bool                           bNewAbsoluteLocation           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewAbsoluteRotation           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewAbsoluteScale              (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.SetAbsolute");

	USceneComponent_SetAbsolute_Params params;
	params.bNewAbsoluteLocation = bNewAbsoluteLocation;
	params.bNewAbsoluteRotation = bNewAbsoluteRotation;
	params.bNewAbsoluteScale = bNewAbsoluteScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.ResetRelativeTransform
// ()

void USceneComponent::ResetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.ResetRelativeTransform");

	USceneComponent_ResetRelativeTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.PhysicsVolumeChanged__DelegateSignature
// ()
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::PhysicsVolumeChanged__DelegateSignature(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.PhysicsVolumeChanged__DelegateSignature");

	USceneComponent_PhysicsVolumeChanged__DelegateSignature_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.OnRep_Visibility
// ()
// Parameters:
// bool                           OldValue                       (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::OnRep_Visibility(bool OldValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Visibility");

	USceneComponent_OnRep_Visibility_Params params;
	params.OldValue = OldValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.OnRep_Transform
// ()

void USceneComponent::OnRep_Transform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.OnRep_Transform");

	USceneComponent_OnRep_Transform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.K2_GetComponentToWorld
// ()
// Parameters:
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform USceneComponent::K2_GetComponentToWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentToWorld");

	USceneComponent_K2_GetComponentToWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentScale
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::K2_GetComponentScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentScale");

	USceneComponent_K2_GetComponentScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USceneComponent::K2_GetComponentRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentRotation");

	USceneComponent_K2_GetComponentRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_GetComponentLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::K2_GetComponentLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_GetComponentLocation");

	USceneComponent_K2_GetComponentLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.K2_AttachTo
// ()
// Parameters:
// class USceneComponent*         InParent                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   AttachType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeldSimulatedBodies           (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.K2_AttachTo");

	USceneComponent_K2_AttachTo_Params params;
	params.InParent = InParent;
	params.InSocketName = InSocketName;
	params.AttachType = AttachType;
	params.bWeldSimulatedBodies = bWeldSimulatedBodies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.IsVisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsVisible");

	USceneComponent_IsVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsSimulatingPhysics
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsSimulatingPhysics(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsSimulatingPhysics");

	USceneComponent_IsSimulatingPhysics_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.IsAnySimulatingPhysics
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::IsAnySimulatingPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.IsAnySimulatingPhysics");

	USceneComponent_IsAnySimulatingPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetWorldLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetWorldLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetWorldLocation");

	USceneComponent_GetWorldLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetUpVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetUpVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetUpVector");

	USceneComponent_GetUpVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketTransform
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERelativeTransformSpace> TransformSpace                 (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform USceneComponent::GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketTransform");

	USceneComponent_GetSocketTransform_Params params;
	params.InSocketName = InSocketName;
	params.TransformSpace = TransformSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketRotation
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USceneComponent::GetSocketRotation(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketRotation");

	USceneComponent_GetSocketRotation_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketQuaternion
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FQuat USceneComponent::GetSocketQuaternion(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketQuaternion");

	USceneComponent_GetSocketQuaternion_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetSocketLocation
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetSocketLocation(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetSocketLocation");

	USceneComponent_GetSocketLocation_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRightVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetRightVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRightVector");

	USceneComponent_GetRightVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetRelativeTransform
// ()
// Parameters:
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform USceneComponent::GetRelativeTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetRelativeTransform");

	USceneComponent_GetRelativeTransform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetPhysicsVolume
// ()
// Parameters:
// class APhysicsVolume*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APhysicsVolume* USceneComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetPhysicsVolume");

	USceneComponent_GetPhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetParentComponents
// ()
// Parameters:
// TArray<class USceneComponent*> Parents                        (Parm, OutParm, ZeroConstructor)

void USceneComponent::GetParentComponents(TArray<class USceneComponent*>* Parents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetParentComponents");

	USceneComponent_GetParentComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parents != nullptr)
		*Parents = params.Parents;
}


// Function Engine.SceneComponent.GetNumChildrenComponents
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USceneComponent::GetNumChildrenComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetNumChildrenComponents");

	USceneComponent_GetNumChildrenComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetForwardVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetForwardVector");

	USceneComponent_GetForwardVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetComponentVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USceneComponent::GetComponentVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetComponentVelocity");

	USceneComponent_GetComponentVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetChildrenComponents
// ()
// Parameters:
// bool                           bIncludeAllDescendants         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class USceneComponent*> Children                       (Parm, OutParm, ZeroConstructor)

void USceneComponent::GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildrenComponents");

	USceneComponent_GetChildrenComponents_Params params;
	params.bIncludeAllDescendants = bIncludeAllDescendants;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Children != nullptr)
		*Children = params.Children;
}


// Function Engine.SceneComponent.GetChildComponent
// ()
// Parameters:
// int                            ChildIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* USceneComponent::GetChildComponent(int ChildIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetChildComponent");

	USceneComponent_GetChildComponent_Params params;
	params.ChildIndex = ChildIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAttachParent
// ()
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* USceneComponent::GetAttachParent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAttachParent");

	USceneComponent_GetAttachParent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.GetAllSocketNames
// ()
// Parameters:
// TArray<struct FName>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FName> USceneComponent::GetAllSocketNames()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.GetAllSocketNames");

	USceneComponent_GetAllSocketNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.DoesSocketExist
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USceneComponent::DoesSocketExist(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DoesSocketExist");

	USceneComponent_DoesSocketExist_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.DetachFromParent
// ()
// Parameters:
// bool                           bMaintainWorldPosition         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::DetachFromParent(bool bMaintainWorldPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.DetachFromParent");

	USceneComponent_DetachFromParent_Params params;
	params.bMaintainWorldPosition = bMaintainWorldPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.BP_GetCollisionEnabled
// ()
// Parameters:
// TEnumAsByte<ECollisionEnabled> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ECollisionEnabled> USceneComponent::BP_GetCollisionEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.BP_GetCollisionEnabled");

	USceneComponent_BP_GetCollisionEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneComponent.AddWorldTransform
// ()
// Parameters:
// struct UObject_FTransform      DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddWorldTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddWorldTransform");

	USceneComponent_AddWorldTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.AddWorldRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddWorldRotation");

	USceneComponent_AddWorldRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.AddWorldOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddWorldOffset");

	USceneComponent_AddWorldOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.AddRelativeRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddRelativeRotation");

	USceneComponent_AddRelativeRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.AddRelativeLocation
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddRelativeLocation");

	USceneComponent_AddRelativeLocation_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.AddLocalTransform
// ()
// Parameters:
// struct UObject_FTransform      DeltaTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddLocalTransform(const struct UObject_FTransform& DeltaTransform, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddLocalTransform");

	USceneComponent_AddLocalTransform_Params params;
	params.DeltaTransform = DeltaTransform;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.AddLocalRotation
// ()
// Parameters:
// struct FRotator                DeltaRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddLocalRotation");

	USceneComponent_AddLocalRotation_Params params;
	params.DeltaRotation = DeltaRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneComponent.AddLocalOffset
// ()
// Parameters:
// struct FVector                 DeltaLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void USceneComponent::AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneComponent.AddLocalOffset");

	USceneComponent_AddLocalOffset_Params params;
	params.DeltaLocation = DeltaLocation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.WasRecentlyVisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::WasRecentlyVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WasRecentlyVisible");

	UPrimitiveComponent_WasRecentlyVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.WakeRigidBody
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

	UPrimitiveComponent_WakeRigidBody_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.WakeAllRigidBodies
// ()

void UPrimitiveComponent::WakeAllRigidBodies()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeAllRigidBodies");

	UPrimitiveComponent_WakeAllRigidBodies_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetTranslucentSortPriority
// ()
// Parameters:
// int                            NewTranslucentSortPriority     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetTranslucentSortPriority(int NewTranslucentSortPriority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslucentSortPriority");

	UPrimitiveComponent_SetTranslucentSortPriority_Params params;
	params.NewTranslucentSortPriority = NewTranslucentSortPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetSimulatePhysics
// ()
// Parameters:
// bool                           bSimulate                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetSimulatePhysics(bool bSimulate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetSimulatePhysics");

	UPrimitiveComponent_SetSimulatePhysics_Params params;
	params.bSimulate = bSimulate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRenderCustomDepth
// ()
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetRenderCustomDepth(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRenderCustomDepth");

	UPrimitiveComponent_SetRenderCustomDepth_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// ()
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

	UPrimitiveComponent_SetPhysMaterialOverride_Params params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
// ()
// Parameters:
// float                          NewMaxAngVel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity");

	UPrimitiveComponent_SetPhysicsMaxAngularVelocity_Params params;
	params.NewMaxAngVel = NewMaxAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity
// ()
// Parameters:
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsLinearVelocity");

	UPrimitiveComponent_SetPhysicsLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity
// ()
// Parameters:
// struct FVector                 NewAngVel                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysicsAngularVelocity");

	UPrimitiveComponent_SetPhysicsAngularVelocity_Params params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOwnerNoSee
// ()
// Parameters:
// bool                           bNewOwnerNoSee                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

	UPrimitiveComponent_SetOwnerNoSee_Params params;
	params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// ()
// Parameters:
// bool                           bNewOnlyOwnerSee               (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

	UPrimitiveComponent_SetOnlyOwnerSee_Params params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// ()
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

	UPrimitiveComponent_SetNotifyRigidBodyCollision_Params params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetMaterial");

	UPrimitiveComponent_SetMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetLinearDamping
// ()
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetLinearDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLinearDamping");

	UPrimitiveComponent_SetLinearDamping_Params params;
	params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetEnableGravity
// ()
// Parameters:
// bool                           bGravityEnabled                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetEnableGravity(bool bGravityEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetEnableGravity");

	UPrimitiveComponent_SetEnableGravity_Params params;
	params.bGravityEnabled = bGravityEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCustomDepthStencilValue
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCustomDepthStencilValue(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCustomDepthStencilValue");

	UPrimitiveComponent_SetCustomDepthStencilValue_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCollisionResponseToChannel
// ()
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToChannel");

	UPrimitiveComponent_SetCollisionResponseToChannel_Params params;
	params.Channel = Channel;
	params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
// ()
// Parameters:
// TEnumAsByte<ECollisionResponse> NewResponse                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseToAllChannels");

	UPrimitiveComponent_SetCollisionResponseToAllChannels_Params params;
	params.NewResponse = NewResponse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCollisionResponseSet
// ()
// Parameters:
// struct FCollisionResponseSet   Responses                      (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimitiveComponent::SetCollisionResponseSet(const struct FCollisionResponseSet& Responses)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionResponseSet");

	UPrimitiveComponent_SetCollisionResponseSet_Params params;
	params.Responses = Responses;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCollisionProfileName
// ()
// Parameters:
// struct FName                   InCollisionProfileName         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionProfileName(const struct FName& InCollisionProfileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionProfileName");

	UPrimitiveComponent_SetCollisionProfileName_Params params;
	params.InCollisionProfileName = InCollisionProfileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCollisionObjectType
// ()
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionObjectType");

	UPrimitiveComponent_SetCollisionObjectType_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCollisionEnabled
// ()
// Parameters:
// TEnumAsByte<ECollisionEnabled> NewType                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCollisionEnabled");

	UPrimitiveComponent_SetCollisionEnabled_Params params;
	params.NewType = NewType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCastShadow
// ()
// Parameters:
// bool                           NewCastShadow                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetCastShadow(bool NewCastShadow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCastShadow");

	UPrimitiveComponent_SetCastShadow_Params params;
	params.NewCastShadow = NewCastShadow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetAngularDamping
// ()
// Parameters:
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAngularDamping(float InDamping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAngularDamping");

	UPrimitiveComponent_SetAngularDamping_Params params;
	params.InDamping = InDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
// ()
// Parameters:
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddToCurrent                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity");

	UPrimitiveComponent_SetAllPhysicsLinearVelocity_Params params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

	UPrimitiveComponent_PutRigidBodyToSleep_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.K2_LineTraceComponent
// ()
// Parameters:
// struct FVector                 TraceStart                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowTrace                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitNormal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.K2_LineTraceComponent");

	UPrimitiveComponent_K2_LineTraceComponent_Params params;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.bTraceComplex = bTraceComplex;
	params.bShowTrace = bShowTrace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (BoneName != nullptr)
		*BoneName = params.BoneName;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IsGravityEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimitiveComponent::IsGravityEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IsGravityEnabled");

	UPrimitiveComponent_IsGravityEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.IgnoreActorWhenMoving
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldIgnore                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.IgnoreActorWhenMoving");

	UPrimitiveComponent_IgnoreActorWhenMoving_Params params;
	params.Actor = Actor;
	params.bShouldIgnore = bShouldIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.GetWalkableSlopeOverride
// ()
// Parameters:
// struct FWalkableSlopeOverride  ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FWalkableSlopeOverride UPrimitiveComponent::GetWalkableSlopeOverride()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetWalkableSlopeOverride");

	UPrimitiveComponent_GetWalkableSlopeOverride_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::GetPhysicsLinearVelocity(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsLinearVelocity");

	UPrimitiveComponent_GetPhysicsLinearVelocity_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimitiveComponent::GetPhysicsAngularVelocity(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPhysicsAngularVelocity");

	UPrimitiveComponent_GetPhysicsAngularVelocity_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetOverlappingComponents
// ()
// Parameters:
// TArray<class UPrimitiveComponent*> OverlappingComponents          (Parm, OutParm, ZeroConstructor)

void UPrimitiveComponent::GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingComponents");

	UPrimitiveComponent_GetOverlappingComponents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverlappingComponents != nullptr)
		*OverlappingComponents = params.OverlappingComponents;
}


// Function Engine.PrimitiveComponent.GetOverlappingActors
// ()
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlappingActors");

	UPrimitiveComponent_GetOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Engine.PrimitiveComponent.GetOverlapInfos
// ()
// Parameters:
// TArray<struct FOverlapInfo>    ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm)

TArray<struct FOverlapInfo> UPrimitiveComponent::GetOverlapInfos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetOverlapInfos");

	UPrimitiveComponent_GetOverlapInfos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetNumMaterials
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimitiveComponent::GetNumMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetNumMaterials");

	UPrimitiveComponent_GetNumMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMoveIgnoreActors
// ()
// Parameters:
// TArray<TWeakObjectPtr<class AActor>> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<TWeakObjectPtr<class AActor>> UPrimitiveComponent::GetMoveIgnoreActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMoveIgnoreActors");

	UPrimitiveComponent_GetMoveIgnoreActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UPrimitiveComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMaterial");

	UPrimitiveComponent_GetMaterial_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetMass
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetMass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMass");

	UPrimitiveComponent_GetMass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetLinearDamping
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetLinearDamping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetLinearDamping");

	UPrimitiveComponent_GetLinearDamping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetCollisionResponseSet
// ()
// Parameters:
// struct FCollisionResponseSet   OutResponses                   (Parm, OutParm)

void UPrimitiveComponent::GetCollisionResponseSet(struct FCollisionResponseSet* OutResponses)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionResponseSet");

	UPrimitiveComponent_GetCollisionResponseSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResponses != nullptr)
		*OutResponses = params.OutResponses;
}


// Function Engine.PrimitiveComponent.GetCollisionProfileName
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UPrimitiveComponent::GetCollisionProfileName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetCollisionProfileName");

	UPrimitiveComponent_GetCollisionProfileName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetAngularDamping
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimitiveComponent::GetAngularDamping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetAngularDamping");

	UPrimitiveComponent_GetAngularDamping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateDynamicMaterialInstance");

	UPrimitiveComponent_CreateDynamicMaterialInstance_Params params;
	params.ElementIndex = ElementIndex;
	params.SourceMaterial = SourceMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial");

	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamicFromMaterial_Params params;
	params.ElementIndex = ElementIndex;
	params.Parent = Parent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
// ()
// Parameters:
// int                            ElementIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UPrimitiveComponent::CreateAndSetMaterialInstanceDynamic(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic");

	UPrimitiveComponent_CreateAndSetMaterialInstanceDynamic_Params params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.ComponentOnReleasedSignature__DelegateSignature
// ()
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentOnReleasedSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentOnReleasedSignature__DelegateSignature");

	UPrimitiveComponent_ComponentOnReleasedSignature__DelegateSignature_Params params;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentOnInputTouchEndSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentOnInputTouchEndSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentOnInputTouchEndSignature__DelegateSignature");

	UPrimitiveComponent_ComponentOnInputTouchEndSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentOnInputTouchBeginSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentOnInputTouchBeginSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentOnInputTouchBeginSignature__DelegateSignature");

	UPrimitiveComponent_ComponentOnInputTouchBeginSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentOnClickedSignature__DelegateSignature
// ()
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentOnClickedSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentOnClickedSignature__DelegateSignature");

	UPrimitiveComponent_ComponentOnClickedSignature__DelegateSignature_Params params;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentHitSignature__DelegateSignature
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimitiveComponent::ComponentHitSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentHitSignature__DelegateSignature");

	UPrimitiveComponent_ComponentHitSignature__DelegateSignature_Params params;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentEndTouchOverSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentEndTouchOverSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentEndTouchOverSignature__DelegateSignature");

	UPrimitiveComponent_ComponentEndTouchOverSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentEndOverlapSignature__DelegateSignature
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::ComponentEndOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentEndOverlapSignature__DelegateSignature");

	UPrimitiveComponent_ComponentEndOverlapSignature__DelegateSignature_Params params;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentEndCursorOverSignature__DelegateSignature
// ()
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentEndCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentEndCursorOverSignature__DelegateSignature");

	UPrimitiveComponent_ComponentEndCursorOverSignature__DelegateSignature_Params params;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentBeginTouchOverSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentBeginTouchOverSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex, class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentBeginTouchOverSignature__DelegateSignature");

	UPrimitiveComponent_ComponentBeginTouchOverSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentBeginOverlapSignature__DelegateSignature
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimitiveComponent::ComponentBeginOverlapSignature__DelegateSignature(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentBeginOverlapSignature__DelegateSignature");

	UPrimitiveComponent_ComponentBeginOverlapSignature__DelegateSignature_Params params;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ComponentBeginCursorOverSignature__DelegateSignature
// ()
// Parameters:
// class UPrimitiveComponent*     TouchedComponent               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimitiveComponent::ComponentBeginCursorOverSignature__DelegateSignature(class UPrimitiveComponent* TouchedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ComponentBeginCursorOverSignature__DelegateSignature");

	UPrimitiveComponent_ComponentBeginCursorOverSignature__DelegateSignature_Params params;
	params.TouchedComponent = TouchedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ClearMoveIgnoreActors
// ()

void UPrimitiveComponent::ClearMoveIgnoreActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClearMoveIgnoreActors");

	UPrimitiveComponent_ClearMoveIgnoreActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddTorque
// ()
// Parameters:
// struct FVector                 Torque                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorque");

	UPrimitiveComponent_AddTorque_Params params;
	params.Torque = Torque;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialImpulse
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

	UPrimitiveComponent_AddRadialImpulse_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialForce
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Strength                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERadialImpulseFalloff> Falloff                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

	UPrimitiveComponent_AddRadialForce_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddImpulseAtLocation
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulseAtLocation");

	UPrimitiveComponent_AddImpulseAtLocation_Params params;
	params.Impulse = Impulse;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

	UPrimitiveComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddForceAtLocation
// ()
// Parameters:
// struct FVector                 Force                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForceAtLocation");

	UPrimitiveComponent_AddForceAtLocation_Params params;
	params.Force = Force;
	params.Location = Location;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddForce
// ()
// Parameters:
// struct FVector                 Force                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

	UPrimitiveComponent_AddForce_Params params;
	params.Force = Force;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.BPEncompassesPoint
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutDistanceToPoint             (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AVolume::BPEncompassesPoint(const struct FVector& Point, float SphereRadius, float* OutDistanceToPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.BPEncompassesPoint");

	AVolume_BPEncompassesPoint_Params params;
	params.Point = Point;
	params.SphereRadius = SphereRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDistanceToPoint != nullptr)
		*OutDistanceToPoint = params.OutDistanceToPoint;

	return params.ReturnValue;
}


// Function Engine.DestructibleActor.SetFadingStaticMesh
// ()
// Parameters:
// class UStaticMesh*             TheMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void ADestructibleActor::SetFadingStaticMesh(class UStaticMesh* TheMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleActor.SetFadingStaticMesh");

	ADestructibleActor_SetFadingStaticMesh_Params params;
	params.TheMesh = TheMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DestructibleActor.SetFadingSkeletalMesh
// ()
// Parameters:
// class USkeletalMesh*           TheMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void ADestructibleActor::SetFadingSkeletalMesh(class USkeletalMesh* TheMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleActor.SetFadingSkeletalMesh");

	ADestructibleActor_SetFadingSkeletalMesh_Params params;
	params.TheMesh = TheMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DestructibleActor.GetFadingMeshComponent
// ()
// Parameters:
// class UMeshComponent*          ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMeshComponent* ADestructibleActor::GetFadingMeshComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleActor.GetFadingMeshComponent");

	ADestructibleActor_GetFadingMeshComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DestructibleActor.ActorFractureSignature__DelegateSignature
// ()
// Parameters:
// struct FVector                 HitPoint                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 HitDirection                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ADestructibleActor::ActorFractureSignature__DelegateSignature(const struct FVector& HitPoint, const struct FVector& HitDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleActor.ActorFractureSignature__DelegateSignature");

	ADestructibleActor_ActorFractureSignature__DelegateSignature_Params params;
	params.HitPoint = HitPoint;
	params.HitDirection = HitDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.ToggleEnabled
// ()

void ALight::ToggleEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.ToggleEnabled");

	ALight_ToggleEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetLightFunctionScale
// ()
// Parameters:
// struct FVector                 NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionScale");

	ALight_SetLightFunctionScale_Params params;
	params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetLightFunctionMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionMaterial");

	ALight_SetLightFunctionMaterial_Params params;
	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetLightFunctionFadeDistance
// ()
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightFunctionFadeDistance");

	ALight_SetLightFunctionFadeDistance_Params params;
	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetLightColor");

	ALight_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetEnabled
// ()
// Parameters:
// bool                           bSetEnabled                    (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetEnabled");

	ALight_SetEnabled_Params params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetCastShadows
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetCastShadows");

	ALight_SetCastShadows_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetBrightness
// ()
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetBrightness");

	ALight_SetBrightness_Params params;
	params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.SetAffectTranslucentLighting
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ALight::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.SetAffectTranslucentLighting");

	ALight_SetAffectTranslucentLighting_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.OnRep_bEnabled
// ()

void ALight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.OnRep_bEnabled");

	ALight_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.IsEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALight::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.IsEnabled");

	ALight_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Light.GetLightColor
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor ALight::GetLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetLightColor");

	ALight_GetLightColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Light.GetBrightness
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ALight::GetBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.GetBrightness");

	ALight_GetBrightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.HandleDamage
// ()
// Parameters:
// class AActor*                  Victim                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UDamageType::HandleDamage(class AActor* Victim, float DamageAmount, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.HandleDamage");

	UDamageType_HandleDamage_Params params;
	params.Victim = Victim;
	params.DamageAmount = DamageAmount;
	params.DamageEvent = DamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Emitter.ToggleActive
// ()

void AEmitter::ToggleActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ToggleActive");

	AEmitter_ToggleActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetVectorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

	AEmitter_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetTemplate
// ()
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

	AEmitter_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetMaterialParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetMaterialParameter");

	AEmitter_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetFloatParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

	AEmitter_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

	AEmitter_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetActorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Param                          (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

	AEmitter_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ParticleSpawnSignature__DelegateSignature
// ()
// Parameters:
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          EmitterTime                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Velocity                       (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::ParticleSpawnSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ParticleSpawnSignature__DelegateSignature");

	AEmitter_ParticleSpawnSignature__DelegateSignature_Params params;
	params.EventName = EventName;
	params.EmitterTime = EmitterTime;
	params.Location = Location;
	params.Velocity = Velocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ParticleDeathSignature__DelegateSignature
// ()
// Parameters:
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          EmitterTime                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ParticleTime                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Velocity                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::ParticleDeathSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ParticleDeathSignature__DelegateSignature");

	AEmitter_ParticleDeathSignature__DelegateSignature_Params params;
	params.EventName = EventName;
	params.EmitterTime = EmitterTime;
	params.ParticleTime = ParticleTime;
	params.Location = Location;
	params.Velocity = Velocity;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ParticleCollisionSignature__DelegateSignature
// ()
// Parameters:
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          EmitterTime                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ParticleTime                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Velocity                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Normal                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::ParticleCollisionSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, int ParticleTime, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& Direction, const struct FVector& Normal, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ParticleCollisionSignature__DelegateSignature");

	AEmitter_ParticleCollisionSignature__DelegateSignature_Params params;
	params.EventName = EventName;
	params.EmitterTime = EmitterTime;
	params.ParticleTime = ParticleTime;
	params.Location = Location;
	params.Velocity = Velocity;
	params.Direction = Direction;
	params.Normal = Normal;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ParticleBurstSignature__DelegateSignature
// ()
// Parameters:
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          EmitterTime                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ParticleCount                  (Parm, ZeroConstructor, IsPlainOldData)

void AEmitter::ParticleBurstSignature__DelegateSignature(const struct FName& EventName, float EmitterTime, int ParticleCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ParticleBurstSignature__DelegateSignature");

	AEmitter_ParticleBurstSignature__DelegateSignature_Params params;
	params.EventName = EventName;
	params.EmitterTime = EmitterTime;
	params.ParticleCount = ParticleCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnRep_bCurrentlyActive
// ()

void AEmitter::OnRep_bCurrentlyActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnRep_bCurrentlyActive");

	AEmitter_OnRep_bCurrentlyActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnParticleSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* FinishedComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

	AEmitter_OnParticleSystemFinished_Params params;
	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.IsActive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AEmitter::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.IsActive");

	AEmitter_IsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Emitter.Deactivate
// ()

void AEmitter::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Deactivate");

	AEmitter_Deactivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.Activate
// ()

void AEmitter::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Activate");

	AEmitter_Activate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnDefaultController
// ()

void APawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

	APawn_SpawnDefaultController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetMovementTether
// ()
// Parameters:
// class AActor*                  InTetherActor                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Height                         (Parm, ZeroConstructor, IsPlainOldData)

void APawn::SetMovementTether(class AActor* InTetherActor, float Radius, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMovementTether");

	APawn_SetMovementTether_Params params;
	params.InTetherActor = InTetherActor;
	params.Radius = Radius;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetCanAffectNavigationGeneration
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void APawn::SetCanAffectNavigationGeneration(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCanAffectNavigationGeneration");

	APawn_SetCanAffectNavigationGeneration_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReceiveUnpossessed
// ()
// Parameters:
// class AController*             OldController                  (Parm, ZeroConstructor, IsPlainOldData)

void APawn::ReceiveUnpossessed(class AController* OldController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceiveUnpossessed");

	APawn_ReceiveUnpossessed_Params params;
	params.OldController = OldController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReceivePossessed
// ()
// Parameters:
// class AController*             NewController                  (Parm, ZeroConstructor, IsPlainOldData)

void APawn::ReceivePossessed(class AController* NewController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceivePossessed");

	APawn_ReceivePossessed_Params params;
	params.NewController = NewController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PawnMakeNoise
// ()
// Parameters:
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NoiseLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseNoiseMakerLocation         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData)

void APawn::PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PawnMakeNoise");

	APawn_PawnMakeNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;
	params.bUseNoiseMakerLocation = bUseNoiseMakerLocation;
	params.NoiseMaker = NoiseMaker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnRep_PlayerState
// ()

void APawn::OnRep_PlayerState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_PlayerState");

	APawn_OnRep_PlayerState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnRep_Controller
// ()

void APawn::OnRep_Controller()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnRep_Controller");

	APawn_OnRep_Controller_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MovementTetherEvent__DelegateSignature
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TetherObject                   (Parm, ZeroConstructor, IsPlainOldData)

void APawn::MovementTetherEvent__DelegateSignature(class APawn* Pawn, class AActor* TetherObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MovementTetherEvent__DelegateSignature");

	APawn_MovementTetherEvent__DelegateSignature_Params params;
	params.Pawn = Pawn;
	params.TetherObject = TetherObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.LaunchPawn
// ()
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void APawn::LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LaunchPawn");

	APawn_LaunchPawn_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.K2_GetMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::K2_GetMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.K2_GetMovementInputVector");

	APawn_K2_GetMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsWithinTether
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsWithinTether()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsWithinTether");

	APawn_IsWithinTether_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsWalking
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsWalking");

	APawn_IsWalking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsTargetWithinTether
// ()
// Parameters:
// struct FVector                 Destination                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          AdditionalRadius               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsTargetWithinTether(const struct FVector& Destination, float AdditionalRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsTargetWithinTether");

	APawn_IsTargetWithinTether_Params params;
	params.Destination = Destination;
	params.AdditionalRadius = AdditionalRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsMovementTethered
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsMovementTethered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsMovementTethered");

	APawn_IsMovementTethered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsMoveInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsMoveInputIgnored");

	APawn_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsLocallyControlled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	APawn_IsLocallyControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsFalling
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsFalling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFalling");

	APawn_IsFalling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsCrouched
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsCrouched()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsCrouched");

	APawn_IsCrouched_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsControlled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APawn::IsControlled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsControlled");

	APawn_IsControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InterceptInputEvent
// ()
// Parameters:
// class FString                  InputName                      (Parm, ZeroConstructor)

void APawn::InterceptInputEvent(const class FString& InputName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InterceptInputEvent");

	APawn_InterceptInputEvent_Params params;
	params.InputName = InputName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetTetherObject
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APawn::GetTetherObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTetherObject");

	APawn_GetTetherObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTetheredVelocity
// ()
// Parameters:
// struct FVector                 RequestedVelocity              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetTetheredVelocity(const struct FVector& RequestedVelocity, float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTetheredVelocity");

	APawn_GetTetheredVelocity_Params params;
	params.RequestedVelocity = RequestedVelocity;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTetheredDestination
// ()
// Parameters:
// struct FVector                 Destination                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          AdditionalRadius               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetTetheredDestination(const struct FVector& Destination, float AdditionalRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTetheredDestination");

	APawn_GetTetheredDestination_Params params;
	params.Destination = Destination;
	params.AdditionalRadius = AdditionalRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetPendingMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetPendingMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPendingMovementInputVector");

	APawn_GetPendingMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetNavAgentLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetNavAgentLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetNavAgentLocation");

	APawn_GetNavAgentLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementComponent
// ()
// Parameters:
// class UPawnMovementComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPawnMovementComponent* APawn::GetMovementComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementComponent");

	APawn_GetMovementComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetMovementBaseActor
// ()
// Parameters:
// class APawn*                   Pawn                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APawn::GetMovementBaseActor(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMovementBaseActor");

	APawn_GetMovementBaseActor_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetLastMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::GetLastMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetLastMovementInputVector");

	APawn_GetLastMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetControlRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APawn::GetControlRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetControlRotation");

	APawn_GetControlRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetController
// ()
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AController* APawn::GetController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetController");

	APawn_GetController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBaseAimRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APawn::GetBaseAimRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

	APawn_GetBaseAimRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DetachFromControllerPendingDestroy
// ()

void APawn::DetachFromControllerPendingDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromControllerPendingDestroy");

	APawn_DetachFromControllerPendingDestroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ConsumeMovementInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APawn::ConsumeMovementInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ConsumeMovementInputVector");

	APawn_ConsumeMovementInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ClearMovementTether
// ()

void APawn::ClearMovementTether()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearMovementTether");

	APawn_ClearMovementTether_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddMovementInput
// ()
// Parameters:
// struct FVector                 WorldDirection                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleValue                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddMovementInput");

	APawn_AddMovementInput_Params params;
	params.WorldDirection = WorldDirection;
	params.ScaleValue = ScaleValue;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddControllerYawInput
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerYawInput(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerYawInput");

	APawn_AddControllerYawInput_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddControllerRollInput
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerRollInput(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerRollInput");

	APawn_AddControllerRollInput_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddControllerPitchInput
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APawn::AddControllerPitchInput(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddControllerPitchInput");

	APawn_AddControllerPitchInput_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.UnProne
// ()
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::UnProne(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.UnProne");

	ACharacter_UnProne_Params params;
	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.UnCrouch
// ()
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::UnCrouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.UnCrouch");

	ACharacter_UnCrouch_Params params;
	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.StopJumping
// ()

void ACharacter::StopJumping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopJumping");

	ACharacter_StopJumping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.StopAnimMontage
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::StopAnimMontage(class UAnimMontage* AnimMontage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.StopAnimMontage");

	ACharacter_StopAnimMontage_Params params;
	params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.ShouldForceDedicatedMovementTickEveryFrame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::ShouldForceDedicatedMovementTickEveryFrame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ShouldForceDedicatedMovementTickEveryFrame");

	ACharacter_ShouldForceDedicatedMovementTickEveryFrame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.ReplicateMovementToSimulatedClients
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::ReplicateMovementToSimulatedClients()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ReplicateMovementToSimulatedClients");

	ACharacter_ReplicateMovementToSimulatedClients_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.Prone
// ()
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::Prone(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Prone");

	ACharacter_Prone_Params params;
	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.PlayAnimMontage
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartSectionName               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseOnServer         (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACharacter::PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, float BlendInTime, float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.PlayAnimMontage");

	ACharacter_PlayAnimMontage_Params params;
	params.AnimMontage = AnimMontage;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.bForceTickPoseOnServer = bForceTickPoseOnServer;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.OverrideTerminalVelocity
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACharacter::OverrideTerminalVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OverrideTerminalVelocity");

	ACharacter_OverrideTerminalVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.OnWalkingOffLedge
// ()

void ACharacter::OnWalkingOffLedge()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnWalkingOffLedge");

	ACharacter_OnWalkingOffLedge_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.OnRep_RootMotion
// ()

void ACharacter::OnRep_RootMotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_RootMotion");

	ACharacter_OnRep_RootMotion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.OnRep_ReplicatedBasedMovement
// ()

void ACharacter::OnRep_ReplicatedBasedMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_ReplicatedBasedMovement");

	ACharacter_OnRep_ReplicatedBasedMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.OnRep_IsProne
// ()

void ACharacter::OnRep_IsProne()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_IsProne");

	ACharacter_OnRep_IsProne_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.OnRep_IsCrouched
// ()

void ACharacter::OnRep_IsCrouched()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnRep_IsCrouched");

	ACharacter_OnRep_IsCrouched_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.OnLaunched
// ()
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLaunched");

	ACharacter_OnLaunched_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.OnLanded
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void ACharacter::OnLanded(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnLanded");

	ACharacter_OnLanded_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.OnJumped
// ()

void ACharacter::OnJumped()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.OnJumped");

	ACharacter_OnJumped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.NetTeleportSucceeded
// ()
// Parameters:
// struct FVector                 ToLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ToRot                          (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::NetTeleportSucceeded(const struct FVector& ToLoc, const struct FRotator& ToRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.NetTeleportSucceeded");

	ACharacter_NetTeleportSucceeded_Params params;
	params.ToLoc = ToLoc;
	params.ToRot = ToRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.MovementModeChangedSignature__DelegateSignature
// ()
// Parameters:
// class ACharacter*              Character                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     PrevMovementMode               (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  PreviousCustomMode             (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::MovementModeChangedSignature__DelegateSignature(class ACharacter* Character, TEnumAsByte<EMovementMode> PrevMovementMode, unsigned char PreviousCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.MovementModeChangedSignature__DelegateSignature");

	ACharacter_MovementModeChangedSignature__DelegateSignature_Params params;
	params.Character = Character;
	params.PrevMovementMode = PrevMovementMode;
	params.PreviousCustomMode = PreviousCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.LaunchCharacter
// ()
// Parameters:
// struct FVector                 LaunchVelocity                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bXYOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bZOverride                     (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.LaunchCharacter");

	ACharacter_LaunchCharacter_Params params;
	params.LaunchVelocity = LaunchVelocity;
	params.bXYOverride = bXYOverride;
	params.bZOverride = bZOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.K2_UpdateCustomMovement
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_UpdateCustomMovement(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_UpdateCustomMovement");

	ACharacter_K2_UpdateCustomMovement_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.K2_OnStartCrouch
// ()
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnStartCrouch");

	ACharacter_K2_OnStartCrouch_Params params;
	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.K2_OnMovementModeChanged
// ()
// Parameters:
// TEnumAsByte<EMovementMode>     PrevMovementMode               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  PrevCustomMode                 (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnMovementModeChanged");

	ACharacter_K2_OnMovementModeChanged_Params params;
	params.PrevMovementMode = PrevMovementMode;
	params.NewMovementMode = NewMovementMode;
	params.PrevCustomMode = PrevCustomMode;
	params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.K2_OnEndCrouch
// ()
// Parameters:
// float                          HalfHeightAdjust               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaledHalfHeightAdjust         (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.K2_OnEndCrouch");

	ACharacter_K2_OnEndCrouch_Params params;
	params.HalfHeightAdjust = HalfHeightAdjust;
	params.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.Jump
// ()

void ACharacter::Jump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Jump");

	ACharacter_Jump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.IsRagdolled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsRagdolled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsRagdolled");

	ACharacter_IsRagdolled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.IsPlayingRootMotion
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsPlayingRootMotion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsPlayingRootMotion");

	ACharacter_IsPlayingRootMotion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.IsJumpProvidingForce
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::IsJumpProvidingForce()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.IsJumpProvidingForce");

	ACharacter_IsJumpProvidingForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.GetLastMovementDesiredRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator ACharacter::GetLastMovementDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetLastMovementDesiredRotation");

	ACharacter_GetLastMovementDesiredRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.GetCurrentMontage
// ()
// Parameters:
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* ACharacter::GetCurrentMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.GetCurrentMontage");

	ACharacter_GetCurrentMontage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.Crouch
// ()
// Parameters:
// bool                           bClientSimulation              (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::Crouch(bool bClientSimulation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.Crouch");

	ACharacter_Crouch_Params params;
	params.bClientSimulation = bClientSimulation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.ClientCheatWalk
// ()

void ACharacter::ClientCheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatWalk");

	ACharacter_ClientCheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.ClientCheatGhost
// ()

void ACharacter::ClientCheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatGhost");

	ACharacter_ClientCheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.ClientCheatFly
// ()

void ACharacter::ClientCheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.ClientCheatFly");

	ACharacter_ClientCheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.CharacterMovementUpdatedSignature__DelegateSignature
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OldLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OldVelocity                    (Parm, ZeroConstructor, IsPlainOldData)

void ACharacter::CharacterMovementUpdatedSignature__DelegateSignature(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CharacterMovementUpdatedSignature__DelegateSignature");

	ACharacter_CharacterMovementUpdatedSignature__DelegateSignature_Params params;
	params.DeltaSeconds = DeltaSeconds;
	params.OldLocation = OldLocation;
	params.OldVelocity = OldVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Character.CanJumpInternal
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::CanJumpInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJumpInternal");

	ACharacter_CanJumpInternal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.CanJump
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::CanJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.CanJump");

	ACharacter_CanJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.BPOverrideCharacterSound
// ()
// Parameters:
// class USoundBase*              SoundIn                        (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USoundBase* ACharacter::BPOverrideCharacterSound(class USoundBase* SoundIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.BPOverrideCharacterSound");

	ACharacter_BPOverrideCharacterSound_Params params;
	params.SoundIn = SoundIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.BPOverrideCharacterParticle
// ()
// Parameters:
// class UParticleSystem*         ParticleIn                     (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystem*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UParticleSystem* ACharacter::BPOverrideCharacterParticle(class UParticleSystem* ParticleIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.BPOverrideCharacterParticle");

	ACharacter_BPOverrideCharacterParticle_Params params;
	params.ParticleIn = ParticleIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.BPModifyRootMotionDeltaRotation
// ()
// Parameters:
// struct FRotator                Delta                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator ACharacter::BPModifyRootMotionDeltaRotation(const struct FRotator& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.BPModifyRootMotionDeltaRotation");

	ACharacter_BPModifyRootMotionDeltaRotation_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.BPAcknowledgeServerCorrection
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::BPAcknowledgeServerCorrection(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.BPAcknowledgeServerCorrection");

	ACharacter_BPAcknowledgeServerCorrection_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLoc = NewLoc;
	params.NewVel = NewVel;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Character.BP_PreventMovementMode
// ()
// Parameters:
// TEnumAsByte<EMovementMode>     NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACharacter::BP_PreventMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Character.BP_PreventMovementMode");

	ACharacter_BP_PreventMovementMode_Params params;
	params.NewMovementMode = NewMovementMode;
	params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldSettings.PooledParticleSystemFinished
// ()
// Parameters:
// class UParticleSystemComponent* FinishedComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AWorldSettings::PooledParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldSettings.PooledParticleSystemFinished");

	AWorldSettings_PooledParticleSystemFinished_Params params;
	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.StopMovementImmediately
// ()

void UMovementComponent::StopMovementImmediately()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.StopMovementImmediately");

	UMovementComponent_StopMovementImmediately_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.SnapUpdatedComponentToPlane
// ()

void UMovementComponent::SnapUpdatedComponentToPlane()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SnapUpdatedComponentToPlane");

	UMovementComponent_SnapUpdatedComponentToPlane_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.ShouldForceDedicatedTickEveryFrame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMovementComponent::ShouldForceDedicatedTickEveryFrame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ShouldForceDedicatedTickEveryFrame");

	UMovementComponent_ShouldForceDedicatedTickEveryFrame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.SetUpdatedComponent
// ()
// Parameters:
// class UPrimitiveComponent*     NewUpdatedComponent            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMovementComponent::SetUpdatedComponent(class UPrimitiveComponent* NewUpdatedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetUpdatedComponent");

	UMovementComponent_SetUpdatedComponent_Params params;
	params.NewUpdatedComponent = NewUpdatedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.SetPlaneConstraintOrigin
// ()
// Parameters:
// struct FVector                 PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintOrigin");

	UMovementComponent_SetPlaneConstraintOrigin_Params params;
	params.PlaneOrigin = PlaneOrigin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.SetPlaneConstraintNormal
// ()
// Parameters:
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintNormal(const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintNormal");

	UMovementComponent_SetPlaneConstraintNormal_Params params;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.SetPlaneConstraintFromVectors
// ()
// Parameters:
// struct FVector                 Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Up                             (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.SetPlaneConstraintFromVectors");

	UMovementComponent_SetPlaneConstraintFromVectors_Params params;
	params.Forward = Forward;
	params.Up = Up;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.PhysicsVolumeChanged
// ()
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm, ZeroConstructor, IsPlainOldData)

void UMovementComponent::PhysicsVolumeChanged(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.PhysicsVolumeChanged");

	UMovementComponent_PhysicsVolumeChanged_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MovementComponent.K2_MoveUpdatedComponent
// ()
// Parameters:
// struct FVector                 Delta                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMovementComponent::K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_MoveUpdatedComponent");

	UMovementComponent_K2_MoveUpdatedComponent_Params params;
	params.Delta = Delta;
	params.NewRotation = NewRotation;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetModifiedMaxSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::K2_GetModifiedMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetModifiedMaxSpeed");

	UMovementComponent_K2_GetModifiedMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.K2_GetMaxSpeedModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::K2_GetMaxSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.K2_GetMaxSpeedModifier");

	UMovementComponent_K2_GetMaxSpeedModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.IsExceedingMaxSpeed
// ()
// Parameters:
// float                          MaxSpeed                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMovementComponent::IsExceedingMaxSpeed(float MaxSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.IsExceedingMaxSpeed");

	UMovementComponent_IsExceedingMaxSpeed_Params params;
	params.MaxSpeed = MaxSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintOrigin
// ()
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector UMovementComponent::GetPlaneConstraintOrigin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintOrigin");

	UMovementComponent_GetPlaneConstraintOrigin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPlaneConstraintNormal
// ()
// Parameters:
// struct FVector                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData)

struct FVector UMovementComponent::GetPlaneConstraintNormal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPlaneConstraintNormal");

	UMovementComponent_GetPlaneConstraintNormal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetPhysicsVolume
// ()
// Parameters:
// class APhysicsVolume*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APhysicsVolume* UMovementComponent::GetPhysicsVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetPhysicsVolume");

	UMovementComponent_GetPhysicsVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetMaxSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::GetMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetMaxSpeed");

	UMovementComponent_GetMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.GetGravityZ
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMovementComponent::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.GetGravityZ");

	UMovementComponent_GetGravityZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainLocationToPlane
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UMovementComponent::ConstrainLocationToPlane(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainLocationToPlane");

	UMovementComponent_ConstrainLocationToPlane_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MovementComponent.ConstrainDirectionToPlane
// ()
// Parameters:
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UMovementComponent::ConstrainDirectionToPlane(const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MovementComponent.ConstrainDirectionToPlane");

	UMovementComponent_ConstrainDirectionToPlane_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.StopMovementKeepPathing
// ()

void UNavMovementComponent::StopMovementKeepPathing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopMovementKeepPathing");

	UNavMovementComponent_StopMovementKeepPathing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMovementComponent.StopActiveMovement
// ()

void UNavMovementComponent::StopActiveMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.StopActiveMovement");

	UNavMovementComponent_StopActiveMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMovementComponent.IsSwimming
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsSwimming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsSwimming");

	UNavMovementComponent_IsSwimming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsMovingOnGround
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsMovingOnGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsMovingOnGround");

	UNavMovementComponent_IsMovingOnGround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFlying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsFlying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFlying");

	UNavMovementComponent_IsFlying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsFalling
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsFalling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsFalling");

	UNavMovementComponent_IsFalling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMovementComponent.IsCrouching
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavMovementComponent::IsCrouching()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMovementComponent.IsCrouching");

	UNavMovementComponent_IsCrouching_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.K2_GetInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::K2_GetInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.K2_GetInputVector");

	UPawnMovementComponent_K2_GetInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.IsMoveInputIgnored
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPawnMovementComponent::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.IsMoveInputIgnored");

	UPawnMovementComponent_IsMoveInputIgnored_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPendingInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::GetPendingInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPendingInputVector");

	UPawnMovementComponent_GetPendingInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetPawnOwner
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* UPawnMovementComponent::GetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetPawnOwner");

	UPawnMovementComponent_GetPawnOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.GetLastInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::GetLastInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.GetLastInputVector");

	UPawnMovementComponent_GetLastInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.ConsumeInputVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPawnMovementComponent::ConsumeInputVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.ConsumeInputVector");

	UPawnMovementComponent_ConsumeInputVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PawnMovementComponent.AddInputVector
// ()
// Parameters:
// struct FVector                 WorldVector                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void UPawnMovementComponent::AddInputVector(const struct FVector& WorldVector, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnMovementComponent.AddInputVector");

	UPawnMovementComponent_AddInputVector_Params params;
	params.WorldVector = WorldVector;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetWalkableFloorZ
// ()
// Parameters:
// float                          InWalkableFloorZ               (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetWalkableFloorZ(float InWalkableFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorZ");

	UCharacterMovementComponent_SetWalkableFloorZ_Params params;
	params.InWalkableFloorZ = InWalkableFloorZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetWalkableFloorAngle
// ()
// Parameters:
// float                          InWalkableFloorAngle           (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetWalkableFloorAngle(float InWalkableFloorAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetWalkableFloorAngle");

	UCharacterMovementComponent_SetWalkableFloorAngle_Params params;
	params.InWalkableFloorAngle = InWalkableFloorAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetMovementMode
// ()
// Parameters:
// TEnumAsByte<EMovementMode>     NewMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetMovementMode");

	UCharacterMovementComponent_SetMovementMode_Params params;
	params.NewMovementMode = NewMovementMode;
	params.NewCustomMode = NewCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetGroupsToIgnore
// ()
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetGroupsToIgnore(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToIgnore");

	UCharacterMovementComponent_SetGroupsToIgnore_Params params;
	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetGroupsToAvoid
// ()
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetGroupsToAvoid(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetGroupsToAvoid");

	UCharacterMovementComponent_SetGroupsToAvoid_Params params;
	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetBase
// ()
// Parameters:
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNotifyActor                   (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetBase(class UPrimitiveComponent* NewBase, const struct FName& BoneName, bool bNotifyActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetBase");

	UCharacterMovementComponent_SetBase_Params params;
	params.NewBase = NewBase;
	params.BoneName = BoneName;
	params.bNotifyActor = bNotifyActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetAvoidanceGroup
// ()
// Parameters:
// int                            GroupFlags                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetAvoidanceGroup(int GroupFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceGroup");

	UCharacterMovementComponent_SetAvoidanceGroup_Params params;
	params.GroupFlags = GroupFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.SetAvoidanceEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::SetAvoidanceEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.SetAvoidanceEnabled");

	UCharacterMovementComponent_SetAvoidanceEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMoveWithRotation
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  InAccel                        (Parm)
// struct FVector_NetQuantize100  ClientLoc                      (Parm)
// unsigned char                  CompressedMoveFlags            (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ClientRotation                 (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveWithRotation(float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, const struct FRotator& ClientRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMoveWithRotation");

	UCharacterMovementComponent_ServerMoveWithRotation_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.CompressedMoveFlags = CompressedMoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;
	params.ClientRotation = ClientRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMoveOnlyRotation
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveOnlyRotation(float TimeStamp, unsigned char ClientRoll, uint32_t View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMoveOnlyRotation");

	UCharacterMovementComponent_ServerMoveOnlyRotation_Params params;
	params.TimeStamp = TimeStamp;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMoveOldWithRotation
// ()
// Parameters:
// float                          OldTimeStamp                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  OldAccel                       (Parm)
// unsigned char                  OldMoveFlags                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OldRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveOldWithRotation(float OldTimeStamp, const struct FVector_NetQuantize100& OldAccel, unsigned char OldMoveFlags, const struct FRotator& OldRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMoveOldWithRotation");

	UCharacterMovementComponent_ServerMoveOldWithRotation_Params params;
	params.OldTimeStamp = OldTimeStamp;
	params.OldAccel = OldAccel;
	params.OldMoveFlags = OldMoveFlags;
	params.OldRotation = OldRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMoveOld
// ()
// Parameters:
// float                          OldTimeStamp                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  OldAccel                       (Parm)
// unsigned char                  OldMoveFlags                   (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize100& OldAccel, unsigned char OldMoveFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMoveOld");

	UCharacterMovementComponent_ServerMoveOld_Params params;
	params.OldTimeStamp = OldTimeStamp;
	params.OldAccel = OldAccel;
	params.OldMoveFlags = OldMoveFlags;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMoveDualWithRotation
// ()
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  InAccel                        (Parm)
// struct FVector_NetQuantize100  ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation0                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveDualWithRotation(float TimeStamp0, const struct FVector_NetQuantize100& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode, const struct FRotator& InRotation0, const struct FRotator& InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMoveDualWithRotation");

	UCharacterMovementComponent_ServerMoveDualWithRotation_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;
	params.InRotation0 = InRotation0;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMoveDualOnlyRotation
// ()
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveDualOnlyRotation(float TimeStamp0, uint32_t View0, float TimeStamp, unsigned char ClientRoll, uint32_t View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMoveDualOnlyRotation");

	UCharacterMovementComponent_ServerMoveDualOnlyRotation_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMoveDual
// ()
// Parameters:
// float                          TimeStamp0                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  InAccel0                       (Parm)
// unsigned char                  PendingFlags                   (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View0                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  InAccel                        (Parm)
// struct FVector_NetQuantize100  ClientLoc                      (Parm)
// unsigned char                  NewFlags                       (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize100& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMoveDual");

	UCharacterMovementComponent_ServerMoveDual_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingFlags = PendingFlags;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewFlags = NewFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerMove
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  InAccel                        (Parm)
// struct FVector_NetQuantize100  ClientLoc                      (Parm)
// unsigned char                  CompressedMoveFlags            (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientRoll                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       View                           (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ClientMovementBase             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ClientBaseBoneName             (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ClientMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerMove(float TimeStamp, const struct FVector_NetQuantize100& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerMove");

	UCharacterMovementComponent_ServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.CompressedMoveFlags = CompressedMoveFlags;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.ClientMovementBase = ClientMovementBase;
	params.ClientBaseBoneName = ClientBaseBoneName;
	params.ClientMovementMode = ClientMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ServerJumpOutOfWater
// ()
// Parameters:
// struct FVector_NetQuantize100  WallNormal                     (Parm)
// unsigned char                  JumpFlag                       (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ServerJumpOutOfWater(const struct FVector_NetQuantize100& WallNormal, unsigned char JumpFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ServerJumpOutOfWater");

	UCharacterMovementComponent_ServerJumpOutOfWater_Params params;
	params.WallNormal = WallNormal;
	params.JumpFlag = JumpFlag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.RequestDirectMove
// ()
// Parameters:
// struct FVector                 MoveVelocity                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bForceMaxSpeed                 (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::RequestDirectMove(const struct FVector& MoveVelocity, bool bForceMaxSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.RequestDirectMove");

	UCharacterMovementComponent_RequestDirectMove_Params params;
	params.MoveVelocity = MoveVelocity;
	params.bForceMaxSpeed = bForceMaxSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.NewFallVelocity
// ()
// Parameters:
// struct FVector                 InitialVelocity                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Gravity                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCharacterMovementComponent::NewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.NewFallVelocity");

	UCharacterMovementComponent_NewFallVelocity_Params params;
	params.InitialVelocity = InitialVelocity;
	params.Gravity = Gravity;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetWalkableFloorZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorZ");

	UCharacterMovementComponent_K2_GetWalkableFloorZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetWalkableFloorAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle");

	UCharacterMovementComponent_K2_GetWalkableFloorAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::K2_GetModifiedMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration");

	UCharacterMovementComponent_K2_GetModifiedMaxAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsWalking
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCharacterMovementComponent::IsWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalking");

	UCharacterMovementComponent_IsWalking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsWalkable
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCharacterMovementComponent::IsWalkable(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsWalkable");

	UCharacterMovementComponent_IsWalkable_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.IsOnWalkableFloor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCharacterMovementComponent::IsOnWalkableFloor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.IsOnWalkableFloor");

	UCharacterMovementComponent_IsOnWalkableFloor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetValidPerchRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetValidPerchRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetValidPerchRadius");

	UCharacterMovementComponent_GetValidPerchRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetPerchRadiusThreshold()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetPerchRadiusThreshold");

	UCharacterMovementComponent_GetPerchRadiusThreshold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMovementBase
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* UCharacterMovementComponent::GetMovementBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMovementBase");

	UCharacterMovementComponent_GetMovementBase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxJumpHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetMaxJumpHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxJumpHeight");

	UCharacterMovementComponent_GetMaxJumpHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetMaxAcceleration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetMaxAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetMaxAcceleration");

	UCharacterMovementComponent_GetMaxAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCharacterMovementComponent::GetImpartedMovementBaseVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity");

	UCharacterMovementComponent_GetImpartedMovementBaseVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCurrentAcceleration
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCharacterMovementComponent::GetCurrentAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCurrentAcceleration");

	UCharacterMovementComponent_GetCurrentAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetCharacterOwner
// ()
// Parameters:
// class ACharacter*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACharacter* UCharacterMovementComponent::GetCharacterOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetCharacterOwner");

	UCharacterMovementComponent_GetCharacterOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.GetAnalogInputModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCharacterMovementComponent::GetAnalogInputModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.GetAnalogInputModifier");

	UCharacterMovementComponent_GetAnalogInputModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CharacterMovementComponent.DisableMovement
// ()

void UCharacterMovementComponent::DisableMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.DisableMovement");

	UCharacterMovementComponent_DisableMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ClientVeryShortAdjustPosition
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClientVeryShortAdjustPosition");

	UCharacterMovementComponent_ClientVeryShortAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLoc = NewLoc;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ClientDrawDebugSphere
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  SphereColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientDrawDebugSphere(const struct FVector& Location, float Radius, const struct FColor& SphereColor, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClientDrawDebugSphere");

	UCharacterMovementComponent_ClientDrawDebugSphere_Params params;
	params.Location = Location;
	params.Radius = Radius;
	params.SphereColor = SphereColor;
	params.LifeSpan = LifeSpan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ClientAdjustRootMotionPosition
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ServerMontageTrackPosition     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ServerLoc                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ServerRotation                 (Parm)
// float                          ServerVelZ                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     ServerBase                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   ServerBoneName                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClientAdjustRootMotionPosition");

	UCharacterMovementComponent_ClientAdjustRootMotionPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.ServerMontageTrackPosition = ServerMontageTrackPosition;
	params.ServerLoc = ServerLoc;
	params.ServerRotation = ServerRotation;
	params.ServerVelZ = ServerVelZ;
	params.ServerBase = ServerBase;
	params.ServerBoneName = ServerBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ClientAdjustPosition
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewVel                         (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     NewBase                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   NewBaseBoneName                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHasBase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBaseRelativePosition          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ServerMovementMode             (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClientAdjustPosition");

	UCharacterMovementComponent_ClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLoc = NewLoc;
	params.NewVel = NewVel;
	params.NewBase = NewBase;
	params.NewBaseBoneName = NewBaseBoneName;
	params.bHasBase = bHasBase;
	params.bBaseRelativePosition = bBaseRelativePosition;
	params.ServerMovementMode = ServerMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ClientAckGoodMove
// ()
// Parameters:
// float                          TimeStamp                      (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClientAckGoodMove(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClientAckGoodMove");

	UCharacterMovementComponent_ClientAckGoodMove_Params params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.ClearBase
// ()
// Parameters:
// bool                           bNotifyActor                   (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::ClearBase(bool bNotifyActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.ClearBase");

	UCharacterMovementComponent_ClearBase_Params params;
	params.bNotifyActor = bNotifyActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.CapsuleTouched
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void UCharacterMovementComponent::CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CapsuleTouched");

	UCharacterMovementComponent_CapsuleTouched_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.CalcVelocity
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Friction                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFluid                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          BrakingDeceleration            (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.CalcVelocity");

	UCharacterMovementComponent_CalcVelocity_Params params;
	params.DeltaTime = DeltaTime;
	params.Friction = Friction;
	params.bFluid = bFluid;
	params.BrakingDeceleration = BrakingDeceleration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.AddImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelocityChange                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MassScaleImpulseExponent       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideMaxImpulseZ           (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::AddImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddImpulse");

	UCharacterMovementComponent_AddImpulse_Params params;
	params.Impulse = Impulse;
	params.bVelocityChange = bVelocityChange;
	params.MassScaleImpulseExponent = MassScaleImpulseExponent;
	params.bOverrideMaxImpulseZ = bOverrideMaxImpulseZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CharacterMovementComponent.AddForce
// ()
// Parameters:
// struct FVector                 Force                          (Parm, ZeroConstructor, IsPlainOldData)

void UCharacterMovementComponent::AddForce(const struct FVector& Force)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CharacterMovementComponent.AddForce");

	UCharacterMovementComponent_AddForce_Params params;
	params.Force = Force;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.WidgetReflector
// ()

void UCheatManager::WidgetReflector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WidgetReflector");

	UCheatManager_WidgetReflector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Walk
// ()

void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	UCheatManager_Walk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewSelf
// ()

void UCheatManager::ViewSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	UCheatManager_ViewSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewPlayer
// ()
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)

void UCheatManager::ViewPlayer(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	UCheatManager_ViewPlayer_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewClass
// ()
// Parameters:
// class UClass*                  DesiredClass                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ViewClass(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	UCheatManager_ViewClass_Params params;
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewActor
// ()
// Parameters:
// struct FName                   ActorName                      (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ViewActor(const struct FName& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	UCheatManager_ViewActor_Params params;
	params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ToggleDebugCamera
// ()

void UCheatManager::ToggleDebugCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleDebugCamera");

	UCheatManager_ToggleDebugCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ToggleAILogging
// ()

void UCheatManager::ToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleAILogging");

	UCheatManager_ToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestCollisionDistance
// ()

void UCheatManager::TestCollisionDistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestCollisionDistance");

	UCheatManager_TestCollisionDistance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Teleport
// ()

void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	UCheatManager_Teleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Summon
// ()
// Parameters:
// class FString                  ClassName                      (Parm, ZeroConstructor)

void UCheatManager::Summon(const class FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	UCheatManager_Summon_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelOut
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::StreamLevelOut(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

	UCheatManager_StreamLevelOut_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelIn
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::StreamLevelIn(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

	UCheatManager_StreamLevelIn_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Slomo
// ()
// Parameters:
// float                          T                              (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::Slomo(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Slomo");

	UCheatManager_Slomo_Params params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetWorldOrigin
// ()

void UCheatManager::SetWorldOrigin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetWorldOrigin");

	UCheatManager_SetWorldOrigin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetNavDrawDistance
// ()
// Parameters:
// float                          DrawDistance                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::SetNavDrawDistance(float DrawDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetNavDrawDistance");

	UCheatManager_SetNavDrawDistance_Params params;
	params.DrawDistance = DrawDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ServerToggleAILogging
// ()

void UCheatManager::ServerToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ServerToggleAILogging");

	UCheatManager_ServerToggleAILogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.RebuildNavigation
// ()

void UCheatManager::RebuildNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.RebuildNavigation");

	UCheatManager_RebuildNavigation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PlayersOnly
// ()

void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	UCheatManager_PlayersOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnlyLoadLevel
// ()
// Parameters:
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

	UCheatManager_OnlyLoadLevel_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.LogLoc
// ()

void UCheatManager::LogLoc()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogLoc");

	UCheatManager_LogLoc_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.God
// ()

void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	UCheatManager_God_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Ghost
// ()

void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	UCheatManager_Ghost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FreezeFrame
// ()
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::FreezeFrame(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	UCheatManager_FreezeFrame_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Fly
// ()

void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	UCheatManager_Fly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FlushLog
// ()

void UCheatManager::FlushLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FlushLog");

	UCheatManager_FlushLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DumpVoiceMutingState
// ()

void UCheatManager::DumpVoiceMutingState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpVoiceMutingState");

	UCheatManager_DumpVoiceMutingState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DumpOnlineSessionState
// ()

void UCheatManager::DumpOnlineSessionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpOnlineSessionState");

	UCheatManager_DumpOnlineSessionState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DestroyTarget
// ()

void UCheatManager::DestroyTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyTarget");

	UCheatManager_DestroyTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DestroyPawns
// ()
// Parameters:
// class UClass*                  aClass                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DestroyPawns(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyPawns");

	UCheatManager_DestroyPawns_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DestroyAll
// ()
// Parameters:
// class UClass*                  aClass                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DestroyAll(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyAll");

	UCheatManager_DestroyAll_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugCapsuleSweepSize
// ()
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepSize(float HalfHeight, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepSize");

	UCheatManager_DebugCapsuleSweepSize_Params params;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugCapsuleSweepPawn
// ()

void UCheatManager::DebugCapsuleSweepPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepPawn");

	UCheatManager_DebugCapsuleSweepPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugCapsuleSweepComplex
// ()
// Parameters:
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepComplex(bool bTraceComplex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepComplex");

	UCheatManager_DebugCapsuleSweepComplex_Params params;
	params.bTraceComplex = bTraceComplex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugCapsuleSweepClear
// ()

void UCheatManager::DebugCapsuleSweepClear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepClear");

	UCheatManager_DebugCapsuleSweepClear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugCapsuleSweepChannel
// ()
// Parameters:
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepChannel");

	UCheatManager_DebugCapsuleSweepChannel_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugCapsuleSweepCapture
// ()

void UCheatManager::DebugCapsuleSweepCapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweepCapture");

	UCheatManager_DebugCapsuleSweepCapture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugCapsuleSweep
// ()

void UCheatManager::DebugCapsuleSweep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugCapsuleSweep");

	UCheatManager_DebugCapsuleSweep_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DamageTarget
// ()
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::DamageTarget(float DamageAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DamageTarget");

	UCheatManager_DamageTarget_Params params;
	params.DamageAmount = DamageAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ChangeSize
// ()
// Parameters:
// float                          F                              (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::ChangeSize(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	UCheatManager_ChangeSize_Params params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.BugItStringCreator
// ()
// Parameters:
// struct FVector                 ViewLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ViewRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  GoString                       (Parm, OutParm, ZeroConstructor)
// class FString                  LocString                      (Parm, OutParm, ZeroConstructor)

void UCheatManager::BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, class FString* GoString, class FString* LocString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItStringCreator");

	UCheatManager_BugItStringCreator_Params params;
	params.ViewLocation = ViewLocation;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GoString != nullptr)
		*GoString = params.GoString;
	if (LocString != nullptr)
		*LocString = params.LocString;
}


// Function Engine.CheatManager.BugItGo
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)

void UCheatManager::BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugItGo");

	UCheatManager_BugItGo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.BugIt
// ()
// Parameters:
// class FString                  ScreenShotDescription          (Parm, ZeroConstructor)

void UCheatManager::BugIt(const class FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.BugIt");

	UCheatManager_BugIt_Params params;
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameMode.ShouldSpawnAtStartSpot
// ()
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameMode::ShouldSpawnAtStartSpot(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ShouldSpawnAtStartSpot");

	AGameMode_ShouldSpawnAtStartSpot_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameMode.SetBandwidthLimit
// ()
// Parameters:
// float                          AsyncIOBandwidthLimit          (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::SetBandwidthLimit(float AsyncIOBandwidthLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.SetBandwidthLimit");

	AGameMode_SetBandwidthLimit_Params params;
	params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameMode.K2_PostLogin
// ()
// Parameters:
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void AGameMode::K2_PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.K2_PostLogin");

	AGameMode_K2_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameMode.GetDefaultPawnClassForController
// ()
// Parameters:
// class AController*             InController                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* AGameMode::GetDefaultPawnClassForController(class AController* InController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.GetDefaultPawnClassForController");

	AGameMode_GetDefaultPawnClassForController_Params params;
	params.InController = InController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameMode.ChoosePlayerStart
// ()
// Parameters:
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AGameMode::ChoosePlayerStart(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMode.ChoosePlayerStart");

	AGameMode_ChoosePlayerStart_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInstance.DebugRemovePlayer
// ()
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameInstance::DebugRemovePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugRemovePlayer");

	UGameInstance_DebugRemovePlayer_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInstance.DebugCreatePlayer
// ()
// Parameters:
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameInstance::DebugCreatePlayer(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.DebugCreatePlayer");

	UGameInstance_DebugCreatePlayer_Params params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameState.Semaphore_TryGrab
// ()
// Parameters:
// struct FName                   SemaphoreName                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InObject                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          PriorityWeight                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxToAllocate                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameState::Semaphore_TryGrab(const struct FName& SemaphoreName, class AActor* InObject, float PriorityWeight, int MaxToAllocate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.Semaphore_TryGrab");

	AGameState_Semaphore_TryGrab_Params params;
	params.SemaphoreName = SemaphoreName;
	params.InObject = InObject;
	params.PriorityWeight = PriorityWeight;
	params.MaxToAllocate = MaxToAllocate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameState.Semaphore_Release
// ()
// Parameters:
// struct FName                   SemaphoreName                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InObject                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameState::Semaphore_Release(const struct FName& SemaphoreName, class AActor* InObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.Semaphore_Release");

	AGameState_Semaphore_Release_Params params;
	params.SemaphoreName = SemaphoreName;
	params.InObject = InObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameState.PostProcessOverlapEvent__DelegateSignature
// ()
// Parameters:
// class APostProcessVolume*      PostProcessVolume              (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPrimaryPlayer               (Parm, ZeroConstructor, IsPlainOldData)

void AGameState::PostProcessOverlapEvent__DelegateSignature(class APostProcessVolume* PostProcessVolume, class APlayerController* Controller, bool bIsPrimaryPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.PostProcessOverlapEvent__DelegateSignature");

	AGameState_PostProcessOverlapEvent__DelegateSignature_Params params;
	params.PostProcessVolume = PostProcessVolume;
	params.Controller = Controller;
	params.bIsPrimaryPlayer = bIsPrimaryPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameState.OnRep_SpectatorClass
// ()

void AGameState::OnRep_SpectatorClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_SpectatorClass");

	AGameState_OnRep_SpectatorClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameState.OnRep_MatchState
// ()

void AGameState::OnRep_MatchState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_MatchState");

	AGameState_OnRep_MatchState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameState.OnRep_GameModeClass
// ()

void AGameState::OnRep_GameModeClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.OnRep_GameModeClass");

	AGameState_OnRep_GameModeClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameState.BPNetSpawnActorAtLocation
// ()
// Parameters:
// class UClass*                  anActorClass                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AtRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  EffectOwnerToIgnore            (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxRangeToReplicate            (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            dataIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   attachSocketName               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlySendToEffectOwner         (Parm, ZeroConstructor, IsPlainOldData)

void AGameState::BPNetSpawnActorAtLocation(class UClass* anActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class AActor* EffectOwnerToIgnore, float MaxRangeToReplicate, class USceneComponent* attachToComponent, int dataIndex, const struct FName& attachSocketName, bool bOnlySendToEffectOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameState.BPNetSpawnActorAtLocation");

	AGameState_BPNetSpawnActorAtLocation_Params params;
	params.anActorClass = anActorClass;
	params.AtLocation = AtLocation;
	params.AtRotation = AtRotation;
	params.EffectOwnerToIgnore = EffectOwnerToIgnore;
	params.MaxRangeToReplicate = MaxRangeToReplicate;
	params.attachToComponent = attachToComponent;
	params.dataIndex = dataIndex;
	params.attachSocketName = attachSocketName;
	params.bOnlySendToEffectOwner = bOnlySendToEffectOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUserSettings.SaveSettings
// ()

void UGameUserSettings::SaveSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUserSettings.SaveSettings");

	UGameUserSettings_SaveSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SSSwapControllers
// ()

void UGameViewportClient::SSSwapControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SSSwapControllers");

	UGameViewportClient_SSSwapControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.ShowTitleSafeArea
// ()

void UGameViewportClient::ShowTitleSafeArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShowTitleSafeArea");

	UGameViewportClient_ShowTitleSafeArea_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetConsoleTarget
// ()
// Parameters:
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UGameViewportClient::SetConsoleTarget(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetConsoleTarget");

	UGameViewportClient_SetConsoleTarget_Params params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetVectorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorParameter");

	UParticleSystemComponent_SetVectorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetTrailSourceData
// ()
// Parameters:
// struct FName                   InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETrailWidthMode>   InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTrailSourceData");

	UParticleSystemComponent_SetTrailSourceData_Params params;
	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetTemplate
// ()
// Parameters:
// class UParticleSystem*         NewTemplate                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

	UParticleSystemComponent_SetTemplate_Params params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetMaterialParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

	UParticleSystemComponent_SetMaterialParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetFloatParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatParameter");

	UParticleSystemComponent_SetFloatParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetEmitterEnable
// ()
// Parameters:
// struct FName                   EmitterName                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewEnableState                (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetEmitterEnable");

	UParticleSystemComponent_SetEmitterEnable_Params params;
	params.EmitterName = EmitterName;
	params.bNewEnableState = bNewEnableState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetColorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetColorParameter");

	UParticleSystemComponent_SetColorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

	UParticleSystemComponent_SetBeamTargetTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewTargetStrength              (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

	UParticleSystemComponent_SetBeamTargetStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewTargetPoint                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

	UParticleSystemComponent_SetBeamTargetPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewTangentPoint                (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

	UParticleSystemComponent_SetBeamSourceTangent_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewSourceStrength              (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

	UParticleSystemComponent_SetBeamSourceStrength_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewSourcePoint                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            SourceIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

	UParticleSystemComponent_SetBeamSourcePoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// ()
// Parameters:
// int                            EmitterIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewEndPoint                    (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

	UParticleSystemComponent_SetBeamEndPoint_Params params;
	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetActorParameter
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Param                          (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActorParameter");

	UParticleSystemComponent_SetActorParameter_Params params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.OnSystemFinished__DelegateSignature
// ()
// Parameters:
// class UParticleSystemComponent* PSystem                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UParticleSystemComponent::OnSystemFinished__DelegateSignature(class UParticleSystemComponent* PSystem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.OnSystemFinished__DelegateSignature");

	UParticleSystemComponent_OnSystemFinished__DelegateSignature_Params params;
	params.PSystem = PSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetVectorParameter
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutVector                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystemComponent::GetVectorParameter(const struct FName& InName, struct FVector* OutVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetVectorParameter");

	UParticleSystemComponent_GetVectorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVector != nullptr)
		*OutVector = params.OutVector;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetNumActiveParticles
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UParticleSystemComponent::GetNumActiveParticles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNumActiveParticles");

	UParticleSystemComponent_GetNumActiveParticles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetNamedMaterial
// ()
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UParticleSystemComponent::GetNamedMaterial(const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetNamedMaterial");

	UParticleSystemComponent_GetNamedMaterial_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetMaterialParameter
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      OutMaterial                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystemComponent::GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMaterialParameter");

	UParticleSystemComponent_GetMaterialParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMaterial != nullptr)
		*OutMaterial = params.OutMaterial;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetFloatParameter
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          OutFloat                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystemComponent::GetFloatParameter(const struct FName& InName, float* OutFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetFloatParameter");

	UParticleSystemComponent_GetFloatParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFloat != nullptr)
		*OutFloat = params.OutFloat;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetColorParameter
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            outColor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystemComponent::GetColorParameter(const struct FName& InName, struct FLinearColor* outColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetColorParameter");

	UParticleSystemComponent_GetColorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outColor != nullptr)
		*outColor = params.outColor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetActorParameter
// ()
// Parameters:
// struct FName                   InName                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OutActor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystemComponent::GetActorParameter(const struct FName& InName, class AActor** OutActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetActorParameter");

	UParticleSystemComponent_GetActorParameter_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActor != nullptr)
		*OutActor = params.OutActor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GenerateParticleEvent
// ()
// Parameters:
// struct FName                   InEventName                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          InEmitterTime                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InDirection                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InVelocity                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GenerateParticleEvent");

	UParticleSystemComponent_GenerateParticleEvent_Params params;
	params.InEventName = InEventName;
	params.InEmitterTime = InEmitterTime;
	params.InLocation = InLocation;
	params.InDirection = InDirection;
	params.InVelocity = InVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.EndTrails
// ()

void UParticleSystemComponent::EndTrails()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.EndTrails");

	UParticleSystemComponent_EndTrails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
// ()
// Parameters:
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      SourceMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UParticleSystemComponent::CreateNamedDynamicMaterialInstance(const struct FName& Name, class UMaterialInterface* SourceMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance");

	UParticleSystemComponent_CreateNamedDynamicMaterialInstance_Params params;
	params.Name = Name;
	params.SourceMaterial = SourceMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.BeginTrails
// ()
// Parameters:
// struct FName                   InFirstSocketName              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSecondSocketName             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETrailWidthMode>   InWidthMode                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWidth                        (Parm, ZeroConstructor, IsPlainOldData)

void UParticleSystemComponent::BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.BeginTrails");

	UParticleSystemComponent_BeginTrails_Params params;
	params.InFirstSocketName = InFirstSocketName;
	params.InSecondSocketName = InSecondSocketName;
	params.InWidthMode = InWidthMode;
	params.InWidth = InWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerCameraManager.StopCameraAnimInst
// ()
// Parameters:
// class UCameraAnimInst*         AnimInst                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopCameraAnimInst");

	APlayerCameraManager_StopCameraAnimInst_Params params;
	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
// ()
// Parameters:
// class UCameraAnim*             Anim                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim");

	APlayerCameraManager_StopAllInstancesOfCameraAnim_Params params;
	params.Anim = Anim;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerCameraManager.StopAllCameraAnims
// ()
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::StopAllCameraAnims(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.StopAllCameraAnims");

	APlayerCameraManager_StopAllCameraAnims_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerCameraManager.RemoveCameraLensEffect
// ()
// Parameters:
// class AEmitterCameraLensEffectBase* Emitter                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerCameraManager::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.RemoveCameraLensEffect");

	APlayerCameraManager_RemoveCameraLensEffect_Params params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerCameraManager.PlayCameraAnim
// ()
// Parameters:
// class UCameraAnim*             Anim                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLoop                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandomStartTime               (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECameraAnimPlaySpace> PlaySpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UserPlaySpaceRot               (Parm, ZeroConstructor, IsPlainOldData)
// class UCameraAnimInst*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCameraAnimInst* APlayerCameraManager::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.PlayCameraAnim");

	APlayerCameraManager_PlayCameraAnim_Params params;
	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetWorldCameraShakeScale
// ()
// Parameters:
// bool                           bForceReturnUserSettingScale   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerCameraManager::GetWorldCameraShakeScale(bool bForceReturnUserSettingScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetWorldCameraShakeScale");

	APlayerCameraManager_GetWorldCameraShakeScale_Params params;
	params.bForceReturnUserSettingScale = bForceReturnUserSettingScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetOwningPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* APlayerCameraManager::GetOwningPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetOwningPlayerController");

	APlayerCameraManager_GetOwningPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APlayerCameraManager::GetCameraRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraRotation");

	APlayerCameraManager_GetCameraRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.GetCameraLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APlayerCameraManager::GetCameraLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.GetCameraLocation");

	APlayerCameraManager_GetCameraLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.ClearCameraLensEffects
// ()

void APlayerCameraManager::ClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.ClearCameraLensEffects");

	APlayerCameraManager_ClearCameraLensEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerCameraManager.BlueprintUpdateCamera
// ()
// Parameters:
// class AActor*                  CameraTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewCameraLocation              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewCameraRotation              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          NewCameraFOV                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerCameraManager::BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.BlueprintUpdateCamera");

	APlayerCameraManager_BlueprintUpdateCamera_Params params;
	params.CameraTarget = CameraTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewCameraLocation != nullptr)
		*NewCameraLocation = params.NewCameraLocation;
	if (NewCameraRotation != nullptr)
		*NewCameraRotation = params.NewCameraRotation;
	if (NewCameraFOV != nullptr)
		*NewCameraFOV = params.NewCameraFOV;

	return params.ReturnValue;
}


// Function Engine.PlayerCameraManager.AddCameraLensEffect
// ()
// Parameters:
// class UClass*                  LensEffectEmitterClass         (Parm, ZeroConstructor, IsPlainOldData)
// class AEmitterCameraLensEffectBase* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AEmitterCameraLensEffectBase* APlayerCameraManager::AddCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerCameraManager.AddCameraLensEffect");

	APlayerCameraManager_AddCameraLensEffect_Params params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DefaultPawn.TurnAtRate
// ()
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::TurnAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.TurnAtRate");

	ADefaultPawn_TurnAtRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DefaultPawn.Turn
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::Turn(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.Turn");

	ADefaultPawn_Turn_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DefaultPawn.MoveUp_World
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveUp_World(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveUp_World");

	ADefaultPawn_MoveUp_World_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DefaultPawn.MoveRight
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveRight(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveRight");

	ADefaultPawn_MoveRight_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DefaultPawn.MoveForward
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::MoveForward(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.MoveForward");

	ADefaultPawn_MoveForward_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DefaultPawn.LookUpAtRate
// ()
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::LookUpAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.LookUpAtRate");

	ADefaultPawn_LookUpAtRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DefaultPawn.LookUp
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void ADefaultPawn::LookUp(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPawn.LookUp");

	ADefaultPawn_LookUp_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.GetVolumeZAtPosition2D
// ()
// Parameters:
// struct FVector2D               Position                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APhysicsVolume::GetVolumeZAtPosition2D(const struct FVector2D& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetVolumeZAtPosition2D");

	APhysicsVolume_GetVolumeZAtPosition2D_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AmbientSound.Stop
// ()

void AAmbientSound::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Stop");

	AAmbientSound_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSound.Play
// ()
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.Play");

	AAmbientSound_Play_Params params;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSound.FadeOut
// ()
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeOut");

	AAmbientSound_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSound.FadeIn
// ()
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.FadeIn");

	AAmbientSound_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSound.AdjustVolume
// ()
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData)

void AAmbientSound::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSound.AdjustVolume");

	AAmbientSound_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.World.IsActuallyUsingTrueSkyActor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWorld::IsActuallyUsingTrueSkyActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.World.IsActuallyUsingTrueSkyActor");

	UWorld_IsActuallyUsingTrueSkyActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.World.GetWorldSettings
// ()
// Parameters:
// bool                           bCheckStreamingPesistent       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bChecked                       (Parm, ZeroConstructor, IsPlainOldData)
// class AWorldSettings*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWorldSettings* UWorld::GetWorldSettings(bool bCheckStreamingPesistent, bool bChecked)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.World.GetWorldSettings");

	UWorld_GetWorldSettings_Params params;
	params.bCheckStreamingPesistent = bCheckStreamingPesistent;
	params.bChecked = bChecked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.World.GetFirstPlayerController
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* UWorld::GetFirstPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.World.GetFirstPlayerController");

	UWorld_GetFirstPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BlockingVolume.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ABlockingVolume::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BlockingVolume.OnInterpToggle");

	ABlockingVolume_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BlockingVolume.DoToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ABlockingVolume::DoToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BlockingVolume.DoToggle");

	ABlockingVolume_DoToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PostProcessVolume.PostprocessVolumeLeftSignature__DelegateSignature
// ()
// Parameters:
// class APlayerController*       Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPrimaryPlayer               (Parm, ZeroConstructor, IsPlainOldData)

void APostProcessVolume::PostprocessVolumeLeftSignature__DelegateSignature(class APlayerController* Controller, bool bIsPrimaryPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.PostprocessVolumeLeftSignature__DelegateSignature");

	APostProcessVolume_PostprocessVolumeLeftSignature__DelegateSignature_Params params;
	params.Controller = Controller;
	params.bIsPrimaryPlayer = bIsPrimaryPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PostProcessVolume.PostprocessVolumeEnteredSignature__DelegateSignature
// ()
// Parameters:
// class APlayerController*       Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPrimaryPlayer               (Parm, ZeroConstructor, IsPlainOldData)

void APostProcessVolume::PostprocessVolumeEnteredSignature__DelegateSignature(class APlayerController* Controller, bool bIsPrimaryPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.PostprocessVolumeEnteredSignature__DelegateSignature");

	APostProcessVolume_PostprocessVolumeEnteredSignature__DelegateSignature_Params params;
	params.Controller = Controller;
	params.bIsPrimaryPlayer = bIsPrimaryPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TileStreamingVolume.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ATileStreamingVolume::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TileStreamingVolume.OnInterpToggle");

	ATileStreamingVolume_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TileStreamingVolume.DoToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ATileStreamingVolume::DoToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TileStreamingVolume.DoToggle");

	ATileStreamingVolume_DoToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraActor.GetAutoActivatePlayerIndex
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ACameraActor::GetAutoActivatePlayerIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetAutoActivatePlayerIndex");

	ACameraActor_GetAutoActivatePlayerIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InputComponent.WasControllerKeyJustReleased
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::WasControllerKeyJustReleased(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustReleased");

	UInputComponent_WasControllerKeyJustReleased_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InputComponent.WasControllerKeyJustPressed
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::WasControllerKeyJustPressed(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.WasControllerKeyJustPressed");

	UInputComponent_WasControllerKeyJustPressed_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InputComponent.IsControllerKeyDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInputComponent::IsControllerKeyDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.IsControllerKeyDown");

	UInputComponent_IsControllerKeyDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InputComponent.InputVectorAxisHandlerDynamicSignature__DelegateSignature
// ()
// Parameters:
// struct FVector                 AxisValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UInputComponent::InputVectorAxisHandlerDynamicSignature__DelegateSignature(const struct FVector& AxisValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.InputVectorAxisHandlerDynamicSignature__DelegateSignature");

	UInputComponent_InputVectorAxisHandlerDynamicSignature__DelegateSignature_Params params;
	params.AxisValue = AxisValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InputComponent.InputTouchHandlerDynamicSignature__DelegateSignature
// ()
// Parameters:
// TEnumAsByte<ETouchIndex>       FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)

void UInputComponent::InputTouchHandlerDynamicSignature__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.InputTouchHandlerDynamicSignature__DelegateSignature");

	UInputComponent_InputTouchHandlerDynamicSignature__DelegateSignature_Params params;
	params.FingerIndex = FingerIndex;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InputComponent.InputGestureHandlerDynamicSignature__DelegateSignature
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UInputComponent::InputGestureHandlerDynamicSignature__DelegateSignature(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.InputGestureHandlerDynamicSignature__DelegateSignature");

	UInputComponent_InputGestureHandlerDynamicSignature__DelegateSignature_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InputComponent.InputAxisHandlerDynamicSignature__DelegateSignature
// ()
// Parameters:
// float                          AxisValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UInputComponent::InputAxisHandlerDynamicSignature__DelegateSignature(float AxisValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.InputAxisHandlerDynamicSignature__DelegateSignature");

	UInputComponent_InputAxisHandlerDynamicSignature__DelegateSignature_Params params;
	params.AxisValue = AxisValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InputComponent.InputActionHandlerDynamicSignature__DelegateSignature
// ()

void UInputComponent::InputActionHandlerDynamicSignature__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.InputActionHandlerDynamicSignature__DelegateSignature");

	UInputComponent_InputActionHandlerDynamicSignature__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InputComponent.GetTouchState
// ()
// Parameters:
// int                            FingerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LocationX                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          LocationY                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCurrentlyPressed            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetTouchState");

	UInputComponent_GetTouchState_Params params;
	params.FingerIndex = FingerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocationX != nullptr)
		*LocationX = params.LocationX;
	if (LocationY != nullptr)
		*LocationY = params.LocationY;
	if (bIsCurrentlyPressed != nullptr)
		*bIsCurrentlyPressed = params.bIsCurrentlyPressed;
}


// Function Engine.InputComponent.GetControllerVectorKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UInputComponent::GetControllerVectorKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerVectorKeyState");

	UInputComponent_GetControllerVectorKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerMouseDelta
// ()
// Parameters:
// float                          DeltaX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          DeltaY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetControllerMouseDelta(float* DeltaX, float* DeltaY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerMouseDelta");

	UInputComponent_GetControllerMouseDelta_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DeltaX != nullptr)
		*DeltaX = params.DeltaX;
	if (DeltaY != nullptr)
		*DeltaY = params.DeltaY;
}


// Function Engine.InputComponent.GetControllerKeyTimeDown
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UInputComponent::GetControllerKeyTimeDown(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerKeyTimeDown");

	UInputComponent_GetControllerKeyTimeDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InputComponent.GetControllerAnalogStickState
// ()
// Parameters:
// TEnumAsByte<EControllerAnalogStick> WhichStick                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          StickX                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          StickY                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UInputComponent::GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogStickState");

	UInputComponent_GetControllerAnalogStickState_Params params;
	params.WhichStick = WhichStick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StickX != nullptr)
		*StickX = params.StickX;
	if (StickY != nullptr)
		*StickY = params.StickY;
}


// Function Engine.InputComponent.GetControllerAnalogKeyState
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UInputComponent::GetControllerAnalogKeyState(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InputComponent.GetControllerAnalogKeyState");

	UInputComponent_GetControllerAnalogKeyState_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurveBase.GetValueRange
// ()
// Parameters:
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCurveBase::GetValueRange(float* MinValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveBase.GetValueRange");

	UCurveBase_GetValueRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinValue != nullptr)
		*MinValue = params.MinValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.CurveBase.GetTimeRange
// ()
// Parameters:
// float                          MinTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCurveBase::GetTimeRange(float* MinTime, float* MaxTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveBase.GetTimeRange");

	UCurveBase_GetTimeRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinTime != nullptr)
		*MinTime = params.MinTime;
	if (MaxTime != nullptr)
		*MaxTime = params.MaxTime;
}


// Function Engine.CurveFloat.GetFloatValue
// ()
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCurveFloat::GetFloatValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveFloat.GetFloatValue");

	UCurveFloat_GetFloatValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DebugCameraController.ShowDebugSelectedInfo
// ()

void ADebugCameraController::ShowDebugSelectedInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DebugCameraController.ShowDebugSelectedInfo");

	ADebugCameraController_ShowDebugSelectedInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalActor.SetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData)

void ADecalActor::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.SetDecalMaterial");

	ADecalActor_SetDecalMaterial_Params params;
	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalActor.GetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* ADecalActor::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.GetDecalMaterial");

	ADecalActor_GetDecalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalActor.CreateDynamicMaterialInstance
// ()
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* ADecalActor::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalActor.CreateDynamicMaterialInstance");

	ADecalActor_CreateDynamicMaterialInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ExponentialHeightFog.OnRep_bEnabled
// ()

void AExponentialHeightFog::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.OnRep_bEnabled");

	AExponentialHeightFog_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkyLight.OnRep_bEnabled
// ()

void ASkyLight::OnRep_bEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLight.OnRep_bEnabled");

	ASkyLight_OnRep_bEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InstancedFoliageActor.BPGetInstancedFoliageActorForCurrentLevel
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// class AInstancedFoliageActor*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AInstancedFoliageActor* AInstancedFoliageActor::BPGetInstancedFoliageActorForCurrentLevel(class UWorld* World)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedFoliageActor.BPGetInstancedFoliageActorForCurrentLevel");

	AInstancedFoliageActor_BPGetInstancedFoliageActorForCurrentLevel_Params params;
	params.World = World;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InstancedFoliageActor.BPConvertStaticMeshActorsToFoliage
// ()
// Parameters:
// TArray<class AStaticMeshActor*> actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AStaticMeshActor*> ConvertedActors                (Parm, OutParm, ZeroConstructor)

void AInstancedFoliageActor::BPConvertStaticMeshActorsToFoliage(TArray<class AStaticMeshActor*> actors, TArray<class AStaticMeshActor*>* ConvertedActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedFoliageActor.BPConvertStaticMeshActorsToFoliage");

	AInstancedFoliageActor_BPConvertStaticMeshActorsToFoliage_Params params;
	params.actors = actors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ConvertedActors != nullptr)
		*ConvertedActors = params.ConvertedActors;
}


// Function Engine.LandscapeProxy.ChangeLODDistanceFactor
// ()
// Parameters:
// float                          InLODDistanceFactor            (Parm, ZeroConstructor, IsPlainOldData)

void ALandscapeProxy::ChangeLODDistanceFactor(float InLODDistanceFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LandscapeProxy.ChangeLODDistanceFactor");

	ALandscapeProxy_ChangeLODDistanceFactor_Params params;
	params.InLODDistanceFactor = InLODDistanceFactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelScriptActor.WorldOriginLocationChanged
// ()
// Parameters:
// struct FIntVector              OldOriginLocation              (Parm, ZeroConstructor, IsPlainOldData)
// struct FIntVector              NewOriginLocation              (Parm, ZeroConstructor, IsPlainOldData)

void ALevelScriptActor::WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.WorldOriginLocationChanged");

	ALevelScriptActor_WorldOriginLocationChanged_Params params;
	params.OldOriginLocation = OldOriginLocation;
	params.NewOriginLocation = NewOriginLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelScriptActor.SetCinematicMode
// ()
// Parameters:
// bool                           bCinematicMode                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHidePlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsHUD                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsMovement               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAffectsTurning                (Parm, ZeroConstructor, IsPlainOldData)

void ALevelScriptActor::SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.SetCinematicMode");

	ALevelScriptActor_SetCinematicMode_Params params;
	params.bCinematicMode = bCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelScriptActor.RemoteEvent
// ()
// Parameters:
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALevelScriptActor::RemoteEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.RemoteEvent");

	ALevelScriptActor_RemoteEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelScriptActor.OnGameStateReady
// ()
// Parameters:
// class AGameState*              GameState                      (Parm, ZeroConstructor, IsPlainOldData)

void ALevelScriptActor::OnGameStateReady(class AGameState* GameState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.OnGameStateReady");

	ALevelScriptActor_OnGameStateReady_Params params;
	params.GameState = GameState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelScriptActor.LevelReset
// ()

void ALevelScriptActor::LevelReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelScriptActor.LevelReset");

	ALevelScriptActor_LevelReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLight.SetRadius
// ()
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void APointLight::SetRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetRadius");

	APointLight_SetRadius_Params params;
	params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLight.SetLightFalloffExponent
// ()
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData)

void APointLight::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLight.SetLightFalloffExponent");

	APointLight_SetLightFalloffExponent_Params params;
	params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpotLight.SetOuterConeAngle
// ()
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void ASpotLight::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetOuterConeAngle");

	ASpotLight_SetOuterConeAngle_Params params;
	params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpotLight.SetInnerConeAngle
// ()
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void ASpotLight::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLight.SetInnerConeAngle");

	ASpotLight_SetInnerConeAngle_Params params;
	params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.Stop
// ()

void AMatineeActor::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Stop");

	AMatineeActor_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.SetPosition
// ()
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bJump                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceJumpFromBeginningForEvents (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipMatineeUpdate             (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::SetPosition(float NewPosition, bool bJump, bool bForceJumpFromBeginningForEvents, bool bSkipMatineeUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetPosition");

	AMatineeActor_SetPosition_Params params;
	params.NewPosition = NewPosition;
	params.bJump = bJump;
	params.bForceJumpFromBeginningForEvents = bForceJumpFromBeginningForEvents;
	params.bSkipMatineeUpdate = bSkipMatineeUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.SetLoopingState
// ()
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::SetLoopingState(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.SetLoopingState");

	AMatineeActor_SetLoopingState_Params params;
	params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.Reverse
// ()

void AMatineeActor::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Reverse");

	AMatineeActor_Reverse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.Play
// ()
// Parameters:
// float                          OverrideSetPosition            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverridePositionJump          (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::Play(float OverrideSetPosition, bool bOverridePositionJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Play");

	AMatineeActor_Play_Params params;
	params.OverrideSetPosition = OverrideSetPosition;
	params.bOverridePositionJump = bOverridePositionJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.Pause
// ()

void AMatineeActor::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Pause");

	AMatineeActor_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.OnMatineeEvent__DelegateSignature
// ()

void AMatineeActor::OnMatineeEvent__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.OnMatineeEvent__DelegateSignature");

	AMatineeActor_OnMatineeEvent__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.InitClientMatinee
// ()

void AMatineeActor::InitClientMatinee()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.InitClientMatinee");

	AMatineeActor_InitClientMatinee_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.ChangePlaybackDirection
// ()

void AMatineeActor::ChangePlaybackDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.ChangePlaybackDirection");

	AMatineeActor_ChangePlaybackDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.AddActorToGroup
// ()
// Parameters:
// struct FName                   GroupName                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TheGroupActor                  (Parm, ZeroConstructor, IsPlainOldData)

void AMatineeActor::AddActorToGroup(const struct FName& GroupName, class AActor* TheGroupActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.AddActorToGroup");

	AMatineeActor_AddActorToGroup_Params params;
	params.GroupName = GroupName;
	params.TheGroupActor = TheGroupActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavLinkProxy.SmartLinkReachedSignature__DelegateSignature
// ()
// Parameters:
// class AActor*                  MovingActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DestinationPoint               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ANavLinkProxy::SmartLinkReachedSignature__DelegateSignature(class AActor* MovingActor, const struct FVector& DestinationPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.SmartLinkReachedSignature__DelegateSignature");

	ANavLinkProxy_SmartLinkReachedSignature__DelegateSignature_Params params;
	params.MovingActor = MovingActor;
	params.DestinationPoint = DestinationPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavLinkProxy.SetSmartLinkEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ANavLinkProxy::SetSmartLinkEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.SetSmartLinkEnabled");

	ANavLinkProxy_SetSmartLinkEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavLinkProxy.ResumePathFollowing
// ()
// Parameters:
// class AActor*                  Agent                          (Parm, ZeroConstructor, IsPlainOldData)

void ANavLinkProxy::ResumePathFollowing(class AActor* Agent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.ResumePathFollowing");

	ANavLinkProxy_ResumePathFollowing_Params params;
	params.Agent = Agent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavLinkProxy.ReceiveSmartLinkReached
// ()
// Parameters:
// class AActor*                  Agent                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Destination                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ANavLinkProxy::ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.ReceiveSmartLinkReached");

	ANavLinkProxy_ReceiveSmartLinkReached_Params params;
	params.Agent = Agent;
	params.Destination = Destination;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavLinkProxy.IsSmartLinkEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANavLinkProxy::IsSmartLinkEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.IsSmartLinkEnabled");

	ANavLinkProxy_IsSmartLinkEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavLinkProxy.HasMovingAgents
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANavLinkProxy::HasMovingAgents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavLinkProxy.HasMovingAgents");

	ANavLinkProxy_HasMovingAgents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BoxReflectionCapture.GetBoxCaptureComponent
// ()
// Parameters:
// class UBoxReflectionCaptureComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UBoxReflectionCaptureComponent* ABoxReflectionCapture::GetBoxCaptureComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxReflectionCapture.GetBoxCaptureComponent");

	ABoxReflectionCapture_GetBoxCaptureComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SphereReflectionCapture.GetSphereCaptureComponent
// ()
// Parameters:
// class USphereReflectionCaptureComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USphereReflectionCaptureComponent* ASphereReflectionCapture::GetSphereCaptureComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereReflectionCapture.GetSphereCaptureComponent");

	ASphereReflectionCapture_GetSphereCaptureComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RadialForceActor.ToggleForce
// ()

void ARadialForceActor::ToggleForce()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.ToggleForce");

	ARadialForceActor_ToggleForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialForceActor.FireImpulse
// ()

void ARadialForceActor::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.FireImpulse");

	ARadialForceActor_FireImpulse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialForceActor.EnableForce
// ()

void ARadialForceActor::EnableForce()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.EnableForce");

	ARadialForceActor_EnableForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialForceActor.DisableForce
// ()

void ARadialForceActor::DisableForce()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceActor.DisableForce");

	ARadialForceActor_DisableForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2D.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASceneCapture2D::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2D.OnInterpToggle");

	ASceneCapture2D_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureCube.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASceneCaptureCube::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureCube.OnInterpToggle");

	ASceneCaptureCube_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkinnedMeshComponent.UnHideBoneByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::UnHideBoneByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.UnHideBoneByName");

	USkinnedMeshComponent_UnHideBoneByName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkinnedMeshComponent.TransformToBoneSpace
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformToBoneSpace");

	USkinnedMeshComponent_TransformToBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkinnedMeshComponent.TransformFromBoneSpace
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutPosition                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.TransformFromBoneSpace");

	USkinnedMeshComponent_TransformFromBoneSpace_Params params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkinnedMeshComponent.SetSkeletalMesh
// ()
// Parameters:
// class USkeletalMesh*           NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetSkeletalMesh");

	USkinnedMeshComponent_SetSkeletalMesh_Params params;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkinnedMeshComponent.SetPhysicsAsset
// ()
// Parameters:
// class UPhysicsAsset*           NewPhysicsAsset                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceReinit                   (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReinit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetPhysicsAsset");

	USkinnedMeshComponent_SetPhysicsAsset_Params params;
	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReinit = bForceReinit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkinnedMeshComponent.SetMasterPoseComponent
// ()
// Parameters:
// class USkinnedMeshComponent*   NewMasterBoneComponent         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USkinnedMeshComponent::SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.SetMasterPoseComponent");

	USkinnedMeshComponent_SetMasterPoseComponent_Params params;
	params.NewMasterBoneComponent = NewMasterBoneComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkinnedMeshComponent.IsBoneHiddenByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkinnedMeshComponent::IsBoneHiddenByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.IsBoneHiddenByName");

	USkinnedMeshComponent_IsBoneHiddenByName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.HideBoneByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPhysBodyOp>       PhysBodyOption                 (Parm, ZeroConstructor, IsPlainOldData)

void USkinnedMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.HideBoneByName");

	USkinnedMeshComponent_HideBoneByName_Params params;
	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkinnedMeshComponent.GetSocketBoneName
// ()
// Parameters:
// struct FName                   InSocketName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USkinnedMeshComponent::GetSocketBoneName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetSocketBoneName");

	USkinnedMeshComponent_GetSocketBoneName_Params params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetParentBone
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USkinnedMeshComponent::GetParentBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetParentBone");

	USkinnedMeshComponent_GetParentBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetNumBones
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USkinnedMeshComponent::GetNumBones()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetNumBones");

	USkinnedMeshComponent_GetNumBones_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneName
// ()
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USkinnedMeshComponent::GetBoneName(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneName");

	USkinnedMeshComponent_GetBoneName_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkinnedMeshComponent.GetBoneIndex
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USkinnedMeshComponent::GetBoneIndex(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkinnedMeshComponent.GetBoneIndex");

	USkinnedMeshComponent_GetBoneIndex_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsConstraintComponent.SetLinearZLimit
// ()
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearZLimit");

	UPhysicsConstraintComponent_SetLinearZLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetLinearYLimit
// ()
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearYLimit");

	UPhysicsConstraintComponent_SetLinearYLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetLinearXLimit
// ()
// Parameters:
// TEnumAsByte<ELinearConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitSize                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearXLimit");

	UPhysicsConstraintComponent_SetLinearXLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.LimitSize = LimitSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
// ()
// Parameters:
// struct FVector                 InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityTarget");

	UPhysicsConstraintComponent_SetLinearVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
// ()
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearVelocityDrive");

	UPhysicsConstraintComponent_SetLinearVelocityDrive_Params params;
	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget
// ()
// Parameters:
// struct FVector                 InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionTarget");

	UPhysicsConstraintComponent_SetLinearPositionTarget_Params params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive
// ()
// Parameters:
// bool                           bEnableDriveX                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveY                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableDriveZ                  (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearPositionDrive");

	UPhysicsConstraintComponent_SetLinearPositionDrive_Params params;
	params.bEnableDriveX = bEnableDriveX;
	params.bEnableDriveY = bEnableDriveY;
	params.bEnableDriveZ = bEnableDriveZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetLinearDriveParams
// ()
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetLinearDriveParams");

	UPhysicsConstraintComponent_SetLinearDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetDisableCollision
// ()
// Parameters:
// bool                           bDisableCollision              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetDisableCollision(bool bDisableCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetDisableCollision");

	UPhysicsConstraintComponent_SetDisableCollision_Params params;
	params.bDisableCollision = bDisableCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
// ()
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RefPosition                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferencePosition");

	UPhysicsConstraintComponent_SetConstraintReferencePosition_Params params;
	params.Frame = Frame;
	params.RefPosition = RefPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
// ()
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PriAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 SecAxis                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation");

	UPhysicsConstraintComponent_SetConstraintReferenceOrientation_Params params;
	params.Frame = Frame;
	params.PriAxis = PriAxis;
	params.SecAxis = SecAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
// ()
// Parameters:
// TEnumAsByte<EConstraintFrame>  Frame                          (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      RefFrame                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct UObject_FTransform& RefFrame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame");

	UPhysicsConstraintComponent_SetConstraintReferenceFrame_Params params;
	params.Frame = Frame;
	params.RefFrame = RefFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetConstrainedComponents
// ()
// Parameters:
// class UPrimitiveComponent*     Component1                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName1                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     Component2                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName2                      (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetConstrainedComponents");

	UPhysicsConstraintComponent_SetConstrainedComponents_Params params;
	params.Component1 = Component1;
	params.BoneName1 = BoneName1;
	params.Component2 = Component2;
	params.BoneName2 = BoneName2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
// ()
// Parameters:
// struct FVector                 InVelTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityTarget");

	UPhysicsConstraintComponent_SetAngularVelocityTarget_Params params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularVelocityDrive");

	UPhysicsConstraintComponent_SetAngularVelocityDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit
// ()
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> ConstraintType                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          TwistLimitAngle                (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularTwistLimit");

	UPhysicsConstraintComponent_SetAngularTwistLimit_Params params;
	params.ConstraintType = ConstraintType;
	params.TwistLimitAngle = TwistLimitAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
// ()
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Swing2LimitAngle               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing2Limit");

	UPhysicsConstraintComponent_SetAngularSwing2Limit_Params params;
	params.MotionType = MotionType;
	params.Swing2LimitAngle = Swing2LimitAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
// ()
// Parameters:
// TEnumAsByte<EAngularConstraintMotion> MotionType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Swing1LimitAngle               (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularSwing1Limit");

	UPhysicsConstraintComponent_SetAngularSwing1Limit_Params params;
	params.MotionType = MotionType;
	params.Swing1LimitAngle = Swing1LimitAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
// ()
// Parameters:
// struct FRotator                InPosTarget                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularOrientationTarget(const struct FRotator& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationTarget");

	UPhysicsConstraintComponent_SetAngularOrientationTarget_Params params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
// ()
// Parameters:
// bool                           bEnableSwingDrive              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnableTwistDrive              (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularOrientationDrive");

	UPhysicsConstraintComponent_SetAngularOrientationDrive_Params params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.SetAngularDriveParams
// ()
// Parameters:
// float                          InSpring                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDamping                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InForceLimit                   (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.SetAngularDriveParams");

	UPhysicsConstraintComponent_SetAngularDriveParams_Params params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.GetConstraintForce
// ()
// Parameters:
// struct FVector                 OutLinearForce                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutAngularForce                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.GetConstraintForce");

	UPhysicsConstraintComponent_GetConstraintForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLinearForce != nullptr)
		*OutLinearForce = params.OutLinearForce;
	if (OutAngularForce != nullptr)
		*OutAngularForce = params.OutAngularForce;
}


// Function Engine.PhysicsConstraintComponent.ConstraintBrokenSignature__DelegateSignature
// ()
// Parameters:
// int                            ConstraintIndex                (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsConstraintComponent::ConstraintBrokenSignature__DelegateSignature(int ConstraintIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.ConstraintBrokenSignature__DelegateSignature");

	UPhysicsConstraintComponent_ConstraintBrokenSignature__DelegateSignature_Params params;
	params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsConstraintComponent.BreakConstraint
// ()

void UPhysicsConstraintComponent::BreakConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsConstraintComponent.BreakConstraint");

	UPhysicsConstraintComponent_BreakConstraint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.Stop
// ()

void USkeletalMeshComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Stop");

	USkeletalMeshComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetupBetweenAnimationBlueprintBlending
// ()

void USkeletalMeshComponent::SetupBetweenAnimationBlueprintBlending()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetupBetweenAnimationBlueprintBlending");

	USkeletalMeshComponent_SetupBetweenAnimationBlueprintBlending_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetPosition
// ()
// Parameters:
// float                          InPos                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPosition(float InPos, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPosition");

	USkeletalMeshComponent_SetPosition_Params params;
	params.InPos = InPos;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetPlayRate
// ()
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPlayRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPlayRate");

	USkeletalMeshComponent_SetPlayRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
// ()
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetPhysicsBlendWeight(float PhysicsBlendWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsBlendWeight");

	USkeletalMeshComponent_SetPhysicsBlendWeight_Params params;
	params.PhysicsBlendWeight = PhysicsBlendWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetMorphTarget(const struct FName& MorphTargetName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetMorphTarget");

	USkeletalMeshComponent_SetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
// ()
// Parameters:
// bool                           bNewBlendPhysics               (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetEnablePhysicsBlending(bool bNewBlendPhysics)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnablePhysicsBlending");

	USkeletalMeshComponent_SetEnablePhysicsBlending_Params params;
	params.bNewBlendPhysics = bNewBlendPhysics;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
// ()
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetClothMaxDistanceScale(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothMaxDistanceScale");

	USkeletalMeshComponent_SetClothMaxDistanceScale_Params params;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAnimInstanceClass
// ()
// Parameters:
// class UClass*                  NewClass                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimInstanceClass(class UClass* NewClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimInstanceClass");

	USkeletalMeshComponent_SetAnimInstanceClass_Params params;
	params.NewClass = NewClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAnimationMode
// ()
// Parameters:
// TEnumAsByte<EAnimationMode>    InAnimationMode                (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimationMode");

	USkeletalMeshComponent_SetAnimationMode_Params params;
	params.InAnimationMode = InAnimationMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAnimation
// ()
// Parameters:
// class UAnimationAsset*         NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAnimation(class UAnimationAsset* NewAnimToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimation");

	USkeletalMeshComponent_SetAnimation_Params params;
	params.NewAnimToPlay = NewAnimToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
// ()
// Parameters:
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesSimulatePhysics(bool bNewSimulate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics");

	USkeletalMeshComponent_SetAllBodiesSimulatePhysics_Params params;
	params.bNewSimulate = bNewSimulate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
// ()
// Parameters:
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight");

	USkeletalMeshComponent_SetAllBodiesPhysicsBlendWeight_Params params;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
// ()
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bNewSimulate                   (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics");

	USkeletalMeshComponent_SetAllBodiesBelowSimulatePhysics_Params params;
	params.InBoneName = InBoneName;
	params.bNewSimulate = bNewSimulate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
// ()
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PhysicsBlendWeight             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight");

	USkeletalMeshComponent_SetAllBodiesBelowPhysicsBlendWeight_Params params;
	params.InBoneName = InBoneName;
	params.PhysicsBlendWeight = PhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ResetClothTeleportMode
// ()

void USkeletalMeshComponent::ResetClothTeleportMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothTeleportMode");

	USkeletalMeshComponent_ResetClothTeleportMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
// ()

void USkeletalMeshComponent::ResetAllBodiesSimulatePhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics");

	USkeletalMeshComponent_ResetAllBodiesSimulatePhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayAnimation
// ()
// Parameters:
// class UAnimationAsset*         NewAnimToPlay                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnimation");

	USkeletalMeshComponent_PlayAnimation_Params params;
	params.NewAnimToPlay = NewAnimToPlay;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.Play
// ()
// Parameters:
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::Play(bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.Play");

	USkeletalMeshComponent_Play_Params params;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.IsPlayingMontage
// ()
// Parameters:
// class UAnimMontage*            Montage                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeFromEndToConsiderFinished  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMeshComponent::IsPlayingMontage(class UAnimMontage* Montage, float TimeFromEndToConsiderFinished)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlayingMontage");

	USkeletalMeshComponent_IsPlayingMontage_Params params;
	params.Montage = Montage;
	params.TimeFromEndToConsiderFinished = TimeFromEndToConsiderFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.IsPlayingAnimationMontagesOnSlotName
// ()
// Parameters:
// struct FName                   SlotName                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMeshComponent::IsPlayingAnimationMontagesOnSlotName(const struct FName& SlotName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlayingAnimationMontagesOnSlotName");

	USkeletalMeshComponent_IsPlayingAnimationMontagesOnSlotName_Params params;
	params.SlotName = SlotName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.IsPlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMeshComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlaying");

	USkeletalMeshComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.IncrementIKLegMute
// ()
// Parameters:
// int                            LegIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::IncrementIKLegMute(int LegIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IncrementIKLegMute");

	USkeletalMeshComponent_IncrementIKLegMute_Params params;
	params.LegIndex = LegIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetTrueBasedPawns
// ()
// Parameters:
// TArray<class APawn*>           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APawn*> USkeletalMeshComponent::GetTrueBasedPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTrueBasedPawns");

	USkeletalMeshComponent_GetTrueBasedPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPosition
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPosition");

	USkeletalMeshComponent_GetPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPlayRate
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPlayRate");

	USkeletalMeshComponent_GetPlayRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetMorphTarget
// ()
// Parameters:
// struct FName                   MorphTargetName                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetMorphTarget");

	USkeletalMeshComponent_GetMorphTarget_Params params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetFirstBoneWithChildren
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName USkeletalMeshComponent::GetFirstBoneWithChildren()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetFirstBoneWithChildren");

	USkeletalMeshComponent_GetFirstBoneWithChildren_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USkeletalMeshComponent::GetClothMaxDistanceScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothMaxDistanceScale");

	USkeletalMeshComponent_GetClothMaxDistanceScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimInstance
// ()
// Parameters:
// class UAnimInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimInstance* USkeletalMeshComponent::GetAnimInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimInstance");

	USkeletalMeshComponent_GetAnimInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimationMode
// ()
// Parameters:
// TEnumAsByte<EAnimationMode>    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EAnimationMode> USkeletalMeshComponent::GetAnimationMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimationMode");

	USkeletalMeshComponent_GetAnimationMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
// ()

void USkeletalMeshComponent::ForceClothNextUpdateTeleportAndReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset");

	USkeletalMeshComponent_ForceClothNextUpdateTeleportAndReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
// ()

void USkeletalMeshComponent::ForceClothNextUpdateTeleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport");

	USkeletalMeshComponent_ForceClothNextUpdateTeleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FlushMorphTargets
// ()

void USkeletalMeshComponent::FlushMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FlushMorphTargets");

	USkeletalMeshComponent_FlushMorphTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.DecrementIKLegMute
// ()
// Parameters:
// int                            LegIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::DecrementIKLegMute(int LegIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DecrementIKLegMute");

	USkeletalMeshComponent_DecrementIKLegMute_Params params;
	params.LegIndex = LegIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ClearMorphTargets
// ()

void USkeletalMeshComponent::ClearMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ClearMorphTargets");

	USkeletalMeshComponent_ClearMorphTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.BPValidBoneToUnhide
// ()
// Parameters:
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool USkeletalMeshComponent::BPValidBoneToUnhide(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BPValidBoneToUnhide");

	USkeletalMeshComponent_BPValidBoneToUnhide_Params params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.BPTickPose
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::BPTickPose(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BPTickPose");

	USkeletalMeshComponent_BPTickPose_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.BPSetBoneModifiers
// ()
// Parameters:
// TArray<struct FBoneModifierNamed> NamedBoneModifiers             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USkeletalMeshComponent::BPSetBoneModifiers(TArray<struct FBoneModifierNamed> NamedBoneModifiers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BPSetBoneModifiers");

	USkeletalMeshComponent_BPSetBoneModifiers_Params params;
	params.NamedBoneModifiers = NamedBoneModifiers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.BPRefreshBoneTransforms
// ()

void USkeletalMeshComponent::BPRefreshBoneTransforms()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BPRefreshBoneTransforms");

	USkeletalMeshComponent_BPRefreshBoneTransforms_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
// ()
// Parameters:
// struct FName                   InBoneName                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          AddPhysicsBlendWeight          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipCustomPhysicsType         (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshComponent::AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight");

	USkeletalMeshComponent_AccumulateAllBodiesBelowPhysicsBlendWeight_Params params;
	params.InBoneName = InBoneName;
	params.AddPhysicsBlendWeight = AddPhysicsBlendWeight;
	params.bSkipCustomPhysicsType = bSkipCustomPhysicsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
// ()

void ASkeletalMeshActor::OnRep_ReplicatedPhysAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset");

	ASkeletalMeshActor_OnRep_ReplicatedPhysAsset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
// ()

void ASkeletalMeshActor::OnRep_ReplicatedMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMesh");

	ASkeletalMeshActor_OnRep_ReplicatedMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
// ()

void ASkeletalMeshActor::OnRep_ReplicatedMaterial1()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1");

	ASkeletalMeshActor_OnRep_ReplicatedMaterial1_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
// ()

void ASkeletalMeshActor::OnRep_ReplicatedMaterial0()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0");

	ASkeletalMeshActor_OnRep_ReplicatedMaterial0_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractiveFoliageActor.CapsuleTouched
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OverlapInfo                    (ConstParm, Parm, OutParm, ReferenceParm)

void AInteractiveFoliageActor::CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractiveFoliageActor.CapsuleTouched");

	AInteractiveFoliageActor_CapsuleTouched_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.OverlapInfo = OverlapInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature
// ()

void UApplicationLifecycleComponent::ApplicationLifetimeDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApplicationLifecycleComponent.ApplicationLifetimeDelegate__DelegateSignature");

	UApplicationLifecycleComponent_ApplicationLifetimeDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationSystem.SimpleMoveToLocation
// ()
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Goal                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UNavigationSystem::SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.SimpleMoveToLocation");

	UNavigationSystem_SimpleMoveToLocation_Params params;
	params.Controller = Controller;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationSystem.SimpleMoveToActor
// ()
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Goal                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::SimpleMoveToActor(class AController* Controller, class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.SimpleMoveToActor");

	UNavigationSystem_SimpleMoveToActor_Params params;
	params.Controller = Controller;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationSystem.ProjectPointToNavigationEx
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Extent                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::ProjectPointToNavigationEx(class UObject* WorldContext, const struct FVector& Point, const struct FVector& Extent, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.ProjectPointToNavigationEx");

	UNavigationSystem_ProjectPointToNavigationEx_Params params;
	params.WorldContext = WorldContext;
	params.Point = Point;
	params.Extent = Extent;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.ProjectPointToNavigation
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.ProjectPointToNavigation");

	UNavigationSystem_ProjectPointToNavigation_Params params;
	params.WorldContext = WorldContext;
	params.Point = Point;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.OnNavDataRegistered__DelegateSignature
// ()
// Parameters:
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationSystem::OnNavDataRegistered__DelegateSignature(class ANavigationData* NavData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.OnNavDataRegistered__DelegateSignature");

	UNavigationSystem_OnNavDataRegistered__DelegateSignature_Params params;
	params.NavData = NavData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationSystem.NavigationRaycast
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RayStart                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 RayEnd                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 HitLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             Querier                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, class UClass* FilterClass, class AController* Querier, struct FVector* HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.NavigationRaycast");

	UNavigationSystem_NavigationRaycast_Params params;
	params.WorldContext = WorldContext;
	params.RayStart = RayStart;
	params.RayEnd = RayEnd;
	params.FilterClass = FilterClass;
	params.Querier = Querier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.IsNavigationBeingBuilt
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationSystem::IsNavigationBeingBuilt(class UObject* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.IsNavigationBeingBuilt");

	UNavigationSystem_IsNavigationBeingBuilt_Params params;
	params.WorldContext = WorldContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomReachablePointInMinMaxRadius
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          MinRadius                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxRadius                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           RandStream                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 PathDirection                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          DotLimit                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::GetRandomReachablePointInMinMaxRadius(class UObject* WorldContext, const struct FVector& Origin, float MinRadius, float MaxRadius, const struct FRandomStream& RandStream, const struct FVector& PathDirection, float DotLimit, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetRandomReachablePointInMinMaxRadius");

	UNavigationSystem_GetRandomReachablePointInMinMaxRadius_Params params;
	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.MinRadius = MinRadius;
	params.MaxRadius = MaxRadius;
	params.RandStream = RandStream;
	params.PathDirection = PathDirection;
	params.DotLimit = DotLimit;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPointInRadius
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::GetRandomPointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetRandomPointInRadius");

	UNavigationSystem_GetRandomPointInRadius_Params params;
	params.WorldContext = WorldContext;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetRandomPoint
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UNavigationSystem::GetRandomPoint(class UObject* WorldContext, class ANavigationData* NavData, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetRandomPoint");

	UNavigationSystem_GetRandomPoint_Params params;
	params.WorldContext = WorldContext;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetPathLength
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PathLength                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENavigationQueryResult> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENavigationQueryResult> UNavigationSystem::GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetPathLength");

	UNavigationSystem_GetPathLength_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PathLength != nullptr)
		*PathLength = params.PathLength;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.GetPathCost
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          PathCost                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ANavigationData*         NavData                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENavigationQueryResult> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENavigationQueryResult> UNavigationSystem::GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathCost)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.GetPathCost");

	UNavigationSystem_GetPathCost_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.NavData = NavData;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PathCost != nullptr)
		*PathCost = params.PathCost;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.FindPathToLocationSynchronously
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PathEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AActor*                  PathfindingContext             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class UNavigationPath*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UNavigationPath* UNavigationSystem::FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.FindPathToLocationSynchronously");

	UNavigationSystem_FindPathToLocationSynchronously_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.PathEnd = PathEnd;
	params.PathfindingContext = PathfindingContext;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationSystem.FindPathToActorSynchronously
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PathStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AActor*                  GoalActor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TetherDistance                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  PathfindingContext             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class UNavigationPath*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UNavigationPath* UNavigationSystem::FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationSystem.FindPathToActorSynchronously");

	UNavigationSystem_FindPathToActorSynchronously_Params params;
	params.WorldContext = WorldContext;
	params.PathStart = PathStart;
	params.GoalActor = GoalActor;
	params.TetherDistance = TetherDistance;
	params.PathfindingContext = PathfindingContext;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WheeledVehicleMovementComponent.SetUseAutoGears
// ()
// Parameters:
// bool                           bUseAuto                       (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::SetUseAutoGears(bool bUseAuto)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.SetUseAutoGears");

	UWheeledVehicleMovementComponent_SetUseAutoGears_Params params;
	params.bUseAuto = bUseAuto;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.SetThrottleInput
// ()
// Parameters:
// float                          Throttle                       (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::SetThrottleInput(float Throttle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.SetThrottleInput");

	UWheeledVehicleMovementComponent_SetThrottleInput_Params params;
	params.Throttle = Throttle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.SetTargetGear
// ()
// Parameters:
// int                            GearNum                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::SetTargetGear(int GearNum, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.SetTargetGear");

	UWheeledVehicleMovementComponent_SetTargetGear_Params params;
	params.GearNum = GearNum;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.SetSteeringInput
// ()
// Parameters:
// float                          Steering                       (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::SetSteeringInput(float Steering)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.SetSteeringInput");

	UWheeledVehicleMovementComponent_SetSteeringInput_Params params;
	params.Steering = Steering;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.SetHandbrakeInput
// ()
// Parameters:
// bool                           bNewHandbrake                  (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::SetHandbrakeInput(bool bNewHandbrake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.SetHandbrakeInput");

	UWheeledVehicleMovementComponent_SetHandbrakeInput_Params params;
	params.bNewHandbrake = bNewHandbrake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.SetGearUp
// ()
// Parameters:
// bool                           bNewGearUp                     (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::SetGearUp(bool bNewGearUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.SetGearUp");

	UWheeledVehicleMovementComponent_SetGearUp_Params params;
	params.bNewGearUp = bNewGearUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.SetGearDown
// ()
// Parameters:
// bool                           bNewGearDown                   (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::SetGearDown(bool bNewGearDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.SetGearDown");

	UWheeledVehicleMovementComponent_SetGearDown_Params params;
	params.bNewGearDown = bNewGearDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.ServerUpdateState
// ()
// Parameters:
// float                          InSteeringInput                (Parm, ZeroConstructor, IsPlainOldData)
// float                          InThrottleInput                (Parm, ZeroConstructor, IsPlainOldData)
// float                          InBrakeInput                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InHandbrakeInput               (Parm, ZeroConstructor, IsPlainOldData)
// int                            CurrentGear                    (Parm, ZeroConstructor, IsPlainOldData)

void UWheeledVehicleMovementComponent::ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.ServerUpdateState");

	UWheeledVehicleMovementComponent_ServerUpdateState_Params params;
	params.InSteeringInput = InSteeringInput;
	params.InThrottleInput = InThrottleInput;
	params.InBrakeInput = InBrakeInput;
	params.InHandbrakeInput = InHandbrakeInput;
	params.CurrentGear = CurrentGear;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WheeledVehicleMovementComponent.GetUseAutoGears
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UWheeledVehicleMovementComponent::GetUseAutoGears()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.GetUseAutoGears");

	UWheeledVehicleMovementComponent_GetUseAutoGears_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WheeledVehicleMovementComponent.GetThrottleInput
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWheeledVehicleMovementComponent::GetThrottleInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.GetThrottleInput");

	UWheeledVehicleMovementComponent_GetThrottleInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WheeledVehicleMovementComponent.GetTargetGear
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWheeledVehicleMovementComponent::GetTargetGear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.GetTargetGear");

	UWheeledVehicleMovementComponent_GetTargetGear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WheeledVehicleMovementComponent.GetForwardSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWheeledVehicleMovementComponent::GetForwardSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.GetForwardSpeed");

	UWheeledVehicleMovementComponent_GetForwardSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WheeledVehicleMovementComponent.GetEngineRotationSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWheeledVehicleMovementComponent::GetEngineRotationSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.GetEngineRotationSpeed");

	UWheeledVehicleMovementComponent_GetEngineRotationSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WheeledVehicleMovementComponent.GetEngineMaxRotationSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UWheeledVehicleMovementComponent::GetEngineMaxRotationSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.GetEngineMaxRotationSpeed");

	UWheeledVehicleMovementComponent_GetEngineMaxRotationSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WheeledVehicleMovementComponent.GetCurrentGear
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UWheeledVehicleMovementComponent::GetCurrentGear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WheeledVehicleMovementComponent.GetCurrentGear");

	UWheeledVehicleMovementComponent_GetCurrentGear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ProjectileMovementComponent.StopSimulating
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)

void UProjectileMovementComponent::StopSimulating(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.StopSimulating");

	UProjectileMovementComponent_StopSimulating_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
// ()
// Parameters:
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)

void UProjectileMovementComponent::SetVelocityInLocalSpace(const struct FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.SetVelocityInLocalSpace");

	UProjectileMovementComponent_SetVelocityInLocalSpace_Params params;
	params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)

void UProjectileMovementComponent::OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature");

	UProjectileMovementComponent_OnProjectileStopDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ImpactVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UProjectileMovementComponent::OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature");

	UProjectileMovementComponent_OnProjectileBounceDelegate__DelegateSignature_Params params;
	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProjectileMovementComponent.LimitVelocity
// ()
// Parameters:
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UProjectileMovementComponent::LimitVelocity(const struct FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProjectileMovementComponent.LimitVelocity");

	UProjectileMovementComponent_LimitVelocity_Params params;
	params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavRelevantComponent.SetNavigationRelevancy
// ()
// Parameters:
// bool                           bRelevant                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavRelevantComponent::SetNavigationRelevancy(bool bRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavRelevantComponent.SetNavigationRelevancy");

	UNavRelevantComponent_SetNavigationRelevancy_Params params;
	params.bRelevant = bRelevant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PawnNoiseEmitterComponent.MakeNoise
// ()
// Parameters:
// class AActor*                  NoiseMaker                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Loudness                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NoiseLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPawnNoiseEmitterComponent::MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PawnNoiseEmitterComponent.MakeNoise");

	UPawnNoiseEmitterComponent_MakeNoise_Params params;
	params.NoiseMaker = NoiseMaker;
	params.Loudness = Loudness;
	params.NoiseLocation = NoiseLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsHandleComponent.SetTargetRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetRotation");

	UPhysicsHandleComponent_SetTargetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocationAndRotation");

	UPhysicsHandleComponent_SetTargetLocationAndRotation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsHandleComponent.SetTargetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::SetTargetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.SetTargetLocation");

	UPhysicsHandleComponent_SetTargetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsHandleComponent.ReleaseComponent
// ()

void UPhysicsHandleComponent::ReleaseComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.ReleaseComponent");

	UPhysicsHandleComponent_ReleaseComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsHandleComponent.GrabComponent
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 GrabLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bConstrainRotation             (Parm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GrabComponent");

	UPhysicsHandleComponent_GrabComponent_Params params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
// ()
// Parameters:
// struct FVector                 TargetLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                TargetRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPhysicsHandleComponent::GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsHandleComponent.GetTargetLocationAndRotation");

	UPhysicsHandleComponent_GetTargetLocationAndRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TargetLocation != nullptr)
		*TargetLocation = params.TargetLocation;
	if (TargetRotation != nullptr)
		*TargetRotation = params.TargetRotation;
}


// Function Engine.AtmosphericFogComponent.StartPrecompute
// ()

void UAtmosphericFogComponent::StartPrecompute()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.StartPrecompute");

	UAtmosphericFogComponent_StartPrecompute_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetSunMultiplier
// ()
// Parameters:
// float                          NewSunMultiplier               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetSunMultiplier(float NewSunMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetSunMultiplier");

	UAtmosphericFogComponent_SetSunMultiplier_Params params;
	params.NewSunMultiplier = NewSunMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetStartDistance
// ()
// Parameters:
// float                          NewStartDistance               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetStartDistance(float NewStartDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetStartDistance");

	UAtmosphericFogComponent_SetStartDistance_Params params;
	params.NewStartDistance = NewStartDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetPrecomputeParams
// ()
// Parameters:
// float                          DensityHeight                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxScatteringOrder             (Parm, ZeroConstructor, IsPlainOldData)
// int                            InscatterAltitudeSampleNum     (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetPrecomputeParams");

	UAtmosphericFogComponent_SetPrecomputeParams_Params params;
	params.DensityHeight = DensityHeight;
	params.MaxScatteringOrder = MaxScatteringOrder;
	params.InscatterAltitudeSampleNum = InscatterAltitudeSampleNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetFogTexturesDirectly
// ()
// Parameters:
// class UTexture2D*              ScatterTexture0                (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              ScatterTexture1                (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              LossTexture0                   (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              LossTexture1                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InInterpolation                (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetFogTexturesDirectly(class UTexture2D* ScatterTexture0, class UTexture2D* ScatterTexture1, class UTexture2D* LossTexture0, class UTexture2D* LossTexture1, float InInterpolation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetFogTexturesDirectly");

	UAtmosphericFogComponent_SetFogTexturesDirectly_Params params;
	params.ScatterTexture0 = ScatterTexture0;
	params.ScatterTexture1 = ScatterTexture1;
	params.LossTexture0 = LossTexture0;
	params.LossTexture1 = LossTexture1;
	params.InInterpolation = InInterpolation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetFogOverTimeIndices
// ()
// Parameters:
// int                            Texture0                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Texture1                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InInterpolation                (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetFogOverTimeIndices(int Texture0, int Texture1, float InInterpolation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetFogOverTimeIndices");

	UAtmosphericFogComponent_SetFogOverTimeIndices_Params params;
	params.Texture0 = Texture0;
	params.Texture1 = Texture1;
	params.InInterpolation = InInterpolation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetFogMultiplier
// ()
// Parameters:
// float                          NewFogMultiplier               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetFogMultiplier(float NewFogMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetFogMultiplier");

	UAtmosphericFogComponent_SetFogMultiplier_Params params;
	params.NewFogMultiplier = NewFogMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetDistanceScale
// ()
// Parameters:
// float                          NewDistanceScale               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDistanceScale(float NewDistanceScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceScale");

	UAtmosphericFogComponent_SetDistanceScale_Params params;
	params.NewDistanceScale = NewDistanceScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetDistanceOffset
// ()
// Parameters:
// float                          NewDistanceOffset              (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDistanceOffset(float NewDistanceOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDistanceOffset");

	UAtmosphericFogComponent_SetDistanceOffset_Params params;
	params.NewDistanceOffset = NewDistanceOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetDensityOffset
// ()
// Parameters:
// float                          NewDensityOffset               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDensityOffset(float NewDensityOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityOffset");

	UAtmosphericFogComponent_SetDensityOffset_Params params;
	params.NewDensityOffset = NewDensityOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetDensityMultiplier
// ()
// Parameters:
// float                          NewDensityMultiplier           (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDensityMultiplier(float NewDensityMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDensityMultiplier");

	UAtmosphericFogComponent_SetDensityMultiplier_Params params;
	params.NewDensityMultiplier = NewDensityMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetDefaultLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDefaultLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultLightColor");

	UAtmosphericFogComponent_SetDefaultLightColor_Params params;
	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetDefaultBrightness
// ()
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetDefaultBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetDefaultBrightness");

	UAtmosphericFogComponent_SetDefaultBrightness_Params params;
	params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.SetAltitudeScale
// ()
// Parameters:
// float                          NewAltitudeScale               (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::SetAltitudeScale(float NewAltitudeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.SetAltitudeScale");

	UAtmosphericFogComponent_SetAltitudeScale_Params params;
	params.NewAltitudeScale = NewAltitudeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.DisableSunDisk
// ()
// Parameters:
// bool                           NewSunDisk                     (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::DisableSunDisk(bool NewSunDisk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableSunDisk");

	UAtmosphericFogComponent_DisableSunDisk_Params params;
	params.NewSunDisk = NewSunDisk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AtmosphericFogComponent.DisableGroundScattering
// ()
// Parameters:
// bool                           NewGroundScattering            (Parm, ZeroConstructor, IsPlainOldData)

void UAtmosphericFogComponent::DisableGroundScattering(bool NewGroundScattering)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AtmosphericFogComponent.DisableGroundScattering");

	UAtmosphericFogComponent_DisableGroundScattering_Params params;
	params.NewGroundScattering = NewGroundScattering;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.Stop
// ()

void UAudioComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

	UAudioComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetWaveParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class USoundWave*              InWave                         (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundWave* InWave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

	UAudioComponent_SetWaveParameter_Params params;
	params.InName = InName;
	params.InWave = InWave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetVolumeMultiplier
// ()
// Parameters:
// float                          NewVolumeMultiplier            (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetVolumeMultiplier(float NewVolumeMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetVolumeMultiplier");

	UAudioComponent_SetVolumeMultiplier_Params params;
	params.NewVolumeMultiplier = NewVolumeMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetUISound
// ()
// Parameters:
// bool                           bInUISound                     (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetUISound(bool bInUISound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetUISound");

	UAudioComponent_SetUISound_Params params;
	params.bInUISound = bInUISound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetSound
// ()
// Parameters:
// class USoundBase*              NewSound                       (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetSound(class USoundBase* NewSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetSound");

	UAudioComponent_SetSound_Params params;
	params.NewSound = NewSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetPitchMultiplier
// ()
// Parameters:
// float                          NewPitchMultiplier             (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetPitchMultiplier(float NewPitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetPitchMultiplier");

	UAudioComponent_SetPitchMultiplier_Params params;
	params.NewPitchMultiplier = NewPitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetIntParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetIntParameter(const struct FName& InName, int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetIntParameter");

	UAudioComponent_SetIntParameter_Params params;
	params.InName = InName;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetFloatParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

	UAudioComponent_SetFloatParameter_Params params;
	params.InName = InName;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetBoolParameter
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::SetBoolParameter(const struct FName& InName, bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetBoolParameter");

	UAudioComponent_SetBoolParameter_Params params;
	params.InName = InName;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.Play
// ()
// Parameters:
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::Play(float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

	UAudioComponent_Play_Params params;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OnQueueSubtitles__DelegateSignature
// ()
// Parameters:
// TArray<struct FSubtitleCue>    Subtitles                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          CueDuration                    (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::OnQueueSubtitles__DelegateSignature(TArray<struct FSubtitleCue> Subtitles, float CueDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnQueueSubtitles__DelegateSignature");

	UAudioComponent_OnQueueSubtitles__DelegateSignature_Params params;
	params.Subtitles = Subtitles;
	params.CueDuration = CueDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OnAudioFinished__DelegateSignature
// ()

void UAudioComponent::OnAudioFinished__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnAudioFinished__DelegateSignature");

	UAudioComponent_OnAudioFinished__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.IsPlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAudioComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

	UAudioComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.FadeOut
// ()
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

	UAudioComponent_FadeOut_Params params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.FadeIn
// ()
// Parameters:
// float                          FadeInDuration                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeVolumeLevel                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

	UAudioComponent_FadeIn_Params params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.AdjustVolume
// ()
// Parameters:
// float                          AdjustVolumeDuration           (Parm, ZeroConstructor, IsPlainOldData)
// float                          AdjustVolumeLevel              (Parm, ZeroConstructor, IsPlainOldData)

void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

	UAudioComponent_AdjustVolume_Params params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.AdjustAttenuation
// ()
// Parameters:
// struct FAttenuationSettings    InAttenuationSettings          (ConstParm, Parm, OutParm, ReferenceParm)

void UAudioComponent::AdjustAttenuation(const struct FAttenuationSettings& InAttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustAttenuation");

	UAudioComponent_AdjustAttenuation_Params params;
	params.InAttenuationSettings = InAttenuationSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraComponent.GetCameraView
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FMinimalViewInfo        DesiredView                    (Parm, OutParm)

void UCameraComponent::GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraComponent.GetCameraView");

	UCameraComponent_GetCameraView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredView != nullptr)
		*DesiredView = params.DesiredView;
}


// Function Engine.DecalComponent.SetSortOrder
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetSortOrder(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetSortOrder");

	UDecalComponent_SetSortOrder_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.SetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (Parm, ZeroConstructor, IsPlainOldData)

void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetDecalMaterial");

	UDecalComponent_SetDecalMaterial_Params params;
	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.GetDecalMaterial
// ()
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetDecalMaterial");

	UDecalComponent_GetDecalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.CreateDynamicMaterialInstance
// ()
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UDecalComponent::CreateDynamicMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.CreateDynamicMaterialInstance");

	UDecalComponent_CreateDynamicMaterialInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.CheckDestructionFirst
// ()

void UDecalComponent::CheckDestructionFirst()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.CheckDestructionFirst");

	UDecalComponent_CheckDestructionFirst_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.CheckDestruction
// ()

void UDecalComponent::CheckDestruction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.CheckDestruction");

	UDecalComponent_CheckDestruction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetStartDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetStartDistance");

	UExponentialHeightFogComponent_SetStartDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogMaxOpacity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogMaxOpacity");

	UExponentialHeightFogComponent_SetFogMaxOpacity_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
// ()
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogInscatteringColor(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogInscatteringColor");

	UExponentialHeightFogComponent_SetFogInscatteringColor_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogHeightFalloff(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogHeightFalloff");

	UExponentialHeightFogComponent_SetFogHeightFalloff_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetFogDensity
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetFogDensity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetFogDensity");

	UExponentialHeightFogComponent_SetFogDensity_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance");

	UExponentialHeightFogComponent_SetDirectionalInscatteringStartDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringExponent(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent");

	UExponentialHeightFogComponent_SetDirectionalInscatteringExponent_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
// ()
// Parameters:
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetDirectionalInscatteringColor(const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor");

	UExponentialHeightFogComponent_SetDirectionalInscatteringColor_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetAdditionalStartDistance
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UExponentialHeightFogComponent::SetAdditionalStartDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetAdditionalStartDistance");

	UExponentialHeightFogComponent_SetAdditionalStartDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetShadowDistanceFade
// ()
// Parameters:
// float                          NewFadeFraction                (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetShadowDistanceFade(float NewFadeFraction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetShadowDistanceFade");

	ULightComponent_SetShadowDistanceFade_Params params;
	params.NewFadeFraction = NewFadeFraction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetLightFunctionScale
// ()
// Parameters:
// struct FVector                 NewLightFunctionScale          (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionScale(const struct FVector& NewLightFunctionScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionScale");

	ULightComponent_SetLightFunctionScale_Params params;
	params.NewLightFunctionScale = NewLightFunctionScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetLightFunctionMaterial
// ()
// Parameters:
// class UMaterialInterface*      NewLightFunctionMaterial       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionMaterial");

	ULightComponent_SetLightFunctionMaterial_Params params;
	params.NewLightFunctionMaterial = NewLightFunctionMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetLightFunctionFadeDistance
// ()
// Parameters:
// float                          NewLightFunctionFadeDistance   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightFunctionFadeDistance");

	ULightComponent_SetLightFunctionFadeDistance_Params params;
	params.NewLightFunctionFadeDistance = NewLightFunctionFadeDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightColor");

	ULightComponent_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIntensity");

	ULightComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetIESTexture
// ()
// Parameters:
// class UTextureLightProfile*    NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetIESTexture(class UTextureLightProfile* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetIESTexture");

	ULightComponent_SetIESTexture_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetEnableLightShaftBloom
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetEnableLightShaftBloom(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnableLightShaftBloom");

	ULightComponent_SetEnableLightShaftBloom_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetCastShadows
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetCastShadows(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetCastShadows");

	ULightComponent_SetCastShadows_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetBloomTint
// ()
// Parameters:
// struct FColor                  NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomTint(const struct FColor& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomTint");

	ULightComponent_SetBloomTint_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetBloomThreshold
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomThreshold(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomThreshold");

	ULightComponent_SetBloomThreshold_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetBloomScale
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetBloomScale(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetBloomScale");

	ULightComponent_SetBloomScale_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetAffectTranslucentLighting
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetAffectTranslucentLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectTranslucentLighting");

	ULightComponent_SetAffectTranslucentLighting_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetAffectDynamicIndirectLighting
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void ULightComponent::SetAffectDynamicIndirectLighting(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetAffectDynamicIndirectLighting");

	ULightComponent_SetAffectDynamicIndirectLighting_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetShadowDistanceFadeoutFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction");

	UDirectionalLightComponent_SetShadowDistanceFadeoutFraction_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetOcclusionMaskDarkness(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetOcclusionMaskDarkness");

	UDirectionalLightComponent_SetOcclusionMaskDarkness_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
// ()
// Parameters:
// struct FVector                 NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetLightShaftOverrideDirection(const struct FVector& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetLightShaftOverrideDirection");

	UDirectionalLightComponent_SetLightShaftOverrideDirection_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
// ()
// Parameters:
// bool                           bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetEnableLightShaftOcclusion(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion");

	UDirectionalLightComponent_SetEnableLightShaftOcclusion_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowDistanceStationaryLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight");

	UDirectionalLightComponent_SetDynamicShadowDistanceStationaryLight_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowDistanceMovableLight(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight");

	UDirectionalLightComponent_SetDynamicShadowDistanceMovableLight_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetDynamicShadowCascades
// ()
// Parameters:
// int                            NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetDynamicShadowCascades(int NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetDynamicShadowCascades");

	UDirectionalLightComponent_SetDynamicShadowCascades_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCascadeTransitionFraction(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeTransitionFraction");

	UDirectionalLightComponent_SetCascadeTransitionFraction_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent
// ()
// Parameters:
// float                          NewValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UDirectionalLightComponent::SetCascadeDistributionExponent(float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.SetCascadeDistributionExponent");

	UDirectionalLightComponent_SetCascadeDistributionExponent_Params params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.SetSourceRadius
// ()
// Parameters:
// float                          bNewValue                      (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetSourceRadius(float bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetSourceRadius");

	UPointLightComponent_SetSourceRadius_Params params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.SetLightFalloffExponent
// ()
// Parameters:
// float                          NewLightFalloffExponent        (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetLightFalloffExponent(float NewLightFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetLightFalloffExponent");

	UPointLightComponent_SetLightFalloffExponent_Params params;
	params.NewLightFalloffExponent = NewLightFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.SetAttenuationRadius
// ()
// Parameters:
// float                          NewRadius                      (Parm, ZeroConstructor, IsPlainOldData)

void UPointLightComponent::SetAttenuationRadius(float NewRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetAttenuationRadius");

	UPointLightComponent_SetAttenuationRadius_Params params;
	params.NewRadius = NewRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpotLightComponent.SetOuterConeAngle
// ()
// Parameters:
// float                          NewOuterConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetOuterConeAngle(float NewOuterConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetOuterConeAngle");

	USpotLightComponent_SetOuterConeAngle_Params params;
	params.NewOuterConeAngle = NewOuterConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpotLightComponent.SetInnerConeAngle
// ()
// Parameters:
// float                          NewInnerConeAngle              (Parm, ZeroConstructor, IsPlainOldData)

void USpotLightComponent::SetInnerConeAngle(float NewInnerConeAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetInnerConeAngle");

	USpotLightComponent_SetInnerConeAngle_Params params;
	params.NewInnerConeAngle = NewInnerConeAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkyLightComponent.SetOcclusionTint
// ()
// Parameters:
// struct FColor                  InTint                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USkyLightComponent::SetOcclusionTint(const struct FColor& InTint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetOcclusionTint");

	USkyLightComponent_SetOcclusionTint_Params params;
	params.InTint = InTint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkyLightComponent.SetMinOcclusion
// ()
// Parameters:
// float                          InMinOcclusion                 (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetMinOcclusion(float InMinOcclusion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetMinOcclusion");

	USkyLightComponent_SetMinOcclusion_Params params;
	params.InMinOcclusion = InMinOcclusion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkyLightComponent.SetLightColor
// ()
// Parameters:
// struct FLinearColor            NewLightColor                  (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetLightColor(const struct FLinearColor& NewLightColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetLightColor");

	USkyLightComponent_SetLightColor_Params params;
	params.NewLightColor = NewLightColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkyLightComponent.SetIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetIntensity");

	USkyLightComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkyLightComponent.SetCubemap
// ()
// Parameters:
// class UTextureCube*            NewCubemap                     (Parm, ZeroConstructor, IsPlainOldData)

void USkyLightComponent::SetCubemap(class UTextureCube* NewCubemap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.SetCubemap");

	USkyLightComponent_SetCubemap_Params params;
	params.NewCubemap = NewCubemap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkyLightComponent.RecaptureSky
// ()

void USkyLightComponent::RecaptureSky()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkyLightComponent.RecaptureSky");

	USkyLightComponent_RecaptureSky_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ArrowComponent.SetArrowColor_New
// ()
// Parameters:
// struct FLinearColor            NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UArrowComponent::SetArrowColor_New(const struct FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArrowComponent.SetArrowColor_New");

	UArrowComponent_SetArrowColor_New_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ArrowComponent.SetArrowColor_DEPRECATED
// ()
// Parameters:
// struct FColor                  NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UArrowComponent::SetArrowColor_DEPRECATED(const struct FColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArrowComponent.SetArrowColor_DEPRECATED");

	UArrowComponent_SetArrowColor_DEPRECATED_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BillboardComponent.SetUV
// ()
// Parameters:
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetUV");

	UBillboardComponent_SetUV_Params params;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BillboardComponent.SetSpriteAndUV
// ()
// Parameters:
// class UTexture2D*              NewSprite                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewU                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewUL                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewV                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewVL                          (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSpriteAndUV");

	UBillboardComponent_SetSpriteAndUV_Params params;
	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BillboardComponent.SetSprite
// ()
// Parameters:
// class UTexture2D*              NewSprite                      (Parm, ZeroConstructor, IsPlainOldData)

void UBillboardComponent::SetSprite(class UTexture2D* NewSprite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BillboardComponent.SetSprite");

	UBillboardComponent_SetSprite_Params params;
	params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BrushComponent.GetBoxBrushXYZ
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UBrushComponent::GetBoxBrushXYZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BrushComponent.GetBoxBrushXYZ");

	UBrushComponent_GetBoxBrushXYZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialBillboardComponent.AddElement
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             DistanceToOpacityCurve         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSizeIsInScreenSpace           (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseSizeX                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseSizeY                      (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             DistanceToSizeCurve            (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialBillboardComponent::AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialBillboardComponent.AddElement");

	UMaterialBillboardComponent_AddElement_Params params;
	params.Material = Material;
	params.DistanceToOpacityCurve = DistanceToOpacityCurve;
	params.bSizeIsInScreenSpace = bSizeIsInScreenSpace;
	params.BaseSizeX = BaseSizeX;
	params.BaseSizeY = BaseSizeY;
	params.DistanceToSizeCurve = DistanceToSizeCurve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DestructibleComponent.SetDestructibleMesh
// ()
// Parameters:
// class UDestructibleMesh*       NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::SetDestructibleMesh(class UDestructibleMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.SetDestructibleMesh");

	UDestructibleComponent_SetDestructibleMesh_Params params;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DestructibleComponent.GetDestructibleMesh
// ()
// Parameters:
// class UDestructibleMesh*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UDestructibleMesh* UDestructibleComponent::GetDestructibleMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.GetDestructibleMesh");

	UDestructibleComponent_GetDestructibleMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DestructibleComponent.ComponentFractureSignature__DelegateSignature
// ()
// Parameters:
// struct FVector                 HitPoint                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 HitDirection                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UDestructibleComponent::ComponentFractureSignature__DelegateSignature(const struct FVector& HitPoint, const struct FVector& HitDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.ComponentFractureSignature__DelegateSignature");

	UDestructibleComponent_ComponentFractureSignature__DelegateSignature_Params params;
	params.HitPoint = HitPoint;
	params.HitDirection = HitDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DestructibleComponent.ApplyRadiusDamage
// ()
// Parameters:
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HurtOrigin                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ImpulseStrength                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFullDamage                    (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.ApplyRadiusDamage");

	UDestructibleComponent_ApplyRadiusDamage_Params params;
	params.BaseDamage = BaseDamage;
	params.HurtOrigin = HurtOrigin;
	params.DamageRadius = DamageRadius;
	params.ImpulseStrength = ImpulseStrength;
	params.bFullDamage = bFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DestructibleComponent.ApplyDamage
// ()
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ImpulseDir                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ImpulseStrength                (Parm, ZeroConstructor, IsPlainOldData)

void UDestructibleComponent::ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DestructibleComponent.ApplyDamage");

	UDestructibleComponent_ApplyDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.HitLocation = HitLocation;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseStrength = ImpulseStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PoseableMeshComponent.SetBoneTransformByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneTransformByName(const struct FName& BoneName, const struct UObject_FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneTransformByName");

	UPoseableMeshComponent_SetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.InTransform = InTransform;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PoseableMeshComponent.SetBoneScaleByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InScale3D                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneScaleByName");

	UPoseableMeshComponent_SetBoneScaleByName_Params params;
	params.BoneName = BoneName;
	params.InScale3D = InScale3D;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PoseableMeshComponent.SetBoneRotationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneRotationByName");

	UPoseableMeshComponent_SetBoneRotationByName_Params params;
	params.BoneName = BoneName;
	params.InRotation = InRotation;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PoseableMeshComponent.SetBoneLocationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.SetBoneLocationByName");

	UPoseableMeshComponent_SetBoneLocationByName_Params params;
	params.BoneName = BoneName;
	params.InLocation = InLocation;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PoseableMeshComponent.ResetBoneTransformByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void UPoseableMeshComponent::ResetBoneTransformByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.ResetBoneTransformByName");

	UPoseableMeshComponent_ResetBoneTransformByName_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PoseableMeshComponent.GetBoneTransformByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UPoseableMeshComponent::GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneTransformByName");

	UPoseableMeshComponent_GetBoneTransformByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneScaleByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPoseableMeshComponent::GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneScaleByName");

	UPoseableMeshComponent_GetBoneScaleByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneRotationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UPoseableMeshComponent::GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneRotationByName");

	UPoseableMeshComponent_GetBoneRotationByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PoseableMeshComponent.GetBoneLocationByName
// ()
// Parameters:
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBoneSpaces>       BoneSpace                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPoseableMeshComponent::GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PoseableMeshComponent.GetBoneLocationByName");

	UPoseableMeshComponent_GetBoneLocationByName_Params params;
	params.BoneName = BoneName;
	params.BoneSpace = BoneSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetStaticMesh
// ()
// Parameters:
// class UStaticMesh*             NewMesh                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

	UStaticMeshComponent_SetStaticMesh_Params params;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.OnRep_StaticMesh
// ()
// Parameters:
// class UStaticMesh*             OldStaticMesh                  (Parm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::OnRep_StaticMesh(class UStaticMesh* OldStaticMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.OnRep_StaticMesh");

	UStaticMeshComponent_OnRep_StaticMesh_Params params;
	params.OldStaticMesh = OldStaticMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshComponent.GetLocalBounds
// ()
// Parameters:
// struct FVector                 Min                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Max                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UStaticMeshComponent::GetLocalBounds(struct FVector* Min, struct FVector* Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.GetLocalBounds");

	UStaticMeshComponent_GetLocalBounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Min != nullptr)
		*Min = params.Min;
	if (Max != nullptr)
		*Max = params.Max;
}


// Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
// ()
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      NewInstanceTransform           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::UpdateInstanceTransform(int InstanceIndex, const struct UObject_FTransform& NewInstanceTransform, bool bWorldSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.UpdateInstanceTransform");

	UInstancedStaticMeshComponent_UpdateInstanceTransform_Params params;
	params.InstanceIndex = InstanceIndex;
	params.NewInstanceTransform = NewInstanceTransform;
	params.bWorldSpace = bWorldSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.ShowInstance
// ()
// Parameters:
// int                            originalIndex                  (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::ShowInstance(int originalIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.ShowInstance");

	UInstancedStaticMeshComponent_ShowInstance_Params params;
	params.originalIndex = originalIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InstancedStaticMeshComponent.SetCullDistances
// ()
// Parameters:
// int                            StartCullDistance              (Parm, ZeroConstructor, IsPlainOldData)
// int                            EndCullDistance                (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::SetCullDistances(int StartCullDistance, int EndCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.SetCullDistances");

	UInstancedStaticMeshComponent_SetCullDistances_Params params;
	params.StartCullDistance = StartCullDistance;
	params.EndCullDistance = EndCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InstancedStaticMeshComponent.RemoveInstance
// ()
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitDirection                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::RemoveInstance(int InstanceIndex, const struct FVector& HitDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.RemoveInstance");

	UInstancedStaticMeshComponent_RemoveInstance_Params params;
	params.InstanceIndex = InstanceIndex;
	params.HitDirection = HitDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.MulticastShowInstance
// ()
// Parameters:
// int                            originalIndex                  (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::MulticastShowInstance(int originalIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.MulticastShowInstance");

	UInstancedStaticMeshComponent_MulticastShowInstance_Params params;
	params.originalIndex = originalIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InstancedStaticMeshComponent.MulticastHideInstance
// ()
// Parameters:
// int                            originalIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitDirection                   (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::MulticastHideInstance(int originalIndex, const struct FVector& HitDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.MulticastHideInstance");

	UInstancedStaticMeshComponent_MulticastHideInstance_Params params;
	params.originalIndex = originalIndex;
	params.HitDirection = HitDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InstancedStaticMeshComponent.GetPositionOfInstance
// ()
// Parameters:
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UInstancedStaticMeshComponent::GetPositionOfInstance(int index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetPositionOfInstance");

	UInstancedStaticMeshComponent_GetPositionOfInstance_Params params;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceTransform
// ()
// Parameters:
// int                            InstanceIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      OutInstanceTransform           (Parm, OutParm, IsPlainOldData)
// bool                           bWorldSpace                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UInstancedStaticMeshComponent::GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct UObject_FTransform* OutInstanceTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceTransform");

	UInstancedStaticMeshComponent_GetInstanceTransform_Params params;
	params.InstanceIndex = InstanceIndex;
	params.bWorldSpace = bWorldSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutInstanceTransform != nullptr)
		*OutInstanceTransform = params.OutInstanceTransform;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.GetInstanceCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::GetInstanceCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.GetInstanceCount");

	UInstancedStaticMeshComponent_GetInstanceCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.DealDirectDamage
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// int                            HitBodyIndex                   (Parm, ZeroConstructor, IsPlainOldData)

void UInstancedStaticMeshComponent::DealDirectDamage(class APlayerController* ForPC, float DamageAmount, class UClass* DamageTypeClass, int HitBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.DealDirectDamage");

	UInstancedStaticMeshComponent_DealDirectDamage_Params params;
	params.ForPC = ForPC;
	params.DamageAmount = DamageAmount;
	params.DamageTypeClass = DamageTypeClass;
	params.HitBodyIndex = HitBodyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InstancedStaticMeshComponent.ClearInstances
// ()

void UInstancedStaticMeshComponent::ClearInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.ClearInstances");

	UInstancedStaticMeshComponent_ClearInstances_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
// ()
// Parameters:
// struct UObject_FTransform      WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::AddInstanceWorldSpace(const struct UObject_FTransform& WorldTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace");

	UInstancedStaticMeshComponent_AddInstanceWorldSpace_Params params;
	params.WorldTransform = WorldTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InstancedStaticMeshComponent.AddInstance
// ()
// Parameters:
// struct UObject_FTransform      InstanceTransform              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UInstancedStaticMeshComponent::AddInstance(const struct UObject_FTransform& InstanceTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InstancedStaticMeshComponent.AddInstance");

	UInstancedStaticMeshComponent_AddInstance_Params params;
	params.InstanceTransform = InstanceTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.SetStartTangent
// ()
// Parameters:
// struct FVector                 StartTangent                   (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartTangent(const struct FVector& StartTangent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartTangent");

	USplineMeshComponent_SetStartTangent_Params params;
	params.StartTangent = StartTangent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetStartScale
// ()
// Parameters:
// struct FVector2D               StartScale                     (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartScale(const struct FVector2D& StartScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartScale");

	USplineMeshComponent_SetStartScale_Params params;
	params.StartScale = StartScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetStartRoll
// ()
// Parameters:
// float                          StartRoll                      (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartRoll(float StartRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartRoll");

	USplineMeshComponent_SetStartRoll_Params params;
	params.StartRoll = StartRoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetStartPosition
// ()
// Parameters:
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartPosition(const struct FVector& StartPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartPosition");

	USplineMeshComponent_SetStartPosition_Params params;
	params.StartPos = StartPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetStartOffset
// ()
// Parameters:
// struct FVector2D               StartOffset                    (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartOffset(const struct FVector2D& StartOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartOffset");

	USplineMeshComponent_SetStartOffset_Params params;
	params.StartOffset = StartOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetStartAndEnd
// ()
// Parameters:
// struct FVector                 StartPos                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartTangent                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EndPos                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EndTangent                     (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetStartAndEnd");

	USplineMeshComponent_SetStartAndEnd_Params params;
	params.StartPos = StartPos;
	params.StartTangent = StartTangent;
	params.EndPos = EndPos;
	params.EndTangent = EndTangent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetEndTangent
// ()
// Parameters:
// struct FVector                 EndTangent                     (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndTangent(const struct FVector& EndTangent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndTangent");

	USplineMeshComponent_SetEndTangent_Params params;
	params.EndTangent = EndTangent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetEndScale
// ()
// Parameters:
// struct FVector2D               EndScale                       (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndScale(const struct FVector2D& EndScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndScale");

	USplineMeshComponent_SetEndScale_Params params;
	params.EndScale = EndScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetEndRoll
// ()
// Parameters:
// float                          EndRoll                        (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndRoll(float EndRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndRoll");

	USplineMeshComponent_SetEndRoll_Params params;
	params.EndRoll = EndRoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetEndPosition
// ()
// Parameters:
// struct FVector                 EndPos                         (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndPosition(const struct FVector& EndPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndPosition");

	USplineMeshComponent_SetEndPosition_Params params;
	params.EndPos = EndPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.SetEndOffset
// ()
// Parameters:
// struct FVector2D               EndOffset                      (Parm, ZeroConstructor, IsPlainOldData)

void USplineMeshComponent::SetEndOffset(const struct FVector2D& EndOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.SetEndOffset");

	USplineMeshComponent_SetEndOffset_Params params;
	params.EndOffset = EndOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineMeshComponent.GetStartTangent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetStartTangent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartTangent");

	USplineMeshComponent_GetStartTangent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartScale
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetStartScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartScale");

	USplineMeshComponent_GetStartScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartRoll
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetStartRoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartRoll");

	USplineMeshComponent_GetStartRoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartPosition
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetStartPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartPosition");

	USplineMeshComponent_GetStartPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetStartOffset
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetStartOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetStartOffset");

	USplineMeshComponent_GetStartOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndTangent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetEndTangent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndTangent");

	USplineMeshComponent_GetEndTangent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndScale
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetEndScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndScale");

	USplineMeshComponent_GetEndScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndRoll
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineMeshComponent::GetEndRoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndRoll");

	USplineMeshComponent_GetEndRoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndPosition
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineMeshComponent::GetEndPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndPosition");

	USplineMeshComponent_GetEndPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineMeshComponent.GetEndOffset
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D USplineMeshComponent::GetEndOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineMeshComponent.GetEndOffset");

	USplineMeshComponent_GetEndOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterial
// ()
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

	UMaterialInterface_GetPhysicalMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetBaseMaterial
// ()
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterial* UMaterialInterface::GetBaseMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetBaseMaterial");

	UMaterialInterface_GetBaseMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.ContainsEmitterType
// ()
// Parameters:
// class UClass*                  TypeData                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UParticleSystem::ContainsEmitterType(class UClass* TypeData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.ContainsEmitterType");

	UParticleSystem_ContainsEmitterType_Params params;
	params.TypeData = TypeData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BoxComponent.SetBoxExtent
// ()
// Parameters:
// struct FVector                 InBoxExtent                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UBoxComponent::SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.SetBoxExtent");

	UBoxComponent_SetBoxExtent_Params params;
	params.InBoxExtent = InBoxExtent;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BoxComponent.GetUnscaledBoxExtent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UBoxComponent::GetUnscaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetUnscaledBoxExtent");

	UBoxComponent_GetUnscaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BoxComponent.GetScaledBoxExtent
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UBoxComponent::GetScaledBoxExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BoxComponent.GetScaledBoxExtent");

	UBoxComponent_GetScaledBoxExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.SetCapsuleSize
// ()
// Parameters:
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InHalfHeight                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleSize");

	UCapsuleComponent_SetCapsuleSize_Params params;
	params.InRadius = InRadius;
	params.InHalfHeight = InHalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CapsuleComponent.SetCapsuleRadius
// ()
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleRadius(float Radius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleRadius");

	UCapsuleComponent_SetCapsuleRadius_Params params;
	params.Radius = Radius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CapsuleComponent.SetCapsuleHalfHeight
// ()
// Parameters:
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.SetCapsuleHalfHeight");

	UCapsuleComponent_SetCapsuleHalfHeight_Params params;
	params.HalfHeight = HalfHeight;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleSize
// ()
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleSize");

	UCapsuleComponent_GetUnscaledCapsuleSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetUnscaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleRadius");

	UCapsuleComponent_GetUnscaledCapsuleRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetUnscaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight");

	UCapsuleComponent_GetUnscaledCapsuleHalfHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetShapeScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetShapeScale");

	UCapsuleComponent_GetShapeScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleSize
// ()
// Parameters:
// float                          OutRadius                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutHalfHeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCapsuleComponent::GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleSize");

	UCapsuleComponent_GetScaledCapsuleSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRadius != nullptr)
		*OutRadius = params.OutRadius;
	if (OutHalfHeight != nullptr)
		*OutHalfHeight = params.OutHalfHeight;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetScaledCapsuleRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleRadius");

	UCapsuleComponent_GetScaledCapsuleRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCapsuleComponent::GetScaledCapsuleHalfHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CapsuleComponent.GetScaledCapsuleHalfHeight");

	UCapsuleComponent_GetScaledCapsuleHalfHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SphereComponent.SetSphereRadius
// ()
// Parameters:
// float                          InSphereRadius                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUpdateOverlaps                (Parm, ZeroConstructor, IsPlainOldData)

void USphereComponent::SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.SetSphereRadius");

	USphereComponent_SetSphereRadius_Params params;
	params.InSphereRadius = InSphereRadius;
	params.bUpdateOverlaps = bUpdateOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SphereComponent.GetUnscaledSphereRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetUnscaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetUnscaledSphereRadius");

	USphereComponent_GetUnscaledSphereRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetShapeScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetShapeScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetShapeScale");

	USphereComponent_GetShapeScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SphereComponent.GetScaledSphereRadius
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USphereComponent::GetScaledSphereRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SphereComponent.GetScaledSphereRadius");

	USphereComponent_GetScaledSphereRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TextRenderComponent.SetYScale
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetYScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetYScale");

	UTextRenderComponent_SetYScale_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetXScale
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetXScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetXScale");

	UTextRenderComponent_SetXScale_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetWorldSize
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetWorldSize(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetWorldSize");

	UTextRenderComponent_SetWorldSize_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetVerticalAlignment
// ()
// Parameters:
// TEnumAsByte<EVerticalTextAligment> Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetVerticalAlignment");

	UTextRenderComponent_SetVerticalAlignment_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetTextRenderColor
// ()
// Parameters:
// struct FColor                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetTextRenderColor(const struct FColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextRenderColor");

	UTextRenderComponent_SetTextRenderColor_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetTextMaterial
// ()
// Parameters:
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetTextMaterial(class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetTextMaterial");

	UTextRenderComponent_SetTextMaterial_Params params;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetText
// ()
// Parameters:
// class FString                  Value                          (Parm, ZeroConstructor)

void UTextRenderComponent::SetText(const class FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetText");

	UTextRenderComponent_SetText_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetHorizSpacingAdjust
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetHorizSpacingAdjust(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizSpacingAdjust");

	UTextRenderComponent_SetHorizSpacingAdjust_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetHorizontalAlignment
// ()
// Parameters:
// TEnumAsByte<EHorizTextAligment> Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetHorizontalAlignment");

	UTextRenderComponent_SetHorizontalAlignment_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.SetFont
// ()
// Parameters:
// class UFont*                   Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTextRenderComponent::SetFont(class UFont* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.SetFont");

	UTextRenderComponent_SetFont_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextRenderComponent.GetTextWorldSize
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UTextRenderComponent::GetTextWorldSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextWorldSize");

	UTextRenderComponent_GetTextWorldSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TextRenderComponent.GetTextLocalSize
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UTextRenderComponent::GetTextLocalSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextRenderComponent.GetTextLocalSize");

	UTextRenderComponent_GetTextLocalSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VectorFieldComponent.SetIntensity
// ()
// Parameters:
// float                          NewIntensity                   (Parm, ZeroConstructor, IsPlainOldData)

void UVectorFieldComponent::SetIntensity(float NewIntensity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VectorFieldComponent.SetIntensity");

	UVectorFieldComponent_SetIntensity_Params params;
	params.NewIntensity = NewIntensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialForceComponent.RemoveObjectTypeToAffect
// ()
// Parameters:
// TEnumAsByte<EObjectTypeQuery>  ObjectType                     (Parm, ZeroConstructor, IsPlainOldData)

void URadialForceComponent::RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.RemoveObjectTypeToAffect");

	URadialForceComponent_RemoveObjectTypeToAffect_Params params;
	params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialForceComponent.FireImpulse
// ()

void URadialForceComponent::FireImpulse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.FireImpulse");

	URadialForceComponent_FireImpulse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialForceComponent.AddObjectTypeToAffect
// ()
// Parameters:
// TEnumAsByte<EObjectTypeQuery>  ObjectType                     (Parm, ZeroConstructor, IsPlainOldData)

void URadialForceComponent::AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialForceComponent.AddObjectTypeToAffect");

	URadialForceComponent_AddObjectTypeToAffect_Params params;
	params.ObjectType = ObjectType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ReflectionCaptureComponent.SetBrightness
// ()
// Parameters:
// float                          NewBrightness                  (Parm, ZeroConstructor, IsPlainOldData)

void UReflectionCaptureComponent::SetBrightness(float NewBrightness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReflectionCaptureComponent.SetBrightness");

	UReflectionCaptureComponent_SetBrightness_Params params;
	params.NewBrightness = NewBrightness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ReflectionCaptureComponent.ForceUpdateReflectionCapture
// ()

void UReflectionCaptureComponent::ForceUpdateReflectionCapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReflectionCaptureComponent.ForceUpdateReflectionCapture");

	UReflectionCaptureComponent_ForceUpdateReflectionCapture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.HideComponent
// ()
// Parameters:
// class UPrimitiveComponent*     InComponent                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void USceneCaptureComponent::HideComponent(class UPrimitiveComponent* InComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideComponent");

	USceneCaptureComponent_HideComponent_Params params;
	params.InComponent = InComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.HideActorComponents
// ()
// Parameters:
// class AActor*                  InActor                        (Parm, ZeroConstructor, IsPlainOldData)

void USceneCaptureComponent::HideActorComponents(class AActor* InActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.HideActorComponents");

	USceneCaptureComponent_HideActorComponents_Params params;
	params.InActor = InActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.SetWorldSplinePointsAndType
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<ESplinePointType>  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetWorldSplinePointsAndType(TArray<struct FVector> Points, TEnumAsByte<ESplinePointType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetWorldSplinePointsAndType");

	USplineComponent_SetWorldSplinePointsAndType_Params params;
	params.Points = Points;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.SetWorldLocationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetWorldLocationAtSplinePoint");

	USplineComponent_SetWorldLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.SetTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InTangent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetTangentAtSplinePoint");

	USplineComponent_SetTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;
	params.InTangent = InTangent;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.SetSplineWorldPoints
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USplineComponent::SetSplineWorldPoints(TArray<struct FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineWorldPoints");

	USplineComponent_SetSplineWorldPoints_Params params;
	params.Points = Points;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.SetSplinePointTypeAllPoints
// ()
// Parameters:
// TEnumAsByte<ESplinePointType>  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetSplinePointTypeAllPoints(TEnumAsByte<ESplinePointType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePointTypeAllPoints");

	USplineComponent_SetSplinePointTypeAllPoints_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.SetSplinePointType
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplinePointType>  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void USplineComponent::SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplinePointType");

	USplineComponent_SetSplinePointType_Params params;
	params.PointIndex = PointIndex;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.SetSplineLocalPoints
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USplineComponent::SetSplineLocalPoints(TArray<struct FVector> Points)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.SetSplineLocalPoints");

	USplineComponent_SetSplineLocalPoints_Params params;
	params.Points = Points;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldTangentAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline");

	USplineComponent_GetWorldTangentAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USplineComponent::GetWorldRotationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtTime");

	USplineComponent_GetWorldRotationAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator USplineComponent::GetWorldRotationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline");

	USplineComponent_GetWorldRotationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldLocationAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtTime");

	USplineComponent_GetWorldLocationAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldLocationAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtSplinePoint");

	USplineComponent_GetWorldLocationAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldLocationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline");

	USplineComponent_GetWorldLocationAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseConstantVelocity           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtTime");

	USplineComponent_GetWorldDirectionAtTime_Params params;
	params.Time = Time;
	params.bUseConstantVelocity = bUseConstantVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::GetWorldDirectionAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline");

	USplineComponent_GetWorldDirectionAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplinePointType
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESplinePointType>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ESplinePointType> USplineComponent::GetSplinePointType(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplinePointType");

	USplineComponent_GetSplinePointType_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplineLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetSplineLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplineLength");

	USplineComponent_GetSplineLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetNumSplinePoints
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int USplineComponent::GetNumSplinePoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetNumSplinePoints");

	USplineComponent_GetNumSplinePoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocalLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocalTangent                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void USplineComponent::GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint");

	USplineComponent_GetLocalLocationAndTangentAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocalLocation != nullptr)
		*LocalLocation = params.LocalLocation;
	if (LocalTangent != nullptr)
		*LocalTangent = params.LocalTangent;
}


// Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetInputKeyAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline");

	USplineComponent_GetInputKeyAtDistanceAlongSpline_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
// ()
// Parameters:
// int                            PointIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::GetDistanceAlongSplineAtSplinePoint(int PointIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint");

	USplineComponent_GetDistanceAlongSplineAtSplinePoint_Params params;
	params.PointIndex = PointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindLocationClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindLocationClosestToWorldLocation");

	USplineComponent_FindLocationClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USplineComponent::FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindInputKeyClosestToWorldLocation");

	USplineComponent_FindInputKeyClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.FindDirectionClosestToWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USplineComponent::FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.FindDirectionClosestToWorldLocation");

	USplineComponent_FindDirectionClosestToWorldLocation_Params params;
	params.WorldLocation = WorldLocation;
	params.CoordinateSpace = CoordinateSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.ClearSplinePoints
// ()

void USplineComponent::ClearSplinePoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.ClearSplinePoints");

	USplineComponent_ClearSplinePoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.AddSplineWorldPoint
// ()
// Parameters:
// struct FVector                 Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::AddSplineWorldPoint(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineWorldPoint");

	USplineComponent_AddSplineWorldPoint_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.AddSplineLocalPoint
// ()
// Parameters:
// struct FVector                 Position                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void USplineComponent::AddSplineLocalPoint(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.AddSplineLocalPoint");

	USplineComponent_AddSplineLocalPoint_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.Stop
// ()

void UTimelineComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Stop");

	UTimelineComponent_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.SetTimelineLengthMode
// ()
// Parameters:
// TEnumAsByte<ETimelineLengthMode> NewLengthMode                  (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLengthMode");

	UTimelineComponent_SetTimelineLengthMode_Params params;
	params.NewLengthMode = NewLengthMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.SetTimelineLength
// ()
// Parameters:
// float                          NewLength                      (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetTimelineLength(float NewLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetTimelineLength");

	UTimelineComponent_SetTimelineLength_Params params;
	params.NewLength = NewLength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.SetPlayRate
// ()
// Parameters:
// float                          NewRate                        (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetPlayRate(float NewRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlayRate");

	UTimelineComponent_SetPlayRate_Params params;
	params.NewRate = NewRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.SetPlaybackPosition
// ()
// Parameters:
// float                          NewPosition                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireEvents                    (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetPlaybackPosition(float NewPosition, bool bFireEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetPlaybackPosition");

	UTimelineComponent_SetPlaybackPosition_Params params;
	params.NewPosition = NewPosition;
	params.bFireEvents = bFireEvents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.SetNewTime
// ()
// Parameters:
// float                          NewTime                        (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetNewTime(float NewTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetNewTime");

	UTimelineComponent_SetNewTime_Params params;
	params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.SetLooping
// ()
// Parameters:
// bool                           bNewLooping                    (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::SetLooping(bool bNewLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.SetLooping");

	UTimelineComponent_SetLooping_Params params;
	params.bNewLooping = bNewLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.ReverseFromEnd
// ()

void UTimelineComponent::ReverseFromEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.ReverseFromEnd");

	UTimelineComponent_ReverseFromEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.Reverse
// ()

void UTimelineComponent::Reverse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Reverse");

	UTimelineComponent_Reverse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.PlayFromStart
// ()

void UTimelineComponent::PlayFromStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.PlayFromStart");

	UTimelineComponent_PlayFromStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.Play
// ()

void UTimelineComponent::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.Play");

	UTimelineComponent_Play_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.OnTimelineVector__DelegateSignature
// ()
// Parameters:
// struct FVector                 Output                         (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::OnTimelineVector__DelegateSignature(const struct FVector& Output)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnTimelineVector__DelegateSignature");

	UTimelineComponent_OnTimelineVector__DelegateSignature_Params params;
	params.Output = Output;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.OnTimelineLinearColor__DelegateSignature
// ()
// Parameters:
// struct FLinearColor            Output                         (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::OnTimelineLinearColor__DelegateSignature(const struct FLinearColor& Output)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnTimelineLinearColor__DelegateSignature");

	UTimelineComponent_OnTimelineLinearColor__DelegateSignature_Params params;
	params.Output = Output;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.OnTimelineFloat__DelegateSignature
// ()
// Parameters:
// float                          Output                         (Parm, ZeroConstructor, IsPlainOldData)

void UTimelineComponent::OnTimelineFloat__DelegateSignature(float Output)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnTimelineFloat__DelegateSignature");

	UTimelineComponent_OnTimelineFloat__DelegateSignature_Params params;
	params.Output = Output;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.OnTimelineEvent__DelegateSignature
// ()

void UTimelineComponent::OnTimelineEvent__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnTimelineEvent__DelegateSignature");

	UTimelineComponent_OnTimelineEvent__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.OnRep_Timeline
// ()

void UTimelineComponent::OnRep_Timeline()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.OnRep_Timeline");

	UTimelineComponent_OnRep_Timeline_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TimelineComponent.IsReversing
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsReversing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsReversing");

	UTimelineComponent_IsReversing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsPlaying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsPlaying");

	UTimelineComponent_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.IsLooping
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTimelineComponent::IsLooping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.IsLooping");

	UTimelineComponent_IsLooping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetTimelineLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetTimelineLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetTimelineLength");

	UTimelineComponent_GetTimelineLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlayRate
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlayRate");

	UTimelineComponent_GetPlayRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TimelineComponent.GetPlaybackPosition
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTimelineComponent::GetPlaybackPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TimelineComponent.GetPlaybackPosition");

	UTimelineComponent_GetPlaybackPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimSingleNodeInstance.StopAnim
// ()

void UAnimSingleNodeInstance::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.StopAnim");

	UAnimSingleNodeInstance_StopAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetVertexAnimation
// ()
// Parameters:
// class UVertexAnimation*        NewVertexAnim                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetVertexAnimation(class UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetVertexAnimation");

	UAnimSingleNodeInstance_SetVertexAnimation_Params params;
	params.NewVertexAnim = NewVertexAnim;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetReverse
// ()
// Parameters:
// bool                           bInReverse                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetReverse(bool bInReverse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetReverse");

	UAnimSingleNodeInstance_SetReverse_Params params;
	params.bInReverse = bInReverse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetPosition
// ()
// Parameters:
// float                          InPosition                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFireNotifies                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReallyFireNotifies            (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPosition(float InPosition, bool bFireNotifies, bool bReallyFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPosition");

	UAnimSingleNodeInstance_SetPosition_Params params;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bReallyFireNotifies = bReallyFireNotifies;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetPlayRate
// ()
// Parameters:
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPlayRate(float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlayRate");

	UAnimSingleNodeInstance_SetPlayRate_Params params;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetPlaying
// ()
// Parameters:
// bool                           bIsPlaying                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetPlaying(bool bIsPlaying)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetPlaying");

	UAnimSingleNodeInstance_SetPlaying_Params params;
	params.bIsPlaying = bIsPlaying;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetLooping
// ()
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetLooping(bool bIsLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetLooping");

	UAnimSingleNodeInstance_SetLooping_Params params;
	params.bIsLooping = bIsLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput
// ()
// Parameters:
// struct FVector                 InBlendInput                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UAnimSingleNodeInstance::SetBlendSpaceInput(const struct FVector& InBlendInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetBlendSpaceInput");

	UAnimSingleNodeInstance_SetBlendSpaceInput_Params params;
	params.InBlendInput = InBlendInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.SetAnimationAsset
// ()
// Parameters:
// class UAnimationAsset*         NewAsset                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.SetAnimationAsset");

	UAnimSingleNodeInstance_SetAnimationAsset_Params params;
	params.NewAsset = NewAsset;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.PostEvaluateAnimEvent__DelegateSignature
// ()

void UAnimSingleNodeInstance::PostEvaluateAnimEvent__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.PostEvaluateAnimEvent__DelegateSignature");

	UAnimSingleNodeInstance_PostEvaluateAnimEvent__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.PlayAnim
// ()
// Parameters:
// bool                           bIsLooping                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InStartPosition                (Parm, ZeroConstructor, IsPlainOldData)

void UAnimSingleNodeInstance::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.PlayAnim");

	UAnimSingleNodeInstance_PlayAnim_Params params;
	params.bIsLooping = bIsLooping;
	params.InPlayRate = InPlayRate;
	params.InStartPosition = InStartPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSingleNodeInstance.GetLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UAnimSingleNodeInstance::GetLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSingleNodeInstance.GetLength");

	UAnimSingleNodeInstance_GetLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VehicleAnimInstance.GetVehicle
// ()
// Parameters:
// class AWheeledVehicle*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWheeledVehicle* UVehicleAnimInstance::GetVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VehicleAnimInstance.GetVehicle");

	UVehicleAnimInstance_GetVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.RegisterMovementComponent
// ()
// Parameters:
// class UCharacterMovementComponent* MovementComp                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          AvoidanceWeight                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAvoidanceManager::RegisterMovementComponent(class UCharacterMovementComponent* MovementComp, float AvoidanceWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.RegisterMovementComponent");

	UAvoidanceManager_RegisterMovementComponent_Params params;
	params.MovementComp = MovementComp;
	params.AvoidanceWeight = AvoidanceWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetObjectCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAvoidanceManager::GetObjectCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetObjectCount");

	UAvoidanceManager_GetObjectCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetNewAvoidanceUID
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UAvoidanceManager::GetNewAvoidanceUID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetNewAvoidanceUID");

	UAvoidanceManager_GetNewAvoidanceUID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID
// ()
// Parameters:
// struct FNavAvoidanceData       AvoidanceData                  (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            IgnoreThisUID                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UAvoidanceManager::GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetAvoidanceVelocityIgnoringUID");

	UAvoidanceManager_GetAvoidanceVelocityIgnoringUID_Params params;
	params.AvoidanceData = AvoidanceData;
	params.DeltaTime = DeltaTime;
	params.IgnoreThisUID = IgnoreThisUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AvoidanceManager.GetAvoidanceVelocity
// ()
// Parameters:
// struct FNavAvoidanceData       AvoidanceData                  (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UAvoidanceManager::GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidanceManager.GetAvoidanceVelocity");

	UAvoidanceManager_GetAvoidanceVelocity_Params params;
	params.AvoidanceData = AvoidanceData;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName
// ()
// Parameters:
// class UDataTable*              Table                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   RowName                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTableRowBase           OutRow                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDataTableFunctionLibrary::GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataTableFunctionLibrary.GetDataTableRowFromName");

	UDataTableFunctionLibrary_GetDataTableRowFromName_Params params;
	params.Table = Table;
	params.RowName = RowName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRow != nullptr)
		*OutRow = params.OutRow;

	return params.ReturnValue;
}


// Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
// ()
// Parameters:
// class UCurveTable*             CurveTable                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   RowName                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          InXY                           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEvaluateCurveTableResult> OutResult                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutXY                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UDataTableFunctionLibrary::EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataTableFunctionLibrary.EvaluateCurveTableRow");

	UDataTableFunctionLibrary_EvaluateCurveTableRow_Params params;
	params.CurveTable = CurveTable;
	params.RowName = RowName;
	params.InXY = InXY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResult != nullptr)
		*OutResult = params.OutResult;
	if (OutXY != nullptr)
		*OutXY = params.OutXY;
}


// Function Engine.GameplayStatics.UnloadStreamLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UGameplayStatics::UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.UnloadStreamLevel");

	UGameplayStatics_UnloadStreamLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.SpawnEmitterAttached
// ()
// Parameters:
// class UParticleSystem*         EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontSpawnOutOfView            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowSpawnLoopingFX           (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverrideSecondsBeforeInactive  (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystemComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, bool bDontSpawnOutOfView, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnEmitterAttached");

	UGameplayStatics_SpawnEmitterAttached_Params params;
	params.EmitterTemplate = EmitterTemplate;
	params.attachToComponent = attachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.bAutoDestroy = bAutoDestroy;
	params.bDontSpawnOutOfView = bDontSpawnOutOfView;
	params.bAllowSpawnLoopingFX = bAllowSpawnLoopingFX;
	params.OverrideSecondsBeforeInactive = OverrideSecondsBeforeInactive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnEmitterAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystem*         EmitterTemplate                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoDestroy                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontSpawnOutOfView            (Parm, ZeroConstructor, IsPlainOldData)
// float                          DontSpawnOutOfViewCheckRadius  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowSpawnLoopingFX           (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverrideSecondsBeforeInactive  (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystemComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UParticleSystemComponent* UGameplayStatics::SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy, bool bDontSpawnOutOfView, float DontSpawnOutOfViewCheckRadius, bool bAllowSpawnLoopingFX, float OverrideSecondsBeforeInactive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnEmitterAtLocation");

	UGameplayStatics_SpawnEmitterAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.EmitterTemplate = EmitterTemplate;
	params.Location = Location;
	params.Rotation = Rotation;
	params.bAutoDestroy = bAutoDestroy;
	params.bDontSpawnOutOfView = bDontSpawnOutOfView;
	params.DontSpawnOutOfViewCheckRadius = DontSpawnOutOfViewCheckRadius;
	params.bAllowSpawnLoopingFX = bAllowSpawnLoopingFX;
	params.OverrideSecondsBeforeInactive = OverrideSecondsBeforeInactive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAttached
// ()
// Parameters:
// class UMaterialInterface*      DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DecalSize                      (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData)
// class UDecalComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDecalComponent* UGameplayStatics::SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnDecalAttached");

	UGameplayStatics_SpawnDecalAttached_Params params;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.attachToComponent = attachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LocationType = LocationType;
	params.LifeSpan = LifeSpan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SpawnDecalAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      DecalMaterial                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DecalSize                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeSpan                       (Parm, ZeroConstructor, IsPlainOldData)
// class UDecalComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDecalComponent* UGameplayStatics::SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SpawnDecalAtLocation");

	UGameplayStatics_SpawnDecalAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.DecalMaterial = DecalMaterial;
	params.DecalSize = DecalSize;
	params.Location = Location;
	params.Rotation = Rotation;
	params.LifeSpan = LifeSpan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetWorldOriginLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FIntVector              NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetWorldOriginLocation");

	UGameplayStatics_SetWorldOriginLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.SetSoundMode
// ()
// Parameters:
// struct FName                   SoundModeName                  (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetSoundMode(const struct FName& SoundModeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetSoundMode");

	UGameplayStatics_SetSoundMode_Params params;
	params.SoundModeName = SoundModeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.SetGlobalTimeDilation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeDilation                   (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetGlobalTimeDilation");

	UGameplayStatics_SetGlobalTimeDilation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TimeDilation = TimeDilation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.SetGamePaused
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPaused                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::SetGamePaused(class UObject* WorldContextObject, bool bPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetGamePaused");

	UGameplayStatics_SetGamePaused_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bPaused = bPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.SetBaseSoundMix
// ()
// Parameters:
// class USoundMix*               InSoundMix                     (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::SetBaseSoundMix(class USoundMix* InSoundMix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SetBaseSoundMix");

	UGameplayStatics_SetBaseSoundMix_Params params;
	params.InSoundMix = InSoundMix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.SaveGameToSlot
// ()
// Parameters:
// class USaveGame*               SaveGameObject                 (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.SaveGameToSlot");

	UGameplayStatics_SaveGameToSlot_Params params;
	params.SaveGameObject = SaveGameObject;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.PushSoundMixModifier
// ()
// Parameters:
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PushSoundMixModifier(class USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PushSoundMixModifier");

	UGameplayStatics_PushSoundMixModifier_Params params;
	params.InSoundMixModifier = InSoundMixModifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.PopSoundMixModifier
// ()
// Parameters:
// class USoundMix*               InSoundMixModifier             (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PopSoundMixModifier(class USoundMix* InSoundMixModifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PopSoundMixModifier");

	UGameplayStatics_PopSoundMixModifier_Params params;
	params.InSoundMixModifier = InSoundMixModifier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.PlayWorldCameraShake
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Shake                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Epicenter                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InnerRadius                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OuterRadius                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Falloff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOrientShakeTowardsEpicenter   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScaleMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlayWorldCameraShake");

	UGameplayStatics_PlayWorldCameraShake_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Shake = Shake;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;
	params.ScaleMultiplier = ScaleMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.PlaySoundAttached
// ()
// Parameters:
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlwaysPlay                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::PlaySoundAttached(class USoundBase* Sound, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAlwaysPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlaySoundAttached");

	UGameplayStatics_PlaySoundAttached_Params params;
	params.Sound = Sound;
	params.attachToComponent = attachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAlwaysPlay = bAlwaysPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.PlaySoundAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlwaysPlay                    (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAlwaysPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlaySoundAtLocation");

	UGameplayStatics_PlaySoundAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Sound = Sound;
	params.Location = Location;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;
	params.bAlwaysPlay = bAlwaysPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.PlaySound
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class USoundCue*               InSoundCue                     (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         AttachComponent                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachName                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFollow                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlaySound(class UObject* WorldContextObject, class USoundCue* InSoundCue, class USceneComponent* AttachComponent, const struct FName& AttachName, bool bFollow, float VolumeMultiplier, float PitchMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlaySound");

	UGameplayStatics_PlaySound_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InSoundCue = InSoundCue;
	params.AttachComponent = AttachComponent;
	params.AttachName = AttachName;
	params.bFollow = bFollow;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.PlayDialogueAttached
// ()
// Parameters:
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   AttachPointName                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EAttachLocation>   LocationType                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* UGameplayStatics::PlayDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* attachToComponent, const struct FName& AttachPointName, const struct FVector& Location, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlayDialogueAttached");

	UGameplayStatics_PlayDialogueAttached_Params params;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.attachToComponent = attachToComponent;
	params.AttachPointName = AttachPointName;
	params.Location = Location;
	params.LocationType = LocationType;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.PlayDialogueAtLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UDialogueWave*           Dialogue                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDialogueContext        Context                        (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          VolumeMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PitchMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartTime                      (Parm, ZeroConstructor, IsPlainOldData)
// class USoundAttenuation*       AttenuationSettings            (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.PlayDialogueAtLocation");

	UGameplayStatics_PlayDialogueAtLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Dialogue = Dialogue;
	params.Context = Context;
	params.Location = Location;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.StartTime = StartTime;
	params.AttenuationSettings = AttenuationSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.OpenLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAbsolute                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Options                        (Parm, ZeroConstructor)

void UGameplayStatics::OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const class FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.OpenLevel");

	UGameplayStatics_OpenLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bAbsolute = bAbsolute;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.LoadStreamLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMakeVisibleAfterLoad          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldBlockOnLoad             (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UGameplayStatics::LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.LoadStreamLevel");

	UGameplayStatics_LoadStreamLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.bMakeVisibleAfterLoad = bMakeVisibleAfterLoad;
	params.bShouldBlockOnLoad = bShouldBlockOnLoad;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.LoadGameFromSlot
// ()
// Parameters:
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USaveGame* UGameplayStatics::LoadGameFromSlot(const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.LoadGameFromSlot");

	UGameplayStatics_LoadGameFromSlot_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.IsGameWorld
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::IsGameWorld(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.IsGameWorld");

	UGameplayStatics_IsGameWorld_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.IsGamePaused
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::IsGamePaused(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.IsGamePaused");

	UGameplayStatics_IsGamePaused_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldOriginLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FIntVector              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FIntVector UGameplayStatics::GetWorldOriginLocation(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetWorldOriginLocation");

	UGameplayStatics_GetWorldOriginLocation_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetWorldDeltaSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetWorldDeltaSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetWorldDeltaSeconds");

	UGameplayStatics_GetWorldDeltaSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetSurfaceType
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<EPhysicalSurface>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPhysicalSurface> UGameplayStatics::GetSurfaceType(const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetSurfaceType");

	UGameplayStatics_GetSurfaceType_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetStreamingLevel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PackageName                    (Parm, ZeroConstructor, IsPlainOldData)
// class ULevelStreaming*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ULevelStreaming* UGameplayStatics::GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetStreamingLevel");

	UGameplayStatics_GetStreamingLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetRealTimeSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetRealTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetRealTimeSeconds");

	UGameplayStatics_GetRealTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerPawn
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* UGameplayStatics::GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerPawn");

	UGameplayStatics_GetPlayerPawn_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerController
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* UGameplayStatics::GetPlayerController(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerController");

	UGameplayStatics_GetPlayerController_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCharacter
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class ACharacter*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACharacter* UGameplayStatics::GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerCharacter");

	UGameplayStatics_GetPlayerCharacter_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlayerCameraManager
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerCameraManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerCameraManager* UGameplayStatics::GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlayerCameraManager");

	UGameplayStatics_GetPlayerCameraManager_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetPlatformName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UGameplayStatics::GetPlatformName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetPlatformName");

	UGameplayStatics_GetPlatformName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetObjectClass
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UGameplayStatics::GetObjectClass(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetObjectClass");

	UGameplayStatics_GetObjectClass_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGlobalTimeDilation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetGlobalTimeDilation(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGlobalTimeDilation");

	UGameplayStatics_GetGlobalTimeDilation_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameState
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class AGameState*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameState* UGameplayStatics::GetGameState(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGameState");

	UGameplayStatics_GetGameState_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameMode
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class AGameMode*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameMode* UGameplayStatics::GetGameMode(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGameMode");

	UGameplayStatics_GetGameMode_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetGameInstance
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UGameInstance*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGameInstance* UGameplayStatics::GetGameInstance(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetGameInstance");

	UGameplayStatics_GetGameInstance_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAudioTimeSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::GetAudioTimeSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAudioTimeSeconds");

	UGameplayStatics_GetAudioTimeSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAllActorsWithInterface
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Interface                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAllActorsWithInterface");

	UGameplayStatics_GetAllActorsWithInterface_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.GameplayStatics.GetAllActorsOfClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void UGameplayStatics::GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAllActorsOfClass");

	UGameplayStatics_GetAllActorsOfClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function Engine.GameplayStatics.GetActorArrayBounds
// ()
// Parameters:
// TArray<class AActor*>          actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bOnlyCollidingComponents       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::GetActorArrayBounds(TArray<class AActor*> actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetActorArrayBounds");

	UGameplayStatics_GetActorArrayBounds_Params params;
	params.actors = actors;
	params.bOnlyCollidingComponents = bOnlyCollidingComponents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Center != nullptr)
		*Center = params.Center;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.GameplayStatics.GetActorArrayAverageLocation
// ()
// Parameters:
// TArray<class AActor*>          actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UGameplayStatics::GetActorArrayAverageLocation(TArray<class AActor*> actors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetActorArrayAverageLocation");

	UGameplayStatics_GetActorArrayAverageLocation_Params params;
	params.actors = actors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.GetAccurateRealTime
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          PartialSeconds                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.GetAccurateRealTime");

	UGameplayStatics_GetAccurateRealTime_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Seconds != nullptr)
		*Seconds = params.Seconds;
	if (PartialSeconds != nullptr)
		*PartialSeconds = params.PartialSeconds;
}


// Function Engine.GameplayStatics.FinishSpawningActor
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UGameplayStatics::FinishSpawningActor(class AActor* Actor, const struct UObject_FTransform& SpawnTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.FinishSpawningActor");

	UGameplayStatics_FinishSpawningActor_Params params;
	params.Actor = Actor;
	params.SpawnTransform = SpawnTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.EnableLiveStreaming
// ()
// Parameters:
// bool                           Enable                         (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::EnableLiveStreaming(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.EnableLiveStreaming");

	UGameplayStatics_EnableLiveStreaming_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.DoesSaveGameExist
// ()
// Parameters:
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DoesSaveGameExist(const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.DoesSaveGameExist");

	UGameplayStatics_DoesSaveGameExist_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeleteGameInSlot
// ()
// Parameters:
// class FString                  SlotName                       (Parm, ZeroConstructor)
// int                            UserIndex                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::DeleteGameInSlot(const class FString& SlotName, int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.DeleteGameInSlot");

	UGameplayStatics_DeleteGameInSlot_Params params;
	params.SlotName = SlotName;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.DeactivateReverbEffect
// ()
// Parameters:
// struct FName                   TagName                        (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::DeactivateReverbEffect(const struct FName& TagName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.DeactivateReverbEffect");

	UGameplayStatics_DeactivateReverbEffect_Params params;
	params.TagName = TagName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint
// ()
// Parameters:
// class UBlueprint*              SaveGameBlueprint              (Parm, ZeroConstructor, IsPlainOldData)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USaveGame* UGameplayStatics::CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CreateSaveGameObjectFromBlueprint");

	UGameplayStatics_CreateSaveGameObjectFromBlueprint_Params params;
	params.SaveGameBlueprint = SaveGameBlueprint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreateSaveGameObject
// ()
// Parameters:
// class UClass*                  SaveGameClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class USaveGame*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USaveGame* UGameplayStatics::CreateSaveGameObject(class UClass* SaveGameClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CreateSaveGameObject");

	UGameplayStatics_CreateSaveGameObject_Params params;
	params.SaveGameClass = SaveGameClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.CreatePlayer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            ControllerId                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSpawnPawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* UGameplayStatics::CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.CreatePlayer");

	UGameplayStatics_CreatePlayer_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ControllerId = ControllerId;
	params.bSpawnPawn = bSpawnPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ClearSoundMixModifiers
// ()

void UGameplayStatics::ClearSoundMixModifiers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ClearSoundMixModifiers");

	UGameplayStatics_ClearSoundMixModifiers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.BreakHitResult_OLD
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Normal                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactNormal                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UPhysicalMaterial*       PhysMat                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AActor*                  HitActor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   HitBoneName                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            HitItem                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::BreakHitResult_OLD(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BreakHitResult_OLD");

	UGameplayStatics_BreakHitResult_OLD_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Normal != nullptr)
		*Normal = params.Normal;
	if (ImpactPoint != nullptr)
		*ImpactPoint = params.ImpactPoint;
	if (ImpactNormal != nullptr)
		*ImpactNormal = params.ImpactNormal;
	if (PhysMat != nullptr)
		*PhysMat = params.PhysMat;
	if (HitActor != nullptr)
		*HitActor = params.HitActor;
	if (HitComponent != nullptr)
		*HitComponent = params.HitComponent;
	if (HitBoneName != nullptr)
		*HitBoneName = params.HitBoneName;
	if (HitItem != nullptr)
		*HitItem = params.HitItem;
}


// Function Engine.GameplayStatics.BreakHitResult
// ()
// Parameters:
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Normal                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactPoint                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ImpactNormal                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UPhysicalMaterial*       PhysMat                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AActor*                  HitActor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   HitBoneName                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            HitItem                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           BlockingHit                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::BreakHitResult(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, bool* BlockingHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BreakHitResult");

	UGameplayStatics_BreakHitResult_Params params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Normal != nullptr)
		*Normal = params.Normal;
	if (ImpactPoint != nullptr)
		*ImpactPoint = params.ImpactPoint;
	if (ImpactNormal != nullptr)
		*ImpactNormal = params.ImpactNormal;
	if (PhysMat != nullptr)
		*PhysMat = params.PhysMat;
	if (HitActor != nullptr)
		*HitActor = params.HitActor;
	if (HitComponent != nullptr)
		*HitComponent = params.HitComponent;
	if (HitBoneName != nullptr)
		*HitBoneName = params.HitBoneName;
	if (HitItem != nullptr)
		*HitItem = params.HitItem;
	if (BlockingHit != nullptr)
		*BlockingHit = params.BlockingHit;
}


// Function Engine.GameplayStatics.BPPointPlaneProject
// ()
// Parameters:
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneBase                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneNorm                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UGameplayStatics::BPPointPlaneProject(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BPPointPlaneProject");

	UGameplayStatics_BPPointPlaneProject_Params params;
	params.Point = Point;
	params.PlaneBase = PlaneBase;
	params.PlaneNorm = PlaneNorm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BPPointPlaneDist
// ()
// Parameters:
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneBase                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneNorm                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UGameplayStatics::BPPointPlaneDist(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNorm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BPPointPlaneDist");

	UGameplayStatics_BPPointPlaneDist_Params params;
	params.Point = Point;
	params.PlaneBase = PlaneBase;
	params.PlaneNorm = PlaneNorm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TossVelocity                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EndLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LaunchSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverrideGravityZ               (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          CollisionRadius                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFavorHighArc                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BlueprintSuggestProjectileVelocity");

	UGameplayStatics_BlueprintSuggestProjectileVelocity_Params params;
	params.WorldContextObject = WorldContextObject;
	params.StartLocation = StartLocation;
	params.EndLocation = EndLocation;
	params.LaunchSpeed = LaunchSpeed;
	params.OverrideGravityZ = OverrideGravityZ;
	params.TraceOption = TraceOption;
	params.CollisionRadius = CollisionRadius;
	params.bFavorHighArc = bFavorHighArc;
	params.bDrawDebug = bDrawDebug;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromClass
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UGameplayStatics::BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct UObject_FTransform& SpawnTransform, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BeginSpawningActorFromClass");

	UGameplayStatics_BeginSpawningActorFromClass_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ActorClass = ActorClass;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UBlueprint*              Blueprint                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      SpawnTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UGameplayStatics::BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct UObject_FTransform& SpawnTransform, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.BeginSpawningActorFromBlueprint");

	UGameplayStatics_BeginSpawningActorFromBlueprint_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Blueprint = Blueprint;
	params.SpawnTransform = SpawnTransform;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.AreAnyListenersWithinRange
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaximumRange                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::AreAnyListenersWithinRange(const struct FVector& Location, float MaximumRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.AreAnyListenersWithinRange");

	UGameplayStatics_AreAnyListenersWithinRange_Params params;
	params.Location = Location;
	params.MaximumRange = MaximumRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamageIgnoreDamageActors
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          IgnoreDamageActors             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoFullDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ApplyRadialDamageIgnoreDamageActors(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, TArray<class AActor*> IgnoreDamageActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel, float Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyRadialDamageIgnoreDamageActors");

	UGameplayStatics_ApplyRadialDamageIgnoreDamageActors_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.Origin = Origin;
	params.DamageRadius = DamageRadius;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.IgnoreDamageActors = IgnoreDamageActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;
	params.DamagePreventionChannel = DamagePreventionChannel;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyRadialDamage
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DamageRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          IgnoreActors                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             InstigatedByController         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoFullDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> DamagePreventionChannel        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UGameplayStatics::ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel, float Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyRadialDamage");

	UGameplayStatics_ApplyRadialDamage_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BaseDamage = BaseDamage;
	params.Origin = Origin;
	params.DamageRadius = DamageRadius;
	params.DamageTypeClass = DamageTypeClass;
	params.IgnoreActors = IgnoreActors;
	params.DamageCauser = DamageCauser;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;
	params.DamagePreventionChannel = DamagePreventionChannel;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayStatics.ApplyPointDamage
// ()
// Parameters:
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HitFromDirection               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceCollisionCheck           (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> ForceCollisionCheckTraceChannel (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse, bool bForceCollisionCheck, TEnumAsByte<ECollisionChannel> ForceCollisionCheckTraceChannel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyPointDamage");

	UGameplayStatics_ApplyPointDamage_Params params;
	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.HitFromDirection = HitFromDirection;
	params.HitInfo = HitInfo;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;
	params.Impulse = Impulse;
	params.bForceCollisionCheck = bForceCollisionCheck;
	params.ForceCollisionCheckTraceChannel = ForceCollisionCheckTraceChannel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.ApplyDamage
// ()
// Parameters:
// class AActor*                  DamagedActor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseDamage                     (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Impulse                        (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, float Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ApplyDamage");

	UGameplayStatics_ApplyDamage_Params params;
	params.DamagedActor = DamagedActor;
	params.BaseDamage = BaseDamage;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.DamageTypeClass = DamageTypeClass;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayStatics.ActivateReverbEffect
// ()
// Parameters:
// class UReverbEffect*           ReverbEffect                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TagName                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Priority                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Volume                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeTime                       (Parm, ZeroConstructor, IsPlainOldData)

void UGameplayStatics::ActivateReverbEffect(class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayStatics.ActivateReverbEffect");

	UGameplayStatics_ActivateReverbEffect_Params params;
	params.ReverbEffect = ReverbEffect;
	params.TagName = TagName;
	params.Priority = Priority;
	params.Volume = Volume;
	params.FadeTime = FadeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.ResetOrientationAndPosition
// ()
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void UHeadMountedDisplayFunctionLibrary::ResetOrientationAndPosition(float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.ResetOrientationAndPosition");

	UHeadMountedDisplayFunctionLibrary_ResetOrientationAndPosition_Params params;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.IsInLowPersistenceMode
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHeadMountedDisplayFunctionLibrary::IsInLowPersistenceMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.IsInLowPersistenceMode");

	UHeadMountedDisplayFunctionLibrary_IsInLowPersistenceMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHeadMountedDisplayFunctionLibrary::IsHeadMountedDisplayEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayEnabled");

	UHeadMountedDisplayFunctionLibrary_IsHeadMountedDisplayEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.HasValidTrackingPosition
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHeadMountedDisplayFunctionLibrary::HasValidTrackingPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.HasValidTrackingPosition");

	UHeadMountedDisplayFunctionLibrary_HasValidTrackingPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.GetScreenPercentage
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UHeadMountedDisplayFunctionLibrary::GetScreenPercentage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetScreenPercentage");

	UHeadMountedDisplayFunctionLibrary_GetScreenPercentage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.GetPositionalTrackingCameraParameters
// ()
// Parameters:
// struct FVector                 CameraOrigin                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                CameraRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          HFOV                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          VFOV                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          CameraDistance                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          NearPlane                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          FarPlane                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UHeadMountedDisplayFunctionLibrary::GetPositionalTrackingCameraParameters(struct FVector* CameraOrigin, struct FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetPositionalTrackingCameraParameters");

	UHeadMountedDisplayFunctionLibrary_GetPositionalTrackingCameraParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CameraOrigin != nullptr)
		*CameraOrigin = params.CameraOrigin;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
	if (HFOV != nullptr)
		*HFOV = params.HFOV;
	if (VFOV != nullptr)
		*VFOV = params.VFOV;
	if (CameraDistance != nullptr)
		*CameraDistance = params.CameraDistance;
	if (NearPlane != nullptr)
		*NearPlane = params.NearPlane;
	if (FarPlane != nullptr)
		*FarPlane = params.FarPlane;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.GetOrientationAndPosition
// ()
// Parameters:
// struct FRotator                DeviceRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DevicePosition                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UHeadMountedDisplayFunctionLibrary::GetOrientationAndPosition(struct FRotator* DeviceRotation, struct FVector* DevicePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.GetOrientationAndPosition");

	UHeadMountedDisplayFunctionLibrary_GetOrientationAndPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DeviceRotation != nullptr)
		*DeviceRotation = params.DeviceRotation;
	if (DevicePosition != nullptr)
		*DevicePosition = params.DevicePosition;
}


// Function Engine.HeadMountedDisplayFunctionLibrary.EnableLowPersistenceMode
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UHeadMountedDisplayFunctionLibrary::EnableLowPersistenceMode(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeadMountedDisplayFunctionLibrary.EnableLowPersistenceMode");

	UHeadMountedDisplayFunctionLibrary_EnableLowPersistenceMode_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.SetArrayPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetArrayLibrary::SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.SetArrayPropertyByName");

	UKismetArrayLibrary_SetArrayPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.FilterArray
// ()
// Parameters:
// TArray<class AActor*>          TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          FilteredArray                  (Parm, OutParm, ZeroConstructor)

void UKismetArrayLibrary::FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.FilterArray");

	UKismetArrayLibrary_FilterArray_Params params;
	params.TargetArray = TargetArray;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FilteredArray != nullptr)
		*FilteredArray = params.FilteredArray;
}


// Function Engine.KismetArrayLibrary.Array_Shuffle
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Shuffle(TArray<int> TargetArray, class UArrayProperty* ArrayProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Shuffle");

	UKismetArrayLibrary_Array_Shuffle_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.Array_Set
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bSizeToFit                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Set(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int index, int Item, bool bSizeToFit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Set");

	UKismetArrayLibrary_Array_Set_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.index = index;
	params.Item = Item;
	params.bSizeToFit = bSizeToFit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.Array_Resize
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            Size                           (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Resize(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int Size)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Resize");

	UKismetArrayLibrary_Array_Resize_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.Size = Size;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.Array_RemoveItem
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            Item                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetArrayLibrary::Array_RemoveItem(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_RemoveItem");

	UKismetArrayLibrary_Array_RemoveItem_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Remove
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            IndexToRemove                  (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Remove(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int IndexToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Remove");

	UKismetArrayLibrary_Array_Remove_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.IndexToRemove = IndexToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.Array_Length
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Length(TArray<int> TargetArray, class UArrayProperty* ArrayProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Length");

	UKismetArrayLibrary_Array_Length_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_LastIndex
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_LastIndex(TArray<int> TargetArray, class UArrayProperty* ArrayProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_LastIndex");

	UKismetArrayLibrary_Array_LastIndex_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_IsValidIndex
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexToTest                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetArrayLibrary::Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_IsValidIndex");

	UKismetArrayLibrary_Array_IsValidIndex_Params params;
	params.TargetArray = TargetArray;
	params.IndexToTest = IndexToTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Insert
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            newItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Insert(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int newItem, int index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Insert");

	UKismetArrayLibrary_Array_Insert_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.newItem = newItem;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.Array_Get
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Item                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Get(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int index, int* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Get");

	UKismetArrayLibrary_Array_Get_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Item != nullptr)
		*Item = params.Item;
}


// Function Engine.KismetArrayLibrary.Array_Find
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Find(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Find");

	UKismetArrayLibrary_Array_Find_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Contains
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemToFind                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetArrayLibrary::Array_Contains(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int ItemToFind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Contains");

	UKismetArrayLibrary_Array_Contains_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.ItemToFind = ItemToFind;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Clear
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Clear(TArray<int> TargetArray, class UArrayProperty* ArrayProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Clear");

	UKismetArrayLibrary_Array_Clear_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.Array_Append
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          TargetArrayProperty            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          SourceArrayProperty            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UKismetArrayLibrary::Array_Append(TArray<int> TargetArray, class UArrayProperty* TargetArrayProperty, TArray<int> SourceArray, class UArrayProperty* SourceArrayProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Append");

	UKismetArrayLibrary_Array_Append_Params params;
	params.TargetArray = TargetArray;
	params.TargetArrayProperty = TargetArrayProperty;
	params.SourceArray = SourceArray;
	params.SourceArrayProperty = SourceArrayProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetArrayLibrary.Array_AddUnique
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            newItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_AddUnique(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int newItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_AddUnique");

	UKismetArrayLibrary_Array_AddUnique_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.newItem = newItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetArrayLibrary.Array_Add
// ()
// Parameters:
// TArray<int>                    TargetArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UArrayProperty*          ArrayProperty                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            newItem                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetArrayLibrary::Array_Add(TArray<int> TargetArray, class UArrayProperty* ArrayProperty, int newItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetArrayLibrary.Array_Add");

	UKismetArrayLibrary_Array_Add_Params params;
	params.TargetArray = TargetArray;
	params.ArrayProperty = ArrayProperty;
	params.newItem = newItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::PointerEvent_IsTouchEvent(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_IsTouchEvent");

	UKismetInputLibrary_PointerEvent_IsTouchEvent_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    MouseButton                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown");

	UKismetInputLibrary_PointerEvent_IsMouseButtonDown_Params params;
	params.Input = Input;
	params.MouseButton = MouseButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::PointerEvent_GetWheelDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetWheelDelta");

	UKismetInputLibrary_PointerEvent_GetWheelDelta_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetUserIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetUserIndex");

	UKismetInputLibrary_PointerEvent_GetUserIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex");

	UKismetInputLibrary_PointerEvent_GetTouchpadIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition");

	UKismetInputLibrary_PointerEvent_GetScreenSpacePosition_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::PointerEvent_GetPointerIndex(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetPointerIndex");

	UKismetInputLibrary_PointerEvent_GetPointerIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition");

	UKismetInputLibrary_PointerEvent_GetLastScreenSpacePosition_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetGestureDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetGestureDelta");

	UKismetInputLibrary_PointerEvent_GetGestureDelta_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FKey UKismetInputLibrary::PointerEvent_GetEffectingButton(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetEffectingButton");

	UKismetInputLibrary_PointerEvent_GetEffectingButton_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
// ()
// Parameters:
// struct FPointerEvent           Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetInputLibrary::PointerEvent_GetCursorDelta(const struct FPointerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.PointerEvent_GetCursorDelta");

	UKismetInputLibrary_PointerEvent_GetCursorDelta_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsShiftDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsShiftDown");

	UKismetInputLibrary_InputEvent_IsShiftDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightShiftDown");

	UKismetInputLibrary_InputEvent_IsRightShiftDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightControlDown");

	UKismetInputLibrary_InputEvent_IsRightControlDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightCommandDown");

	UKismetInputLibrary_InputEvent_IsRightCommandDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRightAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRightAltDown");

	UKismetInputLibrary_InputEvent_IsRightAltDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsRepeat
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsRepeat(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsRepeat");

	UKismetInputLibrary_InputEvent_IsRepeat_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftShiftDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown");

	UKismetInputLibrary_InputEvent_IsLeftShiftDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftControlDown");

	UKismetInputLibrary_InputEvent_IsLeftControlDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown");

	UKismetInputLibrary_InputEvent_IsLeftCommandDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsLeftAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsLeftAltDown");

	UKismetInputLibrary_InputEvent_IsLeftAltDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsControlDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsControlDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsControlDown");

	UKismetInputLibrary_InputEvent_IsControlDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsCommandDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsCommandDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsCommandDown");

	UKismetInputLibrary_InputEvent_IsCommandDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.InputEvent_IsAltDown
// ()
// Parameters:
// struct FInputEvent             Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::InputEvent_IsAltDown(const struct FInputEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.InputEvent_IsAltDown");

	UKismetInputLibrary_InputEvent_IsAltDown_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.GetKey
// ()
// Parameters:
// struct FKeyboardEvent          Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FKey UKismetInputLibrary::GetKey(const struct FKeyboardEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.GetKey");

	UKismetInputLibrary_GetKey_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.EqualEqual_KeyKey
// ()
// Parameters:
// struct FKey                    A                              (Parm)
// struct FKey                    B                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetInputLibrary::EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.EqualEqual_KeyKey");

	UKismetInputLibrary_EqualEqual_KeyKey_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex
// ()
// Parameters:
// struct FControllerEvent        Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetInputLibrary::ControllerEvent_GetUserIndex(const struct FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.ControllerEvent_GetUserIndex");

	UKismetInputLibrary_ControllerEvent_GetUserIndex_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton
// ()
// Parameters:
// struct FControllerEvent        Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FKey                    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FKey UKismetInputLibrary::ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.ControllerEvent_GetEffectingButton");

	UKismetInputLibrary_ControllerEvent_GetEffectingButton_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue
// ()
// Parameters:
// struct FControllerEvent        Input                          (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetInputLibrary::ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.ControllerEvent_GetAnalogValue");

	UKismetInputLibrary_ControllerEvent_GetAnalogValue_Params params;
	params.Input = Input;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetInputLibrary.CalibrateTilt
// ()

void UKismetInputLibrary::CalibrateTilt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetInputLibrary.CalibrateTilt");

	UKismetInputLibrary_CalibrateTilt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetMaterialLibrary.SetVectorParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ParameterValue                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetMaterialLibrary::SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.SetVectorParameterValue");

	UKismetMaterialLibrary_SetVectorParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetMaterialLibrary.SetScalarParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ParameterValue                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMaterialLibrary::SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.SetScalarParameterValue");

	UKismetMaterialLibrary_SetScalarParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;
	params.ParameterValue = ParameterValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetMaterialLibrary.ResetMaterialParameterCollectionInstance
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMaterialLibrary::ResetMaterialParameterCollectionInstance(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.ResetMaterialParameterCollectionInstance");

	UKismetMaterialLibrary_ResetMaterialParameterCollectionInstance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetMaterialLibrary.GetVectorParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMaterialLibrary::GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.GetVectorParameterValue");

	UKismetMaterialLibrary_GetVectorParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.GetScalarParameterValue
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialParameterCollection* Collection                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMaterialLibrary::GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.GetScalarParameterValue");

	UKismetMaterialLibrary_GetScalarParameterValue_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Collection = Collection;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Parent                         (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* UKismetMaterialLibrary::CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance");

	UKismetMaterialLibrary_CreateDynamicMaterialInstance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Parent = Parent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Xor_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Xor_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Xor_IntInt");

	UKismetMathLibrary_Xor_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.WrapAngle
// ()
// Parameters:
// float                          degrees                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::WrapAngle(float degrees)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.WrapAngle");

	UKismetMathLibrary_WrapAngle_Params params;
	params.degrees = degrees;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSizeSquared2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSizeSquared2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSizeSquared2D");

	UKismetMathLibrary_VSizeSquared2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSizeSquared
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSizeSquared(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSizeSquared");

	UKismetMathLibrary_VSizeSquared_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize2D");

	UKismetMathLibrary_VSize2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VSize
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::VSize(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VSize");

	UKismetMathLibrary_VSize_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VLerp
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VLerp(const struct FVector& A, const struct FVector& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VLerp");

	UKismetMathLibrary_VLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_SnapWithinDist
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          SnapWithinDist                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_SnapWithinDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_SnapWithinDist");

	UKismetMathLibrary_VInterpTo_SnapWithinDist_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;
	params.SnapWithinDist = SnapWithinDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_SnapPastDist
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          SnapPastDist                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_SnapPastDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_SnapPastDist");

	UKismetMathLibrary_VInterpTo_SnapPastDist_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;
	params.SnapPastDist = SnapPastDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_Constant_SnapWithinDist
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          SnapWithinDist                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_Constant_SnapWithinDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapWithinDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_Constant_SnapWithinDist");

	UKismetMathLibrary_VInterpTo_Constant_SnapWithinDist_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;
	params.SnapWithinDist = SnapWithinDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_Constant_SnapPastDist
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          SnapPastDist                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_Constant_SnapPastDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float SnapPastDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_Constant_SnapPastDist");

	UKismetMathLibrary_VInterpTo_Constant_SnapPastDist_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;
	params.SnapPastDist = SnapPastDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_Constant_ClampDist
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ClampDist                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_Constant_ClampDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_Constant_ClampDist");

	UKismetMathLibrary_VInterpTo_Constant_ClampDist_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;
	params.ClampDist = ClampDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_Constant
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_Constant(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_Constant");

	UKismetMathLibrary_VInterpTo_Constant_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo_ClampDist
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ClampDist                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo_ClampDist(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed, float ClampDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo_ClampDist");

	UKismetMathLibrary_VInterpTo_ClampDist_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;
	params.ClampDist = ClampDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VInterpTo
// ()
// Parameters:
// struct FVector                 current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VInterpTo(const struct FVector& current, const struct FVector& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VInterpTo");

	UKismetMathLibrary_VInterpTo_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.VEase
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.VEase");

	UKismetMathLibrary_VEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.UtcNow
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::UtcNow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.UtcNow");

	UKismetMathLibrary_UtcNow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformLocation
// ()
// Parameters:
// struct UObject_FTransform      T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::TransformLocation(const struct UObject_FTransform& T, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformLocation");

	UKismetMathLibrary_TransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TransformDirection
// ()
// Parameters:
// struct UObject_FTransform      T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::TransformDirection(const struct UObject_FTransform& T, const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TransformDirection");

	UKismetMathLibrary_TransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Today
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Today()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Today");

	UKismetMathLibrary_Today_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TLerp
// ()
// Parameters:
// struct UObject_FTransform      A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::TLerp(const struct UObject_FTransform& A, const struct UObject_FTransform& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TLerp");

	UKismetMathLibrary_TLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TInterpTo
// ()
// Parameters:
// struct UObject_FTransform      current                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::TInterpTo(const struct UObject_FTransform& current, const struct UObject_FTransform& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TInterpTo");

	UKismetMathLibrary_TInterpTo_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanZeroValue
// ()
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::TimespanZeroValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanZeroValue");

	UKismetMathLibrary_TimespanZeroValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanRatio
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::TimespanRatio(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanRatio");

	UKismetMathLibrary_TimespanRatio_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMinValue
// ()
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::TimespanMinValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanMinValue");

	UKismetMathLibrary_TimespanMinValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TimespanMaxValue
// ()
// Parameters:
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::TimespanMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TimespanMaxValue");

	UKismetMathLibrary_TimespanMaxValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.TEase
// ()
// Parameters:
// struct UObject_FTransform      A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::TEase(const struct UObject_FTransform& A, const struct UObject_FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.TEase");

	UKismetMathLibrary_TEase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Tan
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Tan(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Tan");

	UKismetMathLibrary_Tan_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Subtract_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorVector");

	UKismetMathLibrary_Subtract_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Subtract_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_VectorFloat");

	UKismetMathLibrary_Subtract_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Vector2DVector2D");

	UKismetMathLibrary_Subtract_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Subtract_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_Vector2DFloat");

	UKismetMathLibrary_Subtract_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_TimespanTimespan");

	UKismetMathLibrary_Subtract_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Subtract_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_IntInt");

	UKismetMathLibrary_Subtract_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Subtract_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_FloatFloat");

	UKismetMathLibrary_Subtract_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DoubleFloat
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UKismetMathLibrary::Subtract_DoubleFloat(double A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_DoubleFloat");

	UKismetMathLibrary_Subtract_DoubleFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UKismetMathLibrary::Subtract_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_DoubleDouble");

	UKismetMathLibrary_Subtract_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_DateTimeTimespan");

	UKismetMathLibrary_Subtract_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Subtract_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Subtract_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Subtract_ByteByte");

	UKismetMathLibrary_Subtract_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Square
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Square(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Square");

	UKismetMathLibrary_Square_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sqrt
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Sqrt(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Sqrt");

	UKismetMathLibrary_Sqrt_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Sin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Sin(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Sin");

	UKismetMathLibrary_Sin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfInteger
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::SignOfInteger(int A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SignOfInteger");

	UKismetMathLibrary_SignOfInteger_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SignOfFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::SignOfFloat(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SignOfFloat");

	UKismetMathLibrary_SignOfFloat_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SetRandomStreamSeed
// ()
// Parameters:
// struct FRandomStream           Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            NewSeed                        (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SetRandomStreamSeed");

	UKismetMathLibrary_SetRandomStreamSeed_Params params;
	params.NewSeed = NewSeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Stream != nullptr)
		*Stream = params.Stream;
}


// Function Engine.KismetMathLibrary.SelectVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectVector");

	UKismetMathLibrary_SelectVector_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectTransform
// ()
// Parameters:
// struct UObject_FTransform      A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::SelectTransform(const struct UObject_FTransform& A, const struct UObject_FTransform& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectTransform");

	UKismetMathLibrary_SelectTransform_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectString
// ()
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetMathLibrary::SelectString(const class FString& A, const class FString& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectString");

	UKismetMathLibrary_SelectString_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectRotator");

	UKismetMathLibrary_SelectRotator_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectObject
// ()
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSelectA                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UKismetMathLibrary::SelectObject(class UObject* A, class UObject* B, bool bSelectA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectObject");

	UKismetMathLibrary_SelectObject_Params params;
	params.A = A;
	params.B = B;
	params.bSelectA = bSelectA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::SelectInt(int A, int B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectInt");

	UKismetMathLibrary_SelectInt_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::SelectFloat(float A, float B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectFloat");

	UKismetMathLibrary_SelectFloat_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SelectColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPickA                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SelectColor");

	UKismetMathLibrary_SelectColor_Params params;
	params.A = A;
	params.B = B;
	params.bPickA = bPickA;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.SeedRandomStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetMathLibrary::SeedRandomStream(struct FRandomStream* Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.SeedRandomStream");

	UKismetMathLibrary_SeedRandomStream_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Stream != nullptr)
		*Stream = params.Stream;
}


// Function Engine.KismetMathLibrary.Round
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Round(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Round");

	UKismetMathLibrary_Round_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle
// ()
// Parameters:
// struct FVector                 Axis                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Angle                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RotatorFromAxisAndAngle");

	UKismetMathLibrary_RotatorFromAxisAndAngle_Params params;
	params.Axis = Axis;
	params.Angle = Angle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RotateAngleAxis
// ()
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleDeg                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Axis                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RotateAngleAxis");

	UKismetMathLibrary_RotateAngleAxis_Params params;
	params.InVect = InVect;
	params.AngleDeg = AngleDeg;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RLerp
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RLerp");

	UKismetMathLibrary_RLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo_PerAxis
// ()
// Parameters:
// struct FRotator                current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InterpSpeedPerAxis             (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RInterpTo_PerAxis(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo_PerAxis");

	UKismetMathLibrary_RInterpTo_PerAxis_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedPerAxis = InterpSpeedPerAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo_Constant_PerAxis
// ()
// Parameters:
// struct FRotator                current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InterpSpeedPerAxis             (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RInterpTo_Constant_PerAxis(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, const struct FRotator& InterpSpeedPerAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo_Constant_PerAxis");

	UKismetMathLibrary_RInterpTo_Constant_PerAxis_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedPerAxis = InterpSpeedPerAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo_Constant
// ()
// Parameters:
// struct FRotator                current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RInterpTo_Constant(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo_Constant");

	UKismetMathLibrary_RInterpTo_Constant_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RInterpTo
// ()
// Parameters:
// struct FRotator                current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RInterpTo(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RInterpTo");

	UKismetMathLibrary_RInterpTo_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RGBToHSV_Vector
// ()
// Parameters:
// struct FLinearColor            RGB                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            HSV                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RGBToHSV_Vector");

	UKismetMathLibrary_RGBToHSV_Vector_Params params;
	params.RGB = RGB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HSV != nullptr)
		*HSV = params.HSV;
}


// Function Engine.KismetMathLibrary.RGBToHSV
// ()
// Parameters:
// struct FLinearColor            InColor                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          H                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          S                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RGBToHSV");

	UKismetMathLibrary_RGBToHSV_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (H != nullptr)
		*H = params.H;
	if (S != nullptr)
		*S = params.S;
	if (V != nullptr)
		*V = params.V;
	if (A != nullptr)
		*A = params.A;
}


// Function Engine.KismetMathLibrary.ResetRandomStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UKismetMathLibrary::ResetRandomStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ResetRandomStream");

	UKismetMathLibrary_ResetRandomStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetMathLibrary.REase
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.REase");

	UKismetMathLibrary_REase_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorInCone
// ()
// Parameters:
// struct FVector                 ConeDir                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ConeHalfAngle                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorInCone");

	UKismetMathLibrary_RandomUnitVectorInCone_Params params;
	params.ConeDir = ConeDir;
	params.ConeHalfAngle = ConeHalfAngle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVectorFromStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomUnitVectorFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVectorFromStream");

	UKismetMathLibrary_RandomUnitVectorFromStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomUnitVector
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomUnitVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomUnitVector");

	UKismetMathLibrary_RandomUnitVector_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotatorFromStream
// ()
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomRotatorFromStream");

	UKismetMathLibrary_RandomRotatorFromStream_Params params;
	params.bRoll = bRoll;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomRotator
// ()
// Parameters:
// bool                           bRoll                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::RandomRotator(bool bRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomRotator");

	UKismetMathLibrary_RandomRotator_Params params;
	params.bRoll = bRoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomPointInBoundingBox
// ()
// Parameters:
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 BoxExtent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomPointInBoundingBox");

	UKismetMathLibrary_RandomPointInBoundingBox_Params params;
	params.Origin = Origin;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
// ()
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerInRangeFromStream");

	UKismetMathLibrary_RandomIntegerInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerInRange
// ()
// Parameters:
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerInRange(int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerInRange");

	UKismetMathLibrary_RandomIntegerInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomIntegerFromStream
// ()
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomIntegerFromStream(int Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomIntegerFromStream");

	UKismetMathLibrary_RandomIntegerFromStream_Params params;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomInteger
// ()
// Parameters:
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::RandomInteger(int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomInteger");

	UKismetMathLibrary_RandomInteger_Params params;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream
// ()
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatInRangeFromStream");

	UKismetMathLibrary_RandomFloatInRangeFromStream_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatInRange
// ()
// Parameters:
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatInRange(float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatInRange");

	UKismetMathLibrary_RandomFloatInRange_Params params;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloatFromStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloatFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloatFromStream");

	UKismetMathLibrary_RandomFloatFromStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomFloat
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RandomFloat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomFloat");

	UKismetMathLibrary_RandomFloat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBoolFromStream
// ()
// Parameters:
// struct FRandomStream           Stream                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::RandomBoolFromStream(const struct FRandomStream& Stream)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBoolFromStream");

	UKismetMathLibrary_RandomBoolFromStream_Params params;
	params.Stream = Stream;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RandomBool
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::RandomBool()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RandomBool");

	UKismetMathLibrary_RandomBool_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.RadiansToDegrees
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::RadiansToDegrees(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.RadiansToDegrees");

	UKismetMathLibrary_RadiansToDegrees_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.QInterpTo
// ()
// Parameters:
// struct FRotator                current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::QInterpTo(const struct FRotator& current, const struct FRotator& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.QInterpTo");

	UKismetMathLibrary_QInterpTo_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectVectorOnToPlane
// ()
// Parameters:
// struct FVector                 V                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectVectorOnToPlane");

	UKismetMathLibrary_ProjectVectorOnToPlane_Params params;
	params.V = V;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ProjectOnTo
// ()
// Parameters:
// struct FVector                 X                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Y                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::ProjectOnTo(const struct FVector& X, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ProjectOnTo");

	UKismetMathLibrary_ProjectOnTo_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.PointsAreCoplanar
// ()
// Parameters:
// TArray<struct FVector>         Points                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          Tolerance                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.PointsAreCoplanar");

	UKismetMathLibrary_PointsAreCoplanar_Params params;
	params.Points = Points;
	params.Tolerance = Tolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Percent_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_IntInt");

	UKismetMathLibrary_Percent_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Percent_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_FloatFloat");

	UKismetMathLibrary_Percent_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Percent_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Percent_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Percent_ByteByte");

	UKismetMathLibrary_Percent_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Or_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Or_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Or_IntInt");

	UKismetMathLibrary_Or_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Now
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Now()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Now");

	UKismetMathLibrary_Now_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_VectorVector");

	UKismetMathLibrary_NotEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_TimespanTimespan");

	UKismetMathLibrary_NotEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_RotatorRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_RotatorRotator");

	UKismetMathLibrary_NotEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ObjectObject
// ()
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ObjectObject(class UObject* A, class UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ObjectObject");

	UKismetMathLibrary_NotEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_NameName
// ()
// Parameters:
// struct FName                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_NameName(const struct FName& A, const struct FName& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_NameName");

	UKismetMathLibrary_NotEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_IntInt");

	UKismetMathLibrary_NotEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_FloatFloat");

	UKismetMathLibrary_NotEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_DoubleDouble");

	UKismetMathLibrary_NotEqual_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_DateTimeDateTime");

	UKismetMathLibrary_NotEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ClassClass
// ()
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ClassClass(class UClass* A, class UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ClassClass");

	UKismetMathLibrary_NotEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_ByteByte");

	UKismetMathLibrary_NotEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NotEqual_BoolBool
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NotEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NotEqual_BoolBool");

	UKismetMathLibrary_NotEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Not_PreBool
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Not_PreBool(bool A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Not_PreBool");

	UKismetMathLibrary_Not_PreBool_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Not_Int
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Not_Int(int A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Not_Int");

	UKismetMathLibrary_Not_Int_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizeToRange
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMin                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          RangeMax                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::NormalizeToRange(float Value, float RangeMin, float RangeMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizeToRange");

	UKismetMathLibrary_NormalizeToRange_Params params;
	params.Value = Value;
	params.RangeMin = RangeMin;
	params.RangeMax = RangeMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NormalizedDeltaRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NormalizedDeltaRotator");

	UKismetMathLibrary_NormalizedDeltaRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normal2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Normal2D(const struct FVector2D& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Normal2D");

	UKismetMathLibrary_Normal2D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Normal
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Normal(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Normal");

	UKismetMathLibrary_Normal_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::NegateVector(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NegateVector");

	UKismetMathLibrary_NegateVector_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NegateRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::NegateRotator(const struct FRotator& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NegateRotator");

	UKismetMathLibrary_NegateRotator_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NearlyEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NearlyEqual_VectorVector");

	UKismetMathLibrary_NearlyEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NearlyEqual_FloatFloat");

	UKismetMathLibrary_NearlyEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.NearlyEqual_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErrorTolerance                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::NearlyEqual_DoubleDouble(double A, double B, float ErrorTolerance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.NearlyEqual_DoubleDouble");

	UKismetMathLibrary_NearlyEqual_DoubleDouble_Params params;
	params.A = A;
	params.B = B;
	params.ErrorTolerance = ErrorTolerance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyMultiply_IntInt
// ()
// Parameters:
// int                            Base                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Exp                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::MultiplyMultiply_IntInt(int Base, int Exp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MultiplyMultiply_IntInt");

	UKismetMathLibrary_MultiplyMultiply_IntInt_Params params;
	params.Base = Base;
	params.Exp = Exp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
// ()
// Parameters:
// float                          Base                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exp                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MultiplyMultiply_FloatFloat(float Base, float Exp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat");

	UKismetMathLibrary_MultiplyMultiply_FloatFloat_Params params;
	params.Base = Base;
	params.Exp = Exp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MultiplyByPi
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MultiplyByPi(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MultiplyByPi");

	UKismetMathLibrary_MultiplyByPi_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Multiply_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorVector");

	UKismetMathLibrary_Multiply_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Multiply_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_VectorFloat");

	UKismetMathLibrary_Multiply_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Multiply_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_Vector2DFloat");

	UKismetMathLibrary_Multiply_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_TimespanFloat
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::Multiply_TimespanFloat(const struct FTimespan& A, float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_TimespanFloat");

	UKismetMathLibrary_Multiply_TimespanFloat_Params params;
	params.A = A;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_RotatorFloat
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::Multiply_RotatorFloat(const struct FRotator& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_RotatorFloat");

	UKismetMathLibrary_Multiply_RotatorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_LinearColorLinearColor");

	UKismetMathLibrary_Multiply_LinearColorLinearColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_LinearColorFloat
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Multiply_LinearColorFloat(const struct FLinearColor& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_LinearColorFloat");

	UKismetMathLibrary_Multiply_LinearColorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Multiply_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntInt");

	UKismetMathLibrary_Multiply_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_IntFloat
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Multiply_IntFloat(int A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_IntFloat");

	UKismetMathLibrary_Multiply_IntFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Multiply_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_FloatFloat");

	UKismetMathLibrary_Multiply_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Multiply_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Multiply_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Multiply_ByteByte");

	UKismetMathLibrary_Multiply_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MirrorVectorByNormal
// ()
// Parameters:
// struct FVector                 InVect                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InNormal                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MirrorVectorByNormal");

	UKismetMathLibrary_MirrorVectorByNormal_Params params;
	params.InVect = InVect;
	params.InNormal = InNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MinOfIntArray
// ()
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfIntArray");

	UKismetMathLibrary_MinOfIntArray_Params params;
	params.IntArray = IntArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinOfFloatArray
// ()
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfFloatArray");

	UKismetMathLibrary_MinOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinOfByteArray
// ()
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMinValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// unsigned char                  MinValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinOfByteArray");

	UKismetMathLibrary_MinOfByteArray_Params params;
	params.ByteArray = ByteArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndexOfMinValue != nullptr)
		*IndexOfMinValue = params.IndexOfMinValue;
	if (MinValue != nullptr)
		*MinValue = params.MinValue;
}


// Function Engine.KismetMathLibrary.MinimumAreaRectangle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         InVerts                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 SampleSurfaceNormal            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 OutRectCenter                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRectRotation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutSideLengthX                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutSideLengthY                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MinimumAreaRectangle");

	UKismetMathLibrary_MinimumAreaRectangle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InVerts = InVerts;
	params.SampleSurfaceNormal = SampleSurfaceNormal;
	params.bDebugDraw = bDebugDraw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRectCenter != nullptr)
		*OutRectCenter = params.OutRectCenter;
	if (OutRectRotation != nullptr)
		*OutRectRotation = params.OutRectRotation;
	if (OutSideLengthX != nullptr)
		*OutSideLengthX = params.OutSideLengthX;
	if (OutSideLengthY != nullptr)
		*OutSideLengthY = params.OutSideLengthY;
}


// Function Engine.KismetMathLibrary.Min
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Min(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Min");

	UKismetMathLibrary_Min_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MaxOfIntArray
// ()
// Parameters:
// TArray<int>                    IntArray                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfIntArray");

	UKismetMathLibrary_MaxOfIntArray_Params params;
	params.IntArray = IntArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.MaxOfFloatArray
// ()
// Parameters:
// TArray<float>                  FloatArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfFloatArray");

	UKismetMathLibrary_MaxOfFloatArray_Params params;
	params.FloatArray = FloatArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.MaxOfByteArray
// ()
// Parameters:
// TArray<unsigned char>          ByteArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            IndexOfMaxValue                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// unsigned char                  MaxValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MaxOfByteArray");

	UKismetMathLibrary_MaxOfByteArray_Params params;
	params.ByteArray = ByteArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IndexOfMaxValue != nullptr)
		*IndexOfMaxValue = params.IndexOfMaxValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;
}


// Function Engine.KismetMathLibrary.Max
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Max(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Max");

	UKismetMathLibrary_Max_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MapRange
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::MapRange(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MapRange");

	UKismetMathLibrary_MapRange_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector2D
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::MakeVector2D(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeVector2D");

	UKismetMathLibrary_MakeVector2D_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeVector
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::MakeVector(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeVector");

	UKismetMathLibrary_MakeVector_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeTransform
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeTransform");

	UKismetMathLibrary_MakeTransform_Params params;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZY
// ()
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromZY(const struct FVector& Z, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZY");

	UKismetMathLibrary_MakeRotFromZY_Params params;
	params.Z = Z;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZX
// ()
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromZX(const struct FVector& Z, const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZX");

	UKismetMathLibrary_MakeRotFromZX_Params params;
	params.Z = Z;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromZ
// ()
// Parameters:
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromZ(const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromZ");

	UKismetMathLibrary_MakeRotFromZ_Params params;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYZ
// ()
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromYZ");

	UKismetMathLibrary_MakeRotFromYZ_Params params;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromYX
// ()
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromYX(const struct FVector& Y, const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromYX");

	UKismetMathLibrary_MakeRotFromYX_Params params;
	params.Y = Y;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromY
// ()
// Parameters:
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromY(const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromY");

	UKismetMathLibrary_MakeRotFromY_Params params;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXZ
// ()
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Z                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromXZ(const struct FVector& X, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromXZ");

	UKismetMathLibrary_MakeRotFromXZ_Params params;
	params.X = X;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromXY
// ()
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Y                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromXY(const struct FVector& X, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromXY");

	UKismetMathLibrary_MakeRotFromXY_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotFromX
// ()
// Parameters:
// struct FVector                 X                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotFromX(const struct FVector& X)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotFromX");

	UKismetMathLibrary_MakeRotFromX_Params params;
	params.X = X;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRotationFromAxes
// ()
// Parameters:
// struct FVector                 Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Right                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Up                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRotationFromAxes");

	UKismetMathLibrary_MakeRotationFromAxes_Params params;
	params.Forward = Forward;
	params.Right = Right;
	params.Up = Up;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeRot
// ()
// Parameters:
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::MakeRot(float Pitch, float Yaw, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeRot");

	UKismetMathLibrary_MakeRot_Params params;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.MakeColor
// ()
// Parameters:
// float                          R                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          G                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::MakeColor(float R, float G, float B, float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.MakeColor");

	UKismetMathLibrary_MakeColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Loge
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Loge(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Loge");

	UKismetMathLibrary_Loge_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
// ()
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 PlaneOrigin                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PlaneNormal                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal");

	UKismetMathLibrary_LinePlaneIntersection_OriginNormal_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.PlaneOrigin = PlaneOrigin;
	params.PlaneNormal = PlaneNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinePlaneIntersection
// ()
// Parameters:
// struct FVector                 LineStart                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FPlane                  APlane                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          T                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Intersection                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinePlaneIntersection");

	UKismetMathLibrary_LinePlaneIntersection_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.APlane = APlane;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (T != nullptr)
		*T = params.T;
	if (Intersection != nullptr)
		*Intersection = params.Intersection;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LinearColorLerp
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LinearColorLerp");

	UKismetMathLibrary_LinearColorLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessLess_VectorRotator
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessLess_VectorRotator");

	UKismetMathLibrary_LessLess_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_TimespanTimespan");

	UKismetMathLibrary_LessEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_IntInt");

	UKismetMathLibrary_LessEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_FloatFloat");

	UKismetMathLibrary_LessEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_DoubleDouble");

	UKismetMathLibrary_LessEqual_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_DateTimeDateTime");

	UKismetMathLibrary_LessEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LessEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::LessEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LessEqual_ByteByte");

	UKismetMathLibrary_LessEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_TimespanTimespan");

	UKismetMathLibrary_Less_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_IntInt");

	UKismetMathLibrary_Less_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_FloatFloat");

	UKismetMathLibrary_Less_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_DoubleDouble");

	UKismetMathLibrary_Less_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_DateTimeDateTime");

	UKismetMathLibrary_Less_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Less_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Less_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Less_ByteByte");

	UKismetMathLibrary_Less_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.LerpAngle
// ()
// Parameters:
// float                          startDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          endDegrees                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::LerpAngle(float startDegrees, float endDegrees, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.LerpAngle");

	UKismetMathLibrary_LerpAngle_Params params;
	params.startDegrees = startDegrees;
	params.endDegrees = endDegrees;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Lerp
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Lerp(float A, float B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Lerp");

	UKismetMathLibrary_Lerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsRotatorInfiniteOrNaN
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsRotatorInfiniteOrNaN(const struct FRotator& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsRotatorInfiniteOrNaN");

	UKismetMathLibrary_IsRotatorInfiniteOrNaN_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsPointInBox
// ()
// Parameters:
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxOrigin                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsPointInBox");

	UKismetMathLibrary_IsPointInBox_Params params;
	params.Point = Point;
	params.BoxOrigin = BoxOrigin;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsMorning
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsMorning(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsMorning");

	UKismetMathLibrary_IsMorning_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsLeapYear
// ()
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsLeapYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsLeapYear");

	UKismetMathLibrary_IsLeapYear_Params params;
	params.Year = Year;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsInfiniteOrNaN
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsInfiniteOrNaN(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsInfiniteOrNaN");

	UKismetMathLibrary_IsInfiniteOrNaN_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.IsAfternoon
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::IsAfternoon(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.IsAfternoon");

	UKismetMathLibrary_IsAfternoon_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformLocation
// ()
// Parameters:
// struct UObject_FTransform      T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::InverseTransformLocation(const struct UObject_FTransform& T, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseTransformLocation");

	UKismetMathLibrary_InverseTransformLocation_Params params;
	params.T = T;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InverseTransformDirection
// ()
// Parameters:
// struct UObject_FTransform      T                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::InverseTransformDirection(const struct UObject_FTransform& T, const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InverseTransformDirection");

	UKismetMathLibrary_InverseTransformDirection_Params params;
	params.T = T;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.InRange_FloatFloat
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InclusiveMin                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           InclusiveMax                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.InRange_FloatFloat");

	UKismetMathLibrary_InRange_FloatFloat_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;
	params.InclusiveMin = InclusiveMin;
	params.InclusiveMax = InclusiveMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.HSVToRGB_Vector
// ()
// Parameters:
// struct FLinearColor            HSV                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RGB                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.HSVToRGB_Vector");

	UKismetMathLibrary_HSVToRGB_Vector_Params params;
	params.HSV = HSV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RGB != nullptr)
		*RGB = params.RGB;
}


// Function Engine.KismetMathLibrary.HSVToRGB
// ()
// Parameters:
// float                          H                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          S                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::HSVToRGB(float H, float S, float V, float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.HSVToRGB");

	UKismetMathLibrary_HSVToRGB_Params params;
	params.H = H;
	params.S = S;
	params.V = V;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterGreater_VectorRotator");

	UKismetMathLibrary_GreaterGreater_VectorRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan");

	UKismetMathLibrary_GreaterEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_IntInt");

	UKismetMathLibrary_GreaterEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_FloatFloat");

	UKismetMathLibrary_GreaterEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_DoubleDouble");

	UKismetMathLibrary_GreaterEqual_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime");

	UKismetMathLibrary_GreaterEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GreaterEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::GreaterEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GreaterEqual_ByteByte");

	UKismetMathLibrary_GreaterEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_TimespanTimespan");

	UKismetMathLibrary_Greater_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_IntInt");

	UKismetMathLibrary_Greater_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_FloatFloat");

	UKismetMathLibrary_Greater_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_DoubleDouble");

	UKismetMathLibrary_Greater_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_DateTimeDateTime");

	UKismetMathLibrary_Greater_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Greater_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Greater_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Greater_ByteByte");

	UKismetMathLibrary_Greater_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetYear
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetYear(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetYear");

	UKismetMathLibrary_GetYear_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetVectorArrayAverage
// ()
// Parameters:
// TArray<struct FVector>         Vectors                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetVectorArrayAverage(TArray<struct FVector> Vectors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetVectorArrayAverage");

	UKismetMathLibrary_GetVectorArrayAverage_Params params;
	params.Vectors = Vectors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetUpVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetUpVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetUpVector");

	UKismetMathLibrary_GetUpVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalSeconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalSeconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalSeconds");

	UKismetMathLibrary_GetTotalSeconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMinutes
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalMinutes(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalMinutes");

	UKismetMathLibrary_GetTotalMinutes_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalMilliseconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalMilliseconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalMilliseconds");

	UKismetMathLibrary_GetTotalMilliseconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalHours
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalHours(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalHours");

	UKismetMathLibrary_GetTotalHours_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTotalDays
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetTotalDays(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTotalDays");

	UKismetMathLibrary_GetTotalDays_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetTimeOfDay
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::GetTimeOfDay(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetTimeOfDay");

	UKismetMathLibrary_GetTimeOfDay_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSeconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetSeconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetSeconds");

	UKismetMathLibrary_GetSeconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetSecond
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetSecond(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetSecond");

	UKismetMathLibrary_GetSecond_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetRightVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetRightVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetRightVector");

	UKismetMathLibrary_GetRightVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetPI
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetPI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetPI");

	UKismetMathLibrary_GetPI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMonth
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMonth(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMonth");

	UKismetMathLibrary_GetMonth_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinutes
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMinutes(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinutes");

	UKismetMathLibrary_GetMinutes_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinute
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMinute(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinute");

	UKismetMathLibrary_GetMinute_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMinElement
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetMinElement(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMinElement");

	UKismetMathLibrary_GetMinElement_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMilliseconds
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMilliseconds(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMilliseconds");

	UKismetMathLibrary_GetMilliseconds_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMillisecond
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetMillisecond(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMillisecond");

	UKismetMathLibrary_GetMillisecond_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetMaxElement
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::GetMaxElement(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetMaxElement");

	UKismetMathLibrary_GetMaxElement_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHours
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHours(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHours");

	UKismetMathLibrary_GetHours_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour12
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHour12(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHour12");

	UKismetMathLibrary_GetHour12_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetHour
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetHour(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetHour");

	UKismetMathLibrary_GetHour_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetForwardVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetForwardVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetForwardVector");

	UKismetMathLibrary_GetForwardVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDuration
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::GetDuration(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDuration");

	UKismetMathLibrary_GetDuration_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDirectionVector
// ()
// Parameters:
// struct FVector                 From                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 To                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::GetDirectionVector(const struct FVector& From, const struct FVector& To)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDirectionVector");

	UKismetMathLibrary_GetDirectionVector_Params params;
	params.From = From;
	params.To = To;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDays
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDays(const struct FTimespan& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDays");

	UKismetMathLibrary_GetDays_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDayOfYear
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDayOfYear(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDayOfYear");

	UKismetMathLibrary_GetDayOfYear_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDay
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::GetDay(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDay");

	UKismetMathLibrary_GetDay_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetDate
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::GetDate(const struct FDateTime& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetDate");

	UKismetMathLibrary_GetDate_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.GetAxes
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.GetAxes");

	UKismetMathLibrary_GetAxes_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.FromSeconds
// ()
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromSeconds(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromSeconds");

	UKismetMathLibrary_FromSeconds_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMinutes
// ()
// Parameters:
// float                          Minutes                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromMinutes(float Minutes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromMinutes");

	UKismetMathLibrary_FromMinutes_Params params;
	params.Minutes = Minutes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromMilliseconds
// ()
// Parameters:
// float                          Milliseconds                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromMilliseconds(float Milliseconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromMilliseconds");

	UKismetMathLibrary_FromMilliseconds_Params params;
	params.Milliseconds = Milliseconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromHours
// ()
// Parameters:
// float                          Hours                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromHours(float Hours)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromHours");

	UKismetMathLibrary_FromHours_Params params;
	params.Hours = Hours;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FromDays
// ()
// Parameters:
// float                          Days                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::FromDays(float Days)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FromDays");

	UKismetMathLibrary_FromDays_Params params;
	params.Days = Days;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Fraction
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Fraction(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Fraction");

	UKismetMathLibrary_Fraction_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMod
// ()
// Parameters:
// float                          Dividend                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Divisor                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Remainder                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FMod(float Dividend, float Divisor, float* Remainder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMod");

	UKismetMathLibrary_FMod_Params params;
	params.Dividend = Dividend;
	params.Divisor = Divisor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Remainder != nullptr)
		*Remainder = params.Remainder;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FMin(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMin");

	UKismetMathLibrary_FMin_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FMax
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FMax(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FMax");

	UKismetMathLibrary_FMax_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FlattenVectorNormal
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::FlattenVectorNormal(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FlattenVectorNormal");

	UKismetMathLibrary_FlattenVectorNormal_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FlattenVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::FlattenVector(const struct FVector& A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FlattenVector");

	UKismetMathLibrary_FlattenVector_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo_Constant
// ()
// Parameters:
// float                          current                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpTo_Constant(float current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpTo_Constant");

	UKismetMathLibrary_FInterpTo_Constant_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpTo
// ()
// Parameters:
// float                          current                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpTo(float current, float Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpTo");

	UKismetMathLibrary_FInterpTo_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FInterpEaseInOut
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exponent                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FInterpEaseInOut(float A, float B, float Alpha, float Exponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FInterpEaseInOut");

	UKismetMathLibrary_FInterpEaseInOut_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.Exponent = Exponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FindLookAtRotation
// ()
// Parameters:
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::FindLookAtRotation(const struct FVector& Start, const struct FVector& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FindLookAtRotation");

	UKismetMathLibrary_FindLookAtRotation_Params params;
	params.Start = Start;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FFloor
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FFloor(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FFloor");

	UKismetMathLibrary_FFloor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FClamp
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FClamp(float Value, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FClamp");

	UKismetMathLibrary_FClamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FCeil
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::FCeil(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FCeil");

	UKismetMathLibrary_FCeil_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FAngleInterpTo
// ()
// Parameters:
// float                          CurrentDegrees                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          TargetDegrees                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FAngleInterpTo(float CurrentDegrees, float TargetDegrees, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FAngleInterpTo");

	UKismetMathLibrary_FAngleInterpTo_Params params;
	params.CurrentDegrees = CurrentDegrees;
	params.TargetDegrees = TargetDegrees;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FAngleInterpEaseOut
// ()
// Parameters:
// float                          startAngle                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          endAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FAngleInterpEaseOut(float startAngle, float endAngle, float Alpha, float BlendExp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FAngleInterpEaseOut");

	UKismetMathLibrary_FAngleInterpEaseOut_Params params;
	params.startAngle = startAngle;
	params.endAngle = endAngle;
	params.Alpha = Alpha;
	params.BlendExp = BlendExp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FAngleInterpEaseInOut
// ()
// Parameters:
// float                          startAngle                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          endAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FAngleInterpEaseInOut(float startAngle, float endAngle, float Alpha, float BlendExp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FAngleInterpEaseInOut");

	UKismetMathLibrary_FAngleInterpEaseInOut_Params params;
	params.startAngle = startAngle;
	params.endAngle = endAngle;
	params.Alpha = Alpha;
	params.BlendExp = BlendExp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.FAngleInterpEaseIn
// ()
// Parameters:
// float                          startAngle                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          endAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::FAngleInterpEaseIn(float startAngle, float endAngle, float Alpha, float BlendExp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.FAngleInterpEaseIn");

	UKismetMathLibrary_FAngleInterpEaseIn_Params params;
	params.startAngle = startAngle;
	params.endAngle = endAngle;
	params.Alpha = Alpha;
	params.BlendExp = BlendExp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Exp
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Exp(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Exp");

	UKismetMathLibrary_Exp_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_VectorVector");

	UKismetMathLibrary_EqualEqual_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_TimespanTimespan");

	UKismetMathLibrary_EqualEqual_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_RotatorRotator");

	UKismetMathLibrary_EqualEqual_RotatorRotator_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ObjectObject
// ()
// Parameters:
// class UObject*                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ObjectObject(class UObject* A, class UObject* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ObjectObject");

	UKismetMathLibrary_EqualEqual_ObjectObject_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_NameName
// ()
// Parameters:
// struct FName                   A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_NameName(const struct FName& A, const struct FName& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_NameName");

	UKismetMathLibrary_EqualEqual_NameName_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_IntInt");

	UKismetMathLibrary_EqualEqual_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_FloatFloat");

	UKismetMathLibrary_EqualEqual_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_DoubleDouble");

	UKismetMathLibrary_EqualEqual_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FDateTime               B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime");

	UKismetMathLibrary_EqualEqual_DateTimeDateTime_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ClassClass
// ()
// Parameters:
// class UClass*                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ClassClass(class UClass* A, class UClass* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ClassClass");

	UKismetMathLibrary_EqualEqual_ClassClass_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_ByteByte");

	UKismetMathLibrary_EqualEqual_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EqualEqual_BoolBool
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::EqualEqual_BoolBool(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EqualEqual_BoolBool");

	UKismetMathLibrary_EqualEqual_BoolBool_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.EaseAngle
// ()
// Parameters:
// float                          startAngle                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          endAngle                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::EaseAngle(float startAngle, float endAngle, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.EaseAngle");

	UKismetMathLibrary_EaseAngle_Params params;
	params.startAngle = startAngle;
	params.endAngle = endAngle;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Ease
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEasingFunc>       EasingFunc                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendExp                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Ease");

	UKismetMathLibrary_Ease_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.EasingFunc = EasingFunc;
	params.BlendExp = BlendExp;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Dot_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Dot_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Dot_VectorVector");

	UKismetMathLibrary_Dot_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Divide_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorVector");

	UKismetMathLibrary_Divide_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Divide_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_VectorFloat");

	UKismetMathLibrary_Divide_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Divide_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_Vector2DFloat");

	UKismetMathLibrary_Divide_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Divide_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_IntInt");

	UKismetMathLibrary_Divide_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Divide_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_FloatFloat");

	UKismetMathLibrary_Divide_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Divide_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Divide_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Divide_ByteByte");

	UKismetMathLibrary_Divide_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegTan
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegTan(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegTan");

	UKismetMathLibrary_DegTan_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegSin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegSin(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegSin");

	UKismetMathLibrary_DegSin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegreesToRadians
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegreesToRadians(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegreesToRadians");

	UKismetMathLibrary_DegreesToRadians_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegCos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegCos(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegCos");

	UKismetMathLibrary_DegCos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAtan2
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAtan2(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAtan2");

	UKismetMathLibrary_DegAtan2_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAsin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAsin(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAsin");

	UKismetMathLibrary_DegAsin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DegAcos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::DegAcos(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DegAcos");

	UKismetMathLibrary_DegAcos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInYear
// ()
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::DaysInYear(int Year)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DaysInYear");

	UKismetMathLibrary_DaysInYear_Params params;
	params.Year = Year;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DaysInMonth
// ()
// Parameters:
// int                            Year                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Month                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::DaysInMonth(int Year, int Month)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DaysInMonth");

	UKismetMathLibrary_DaysInMonth_Params params;
	params.Year = Year;
	params.Month = Month;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMinValue
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::DateTimeMinValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeMinValue");

	UKismetMathLibrary_DateTimeMinValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.DateTimeMaxValue
// ()
// Parameters:
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::DateTimeMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.DateTimeMaxValue");

	UKismetMathLibrary_DateTimeMaxValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cross_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Cross_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Cross_VectorVector");

	UKismetMathLibrary_Cross_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Cos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Cos(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Cos");

	UKismetMathLibrary_Cos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ConvertTransformToRelative
// ()
// Parameters:
// struct UObject_FTransform      WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      LocalTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::ConvertTransformToRelative(const struct UObject_FTransform& WorldTransform, const struct UObject_FTransform& LocalTransform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ConvertTransformToRelative");

	UKismetMathLibrary_ConvertTransformToRelative_Params params;
	params.WorldTransform = WorldTransform;
	params.LocalTransform = LocalTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToVector2D
// ()
// Parameters:
// struct FVector                 InVector                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Conv_VectorToVector2D(const struct FVector& InVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToVector2D");

	UKismetMathLibrary_Conv_VectorToVector2D_Params params;
	params.InVector = InVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToTransform
// ()
// Parameters:
// struct FVector                 InLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::Conv_VectorToTransform(const struct FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToTransform");

	UKismetMathLibrary_Conv_VectorToTransform_Params params;
	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToRotator
// ()
// Parameters:
// struct FVector                 inVec                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::Conv_VectorToRotator(const struct FVector& inVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToRotator");

	UKismetMathLibrary_Conv_VectorToRotator_Params params;
	params.inVec = inVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_VectorToLinearColor
// ()
// Parameters:
// struct FVector                 inVec                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Conv_VectorToLinearColor(const struct FVector& inVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_VectorToLinearColor");

	UKismetMathLibrary_Conv_VectorToLinearColor_Params params;
	params.inVec = inVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_Vector2DToVector
// ()
// Parameters:
// struct FVector2D               InVector2D                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_Vector2DToVector");

	UKismetMathLibrary_Conv_Vector2DToVector_Params params;
	params.InVector2D = InVector2D;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_RotatorToVector
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_RotatorToVector(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_RotatorToVector");

	UKismetMathLibrary_Conv_RotatorToVector_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToVector
// ()
// Parameters:
// struct FLinearColor            InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_LinearColorToVector(const struct FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_LinearColorToVector");

	UKismetMathLibrary_Conv_LinearColorToVector_Params params;
	params.InLinearColor = InLinearColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_LinearColorToColor
// ()
// Parameters:
// struct FLinearColor            InLinearColor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FColor UKismetMathLibrary::Conv_LinearColorToColor(const struct FLinearColor& InLinearColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_LinearColorToColor");

	UKismetMathLibrary_Conv_LinearColorToColor_Params params;
	params.InLinearColor = InLinearColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToFloat
// ()
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_IntToFloat(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToFloat");

	UKismetMathLibrary_Conv_IntToFloat_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToByte
// ()
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Conv_IntToByte(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToByte");

	UKismetMathLibrary_Conv_IntToByte_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_IntToBool
// ()
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::Conv_IntToBool(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_IntToBool");

	UKismetMathLibrary_Conv_IntToBool_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToVector
// ()
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Conv_FloatToVector(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_FloatToVector");

	UKismetMathLibrary_Conv_FloatToVector_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToLinearColor
// ()
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Conv_FloatToLinearColor(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_FloatToLinearColor");

	UKismetMathLibrary_Conv_FloatToLinearColor_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_FloatToDouble
// ()
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UKismetMathLibrary::Conv_FloatToDouble(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_FloatToDouble");

	UKismetMathLibrary_Conv_FloatToDouble_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_DoubleToFloat
// ()
// Parameters:
// double                         InDouble                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_DoubleToFloat(double InDouble)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_DoubleToFloat");

	UKismetMathLibrary_Conv_DoubleToFloat_Params params;
	params.InDouble = InDouble;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ColorToLinearColor
// ()
// Parameters:
// struct FColor                  InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::Conv_ColorToLinearColor(const struct FColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ColorToLinearColor");

	UKismetMathLibrary_Conv_ColorToLinearColor_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToInt
// ()
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Conv_ByteToInt(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ByteToInt");

	UKismetMathLibrary_Conv_ByteToInt_Params params;
	params.InByte = InByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_ByteToFloat
// ()
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_ByteToFloat(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_ByteToFloat");

	UKismetMathLibrary_Conv_ByteToFloat_Params params;
	params.InByte = InByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToInt
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Conv_BoolToInt(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToInt");

	UKismetMathLibrary_Conv_BoolToInt_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToFloat
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Conv_BoolToFloat(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToFloat");

	UKismetMathLibrary_Conv_BoolToFloat_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Conv_BoolToByte
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Conv_BoolToByte(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Conv_BoolToByte");

	UKismetMathLibrary_Conv_BoolToByte_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeTransforms
// ()
// Parameters:
// struct UObject_FTransform      A                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      B                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct UObject_FTransform      ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct UObject_FTransform UKismetMathLibrary::ComposeTransforms(const struct UObject_FTransform& A, const struct UObject_FTransform& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ComposeTransforms");

	UKismetMathLibrary_ComposeTransforms_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ComposeRotators
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UKismetMathLibrary::ComposeRotators(const struct FRotator& A, const struct FRotator& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ComposeRotators");

	UKismetMathLibrary_ComposeRotators_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClassIsChildOf
// ()
// Parameters:
// class UClass*                  TestClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ParentClass                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClassIsChildOf");

	UKismetMathLibrary_ClassIsChildOf_Params params;
	params.TestClass = TestClass;
	params.ParentClass = ParentClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampVectorSize
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Min                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::ClampVectorSize(const struct FVector& A, float Min, float Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampVectorSize");

	UKismetMathLibrary_ClampVectorSize_Params params;
	params.A = A;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.ClampAngle
// ()
// Parameters:
// float                          AngleDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngleDegrees                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.ClampAngle");

	UKismetMathLibrary_ClampAngle_Params params;
	params.AngleDegrees = AngleDegrees;
	params.MinAngleDegrees = MinAngleDegrees;
	params.MaxAngleDegrees = MaxAngleDegrees;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Clamp
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Min                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Max                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Clamp(int Value, int Min, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Clamp");

	UKismetMathLibrary_Clamp_Params params;
	params.Value = Value;
	params.Min = Min;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.CInterpTo
// ()
// Parameters:
// struct FLinearColor            current                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Target                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetMathLibrary::CInterpTo(const struct FLinearColor& current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.CInterpTo");

	UKismetMathLibrary_CInterpTo_Params params;
	params.current = current;
	params.Target = Target;
	params.DeltaTime = DeltaTime;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BreakVector2D
// ()
// Parameters:
// struct FVector2D               inVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakVector2D(const struct FVector2D& inVec, float* X, float* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakVector2D");

	UKismetMathLibrary_BreakVector2D_Params params;
	params.inVec = inVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.KismetMathLibrary.BreakVector
// ()
// Parameters:
// struct FVector                 inVec                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakVector(const struct FVector& inVec, float* X, float* Y, float* Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakVector");

	UKismetMathLibrary_BreakVector_Params params;
	params.inVec = inVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.BreakTransform
// ()
// Parameters:
// struct UObject_FTransform      InTransform                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Scale                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakTransform(const struct UObject_FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakTransform");

	UKismetMathLibrary_BreakTransform_Params params;
	params.InTransform = InTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Rotation != nullptr)
		*Rotation = params.Rotation;
	if (Scale != nullptr)
		*Scale = params.Scale;
}


// Function Engine.KismetMathLibrary.BreakRotIntoAxes
// ()
// Parameters:
// struct FRotator                InRot                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 X                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Y                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Z                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRotIntoAxes");

	UKismetMathLibrary_BreakRotIntoAxes_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (Z != nullptr)
		*Z = params.Z;
}


// Function Engine.KismetMathLibrary.BreakRot
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakRot(const struct FRotator& InRot, float* Pitch, float* Yaw, float* Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakRot");

	UKismetMathLibrary_BreakRot_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Pitch != nullptr)
		*Pitch = params.Pitch;
	if (Yaw != nullptr)
		*Yaw = params.Yaw;
	if (Roll != nullptr)
		*Roll = params.Roll;
}


// Function Engine.KismetMathLibrary.BreakColor
// ()
// Parameters:
// struct FLinearColor            InColor                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          R                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          G                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetMathLibrary::BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BreakColor");

	UKismetMathLibrary_BreakColor_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (R != nullptr)
		*R = params.R;
	if (G != nullptr)
		*G = params.G;
	if (B != nullptr)
		*B = params.B;
	if (A != nullptr)
		*A = params.A;
}


// Function Engine.KismetMathLibrary.BoundToCube
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::BoundToCube(const struct FVector& A, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BoundToCube");

	UKismetMathLibrary_BoundToCube_Params params;
	params.A = A;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanXOR
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanXOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanXOR");

	UKismetMathLibrary_BooleanXOR_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanOR
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanOR(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanOR");

	UKismetMathLibrary_BooleanOR_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.BooleanAND
// ()
// Parameters:
// bool                           A                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetMathLibrary::BooleanAND(bool A, bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.BooleanAND");

	UKismetMathLibrary_BooleanAND_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Atan2
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Atan2(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Atan2");

	UKismetMathLibrary_Atan2_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Asin
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Asin(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Asin");

	UKismetMathLibrary_Asin_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.And_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::And_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.And_IntInt");

	UKismetMathLibrary_And_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Add_VectorVector(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorVector");

	UKismetMathLibrary_Add_VectorVector_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_VectorFloat
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UKismetMathLibrary::Add_VectorFloat(const struct FVector& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_VectorFloat");

	UKismetMathLibrary_Add_VectorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DVector2D
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Vector2DVector2D");

	UKismetMathLibrary_Add_Vector2DVector2D_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_Vector2DFloat
// ()
// Parameters:
// struct FVector2D               A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UKismetMathLibrary::Add_Vector2DFloat(const struct FVector2D& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_Vector2DFloat");

	UKismetMathLibrary_Add_Vector2DFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_TimespanTimespan
// ()
// Parameters:
// struct FTimespan               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FTimespan               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FTimespan UKismetMathLibrary::Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_TimespanTimespan");

	UKismetMathLibrary_Add_TimespanTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_IntInt
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            B                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Add_IntInt(int A, int B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_IntInt");

	UKismetMathLibrary_Add_IntInt_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_FloatFloat
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Add_FloatFloat(float A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_FloatFloat");

	UKismetMathLibrary_Add_FloatFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_DoubleFloat
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UKismetMathLibrary::Add_DoubleFloat(double A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_DoubleFloat");

	UKismetMathLibrary_Add_DoubleFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_DoubleDouble
// ()
// Parameters:
// double                         A                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         B                              (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UKismetMathLibrary::Add_DoubleDouble(double A, double B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_DoubleDouble");

	UKismetMathLibrary_Add_DoubleDouble_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_DateTimeTimespan
// ()
// Parameters:
// struct FDateTime               A                              (Parm, ZeroConstructor)
// struct FTimespan               B                              (Parm, ZeroConstructor)
// struct FDateTime               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FDateTime UKismetMathLibrary::Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_DateTimeTimespan");

	UKismetMathLibrary_Add_DateTimeTimespan_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Add_ByteByte
// ()
// Parameters:
// unsigned char                  A                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  B                              (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetMathLibrary::Add_ByteByte(unsigned char A, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Add_ByteByte");

	UKismetMathLibrary_Add_ByteByte_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Acos
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Acos(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Acos");

	UKismetMathLibrary_Acos_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs_Int
// ()
// Parameters:
// int                            A                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetMathLibrary::Abs_Int(int A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Abs_Int");

	UKismetMathLibrary_Abs_Int_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetMathLibrary.Abs
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetMathLibrary::Abs(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetMathLibrary.Abs");

	UKismetMathLibrary_Abs_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.MarkBit
// ()
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::MarkBit(int index, int* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.MarkBit");

	UKismetNodeHelperLibrary_MarkBit_Params params;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::HasUnmarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.HasUnmarkedBit");

	UKismetNodeHelperLibrary_HasUnmarkedBit_Params params;
	params.Data = Data;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.HasMarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::HasMarkedBit(int Data, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.HasMarkedBit");

	UKismetNodeHelperLibrary_HasMarkedBit_Params params;
	params.Data = Data;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetValidIndex
// ()
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorIndex                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetNodeHelperLibrary::GetValidIndex(class UEnum* Enum, unsigned char EnumeratorIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetValidIndex");

	UKismetNodeHelperLibrary_GetValidIndex_Params params;
	params.Enum = Enum;
	params.EnumeratorIndex = EnumeratorIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRandom                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetUnmarkedBit");

	UKismetNodeHelperLibrary_GetUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;
	params.bRandom = bRandom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit");

	UKismetNodeHelperLibrary_GetRandomUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartIdx                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumBits                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetNodeHelperLibrary::GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit");

	UKismetNodeHelperLibrary_GetFirstUnmarkedBit_Params params;
	params.Data = Data;
	params.StartIdx = StartIdx;
	params.NumBits = NumBits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
// ()
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorIndex                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetNodeHelperLibrary::GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName");

	UKismetNodeHelperLibrary_GetEnumeratorUserFriendlyName_Params params;
	params.Enum = Enum;
	params.EnumeratorIndex = EnumeratorIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.GetEnumeratorName
// ()
// Parameters:
// class UEnum*                   Enum                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  EnumeratorIndex                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UKismetNodeHelperLibrary::GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.GetEnumeratorName");

	UKismetNodeHelperLibrary_GetEnumeratorName_Params params;
	params.Enum = Enum;
	params.EnumeratorIndex = EnumeratorIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetNodeHelperLibrary.ClearBit
// ()
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::ClearBit(int index, int* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.ClearBit");

	UKismetNodeHelperLibrary_ClearBit_Params params;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.ClearAllBits
// ()
// Parameters:
// int                            Data                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetNodeHelperLibrary::ClearAllBits(int* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.ClearAllBits");

	UKismetNodeHelperLibrary_ClearAllBits_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.KismetNodeHelperLibrary.BitIsMarked
// ()
// Parameters:
// int                            Data                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetNodeHelperLibrary::BitIsMarked(int Data, int index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetNodeHelperLibrary.BitIsMarked");

	UKismetNodeHelperLibrary_BitIsMarked_Params params;
	params.Data = Data;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
// ()
// Parameters:
// class UTextureRenderTarget2D*  RenderTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Name                           (Parm, ZeroConstructor)
// TEnumAsByte<ETextureCompressionSettings> CompressionSettings            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETextureMipGenSettings> MipSettings                    (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture2D* UKismetRenderingLibrary::RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, const class FString& Name, TEnumAsByte<ETextureCompressionSettings> CompressionSettings, TEnumAsByte<ETextureMipGenSettings> MipSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly");

	UKismetRenderingLibrary_RenderTargetCreateStaticTexture2DEditorOnly_Params params;
	params.RenderTarget = RenderTarget;
	params.Name = Name;
	params.CompressionSettings = CompressionSettings;
	params.MipSettings = MipSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
// ()
// Parameters:
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)

void UKismetRenderingLibrary::ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ReleaseRenderTarget2D");

	UKismetRenderingLibrary_ReleaseRenderTarget2D_Params params;
	params.TextureRenderTarget = TextureRenderTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetUV
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// float                          U                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FColor UKismetRenderingLibrary::ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ReadRenderTargetUV");

	UKismetRenderingLibrary_ReadRenderTargetUV_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.U = U;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// float                          U                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetRenderingLibrary::ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ReadRenderTargetRawUV");

	UKismetRenderingLibrary_ReadRenderTargetRawUV_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.U = U;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// int                            X                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            Y                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UKismetRenderingLibrary::ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel");

	UKismetRenderingLibrary_ReadRenderTargetRawPixel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// int                            X                              (Parm, ZeroConstructor, IsPlainOldData)
// int                            Y                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FColor UKismetRenderingLibrary::ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int X, int Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ReadRenderTargetPixel");

	UKismetRenderingLibrary_ReadRenderTargetPixel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FileName                       (Parm, ZeroConstructor)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture2D* UKismetRenderingLibrary::ImportFileAsTexture2D(class UObject* WorldContextObject, const class FString& FileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ImportFileAsTexture2D");

	UKismetRenderingLibrary_ImportFileAsTexture2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FileName = FileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ExportTexture2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              Texture                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FilePath                       (Parm, ZeroConstructor)
// class FString                  FileName                       (Parm, ZeroConstructor)

void UKismetRenderingLibrary::ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& FileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ExportTexture2D");

	UKismetRenderingLibrary_ExportTexture2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Texture = Texture;
	params.FilePath = FilePath;
	params.FileName = FileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetRenderingLibrary.ExportRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FilePath                       (Parm, ZeroConstructor)
// class FString                  FileName                       (Parm, ZeroConstructor)

void UKismetRenderingLibrary::ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const class FString& FilePath, const class FString& FileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ExportRenderTarget");

	UKismetRenderingLibrary_ExportRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.FilePath = FilePath;
	params.FileName = FileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDrawToRenderTargetContext Context                        (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetRenderingLibrary::EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FDrawToRenderTargetContext& Context)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget");

	UKismetRenderingLibrary_EndDrawCanvasToRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Context = Context;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      Material                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetRenderingLibrary::DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget");

	UKismetRenderingLibrary_DrawMaterialToRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.Material = Material;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetRenderingLibrary.CreateRenderTarget2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETextureRenderTargetFormat> Format                         (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTextureRenderTarget2D* UKismetRenderingLibrary::CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<ETextureRenderTargetFormat> Format)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.CreateRenderTarget2D");

	UKismetRenderingLibrary_CreateRenderTarget2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.Format = Format;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  RenderTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              Texture                        (Parm, ZeroConstructor, IsPlainOldData)

void UKismetRenderingLibrary::ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly");

	UKismetRenderingLibrary_ConvertRenderTargetToTexture2DEditorOnly_Params params;
	params.WorldContextObject = WorldContextObject;
	params.RenderTarget = RenderTarget;
	params.Texture = Texture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetRenderingLibrary.ClearRenderTarget2D
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ClearColor                     (Parm, ZeroConstructor, IsPlainOldData)

void UKismetRenderingLibrary::ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.ClearRenderTarget2D");

	UKismetRenderingLibrary_ClearRenderTarget2D_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;
	params.ClearColor = ClearColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UTextureRenderTarget2D*  TextureRenderTarget            (Parm, ZeroConstructor, IsPlainOldData)
// class UCanvas*                 Canvas                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Size                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FDrawToRenderTargetContext Context                        (Parm, OutParm)

void UKismetRenderingLibrary::BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget");

	UKismetRenderingLibrary_BeginDrawCanvasToRenderTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextureRenderTarget = TextureRenderTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Canvas != nullptr)
		*Canvas = params.Canvas;
	if (Size != nullptr)
		*Size = params.Size;
	if (Context != nullptr)
		*Context = params.Context;
}


// Function Engine.KismetStringLibrary.TrimTrailing
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::TrimTrailing(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.TrimTrailing");

	UKismetStringLibrary_TrimTrailing_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Trim
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Trim(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Trim");

	UKismetStringLibrary_Trim_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToUpper
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::ToUpper(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ToUpper");

	UKismetStringLibrary_ToUpper_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ToLower
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::ToLower(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ToLower");

	UKismetStringLibrary_ToLower_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.StartsWith
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  InPrefix                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::StartsWith(const class FString& SourceString, const class FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.StartsWith");

	UKismetStringLibrary_StartsWith_Params params;
	params.SourceString = SourceString;
	params.InPrefix = InPrefix;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Split
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  InStr                          (Parm, ZeroConstructor)
// class FString                  LeftS                          (Parm, OutParm, ZeroConstructor)
// class FString                  RightS                         (Parm, OutParm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESearchDir>        SearchDir                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::Split(const class FString& SourceString, const class FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, class FString* LeftS, class FString* RightS)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Split");

	UKismetStringLibrary_Split_Params params;
	params.SourceString = SourceString;
	params.InStr = InStr;
	params.SearchCase = SearchCase;
	params.SearchDir = SearchDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LeftS != nullptr)
		*LeftS = params.LeftS;
	if (RightS != nullptr)
		*RightS = params.RightS;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightPad
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::RightPad(const class FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.RightPad");

	UKismetStringLibrary_RightPad_Params params;
	params.SourceString = SourceString;
	params.ChCount = ChCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.RightChop
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::RightChop(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.RightChop");

	UKismetStringLibrary_RightChop_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Right
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Right(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Right");

	UKismetStringLibrary_Right_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Reverse
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Reverse(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Reverse");

	UKismetStringLibrary_Reverse_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ReplaceInline
// ()
// Parameters:
// class FString                  SourceString                   (Parm, OutParm, ZeroConstructor)
// class FString                  SearchText                     (Parm, ZeroConstructor)
// class FString                  ReplacementText                (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::ReplaceInline(const class FString& SearchText, const class FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, class FString* SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ReplaceInline");

	UKismetStringLibrary_ReplaceInline_Params params;
	params.SearchText = SearchText;
	params.ReplacementText = ReplacementText;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SourceString != nullptr)
		*SourceString = params.SourceString;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Replace
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  From                           (Parm, ZeroConstructor)
// class FString                  To                             (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Replace(const class FString& SourceString, const class FString& From, const class FString& To, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Replace");

	UKismetStringLibrary_Replace_Params params;
	params.SourceString = SourceString;
	params.From = From;
	params.To = To;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.ParseIntoArray
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           CullEmptyStrings               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UKismetStringLibrary::ParseIntoArray(const class FString& SourceString, const class FString& Delimiter, bool CullEmptyStrings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.ParseIntoArray");

	UKismetStringLibrary_ParseIntoArray_Params params;
	params.SourceString = SourceString;
	params.Delimiter = Delimiter;
	params.CullEmptyStrings = CullEmptyStrings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StrStr
// ()
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::NotEqual_StrStr(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.NotEqual_StrStr");

	UKismetStringLibrary_NotEqual_StrStr_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.NotEqual_StriStri
// ()
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::NotEqual_StriStri(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.NotEqual_StriStri");

	UKismetStringLibrary_NotEqual_StriStri_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Mid
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Start                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Mid(const class FString& SourceString, int Start, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Mid");

	UKismetStringLibrary_Mid_Params params;
	params.SourceString = SourceString;
	params.Start = Start;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.MatchesWildcard
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  Wildcard                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.MatchesWildcard");

	UKismetStringLibrary_MatchesWildcard_Params params;
	params.SourceString = SourceString;
	params.Wildcard = Wildcard;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Len
// ()
// Parameters:
// class FString                  S                              (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::Len(const class FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Len");

	UKismetStringLibrary_Len_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftPad
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            ChCount                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::LeftPad(const class FString& SourceString, int ChCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.LeftPad");

	UKismetStringLibrary_LeftPad_Params params;
	params.SourceString = SourceString;
	params.ChCount = ChCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.LeftChop
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::LeftChop(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.LeftChop");

	UKismetStringLibrary_LeftChop_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Left
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Left(const class FString& SourceString, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Left");

	UKismetStringLibrary_Left_Params params;
	params.SourceString = SourceString;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.JoinStringArray
// ()
// Parameters:
// TArray<class FString>          SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class FString                  Separator                      (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::JoinStringArray(TArray<class FString> SourceArray, const class FString& Separator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.JoinStringArray");

	UKismetStringLibrary_JoinStringArray_Params params;
	params.SourceArray = SourceArray;
	params.Separator = Separator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.IsNumeric
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::IsNumeric(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.IsNumeric");

	UKismetStringLibrary_IsNumeric_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetSubstring
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            StartIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            Length                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::GetSubstring(const class FString& SourceString, int StartIndex, int Length)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.GetSubstring");

	UKismetStringLibrary_GetSubstring_Params params;
	params.SourceString = SourceString;
	params.StartIndex = StartIndex;
	params.Length = Length;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterAsNumber
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::GetCharacterAsNumber(const class FString& SourceString, int index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.GetCharacterAsNumber");

	UKismetStringLibrary_GetCharacterAsNumber_Params params;
	params.SourceString = SourceString;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.GetCharacterArrayFromString
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> UKismetStringLibrary::GetCharacterArrayFromString(const class FString& SourceString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.GetCharacterArrayFromString");

	UKismetStringLibrary_GetCharacterArrayFromString_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.FindSubstring
// ()
// Parameters:
// class FString                  SearchIn                       (Parm, ZeroConstructor)
// class FString                  Substring                      (Parm, ZeroConstructor)
// bool                           bUseCase                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSearchFromEnd                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartPosition                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::FindSubstring(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.FindSubstring");

	UKismetStringLibrary_FindSubstring_Params params;
	params.SearchIn = SearchIn;
	params.Substring = Substring;
	params.bUseCase = bUseCase;
	params.bSearchFromEnd = bSearchFromEnd;
	params.StartPosition = StartPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StrStr
// ()
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EqualEqual_StrStr(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.EqualEqual_StrStr");

	UKismetStringLibrary_EqualEqual_StrStr_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EqualEqual_StriStri
// ()
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EqualEqual_StriStri(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.EqualEqual_StriStri");

	UKismetStringLibrary_EqualEqual_StriStri_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.EndsWith
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// class FString                  InSuffix                       (Parm, ZeroConstructor)
// TEnumAsByte<ESearchCase>       SearchCase                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetStringLibrary::EndsWith(const class FString& SourceString, const class FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.EndsWith");

	UKismetStringLibrary_EndsWith_Params params;
	params.SourceString = SourceString;
	params.InSuffix = InSuffix;
	params.SearchCase = SearchCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.CullArray
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// TArray<class FString>          InArray                        (Parm, OutParm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::CullArray(const class FString& SourceString, TArray<class FString>* InArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.CullArray");

	UKismetStringLibrary_CullArray_Params params;
	params.SourceString = SourceString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InArray != nullptr)
		*InArray = params.InArray;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_VectorToString
// ()
// Parameters:
// struct FVector                 inVec                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_VectorToString(const struct FVector& inVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_VectorToString");

	UKismetStringLibrary_Conv_VectorToString_Params params;
	params.inVec = inVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_Vector2dToString
// ()
// Parameters:
// struct FVector2D               inVec                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_Vector2dToString(const struct FVector2D& inVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_Vector2dToString");

	UKismetStringLibrary_Conv_Vector2dToString_Params params;
	params.inVec = inVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_TransformToString
// ()
// Parameters:
// struct UObject_FTransform      InTrans                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_TransformToString(const struct UObject_FTransform& InTrans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_TransformToString");

	UKismetStringLibrary_Conv_TransformToString_Params params;
	params.InTrans = InTrans;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToName
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UKismetStringLibrary::Conv_StringToName(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToName");

	UKismetStringLibrary_Conv_StringToName_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToInt
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetStringLibrary::Conv_StringToInt(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToInt");

	UKismetStringLibrary_Conv_StringToInt_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_StringToFloat
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetStringLibrary::Conv_StringToFloat(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_StringToFloat");

	UKismetStringLibrary_Conv_StringToFloat_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_RotatorToString
// ()
// Parameters:
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_RotatorToString(const struct FRotator& InRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_RotatorToString");

	UKismetStringLibrary_Conv_RotatorToString_Params params;
	params.InRot = InRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ObjectToString
// ()
// Parameters:
// class UObject*                 InObj                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_ObjectToString(class UObject* InObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_ObjectToString");

	UKismetStringLibrary_Conv_ObjectToString_Params params;
	params.InObj = InObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_NameToString
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_NameToString(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_NameToString");

	UKismetStringLibrary_Conv_NameToString_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_IntToString
// ()
// Parameters:
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_IntToString(int InInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_IntToString");

	UKismetStringLibrary_Conv_IntToString_Params params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_FloatToString
// ()
// Parameters:
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_FloatToString(float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_FloatToString");

	UKismetStringLibrary_Conv_FloatToString_Params params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_DoubleToString
// ()
// Parameters:
// double                         InDouble                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_DoubleToString(double InDouble)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_DoubleToString");

	UKismetStringLibrary_Conv_DoubleToString_Params params;
	params.InDouble = InDouble;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ColorToString
// ()
// Parameters:
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_ColorToString(const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_ColorToString");

	UKismetStringLibrary_Conv_ColorToString_Params params;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_ByteToString
// ()
// Parameters:
// unsigned char                  InByte                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_ByteToString(unsigned char InByte)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_ByteToString");

	UKismetStringLibrary_Conv_ByteToString_Params params;
	params.InByte = InByte;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Conv_BoolToString
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Conv_BoolToString(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Conv_BoolToString");

	UKismetStringLibrary_Conv_BoolToString_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.Concat_StrStr
// ()
// Parameters:
// class FString                  A                              (Parm, ZeroConstructor)
// class FString                  B                              (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::Concat_StrStr(const class FString& A, const class FString& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.Concat_StrStr");

	UKismetStringLibrary_Concat_StrStr_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector2d
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FVector2D               InVector2D                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Vector2d");

	UKismetStringLibrary_BuildString_Vector2d_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector2D = InVector2D;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Vector
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FVector                 InVector                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Vector");

	UKismetStringLibrary_BuildString_Vector_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InVector = InVector;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Rotator
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FRotator                InRot                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Rotator");

	UKismetStringLibrary_BuildString_Rotator_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InRot = InRot;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Object
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// class UObject*                 InObj                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Object");

	UKismetStringLibrary_BuildString_Object_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InObj = InObj;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Name
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Name(const class FString& AppendTo, const class FString& Prefix, const struct FName& InName, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Name");

	UKismetStringLibrary_BuildString_Name_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InName = InName;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Int
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// int                            InInt                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int InInt, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Int");

	UKismetStringLibrary_BuildString_Int_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InInt = InInt;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Float
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// float                          InFloat                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Float(const class FString& AppendTo, const class FString& Prefix, float InFloat, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Float");

	UKismetStringLibrary_BuildString_Float_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InFloat = InFloat;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Color
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// struct FLinearColor            InColor                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Color");

	UKismetStringLibrary_BuildString_Color_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InColor = InColor;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetStringLibrary.BuildString_Bool
// ()
// Parameters:
// class FString                  AppendTo                       (Parm, ZeroConstructor)
// class FString                  Prefix                         (Parm, ZeroConstructor)
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Suffix                         (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetStringLibrary::BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetStringLibrary.BuildString_Bool");

	UKismetStringLibrary_BuildString_Bool_Params params;
	params.AppendTo = AppendTo;
	params.Prefix = Prefix;
	params.InBool = InBool;
	params.Suffix = Suffix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SwitchNetworkMode
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetModeBP>        OutNetworkMode                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SwitchNetworkMode(class UObject* WorldContextObject, TEnumAsByte<ENetModeBP>* OutNetworkMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SwitchNetworkMode");

	UKismetSystemLibrary_SwitchNetworkMode_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutNetworkMode != nullptr)
		*OutNetworkMode = params.OutNetworkMode;
}


// Function Engine.KismetSystemLibrary.StackTrace
// ()

void UKismetSystemLibrary::StackTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.StackTrace");

	UKismetSystemLibrary_StackTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceSingleForObjects");

	UKismetSystemLibrary_SphereTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingleByObject_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceSingleByObject_DEPRECATED");

	UKismetSystemLibrary_SphereTraceSingleByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingle_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceSingle_NEW");

	UKismetSystemLibrary_SphereTraceSingle_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceSingle_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceSingle_DEPRECATED");

	UKismetSystemLibrary_SphereTraceSingle_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceMultiForObjects");

	UKismetSystemLibrary_SphereTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMultiByObject_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceMultiByObject_DEPRECATED");

	UKismetSystemLibrary_SphereTraceMultiByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMulti_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceMulti_NEW");

	UKismetSystemLibrary_SphereTraceMulti_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereTraceMulti_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereTraceMulti_DEPRECATED");

	UKismetSystemLibrary_SphereTraceMulti_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapComponents_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereOverlapComponents_NEW");

	UKismetSystemLibrary_SphereOverlapComponents_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapComponents_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereOverlapComponents_DEPRECATED");

	UKismetSystemLibrary_SphereOverlapComponents_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActorsSimple
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EObjectTypeQuery>  ObjectType                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapActorsSimple(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<EObjectTypeQuery> ObjectType, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereOverlapActorsSimple");

	UKismetSystemLibrary_SphereOverlapActorsSimple_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectType = ObjectType;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActors_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereOverlapActors_NEW");

	UKismetSystemLibrary_SphereOverlapActors_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.SphereOverlapActors_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpherePos                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::SphereOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SphereOverlapActors_DEPRECATED");

	UKismetSystemLibrary_SphereOverlapActors_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpherePos = SpherePos;
	params.SphereRadius = SphereRadius;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
// ()
// Parameters:
// class FString                  CategoryName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen");

	UKismetSystemLibrary_ShowPlatformSpecificLeaderboardScreen_Params params;
	params.CategoryName = CategoryName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
// ()
// Parameters:
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen");

	UKismetSystemLibrary_ShowPlatformSpecificAchievementsScreen_Params params;
	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.ShowAdBanner
// ()
// Parameters:
// bool                           bShowOnBottomOfScreen          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ShowAdBanner(bool bShowOnBottomOfScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ShowAdBanner");

	UKismetSystemLibrary_ShowAdBanner_Params params;
	params.bShowOnBottomOfScreen = bShowOnBottomOfScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetVectorPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetVectorPropertyByName");

	UKismetSystemLibrary_SetVectorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetTransformPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      Value                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct UObject_FTransform& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetTransformPropertyByName");

	UKismetSystemLibrary_SetTransformPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetTextPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   Value                          (ConstParm, Parm, OutParm, ReferenceParm)

void UKismetSystemLibrary::SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetTextPropertyByName");

	UKismetSystemLibrary_SetTextPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetSupressViewportTransitionMessage
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bState                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetSupressViewportTransitionMessage(class UObject* WorldContextObject, bool bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetSupressViewportTransitionMessage");

	UKismetSystemLibrary_SetSupressViewportTransitionMessage_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bState = bState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetStructurePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FGenericStruct          Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetStructurePropertyByName");

	UKismetSystemLibrary_SetStructurePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetStringPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Value                          (Parm, ZeroConstructor)

void UKismetSystemLibrary::SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const class FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetStringPropertyByName");

	UKismetSystemLibrary_SetStringPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetRotatorPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetRotatorPropertyByName");

	UKismetSystemLibrary_SetRotatorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetObjectPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetObjectPropertyByName");

	UKismetSystemLibrary_SetObjectPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetNamePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetNamePropertyByName");

	UKismetSystemLibrary_SetNamePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UKismetSystemLibrary::SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetLinearColorPropertyByName");

	UKismetSystemLibrary_SetLinearColorPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetIntPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetIntPropertyByName");

	UKismetSystemLibrary_SetIntPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetFloatPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetFloatPropertyByName");

	UKismetSystemLibrary_SetFloatPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetDoublePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// double                         Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetDoublePropertyByName(class UObject* Object, const struct FName& PropertyName, double Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetDoublePropertyByName");

	UKismetSystemLibrary_SetDoublePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetClassPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetClassPropertyByName");

	UKismetSystemLibrary_SetClassPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetBytePropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetBytePropertyByName");

	UKismetSystemLibrary_SetBytePropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.SetBoolPropertyByName
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   PropertyName                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.SetBoolPropertyByName");

	UKismetSystemLibrary_SetBoolPropertyByName_Params params;
	params.Object = Object;
	params.PropertyName = PropertyName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.RetriggerableDelay
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UKismetSystemLibrary::RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.RetriggerableDelay");

	UKismetSystemLibrary_RetriggerableDelay_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.QuitGame
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EQuitPreference>   QuitPreference                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.QuitGame");

	UKismetSystemLibrary_QuitGame_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SpecificPlayer = SpecificPlayer;
	params.QuitPreference = QuitPreference;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.PrintWarning
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)

void UKismetSystemLibrary::PrintWarning(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.PrintWarning");

	UKismetSystemLibrary_PrintWarning_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.PrintString
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  InString                       (Parm, ZeroConstructor)
// bool                           bPrintToScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPrintToLog                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            AtIndex                        (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::PrintString(class UObject* WorldContextObject, const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration, int AtIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.PrintString");

	UKismetSystemLibrary_PrintString_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InString = InString;
	params.bPrintToScreen = bPrintToScreen;
	params.bPrintToLog = bPrintToLog;
	params.TextColor = TextColor;
	params.Duration = Duration;
	params.AtIndex = AtIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.MoveComponentTo
// ()
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 TargetRelativeLocation         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                TargetRelativeRotation         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEaseOut                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEaseIn                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverTime                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMoveComponentAction> MoveAction                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)
// bool                           bSweep                         (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo, bool bSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MoveComponentTo");

	UKismetSystemLibrary_MoveComponentTo_Params params;
	params.Component = Component;
	params.TargetRelativeLocation = TargetRelativeLocation;
	params.TargetRelativeRotation = TargetRelativeRotation;
	params.bEaseOut = bEaseOut;
	params.bEaseIn = bEaseIn;
	params.OverTime = OverTime;
	params.MoveAction = MoveAction;
	params.LatentInfo = LatentInfo;
	params.bSweep = bSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.MakeLiteralText
// ()
// Parameters:
// struct FText                   Value                          (Parm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetSystemLibrary::MakeLiteralText(const struct FText& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralText");

	UKismetSystemLibrary_MakeLiteralText_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralString
// ()
// Parameters:
// class FString                  Value                          (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::MakeLiteralString(const class FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralString");

	UKismetSystemLibrary_MakeLiteralString_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralName
// ()
// Parameters:
// struct FName                   Value                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UKismetSystemLibrary::MakeLiteralName(const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralName");

	UKismetSystemLibrary_MakeLiteralName_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralInt
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::MakeLiteralInt(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralInt");

	UKismetSystemLibrary_MakeLiteralInt_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralFloat
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::MakeLiteralFloat(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralFloat");

	UKismetSystemLibrary_MakeLiteralFloat_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralByte
// ()
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char UKismetSystemLibrary::MakeLiteralByte(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralByte");

	UKismetSystemLibrary_MakeLiteralByte_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.MakeLiteralBool
// ()
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::MakeLiteralBool(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.MakeLiteralBool");

	UKismetSystemLibrary_MakeLiteralBool_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceSingleForObjects");

	UKismetSystemLibrary_LineTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingleByObject_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceSingleByObject_DEPRECATED");

	UKismetSystemLibrary_LineTraceSingleByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingle_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceSingle_NEW");

	UKismetSystemLibrary_LineTraceSingle_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceSingle_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceSingle_DEPRECATED");

	UKismetSystemLibrary_LineTraceSingle_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceMultiForObjects");

	UKismetSystemLibrary_LineTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMultiByObject_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceMultiByObject_DEPRECATED");

	UKismetSystemLibrary_LineTraceMultiByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMulti_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceMulti_NEW");

	UKismetSystemLibrary_LineTraceMulti_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LineTraceMulti_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::LineTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LineTraceMulti_DEPRECATED");

	UKismetSystemLibrary_LineTraceMulti_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.LaunchURL
// ()
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)

void UKismetSystemLibrary::LaunchURL(const class FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.LaunchURL");

	UKismetSystemLibrary_LaunchURL_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.K2_UnPauseTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_UnPauseTimer");

	UKismetSystemLibrary_K2_UnPauseTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.K2_TimerExists
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_TimerExists(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_TimerExists");

	UKismetSystemLibrary_K2_TimerExists_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_SetTimerForNextTickDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::K2_SetTimerForNextTickDelegate(const struct FScriptDelegate& Delegate, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_SetTimerForNextTickDelegate");

	UKismetSystemLibrary_K2_SetTimerForNextTickDelegate_Params params;
	params.Delegate = Delegate;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.K2_SetTimerForNextTick
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::K2_SetTimerForNextTick(class UObject* Object, const class FString& FunctionName, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_SetTimerForNextTick");

	UKismetSystemLibrary_K2_SetTimerForNextTick_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.K2_SetTimerDelegate
// ()
// Parameters:
// struct FScriptDelegate         Delegate                       (Parm, ZeroConstructor)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_SetTimerDelegate");

	UKismetSystemLibrary_K2_SetTimerDelegate_Params params;
	params.Delegate = Delegate;
	params.Time = Time;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.K2_SetTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLooping                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_SetTimer");

	UKismetSystemLibrary_K2_SetTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;
	params.Time = Time;
	params.bLooping = bLooping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.K2_PauseTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_PauseTimer(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_PauseTimer");

	UKismetSystemLibrary_K2_PauseTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerPaused
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerPaused");

	UKismetSystemLibrary_K2_IsTimerPaused_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_IsTimerActive
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::K2_IsTimerActive(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_IsTimerActive");

	UKismetSystemLibrary_K2_IsTimerActive_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerRemainingTime");

	UKismetSystemLibrary_K2_GetTimerRemainingTime_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UKismetSystemLibrary::K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_GetTimerElapsedTime");

	UKismetSystemLibrary_K2_GetTimerElapsedTime_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.K2_ClearTimer
// ()
// Parameters:
// class UObject*                 Object                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FunctionName                   (Parm, ZeroConstructor)

void UKismetSystemLibrary::K2_ClearTimer(class UObject* Object, const class FString& FunctionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.K2_ClearTimer");

	UKismetSystemLibrary_K2_ClearTimer_Params params;
	params.Object = Object;
	params.FunctionName = FunctionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.IsValid
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsValid(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsValid");

	UKismetSystemLibrary_IsValid_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsStandalone
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsStandalone(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsStandalone");

	UKismetSystemLibrary_IsStandalone_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsServer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsServer");

	UKismetSystemLibrary_IsServer_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsRunningOnServer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetworkModeResult> OutNetworkMode                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::IsRunningOnServer(class UObject* WorldContextObject, TEnumAsByte<ENetworkModeResult>* OutNetworkMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsRunningOnServer");

	UKismetSystemLibrary_IsRunningOnServer_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutNetworkMode != nullptr)
		*OutNetworkMode = params.OutNetworkMode;
}


// Function Engine.KismetSystemLibrary.IsPackagedForDistribution
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsPackagedForDistribution()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsPackagedForDistribution");

	UKismetSystemLibrary_IsPackagedForDistribution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsListenServer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsListenServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsListenServer");

	UKismetSystemLibrary_IsListenServer_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsDedicatedServer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsDedicatedServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsDedicatedServer");

	UKismetSystemLibrary_IsDedicatedServer_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.IsClient
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::IsClient(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.IsClient");

	UKismetSystemLibrary_IsClient_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.HideAdBanner
// ()

void UKismetSystemLibrary::HideAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.HideAdBanner");

	UKismetSystemLibrary_HideAdBanner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.GetUniqueDeviceId
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetUniqueDeviceId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetUniqueDeviceId");

	UKismetSystemLibrary_GetUniqueDeviceId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetRenderingMaterialQualityLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel");

	UKismetSystemLibrary_GetRenderingMaterialQualityLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetRenderingDetailMode
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UKismetSystemLibrary::GetRenderingDetailMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetRenderingDetailMode");

	UKismetSystemLibrary_GetRenderingDetailMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetPlatformUserName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetPlatformUserName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetPlatformUserName");

	UKismetSystemLibrary_GetPlatformUserName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameTimeInSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UKismetSystemLibrary::GetGameTimeInSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetGameTimeInSeconds");

	UKismetSystemLibrary_GetGameTimeInSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetGameName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetGameName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetGameName");

	UKismetSystemLibrary_GetGameName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetEngineVersion
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetEngineVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetEngineVersion");

	UKismetSystemLibrary_GetEngineVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetDisplayName
// ()
// Parameters:
// class UObject*                 Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetDisplayName(class UObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetDisplayName");

	UKismetSystemLibrary_GetDisplayName_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetComponentBounds
// ()
// Parameters:
// class USceneComponent*         Component                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetComponentBounds");

	UKismetSystemLibrary_GetComponentBounds_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
	if (SphereRadius != nullptr)
		*SphereRadius = params.SphereRadius;
}


// Function Engine.KismetSystemLibrary.GetClassDisplayName
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetSystemLibrary::GetClassDisplayName(class UClass* Class)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetClassDisplayName");

	UKismetSystemLibrary_GetClassDisplayName_Params params;
	params.Class = Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.GetActorListFromComponentList
// ()
// Parameters:
// TArray<class UPrimitiveComponent*> ComponentList                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActorList                   (Parm, OutParm, ZeroConstructor)

void UKismetSystemLibrary::GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetActorListFromComponentList");

	UKismetSystemLibrary_GetActorListFromComponentList_Params params;
	params.ComponentList = ComponentList;
	params.ActorClassFilter = ActorClassFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActorList != nullptr)
		*OutActorList = params.OutActorList;
}


// Function Engine.KismetSystemLibrary.GetActorBounds
// ()
// Parameters:
// class AActor*                  Actor                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.GetActorBounds");

	UKismetSystemLibrary_GetActorBounds_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Origin != nullptr)
		*Origin = params.Origin;
	if (BoxExtent != nullptr)
		*BoxExtent = params.BoxExtent;
}


// Function Engine.KismetSystemLibrary.ForceCloseAdBanner
// ()

void UKismetSystemLibrary::ForceCloseAdBanner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ForceCloseAdBanner");

	UKismetSystemLibrary_ForceCloseAdBanner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.FlushPersistentDebugLines
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::FlushPersistentDebugLines(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.FlushPersistentDebugLines");

	UKismetSystemLibrary_FlushPersistentDebugLines_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.FlushDebugStrings
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::FlushDebugStrings(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.FlushDebugStrings");

	UKismetSystemLibrary_FlushDebugStrings_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.ExecuteConsoleCommand
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Command                        (Parm, ZeroConstructor)
// class APlayerController*       SpecificPlayer                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ExecuteConsoleCommand(class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ExecuteConsoleCommand");

	UKismetSystemLibrary_ExecuteConsoleCommand_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Command = Command;
	params.SpecificPlayer = SpecificPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugString
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TextLocation                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Text                           (Parm, ZeroConstructor)
// class AActor*                  TestBaseActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugString");

	UKismetSystemLibrary_DrawDebugString_Params params;
	params.WorldContextObject = WorldContextObject;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugSphere
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugSphere");

	UKismetSystemLibrary_DrawDebugSphere_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugPoint
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PointColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugPoint");

	UKismetSystemLibrary_DrawDebugPoint_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugPlane
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FPlane                  PlaneCoordinates               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PlaneColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugPlane");

	UKismetSystemLibrary_DrawDebugPlane_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlaneCoordinates = PlaneCoordinates;
	params.Location = Location;
	params.Size = Size;
	params.PlaneColor = PlaneColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugLineTraceHitResult
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 TraceStart                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 TraceEnd                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FLinearColor            StartColor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            HitColor                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          LineThickness                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          HitSize                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawHitNormal                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            HitNormalColor                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          HitNormalLength                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugLineTraceHitResult(class UObject* WorldContextObject, const struct FHitResult& Hit, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FLinearColor& StartColor, const struct FLinearColor& HitColor, float LineThickness, float HitSize, bool bDrawHitNormal, const struct FLinearColor& HitNormalColor, float HitNormalLength, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugLineTraceHitResult");

	UKismetSystemLibrary_DrawDebugLineTraceHitResult_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Hit = Hit;
	params.TraceStart = TraceStart;
	params.TraceEnd = TraceEnd;
	params.StartColor = StartColor;
	params.HitColor = HitColor;
	params.LineThickness = LineThickness;
	params.HitSize = HitSize;
	params.bDrawHitNormal = bDrawHitNormal;
	params.HitNormalColor = HitNormalColor;
	params.HitNormalLength = HitNormalLength;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugLine
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugLine");

	UKismetSystemLibrary_DrawDebugLine_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugFrustum
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct UObject_FTransform      FrustumTransform               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FLinearColor            FrustumColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFrustum(class UObject* WorldContextObject, const struct UObject_FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugFrustum");

	UKismetSystemLibrary_DrawDebugFrustum_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FrustumTransform = FrustumTransform;
	params.FrustumColor = FrustumColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct UObject_FTransform      DrawTransform                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               DrawSize                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct UObject_FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform");

	UKismetSystemLibrary_DrawDebugFloatHistoryTransform_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawTransform = DrawTransform;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 DrawLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               DrawSize                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation");

	UKismetSystemLibrary_DrawDebugFloatHistoryLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FloatHistory = FloatHistory;
	params.DrawLocation = DrawLocation;
	params.DrawSize = DrawSize;
	params.DrawColor = DrawColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugCylinder
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCylinder");

	UKismetSystemLibrary_DrawDebugCylinder_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AxisLoc                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AxisRot                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Thickness, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCoordinateSystem");

	UKismetSystemLibrary_DrawDebugCoordinateSystem_Params params;
	params.WorldContextObject = WorldContextObject;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.Thickness = Thickness;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugConeInDegrees");

	UKismetSystemLibrary_DrawDebugConeInDegrees_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugCone
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Length                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleWidth                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleHeight                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumSides                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          LifeTime                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float LifeTime, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCone");

	UKismetSystemLibrary_DrawDebugCone_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.LineColor = LineColor;
	params.LifeTime = LifeTime;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugCircle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, const struct FRotator& Rotation, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCircle");

	UKismetSystemLibrary_DrawDebugCircle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Rotation = Rotation;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugCapsuleWithExtents
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Top                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Bottom                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCapsuleWithExtents(class UObject* WorldContextObject, const struct FVector& Top, const struct FVector& Bottom, float Radius, const struct FLinearColor& LineColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCapsuleWithExtents");

	UKismetSystemLibrary_DrawDebugCapsuleWithExtents_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Top = Top;
	params.Bottom = Bottom;
	params.Radius = Radius;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugCapsule
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCapsule");

	UKismetSystemLibrary_DrawDebugCapsule_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;
	params.Rotation = Rotation;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugCamera
// ()
// Parameters:
// class ACameraActor*            CameraActor                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            CameraColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugCamera");

	UKismetSystemLibrary_DrawDebugCamera_Params params;
	params.CameraActor = CameraActor;
	params.CameraColor = CameraColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugBox
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugBox");

	UKismetSystemLibrary_DrawDebugBox_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Center = Center;
	params.Extent = Extent;
	params.LineColor = LineColor;
	params.Rotation = Rotation;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DrawDebugArrow
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowSize                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPersistent                    (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DrawDebugArrow");

	UKismetSystemLibrary_DrawDebugArrow_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.ArrowSize = ArrowSize;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.DoesImplementInterface
// ()
// Parameters:
// class UObject*                 TestObject                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  Interface                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::DoesImplementInterface(class UObject* TestObject, class UClass* Interface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.DoesImplementInterface");

	UKismetSystemLibrary_DoesImplementInterface_Params params;
	params.TestObject = TestObject;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.Delay
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UKismetSystemLibrary::Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.Delay");

	UKismetSystemLibrary_Delay_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Duration = Duration;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
// ()
// Parameters:
// class UObject*                 ObjectToModify                 (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::CreateCopyForUndoBuffer(class UObject* ObjectToModify)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CreateCopyForUndoBuffer");

	UKismetSystemLibrary_CreateCopyForUndoBuffer_Params params;
	params.ObjectToModify = ObjectToModify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.Conv_InterfaceToObject
// ()
// Parameters:
// TScriptInterface<class UInterface> Interface                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UKismetSystemLibrary::Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.Conv_InterfaceToObject");

	UKismetSystemLibrary_Conv_InterfaceToObject_Params params;
	params.Interface = Interface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ControlScreensaver
// ()
// Parameters:
// bool                           bAllowScreenSaver              (Parm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::ControlScreensaver(bool bAllowScreenSaver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ControlScreensaver");

	UKismetSystemLibrary_ControlScreensaver_Params params;
	params.bAllowScreenSaver = bAllowScreenSaver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapComponents_NEW
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct UObject_FTransform      ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapComponents_NEW(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ComponentOverlapComponents_NEW");

	UKismetSystemLibrary_ComponentOverlapComponents_NEW_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapComponents_DEPRECATED
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct UObject_FTransform      ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapComponents_DEPRECATED(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ComponentOverlapComponents_DEPRECATED");

	UKismetSystemLibrary_ComponentOverlapComponents_DEPRECATED_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapActors_NEW
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct UObject_FTransform      ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapActors_NEW(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ComponentOverlapActors_NEW");

	UKismetSystemLibrary_ComponentOverlapActors_NEW_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.ComponentOverlapActors_DEPRECATED
// ()
// Parameters:
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct UObject_FTransform      ComponentTransform             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::ComponentOverlapActors_DEPRECATED(class UPrimitiveComponent* Component, const struct UObject_FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.ComponentOverlapActors_DEPRECATED");

	UKismetSystemLibrary_ComponentOverlapActors_DEPRECATED_Params params;
	params.Component = Component;
	params.ComponentTransform = ComponentTransform;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CollectGarbage
// ()

void UKismetSystemLibrary::CollectGarbage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CollectGarbage");

	UKismetSystemLibrary_CollectGarbage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects");

	UKismetSystemLibrary_CapsuleTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingleByObject_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceSingleByObject_DEPRECATED");

	UKismetSystemLibrary_CapsuleTraceSingleByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingle_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceSingle_NEW");

	UKismetSystemLibrary_CapsuleTraceSingle_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceSingle_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceSingle_DEPRECATED");

	UKismetSystemLibrary_CapsuleTraceSingle_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects");

	UKismetSystemLibrary_CapsuleTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMultiByObject_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceMultiByObject_DEPRECATED");

	UKismetSystemLibrary_CapsuleTraceMultiByObject_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectsToTrace = ObjectsToTrace;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMulti_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceMulti_NEW");

	UKismetSystemLibrary_CapsuleTraceMulti_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleTraceMulti_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleTraceMulti_DEPRECATED");

	UKismetSystemLibrary_CapsuleTraceMulti_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_NEW");

	UKismetSystemLibrary_CapsuleOverlapComponents_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleOverlapComponents_DEPRECATED");

	UKismetSystemLibrary_CapsuleOverlapComponents_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapActors_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleOverlapActors_NEW");

	UKismetSystemLibrary_CapsuleOverlapActors_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CapsuleOverlapActors_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CapsulePos                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::CapsuleOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CapsuleOverlapActors_DEPRECATED");

	UKismetSystemLibrary_CapsuleOverlapActors_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CapsulePos = CapsulePos;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.CanRunCosmeticEvents
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetworkModeResult> OutNetworkMode                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UKismetSystemLibrary::CanRunCosmeticEvents(class UObject* WorldContextObject, TEnumAsByte<ENetworkModeResult>* OutNetworkMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.CanRunCosmeticEvents");

	UKismetSystemLibrary_CanRunCosmeticEvents_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutNetworkMode != nullptr)
		*OutNetworkMode = params.OutNetworkMode;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceSingleForObjects");

	UKismetSystemLibrary_BoxTraceSingleForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceSingle
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceSingle");

	UKismetSystemLibrary_BoxTraceSingle_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceMultiForObjects");

	UKismetSystemLibrary_BoxTraceMultiForObjects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.ObjectTypes = ObjectTypes;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxTraceMulti
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 HalfSize                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Orientation                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETraceTypeQuery>   TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EDrawDebugTrace>   DrawDebugType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxTraceMulti");

	UKismetSystemLibrary_BoxTraceMulti_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.HalfSize = HalfSize;
	params.Orientation = Orientation;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.ActorsToIgnore = ActorsToIgnore;
	params.DrawDebugType = DrawDebugType;
	params.bIgnoreSelf = bIgnoreSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapComponents_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxOverlapComponents_NEW");

	UKismetSystemLibrary_BoxOverlapComponents_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.ObjectTypes = ObjectTypes;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapComponents_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ComponentClassFilter           (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimitiveComponent*> OutComponents                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxOverlapComponents_DEPRECATED");

	UKismetSystemLibrary_BoxOverlapComponents_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.Extent = Extent;
	params.Filter = Filter;
	params.ComponentClassFilter = ComponentClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponents != nullptr)
		*OutComponents = params.OutComponents;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapActors_NEW
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxOverlapActors_NEW");

	UKismetSystemLibrary_BoxOverlapActors_NEW_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.ObjectTypes = ObjectTypes;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BoxOverlapActors_DEPRECATED
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxPos                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EOverlapFilterOption> Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClassFilter               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetSystemLibrary::BoxOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BoxOverlapActors_DEPRECATED");

	UKismetSystemLibrary_BoxOverlapActors_DEPRECATED_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoxPos = BoxPos;
	params.BoxExtent = BoxExtent;
	params.Filter = Filter;
	params.ActorClassFilter = ActorClassFilter;
	params.ActorsToIgnore = ActorsToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;

	return params.ReturnValue;
}


// Function Engine.KismetSystemLibrary.BlueprintTimerDynamicDelegate__DelegateSignature
// ()

void UKismetSystemLibrary::BlueprintTimerDynamicDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.BlueprintTimerDynamicDelegate__DelegateSignature");

	UKismetSystemLibrary_BlueprintTimerDynamicDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KismetSystemLibrary.AddFloatHistorySample
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FDebugFloatHistory      FloatHistory                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FDebugFloatHistory      ReturnValue                    (Parm, OutParm, ReturnParm)

struct FDebugFloatHistory UKismetSystemLibrary::AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetSystemLibrary.AddFloatHistorySample");

	UKismetSystemLibrary_AddFloatHistorySample_Params params;
	params.Value = Value;
	params.FloatHistory = FloatHistory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimTrailing
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::TextTrimTrailing(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextTrimTrailing");

	UKismetTextLibrary_TextTrimTrailing_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::TextTrimPrecedingAndTrailing(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing");

	UKismetTextLibrary_TextTrimPrecedingAndTrailing_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextTrimPreceding
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::TextTrimPreceding(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextTrimPreceding");

	UKismetTextLibrary_TextTrimPreceding_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsTransient
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsTransient(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextIsTransient");

	UKismetTextLibrary_TextIsTransient_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsEmpty
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsEmpty(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextIsEmpty");

	UKismetTextLibrary_TextIsEmpty_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.TextIsCultureInvariant
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::TextIsCultureInvariant(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.TextIsCultureInvariant");

	UKismetTextLibrary_TextIsCultureInvariant_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::NotEqual_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.NotEqual_TextText");

	UKismetTextLibrary_NotEqual_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText");

	UKismetTextLibrary_NotEqual_IgnoreCase_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.GetEmptyText
// ()
// Parameters:
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::GetEmptyText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.GetEmptyText");

	UKismetTextLibrary_GetEmptyText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Format
// ()
// Parameters:
// struct FText                   InPattern                      (Parm)
// TArray<struct FFormatTextArgument> InArgs                         (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Format(const struct FText& InPattern, TArray<struct FFormatTextArgument> InArgs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Format");

	UKismetTextLibrary_Format_Params params;
	params.InPattern = InPattern;
	params.InArgs = InArgs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.FindTextInLocalizationTable
// ()
// Parameters:
// class FString                  Namespace                      (Parm, ZeroConstructor)
// class FString                  Key                            (Parm, ZeroConstructor)
// struct FText                   OutText                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, struct FText* OutText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.FindTextInLocalizationTable");

	UKismetTextLibrary_FindTextInLocalizationTable_Params params;
	params.Namespace = Namespace;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutText != nullptr)
		*OutText = params.OutText;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::EqualEqual_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.EqualEqual_TextText");

	UKismetTextLibrary_EqualEqual_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
// ()
// Parameters:
// struct FText                   A                              (ConstParm, Parm, OutParm, ReferenceParm)
// struct FText                   B                              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UKismetTextLibrary::EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText");

	UKismetTextLibrary_EqualEqual_IgnoreCase_TextText_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_TextToString
// ()
// Parameters:
// struct FText                   InText                         (ConstParm, Parm, OutParm, ReferenceParm)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UKismetTextLibrary::Conv_TextToString(const struct FText& InText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_TextToString");

	UKismetTextLibrary_Conv_TextToString_Params params;
	params.InText = InText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_StringToText
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_StringToText(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_StringToText");

	UKismetTextLibrary_Conv_StringToText_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_NameToText
// ()
// Parameters:
// struct FName                   InName                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_NameToText(const struct FName& InName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_NameToText");

	UKismetTextLibrary_Conv_NameToText_Params params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_IntToText
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_IntToText");

	UKismetTextLibrary_Conv_IntToText_Params params;
	params.Value = Value;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_FloatToText
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_FloatToText");

	UKismetTextLibrary_Conv_FloatToText_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_ByteToText
// ()
// Parameters:
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_ByteToText(unsigned char Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_ByteToText");

	UKismetTextLibrary_Conv_ByteToText_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.Conv_BoolToText
// ()
// Parameters:
// bool                           InBool                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::Conv_BoolToText(bool InBool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.Conv_BoolToText");

	UKismetTextLibrary_Conv_BoolToText_Params params;
	params.InBool = InBool;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTimespan_Timespan
// ()
// Parameters:
// struct FTimespan               InTimespan                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsTimespan_Timespan(const struct FTimespan& InTimespan)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsTimespan_Timespan");

	UKismetTextLibrary_AsTimespan_Timespan_Params params;
	params.InTimespan = InTimespan;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsTime_DateTime
// ()
// Parameters:
// struct FDateTime               In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsTime_DateTime(const struct FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsTime_DateTime");

	UKismetTextLibrary_AsTime_DateTime_Params params;
	params.In = In;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsPercent_Float
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsPercent_Float");

	UKismetTextLibrary_AsPercent_Float_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDateTime_DateTime
// ()
// Parameters:
// struct FDateTime               In                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsDateTime_DateTime(const struct FDateTime& In)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsDateTime_DateTime");

	UKismetTextLibrary_AsDateTime_DateTime_Params params;
	params.In = In;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsDate_DateTime
// ()
// Parameters:
// struct FDateTime               InDateTime                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsDate_DateTime(const struct FDateTime& InDateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsDate_DateTime");

	UKismetTextLibrary_AsDate_DateTime_Params params;
	params.InDateTime = InDateTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Integer
// ()
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  CurrencyCode                   (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsCurrency_Integer");

	UKismetTextLibrary_AsCurrency_Integer_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KismetTextLibrary.AsCurrency_Float
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumIntegralDigits          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinimumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumFractionalDigits        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  CurrencyCode                   (Parm, ZeroConstructor)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UKismetTextLibrary::AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const class FString& CurrencyCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KismetTextLibrary.AsCurrency_Float");

	UKismetTextLibrary_AsCurrency_Float_Params params;
	params.Value = Value;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinimumIntegralDigits = MinimumIntegralDigits;
	params.MaximumIntegralDigits = MaximumIntegralDigits;
	params.MinimumFractionalDigits = MinimumFractionalDigits;
	params.MaximumFractionalDigits = MaximumFractionalDigits;
	params.CurrencyCode = CurrencyCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraAnimInst.Stop
// ()
// Parameters:
// bool                           bImmediate                     (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::Stop(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

	UCameraAnimInst_Stop_Params params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.SetDuration
// ()
// Parameters:
// float                          NewDuration                    (Parm, ZeroConstructor, IsPlainOldData)

void UCameraAnimInst::SetDuration(float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetDuration");

	UCameraAnimInst_SetDuration_Params params;
	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetDrawColor
// ()
// Parameters:
// struct FColor                  C                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UCanvas::SetDrawColor(const struct FColor& C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColor");

	UCanvas_SetDrawColor_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_TextSize
// ()
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  RenderText                     (Parm, ZeroConstructor)
// struct FVector2D               Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UCanvas::K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_TextSize");

	UCanvas_K2_TextSize_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_StrLen
// ()
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  RenderText                     (Parm, ZeroConstructor)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UCanvas::K2_StrLen(class UFont* RenderFont, const class FString& RenderText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_StrLen");

	UCanvas_K2_StrLen_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_Project
// ()
// Parameters:
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCanvas::K2_Project(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Project");

	UCanvas_K2_Project_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.K2_DrawTriangle
// ()
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FCanvasUVTri>    Triangles                      (Parm, ZeroConstructor)

void UCanvas::K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTriangle");

	UCanvas_K2_DrawTriangle_Params params;
	params.RenderTexture = RenderTexture;
	params.Triangles = Triangles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawTexture
// ()
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBlendMode>        BlendMode                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawTexture");

	UCanvas_K2_DrawTexture_Params params;
	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BlendMode = BlendMode;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawText
// ()
// Parameters:
// class UFont*                   RenderFont                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  RenderText                     (Parm, ZeroConstructor)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Kerning                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ShadowColor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ShadowOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCentreX                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCentreY                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOutlined                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            OutlineColor                   (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawText");

	UCanvas_K2_DrawText_Params params;
	params.RenderFont = RenderFont;
	params.RenderText = RenderText;
	params.ScreenPosition = ScreenPosition;
	params.RenderColor = RenderColor;
	params.Kerning = Kerning;
	params.ShadowColor = ShadowColor;
	params.ShadowOffset = ShadowOffset;
	params.bCentreX = bCentreX;
	params.bCentreY = bCentreY;
	params.bOutlined = bOutlined;
	params.OutlineColor = OutlineColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawPolygon
// ()
// Parameters:
// class UTexture*                RenderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumberOfSides                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawPolygon");

	UCanvas_K2_DrawPolygon_Params params;
	params.RenderTexture = RenderTexture;
	params.ScreenPosition = ScreenPosition;
	params.Radius = Radius;
	params.NumberOfSides = NumberOfSides;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawMaterial
// ()
// Parameters:
// class UMaterialInterface*      RenderMaterial                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawMaterial");

	UCanvas_K2_DrawMaterial_Params params;
	params.RenderMaterial = RenderMaterial;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawLine
// ()
// Parameters:
// struct FVector2D               ScreenPositionA                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPositionB                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawLine");

	UCanvas_K2_DrawLine_Params params;
	params.ScreenPositionA = ScreenPositionA;
	params.ScreenPositionB = ScreenPositionB;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawBoxEx
// ()
// Parameters:
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EBlendMode>        BlendMode                      (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawBoxEx(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBoxEx");

	UCanvas_K2_DrawBoxEx_Params params;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.Thickness = Thickness;
	params.RenderColor = RenderColor;
	params.BlendMode = BlendMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawBox
// ()
// Parameters:
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBox");

	UCanvas_K2_DrawBox_Params params;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_DrawBorder
// ()
// Parameters:
// class UTexture*                BorderTexture                  (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                BackgroundTexture              (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                LeftBorderTexture              (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                RightBorderTexture             (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                TopBorderTexture               (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                BottomBorderTexture            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenSize                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinatePosition             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CoordinateSize                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            RenderColor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               BorderScale                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               BackgroundScale                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               PivotPoint                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               CornerSize                     (Parm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_DrawBorder");

	UCanvas_K2_DrawBorder_Params params;
	params.BorderTexture = BorderTexture;
	params.BackgroundTexture = BackgroundTexture;
	params.LeftBorderTexture = LeftBorderTexture;
	params.RightBorderTexture = RightBorderTexture;
	params.TopBorderTexture = TopBorderTexture;
	params.BottomBorderTexture = BottomBorderTexture;
	params.ScreenPosition = ScreenPosition;
	params.ScreenSize = ScreenSize;
	params.CoordinatePosition = CoordinatePosition;
	params.CoordinateSize = CoordinateSize;
	params.RenderColor = RenderColor;
	params.BorderScale = BorderScale;
	params.BackgroundScale = BackgroundScale;
	params.Rotation = Rotation;
	params.PivotPoint = PivotPoint;
	params.CornerSize = CornerSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.K2_Deproject
// ()
// Parameters:
// struct FVector2D               ScreenPosition                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldOrigin                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldDirection                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCanvas::K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.K2_Deproject");

	UCanvas_K2_Deproject_Params params;
	params.ScreenPosition = ScreenPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.Canvas.IsPositionInFrontOfViewport
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCanvas::IsPositionInFrontOfViewport(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.IsPositionInFrontOfViewport");

	UCanvas_IsPositionInFrontOfViewport_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.BPDrawTextWrapped
// ()
// Parameters:
// class UFont*                   InFont                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  InText                         (Parm, ZeroConstructor)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          XWidth                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          YWidth                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          XScale                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          YScale                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoCenterX                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoCenterY                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               SpacingAdjust                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCanvas::BPDrawTextWrapped(class UFont* InFont, const class FString& InText, float X, float Y, float XWidth, float YWidth, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY, const struct FVector2D& SpacingAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BPDrawTextWrapped");

	UCanvas_BPDrawTextWrapped_Params params;
	params.InFont = InFont;
	params.InText = InText;
	params.X = X;
	params.Y = Y;
	params.XWidth = XWidth;
	params.YWidth = YWidth;
	params.XScale = XScale;
	params.YScale = YScale;
	params.bDoCenterX = bDoCenterX;
	params.bDoCenterY = bDoCenterY;
	params.SpacingAdjust = SpacingAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.BPDrawTextCentered
// ()
// Parameters:
// class UFont*                   InFont                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  InText                         (Parm, ZeroConstructor)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          XScale                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          YScale                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoCenterX                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoCenterY                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UCanvas::BPDrawTextCentered(class UFont* InFont, const class FString& InText, float X, float Y, float XScale, float YScale, bool bDoCenterX, bool bDoCenterY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BPDrawTextCentered");

	UCanvas_BPDrawTextCentered_Params params;
	params.InFont = InFont;
	params.InText = InText;
	params.X = X;
	params.Y = Y;
	params.XScale = XScale;
	params.YScale = YScale;
	params.bDoCenterX = bDoCenterX;
	params.bDoCenterY = bDoCenterY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurveLinearColor.GetLinearColorValue
// ()
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UCurveLinearColor::GetLinearColorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveLinearColor.GetLinearColorValue");

	UCurveLinearColor_GetLinearColorValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CurveVector.GetVectorValue
// ()
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UCurveVector::GetVectorValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CurveVector.GetVectorValue");

	UCurveVector_GetVectorValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.SetMouseSensitivityToDefault
// ()

void UPlayerInput::SetMouseSensitivityToDefault()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetMouseSensitivityToDefault");

	UPlayerInput_SetMouseSensitivityToDefault_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SetMouseSensitivity
// ()
// Parameters:
// float                          Sensitivity                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::SetMouseSensitivity(float Sensitivity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetMouseSensitivity");

	UPlayerInput_SetMouseSensitivity_Params params;
	params.Sensitivity = Sensitivity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SetBind
// ()
// Parameters:
// struct FName                   BindName                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Command                        (Parm, ZeroConstructor)

void UPlayerInput::SetBind(const struct FName& BindName, const class FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetBind");

	UPlayerInput_SetBind_Params params;
	params.BindName = BindName;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertMouse
// ()

void UPlayerInput::InvertMouse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertMouse");

	UPlayerInput_InvertMouse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertAxisKey
// ()
// Parameters:
// struct FKey                    AxisKey                        (ConstParm, Parm)

void UPlayerInput::InvertAxisKey(const struct FKey& AxisKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxisKey");

	UPlayerInput_InvertAxisKey_Params params;
	params.AxisKey = AxisKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertAxis
// ()
// Parameters:
// struct FName                   AxisName                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UPlayerInput::InvertAxis(const struct FName& AxisName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertAxis");

	UPlayerInput_InvertAxis_Params params;
	params.AxisName = AxisName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.ClearSmoothing
// ()

void UPlayerInput::ClearSmoothing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

	UPlayerInput_ClearSmoothing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelStreaming.LevelStreamingVisibilityStatus__DelegateSignature
// ()

void ULevelStreaming::LevelStreamingVisibilityStatus__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.LevelStreamingVisibilityStatus__DelegateSignature");

	ULevelStreaming_LevelStreamingVisibilityStatus__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelStreaming.LevelStreamingLoadedStatus__DelegateSignature
// ()

void ULevelStreaming::LevelStreamingLoadedStatus__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.LevelStreamingLoadedStatus__DelegateSignature");

	ULevelStreaming_LevelStreamingLoadedStatus__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelStreaming.IsTileStreamingEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsTileStreamingEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsTileStreamingEnabled");

	ULevelStreaming_IsTileStreamingEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelVisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsLevelVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelVisible");

	ULevelStreaming_IsLevelVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.IsLevelLoaded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULevelStreaming::IsLevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.IsLevelLoaded");

	ULevelStreaming_IsLevelLoaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.CreateInstance
// ()
// Parameters:
// class FString                  UniqueInstanceName             (Parm, ZeroConstructor)
// class ULevelStreaming*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ULevelStreaming* ULevelStreaming::CreateInstance(const class FString& UniqueInstanceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.CreateInstance");

	ULevelStreaming_CreateInstance_Params params;
	params.UniqueInstanceName = UniqueInstanceName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelStreaming.BPSetLevelVisibility
// ()
// Parameters:
// bool                           bVisible                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLowMemory                   (Parm, ZeroConstructor, IsPlainOldData)

void ULevelStreaming::BPSetLevelVisibility(bool bVisible, bool bIsLowMemory)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.BPSetLevelVisibility");

	ULevelStreaming_BPSetLevelVisibility_Params params;
	params.bVisible = bVisible;
	params.bIsLowMemory = bIsLowMemory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelStreaming.BPGetPackageName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString ULevelStreaming::BPGetPackageName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreaming.BPGetPackageName");

	ULevelStreaming_BPGetPackageName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.SetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.SetVectorParameterValue");

	UMaterialInstanceDynamic_SetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceDynamic.SetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.SetTextureParameterValue");

	UMaterialInstanceDynamic_SetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceDynamic.SetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.SetScalarParameterValue");

	UMaterialInstanceDynamic_SetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
// ()
// Parameters:
// class UMaterialInstance*       MaterialA                      (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstance*       MaterialB                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::K2_InterpolateMaterialInstanceParams(class UMaterialInstance* MaterialA, class UMaterialInstance* MaterialB, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams");

	UMaterialInstanceDynamic_K2_InterpolateMaterialInstanceParams_Params params;
	params.MaterialA = MaterialA;
	params.MaterialB = MaterialB;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UMaterialInstanceDynamic::K2_GetVectorParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue");

	UMaterialInstanceDynamic_K2_GetVectorParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture* UMaterialInstanceDynamic::K2_GetTextureParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue");

	UMaterialInstanceDynamic_K2_GetTextureParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
// ()
// Parameters:
// struct FName                   ParameterName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UMaterialInstanceDynamic::K2_GetScalarParameterValue(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue");

	UMaterialInstanceDynamic_K2_GetScalarParameterValue_Params params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
// ()
// Parameters:
// class UMaterialInterface*      SourceMaterialToCopyFrom       (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::K2_CopyMaterialInstanceParameters(class UMaterialInterface* SourceMaterialToCopyFrom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters");

	UMaterialInstanceDynamic_K2_CopyMaterialInstanceParameters_Params params;
	params.SourceMaterialToCopyFrom = SourceMaterialToCopyFrom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceDynamic.CopyParameterOverrides
// ()
// Parameters:
// class UMaterialInstance*       MaterialInstance               (Parm, ZeroConstructor, IsPlainOldData)

void UMaterialInstanceDynamic::CopyParameterOverrides(class UMaterialInstance* MaterialInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceDynamic.CopyParameterOverrides");

	UMaterialInstanceDynamic_CopyParameterOverrides_Params params;
	params.MaterialInstance = MaterialInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPath.OnNavigationPathUpdated__DelegateSignature
// ()
// Parameters:
// class UNavigationPath*         AffectedPath                   (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENavPathEvent>     PathEvent                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationPath::OnNavigationPathUpdated__DelegateSignature(class UNavigationPath* AffectedPath, TEnumAsByte<ENavPathEvent> PathEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.OnNavigationPathUpdated__DelegateSignature");

	UNavigationPath_OnNavigationPathUpdated__DelegateSignature_Params params;
	params.AffectedPath = AffectedPath;
	params.PathEvent = PathEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPath.IsValid
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsValid()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.IsValid");

	UNavigationPath_IsValid_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsStringPulled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsStringPulled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.IsStringPulled");

	UNavigationPath_IsStringPulled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPath.IsPartial
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNavigationPath::IsPartial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.IsPartial");

	UNavigationPath_IsPartial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetPathLength
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNavigationPath::GetPathLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.GetPathLength");

	UNavigationPath_GetPathLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetPathCost
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNavigationPath::GetPathCost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.GetPathCost");

	UNavigationPath_GetPathCost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPath.GetDebugString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UNavigationPath::GetDebugString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.GetDebugString");

	UNavigationPath_GetDebugString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPath.EnableRecalculationOnInvalidation
// ()
// Parameters:
// TEnumAsByte<ENavigationOptionFlag> DoRecalculation                (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationPath::EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.EnableRecalculationOnInvalidation");

	UNavigationPath_EnableRecalculationOnInvalidation_Params params;
	params.DoRecalculation = DoRecalculation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPath.EnableDebugDrawing
// ()
// Parameters:
// bool                           bShouldDrawDebugData           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PathColor                      (Parm, ZeroConstructor, IsPlainOldData)

void UNavigationPath::EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPath.EnableDebugDrawing");

	UNavigationPath_EnableDebugDrawing_Params params;
	params.bShouldDrawDebugData = bShouldDrawDebugData;
	params.PathColor = PathColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlatformInterfaceBase.PlatformInterfaceDelegate__DelegateSignature
// ()
// Parameters:
// struct FPlatformInterfaceDelegateResult Result                         (ConstParm, Parm, OutParm, ReferenceParm)

void UPlatformInterfaceBase::PlatformInterfaceDelegate__DelegateSignature(const struct FPlatformInterfaceDelegateResult& Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.PlatformInterfaceDelegate__DelegateSignature");

	UPlatformInterfaceBase_PlatformInterfaceDelegate__DelegateSignature_Params params;
	params.Result = Result;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.OnUserClosedAdvertisement__DelegateSignature
// ()

void UInGameAdManager::OnUserClosedAdvertisement__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.OnUserClosedAdvertisement__DelegateSignature");

	UInGameAdManager_OnUserClosedAdvertisement__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.OnUserClickedBanner__DelegateSignature
// ()

void UInGameAdManager::OnUserClickedBanner__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.OnUserClickedBanner__DelegateSignature");

	UInGameAdManager_OnUserClickedBanner__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TwitterIntegrationBase.TwitterRequest
// ()
// Parameters:
// class FString                  URL                            (Parm, ZeroConstructor)
// TArray<class FString>          ParamKeysAndValues             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<ETwitterRequestMethod> RequestMethod                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::TwitterRequest(const class FString& URL, TArray<class FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.TwitterRequest");

	UTwitterIntegrationBase_TwitterRequest_Params params;
	params.URL = URL;
	params.ParamKeysAndValues = ParamKeysAndValues;
	params.RequestMethod = RequestMethod;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.ShowTweetUI
// ()
// Parameters:
// class FString                  InitialMessage                 (Parm, ZeroConstructor)
// class FString                  URL                            (Parm, ZeroConstructor)
// class FString                  Picture                        (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.ShowTweetUI");

	UTwitterIntegrationBase_ShowTweetUI_Params params;
	params.InitialMessage = InitialMessage;
	params.URL = URL;
	params.Picture = Picture;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.Init
// ()

void UTwitterIntegrationBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.Init");

	UTwitterIntegrationBase_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TwitterIntegrationBase.GetNumAccounts
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTwitterIntegrationBase::GetNumAccounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetNumAccounts");

	UTwitterIntegrationBase_GetNumAccounts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.GetAccountName
// ()
// Parameters:
// int                            AccountIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UTwitterIntegrationBase::GetAccountName(int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetAccountName");

	UTwitterIntegrationBase_GetAccountName_Params params;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.CanShowTweetUI
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::CanShowTweetUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.CanShowTweetUI");

	UTwitterIntegrationBase_CanShowTweetUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.AuthorizeAccounts
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UTwitterIntegrationBase::AuthorizeAccounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.AuthorizeAccounts");

	UTwitterIntegrationBase_AuthorizeAccounts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlatformInterfaceWebResponse::GetNumHeaders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders");

	UPlatformInterfaceWebResponse_GetNumHeaders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
// ()
// Parameters:
// class FString                  HeaderName                     (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPlatformInterfaceWebResponse::GetHeaderValue(const class FString& HeaderName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue");

	UPlatformInterfaceWebResponse_GetHeaderValue_Params params;
	params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeader
// ()
// Parameters:
// int                            HeaderIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Header                         (Parm, OutParm, ZeroConstructor)
// class FString                  Value                          (Parm, OutParm, ZeroConstructor)

void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, class FString* Header, class FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeader");

	UPlatformInterfaceWebResponse_GetHeader_Params params;
	params.HeaderIndex = HeaderIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Header != nullptr)
		*Header = params.Header;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldNormal                    (Parm, ZeroConstructor, IsPlainOldData)

void USkeletalMeshSocket::InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.InitializeSocketFromLocation");

	USkeletalMeshSocket_InitializeSocketFromLocation_Params params;
	params.SkelComp = SkelComp;
	params.WorldLocation = WorldLocation;
	params.WorldNormal = WorldNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshSocket.GetSocketLocation
// ()
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector USkeletalMeshSocket::GetSocketLocation(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshSocket.GetSocketLocation");

	USkeletalMeshSocket_GetSocketLocation_Params params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SoundBase.GetDuration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float USoundBase::GetDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundBase.GetDuration");

	USoundBase_GetDuration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2D.Blueprint_GetSizeY
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTexture2D::Blueprint_GetSizeY()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeY");

	UTexture2D_Blueprint_GetSizeY_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2D.Blueprint_GetSizeX
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTexture2D::Blueprint_GetSizeX()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Blueprint_GetSizeX");

	UTexture2D_Blueprint_GetSizeX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CanvasRenderTarget2D.UpdateResource
// ()

void UCanvasRenderTarget2D::UpdateResource()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.UpdateResource");

	UCanvasRenderTarget2D_UpdateResource_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CanvasRenderTarget2D.ReceiveUpdate
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)

void UCanvasRenderTarget2D::ReceiveUpdate(class UCanvas* Canvas, int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.ReceiveUpdate");

	UCanvasRenderTarget2D_ReceiveUpdate_Params params;
	params.Canvas = Canvas;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CanvasRenderTarget2D.OnCanvasRenderTargetUpdate__DelegateSignature
// ()
// Parameters:
// class UCanvas*                 Canvas                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)

void UCanvasRenderTarget2D::OnCanvasRenderTargetUpdate__DelegateSignature(class UCanvas* Canvas, int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.OnCanvasRenderTargetUpdate__DelegateSignature");

	UCanvasRenderTarget2D_OnCanvasRenderTargetUpdate__DelegateSignature_Params params;
	params.Canvas = Canvas;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CanvasRenderTarget2D.GetSize
// ()
// Parameters:
// int                            Width                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UCanvasRenderTarget2D::GetSize(int* Width, int* Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.GetSize");

	UCanvasRenderTarget2D_GetSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
}


// Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
// ()
// Parameters:
// class UClass*                  CanvasRenderTarget2DClass      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// class UCanvasRenderTarget2D*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCanvasRenderTarget2D* UCanvasRenderTarget2D::CreateCanvasRenderTarget2D(class UClass* CanvasRenderTarget2DClass, int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D");

	UCanvasRenderTarget2D_CreateCanvasRenderTarget2D_Params params;
	params.CanvasRenderTarget2DClass = CanvasRenderTarget2DClass;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VehicleWheel.GetSuspensionOffset
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVehicleWheel::GetSuspensionOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VehicleWheel.GetSuspensionOffset");

	UVehicleWheel_GetSuspensionOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VehicleWheel.GetSteerAngle
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVehicleWheel::GetSteerAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VehicleWheel.GetSteerAngle");

	UVehicleWheel_GetSteerAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VehicleWheel.GetRotationAngle
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVehicleWheel::GetRotationAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VehicleWheel.GetRotationAngle");

	UVehicleWheel_GetRotationAngle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
