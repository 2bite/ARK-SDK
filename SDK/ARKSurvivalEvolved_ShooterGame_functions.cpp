// ARKSurvivalEvolved (301.1) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "ARKSurvivalEvolved_ShooterGame_parameters.hpp"

namespace sdk
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function ShooterGame.PrimalGlobals.OnConfirmationDialogClosed
// ()
// Parameters:
// bool                           bAccept                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalGlobals::OnConfirmationDialogClosed(bool bAccept)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGlobals.OnConfirmationDialogClosed");

	UPrimalGlobals_OnConfirmationDialogClosed_Params params;
	params.bAccept = bAccept;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalGlobals.GetDayCycleManager
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// class ADayCycleManager*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ADayCycleManager* UPrimalGlobals::GetDayCycleManager(class UWorld* World)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGlobals.GetDayCycleManager");

	UPrimalGlobals_GetDayCycleManager_Params params;
	params.World = World;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGlobals.FinishedLoadingGameMedia
// ()

void UPrimalGlobals::FinishedLoadingGameMedia()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGlobals.FinishedLoadingGameMedia");

	UPrimalGlobals_FinishedLoadingGameMedia_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalGameData.TickedWorld
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalGameData::TickedWorld(class UWorld* TheWorld, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.TickedWorld");

	UPrimalGameData_TickedWorld_Params params;
	params.TheWorld = TheWorld;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalGameData.LocalIsPerMapExplorerNoteUnlocked
// ()
// Parameters:
// int                            ExplorerNoteIndex              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalGameData::LocalIsPerMapExplorerNoteUnlocked(int ExplorerNoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.LocalIsPerMapExplorerNoteUnlocked");

	UPrimalGameData_LocalIsPerMapExplorerNoteUnlocked_Params params;
	params.ExplorerNoteIndex = ExplorerNoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.LocalIsGlobalExplorerNoteUnlocked
// ()
// Parameters:
// int                            ExplorerNoteIndex              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalGameData::LocalIsGlobalExplorerNoteUnlocked(int ExplorerNoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.LocalIsGlobalExplorerNoteUnlocked");

	UPrimalGameData_LocalIsGlobalExplorerNoteUnlocked_Params params;
	params.ExplorerNoteIndex = ExplorerNoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.LoadedWorld
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalGameData::LoadedWorld(class UWorld* TheWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.LoadedWorld");

	UPrimalGameData_LoadedWorld_Params params;
	params.TheWorld = TheWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalGameData.GetXPMax
// ()
// Parameters:
// TEnumAsByte<ELevelExperienceRampType> levelType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalGameData::GetXPMax(TEnumAsByte<ELevelExperienceRampType> levelType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetXPMax");

	UPrimalGameData_GetXPMax_Params params;
	params.levelType = levelType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.GetLevelXP
// ()
// Parameters:
// TEnumAsByte<ELevelExperienceRampType> levelType                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            forLevel                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalGameData::GetLevelXP(TEnumAsByte<ELevelExperienceRampType> levelType, int forLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetLevelXP");

	UPrimalGameData_GetLevelXP_Params params;
	params.levelType = levelType;
	params.forLevel = forLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.GetLevelMax
// ()
// Parameters:
// TEnumAsByte<ELevelExperienceRampType> levelType                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalGameData::GetLevelMax(TEnumAsByte<ELevelExperienceRampType> levelType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetLevelMax");

	UPrimalGameData_GetLevelMax_Params params;
	params.levelType = levelType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.GetLevelExperienceRamp
// ()
// Parameters:
// TEnumAsByte<ELevelExperienceRampType> levelType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLevelExperienceRamp    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FLevelExperienceRamp UPrimalGameData::GetLevelExperienceRamp(TEnumAsByte<ELevelExperienceRampType> levelType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetLevelExperienceRamp");

	UPrimalGameData_GetLevelExperienceRamp_Params params;
	params.levelType = levelType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.GetGenericCombatMusic
// ()
// Parameters:
// class APrimalCharacter*        forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        forEnemy                       (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USoundBase* UPrimalGameData::GetGenericCombatMusic(class APrimalCharacter* forCharacter, class APrimalCharacter* forEnemy)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetGenericCombatMusic");

	UPrimalGameData_GetGenericCombatMusic_Params params;
	params.forCharacter = forCharacter;
	params.forEnemy = forEnemy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.GetExplorerNoteDescription
// ()
// Parameters:
// int                            ExplorerNoteIndex              (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalGameData::GetExplorerNoteDescription(int ExplorerNoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetExplorerNoteDescription");

	UPrimalGameData_GetExplorerNoteDescription_Params params;
	params.ExplorerNoteIndex = ExplorerNoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.GetDinoEntry
// ()
// Parameters:
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UPrimalGameData::GetDinoEntry(class UClass* DinoClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetDinoEntry");

	UPrimalGameData_GetDinoEntry_Params params;
	params.DinoClass = DinoClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.GetColorForDefinition
// ()
// Parameters:
// int                            DefinitionIndex                (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UPrimalGameData::GetColorForDefinition(int DefinitionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.GetColorForDefinition");

	UPrimalGameData_GetColorForDefinition_Params params;
	params.DefinitionIndex = DefinitionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.BPMergeModGameData
// ()
// Parameters:
// class UPrimalGameData*         AnotherGameData                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalGameData::BPMergeModGameData(class UPrimalGameData* AnotherGameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.BPMergeModGameData");

	UPrimalGameData_BPMergeModGameData_Params params;
	params.AnotherGameData = AnotherGameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalGameData.BPInitializeGameData
// ()

void UPrimalGameData::BPInitializeGameData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.BPInitializeGameData");

	UPrimalGameData_BPInitializeGameData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalGameData.BPGetItemQualityIndex
// ()
// Parameters:
// float                          ItemRating                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalGameData::BPGetItemQualityIndex(float ItemRating)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.BPGetItemQualityIndex");

	UPrimalGameData_BPGetItemQualityIndex_Params params;
	params.ItemRating = ItemRating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalGameData.BPGetGameData
// ()
// Parameters:
// class UPrimalGameData*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalGameData* UPrimalGameData::BPGetGameData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalGameData.BPGetGameData");

	UPrimalGameData_BPGetGameData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.UseItemOntoItem
// ()
// Parameters:
// class UPrimalItem*             DestinationItem                (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalData                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::UseItemOntoItem(class UPrimalItem* DestinationItem, int AdditionalData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.UseItemOntoItem");

	UPrimalItem_UseItemOntoItem_Params params;
	params.DestinationItem = DestinationItem;
	params.AdditionalData = AdditionalData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.Use
// ()
// Parameters:
// bool                           bOverridePlayerInput           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::Use(bool bOverridePlayerInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.Use");

	UPrimalItem_Use_Params params;
	params.bOverridePlayerInput = bOverridePlayerInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.UpdatedItem
// ()
// Parameters:
// bool                           ResetUploadTime                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::UpdatedItem(bool ResetUploadTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.UpdatedItem");

	UPrimalItem_UpdatedItem_Params params;
	params.ResetUploadTime = ResetUploadTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.UnequipWeapon
// ()
// Parameters:
// bool                           bDelayedUnequip                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::UnequipWeapon(bool bDelayedUnequip)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.UnequipWeapon");

	UPrimalItem_UnequipWeapon_Params params;
	params.bDelayedUnequip = bDelayedUnequip;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.StaticGetDinoColorSetIndexForItemColorID
// ()
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::StaticGetDinoColorSetIndexForItemColorID(int ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.StaticGetDinoColorSetIndexForItemColorID");

	UPrimalItem_StaticGetDinoColorSetIndexForItemColorID_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.StaticGetColorForItemColorID
// ()
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UPrimalItem::StaticGetColorForItemColorID(int ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.StaticGetColorForItemColorID");

	UPrimalItem_StaticGetColorForItemColorID_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.SlottedTick
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::SlottedTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.SlottedTick");

	UPrimalItem_SlottedTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.SkinEquippedBlueprintTick
// ()
// Parameters:
// class UPrimalItem*             OwnerItem                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::SkinEquippedBlueprintTick(class UPrimalItem* OwnerItem, float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.SkinEquippedBlueprintTick");

	UPrimalItem_SkinEquippedBlueprintTick_Params params;
	params.OwnerItem = OwnerItem;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.SetQuantity
// ()
// Parameters:
// int                            NewQuantity                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShowHUDNotification            (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::SetQuantity(int NewQuantity, bool ShowHUDNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.SetQuantity");

	UPrimalItem_SetQuantity_Params params;
	params.NewQuantity = NewQuantity;
	params.ShowHUDNotification = ShowHUDNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.SetItemStatValues
// ()
// Parameters:
// int                            idx                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            val                            (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::SetItemStatValues(int idx, int val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.SetItemStatValues");

	UPrimalItem_SetItemStatValues_Params params;
	params.idx = idx;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.SetItemStatInfo
// ()
// Parameters:
// int                            idx                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemStatInfo           val                            (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimalItem::SetItemStatInfo(int idx, const struct FItemStatInfo& val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.SetItemStatInfo");

	UPrimalItem_SetItemStatInfo_Params params;
	params.idx = idx;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.SetCustomItemData
// ()
// Parameters:
// struct FCustomItemData         InData                         (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimalItem::SetCustomItemData(const struct FCustomItemData& InData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.SetCustomItemData");

	UPrimalItem_SetCustomItemData_Params params;
	params.InData = InData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ServerUpdatedWeaponClipAmmo
// ()

void UPrimalItem::ServerUpdatedWeaponClipAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ServerUpdatedWeaponClipAmmo");

	UPrimalItem_ServerUpdatedWeaponClipAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ServerSendItemExecCommandToPlayer
// ()
// Parameters:
// class AShooterPlayerController* ToPC                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsReliable                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSendToLocalPlayer        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreRelevancy               (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::ServerSendItemExecCommandToPlayer(class AShooterPlayerController* ToPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ServerSendItemExecCommandToPlayer");

	UPrimalItem_ServerSendItemExecCommandToPlayer_Params params;
	params.ToPC = ToPC;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.bIsReliable = bIsReliable;
	params.bForceSendToLocalPlayer = bForceSendToLocalPlayer;
	params.bIgnoreRelevancy = bIgnoreRelevancy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ServerSendItemExecCommandToEveryone
// ()
// Parameters:
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsReliable                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSendToLocalPlayer        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreRelevancy               (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::ServerSendItemExecCommandToEveryone(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable, bool bForceSendToLocalPlayer, bool bIgnoreRelevancy)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ServerSendItemExecCommandToEveryone");

	UPrimalItem_ServerSendItemExecCommandToEveryone_Params params;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.bIsReliable = bIsReliable;
	params.bForceSendToLocalPlayer = bForceSendToLocalPlayer;
	params.bIgnoreRelevancy = bIgnoreRelevancy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ServerRemoveWeaponAccessoryOnly
// ()

void UPrimalItem::ServerRemoveWeaponAccessoryOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ServerRemoveWeaponAccessoryOnly");

	UPrimalItem_ServerRemoveWeaponAccessoryOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ServerRemoveItemSkinOnly
// ()

void UPrimalItem::ServerRemoveItemSkinOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ServerRemoveItemSkinOnly");

	UPrimalItem_ServerRemoveItemSkinOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ServerRemoveItemSkin
// ()

void UPrimalItem::ServerRemoveItemSkin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ServerRemoveItemSkin");

	UPrimalItem_ServerRemoveItemSkin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.RepairItem
// ()
// Parameters:
// bool                           bIgnoreInventoryRequirement    (Parm, ZeroConstructor, IsPlainOldData)
// float                          UseNextRepairPercentage        (Parm, ZeroConstructor, IsPlainOldData)
// float                          RepairSpeedMultiplier          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::RepairItem(bool bIgnoreInventoryRequirement, float UseNextRepairPercentage, float RepairSpeedMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.RepairItem");

	UPrimalItem_RepairItem_Params params;
	params.bIgnoreInventoryRequirement = bIgnoreInventoryRequirement;
	params.UseNextRepairPercentage = UseNextRepairPercentage;
	params.RepairSpeedMultiplier = RepairSpeedMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.RemoveWeaponAccessory
// ()

void UPrimalItem::RemoveWeaponAccessory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.RemoveWeaponAccessory");

	UPrimalItem_RemoveWeaponAccessory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.RemoveFromSlot
// ()
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::RemoveFromSlot(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.RemoveFromSlot");

	UPrimalItem_RemoveFromSlot_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.RemovedSkinFromItem
// ()
// Parameters:
// class UPrimalItem*             FromOwnerItem                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFirstTime                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::RemovedSkinFromItem(class UPrimalItem* FromOwnerItem, bool bIsFirstTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.RemovedSkinFromItem");

	UPrimalItem_RemovedSkinFromItem_Params params;
	params.FromOwnerItem = FromOwnerItem;
	params.bIsFirstTime = bIsFirstTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.RemoveCustomItemData
// ()
// Parameters:
// struct FName                   CustomDataName                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::RemoveCustomItemData(const struct FName& CustomDataName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.RemoveCustomItemData");

	UPrimalItem_RemoveCustomItemData_Params params;
	params.CustomDataName = CustomDataName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.RemoveClipAmmo
// ()
// Parameters:
// bool                           bDontUpdateItem                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::RemoveClipAmmo(bool bDontUpdateItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.RemoveClipAmmo");

	UPrimalItem_RemoveClipAmmo_Params params;
	params.bDontUpdateItem = bDontUpdateItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.OverrideItemRating
// ()
// Parameters:
// float                          rating                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::OverrideItemRating(float rating)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.OverrideItemRating");

	UPrimalItem_OverrideItemRating_Params params;
	params.rating = rating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.OverrideCrouchingSound
// ()
// Parameters:
// class USoundBase*              InSound                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsProne                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            soundState                     (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USoundBase* UPrimalItem::OverrideCrouchingSound(class USoundBase* InSound, bool bIsProne, int soundState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.OverrideCrouchingSound");

	UPrimalItem_OverrideCrouchingSound_Params params;
	params.InSound = InSound;
	params.bIsProne = bIsProne;
	params.soundState = soundState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.NotifyEditText
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::NotifyEditText(class AShooterPlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.NotifyEditText");

	UPrimalItem_NotifyEditText_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.MeetRepairingRequirements
// ()
// Parameters:
// class UPrimalInventoryComponent* compareInventoryComp           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bIsForCraftQueueAddition       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::MeetRepairingRequirements(class UPrimalInventoryComponent* compareInventoryComp, bool bIsForCraftQueueAddition)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.MeetRepairingRequirements");

	UPrimalItem_MeetRepairingRequirements_Params params;
	params.compareInventoryComp = compareInventoryComp;
	params.bIsForCraftQueueAddition = bIsForCraftQueueAddition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.LocalUse
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::LocalUse(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.LocalUse");

	UPrimalItem_LocalUse_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.IsValidForCrafting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::IsValidForCrafting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IsValidForCrafting");

	UPrimalItem_IsValidForCrafting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.IsUsableConsumable
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::IsUsableConsumable()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IsUsableConsumable");

	UPrimalItem_IsUsableConsumable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.IsOwnerInWater
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::IsOwnerInWater()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IsOwnerInWater");

	UPrimalItem_IsOwnerInWater_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.IsOwnerInNoPainWater
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::IsOwnerInNoPainWater()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IsOwnerInNoPainWater");

	UPrimalItem_IsOwnerInNoPainWater_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.IsCooldownReadyForUse
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::IsCooldownReadyForUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IsCooldownReadyForUse");

	UPrimalItem_IsCooldownReadyForUse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.IsBroken
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::IsBroken()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IsBroken");

	UPrimalItem_IsBroken_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.IsActiveEventItem
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::IsActiveEventItem(class UWorld* World)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IsActiveEventItem");

	UPrimalItem_IsActiveEventItem_Params params;
	params.World = World;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.InitNewItem
// ()
// Parameters:
// float                          ItemQuality                    (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalInventoryComponent* toInventory                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          MaxItemDifficultyClamp         (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinRandomQuality               (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::InitNewItem(float ItemQuality, class UPrimalInventoryComponent* toInventory, float MaxItemDifficultyClamp, float MinRandomQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.InitNewItem");

	UPrimalItem_InitNewItem_Params params;
	params.ItemQuality = ItemQuality;
	params.toInventory = toInventory;
	params.MaxItemDifficultyClamp = MaxItemDifficultyClamp;
	params.MinRandomQuality = MinRandomQuality;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.InitializeItem
// ()
// Parameters:
// bool                           bForceReinit                   (Parm, ZeroConstructor, IsPlainOldData)
// class UWorld*                  OptionalInitWorld              (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::InitializeItem(bool bForceReinit, class UWorld* OptionalInitWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.InitializeItem");

	UPrimalItem_InitializeItem_Params params;
	params.bForceReinit = bForceReinit;
	params.OptionalInitWorld = OptionalInitWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.IncrementItemQuantity
// ()
// Parameters:
// int                            amount                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRepicateToClient              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontUpdateWeight              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFromUseConsumption          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsArkTributeItem              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFromCraftingConsumption     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::IncrementItemQuantity(int amount, bool bRepicateToClient, bool bDontUpdateWeight, bool bIsFromUseConsumption, bool bIsArkTributeItem, bool bIsFromCraftingConsumption)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.IncrementItemQuantity");

	UPrimalItem_IncrementItemQuantity_Params params;
	params.amount = amount;
	params.bRepicateToClient = bRepicateToClient;
	params.bDontUpdateWeight = bDontUpdateWeight;
	params.bIsFromUseConsumption = bIsFromUseConsumption;
	params.bIsArkTributeItem = bIsArkTributeItem;
	params.bIsFromCraftingConsumption = bIsFromCraftingConsumption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.HasCustomItemData
// ()
// Parameters:
// struct FName                   CustomDataName                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::HasCustomItemData(const struct FName& CustomDataName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.HasCustomItemData");

	UPrimalItem_HasCustomItemData_Params params;
	params.CustomDataName = CustomDataName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.HasBuffToGiveOwnerWhenEquipped
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::HasBuffToGiveOwnerWhenEquipped()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.HasBuffToGiveOwnerWhenEquipped");

	UPrimalItem_HasBuffToGiveOwnerWhenEquipped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.HandleShieldDamageBlocking
// ()
// Parameters:
// class AShooterCharacter*       ForShooterCharacter            (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageIn                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::HandleShieldDamageBlocking(class AShooterCharacter* ForShooterCharacter, float DamageIn, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.HandleShieldDamageBlocking");

	UPrimalItem_HandleShieldDamageBlocking_Params params;
	params.ForShooterCharacter = ForShooterCharacter;
	params.DamageIn = DamageIn;
	params.DamageEvent = DamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetWeaponTemplateMeleeDamageType
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UPrimalItem::GetWeaponTemplateMeleeDamageType()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetWeaponTemplateMeleeDamageType");

	UPrimalItem_GetWeaponTemplateMeleeDamageType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetWeaponTemplateMeleeDamageAmount
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetWeaponTemplateMeleeDamageAmount()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetWeaponTemplateMeleeDamageAmount");

	UPrimalItem_GetWeaponTemplateMeleeDamageAmount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetWeaponTemplateHarvestDamageType
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UPrimalItem::GetWeaponTemplateHarvestDamageType()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetWeaponTemplateHarvestDamageType");

	UPrimalItem_GetWeaponTemplateHarvestDamageType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetWeaponTemplateHarvestDamageMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetWeaponTemplateHarvestDamageMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetWeaponTemplateHarvestDamageMultiplier");

	UPrimalItem_GetWeaponTemplateHarvestDamageMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetWeaponTemplateDurabilityToConsumePerMeleeHit
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetWeaponTemplateDurabilityToConsumePerMeleeHit()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetWeaponTemplateDurabilityToConsumePerMeleeHit");

	UPrimalItem_GetWeaponTemplateDurabilityToConsumePerMeleeHit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetWeaponClipAmmo
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetWeaponClipAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetWeaponClipAmmo");

	UPrimalItem_GetWeaponClipAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetUseItemAddCharacterStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetUseItemAddCharacterStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetUseItemAddCharacterStatusValue");

	UPrimalItem_GetUseItemAddCharacterStatusValue_Params params;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetSpoilingTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetSpoilingTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetSpoilingTime");

	UPrimalItem_GetSpoilingTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetRemainingCooldownTime
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetRemainingCooldownTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetRemainingCooldownTime");

	UPrimalItem_GetRemainingCooldownTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetMaxItemQuantity
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetMaxItemQuantity(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetMaxItemQuantity");

	UPrimalItem_GetMaxItemQuantity_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetMaximumAdditionalCrafting
// ()
// Parameters:
// class UPrimalInventoryComponent* forComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetMaximumAdditionalCrafting(class UPrimalInventoryComponent* forComp, class AShooterPlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetMaximumAdditionalCrafting");

	UPrimalItem_GetMaximumAdditionalCrafting_Params params;
	params.forComp = forComp;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemWeight
// ()
// Parameters:
// bool                           bJustOneQuantity               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceNotBlueprintWeight       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetItemWeight(bool bJustOneQuantity, bool bForceNotBlueprintWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemWeight");

	UPrimalItem_GetItemWeight_Params params;
	params.bJustOneQuantity = bJustOneQuantity;
	params.bForceNotBlueprintWeight = bForceNotBlueprintWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemStatValues
// ()
// Parameters:
// int                            idx                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetItemStatValues(int idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemStatValues");

	UPrimalItem_GetItemStatValues_Params params;
	params.idx = idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemStatString
// ()
// Parameters:
// TEnumAsByte<EPrimalItemStat>   statType                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::GetItemStatString(TEnumAsByte<EPrimalItemStat> statType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemStatString");

	UPrimalItem_GetItemStatString_Params params;
	params.statType = statType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemStatModifier
// ()
// Parameters:
// TEnumAsByte<EPrimalItemStat>   statType                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetItemStatModifier(TEnumAsByte<EPrimalItemStat> statType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemStatModifier");

	UPrimalItem_GetItemStatModifier_Params params;
	params.statType = statType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemStatInfo
// ()
// Parameters:
// int                            idx                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemStatInfo           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FItemStatInfo UPrimalItem::GetItemStatInfo(int idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemStatInfo");

	UPrimalItem_GetItemStatInfo_Params params;
	params.idx = idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemShortName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::GetItemShortName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemShortName");

	UPrimalItem_GetItemShortName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemNetInfo
// ()
// Parameters:
// bool                           bIsForSendingToClient          (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetInfo            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FItemNetInfo UPrimalItem::GetItemNetInfo(bool bIsForSendingToClient)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemNetInfo");

	UPrimalItem_GetItemNetInfo_Params params;
	params.bIsForSendingToClient = bIsForSendingToClient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemDyeColors
// ()
// Parameters:
// TArray<struct FLinearColor>    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FLinearColor> UPrimalItem::GetItemDyeColors()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemDyeColors");

	UPrimalItem_GetItemDyeColors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemCustomColor
// ()
// Parameters:
// int                            ColorRegion                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            outColor                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::GetItemCustomColor(int ColorRegion, struct FLinearColor* outColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemCustomColor");

	UPrimalItem_GetItemCustomColor_Params params;
	params.ColorRegion = ColorRegion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outColor != nullptr)
		*outColor = params.outColor;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemColorIDFromDyeItemID
// ()
// Parameters:
// int                            MasterItemListIndex            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetItemColorIDFromDyeItemID(int MasterItemListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemColorIDFromDyeItemID");

	UPrimalItem_GetItemColorIDFromDyeItemID_Params params;
	params.MasterItemListIndex = MasterItemListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemColorID
// ()
// Parameters:
// int                            theRegion                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetItemColorID(int theRegion)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemColorID");

	UPrimalItem_GetItemColorID_Params params;
	params.theRegion = theRegion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetItemBytes
// ()
// Parameters:
// TArray<unsigned char>          Bytes                          (Parm, OutParm, ZeroConstructor)

void UPrimalItem::GetItemBytes(TArray<unsigned char>* Bytes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetItemBytes");

	UPrimalItem_GetItemBytes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Bytes != nullptr)
		*Bytes = params.Bytes;
}


// Function ShooterGame.PrimalItem.GetInitializeItemOwnerInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimalInventoryComponent* UPrimalItem::GetInitializeItemOwnerInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetInitializeItemOwnerInventory");

	UPrimalItem_GetInitializeItemOwnerInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetHUDIconMaterial
// ()
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UPrimalItem::GetHUDIconMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetHUDIconMaterial");

	UPrimalItem_GetHUDIconMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetEngramRequirementLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetEngramRequirementLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetEngramRequirementLevel");

	UPrimalItem_GetEngramRequirementLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetEggHatchTimeRemaining
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetEggHatchTimeRemaining(class UWorld* TheWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetEggHatchTimeRemaining");

	UPrimalItem_GetEggHatchTimeRemaining_Params params;
	params.TheWorld = TheWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetDurabilityPercentage
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::GetDurabilityPercentage()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetDurabilityPercentage");

	UPrimalItem_GetDurabilityPercentage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetCustomItemData
// ()
// Parameters:
// struct FName                   CustomDataName                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FCustomItemData         OutData                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::GetCustomItemData(const struct FName& CustomDataName, struct FCustomItemData* OutData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetCustomItemData");

	UPrimalItem_GetCustomItemData_Params params;
	params.CustomDataName = CustomDataName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutData != nullptr)
		*OutData = params.OutData;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetCraftingResourceRequirement
// ()
// Parameters:
// int                            CraftingResourceIndex          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetCraftingResourceRequirement(int CraftingResourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetCraftingResourceRequirement");

	UPrimalItem_GetCraftingResourceRequirement_Params params;
	params.CraftingResourceIndex = CraftingResourceIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetComponentToAttach
// ()
// Parameters:
// int                            attachmentIndex                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  UseOtherActor                  (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* UPrimalItem::GetComponentToAttach(int attachmentIndex, class AActor* UseOtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetComponentToAttach");

	UPrimalItem_GetComponentToAttach_Params params;
	params.attachmentIndex = attachmentIndex;
	params.UseOtherActor = UseOtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetBuffToGiveOwnerWhenEquipped
// ()
// Parameters:
// bool                           bForceResolveSoftRef           (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UPrimalItem::GetBuffToGiveOwnerWhenEquipped(bool bForceResolveSoftRef)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetBuffToGiveOwnerWhenEquipped");

	UPrimalItem_GetBuffToGiveOwnerWhenEquipped_Params params;
	params.bForceResolveSoftRef = bForceResolveSoftRef;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetAttachedComponentsNum
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::GetAttachedComponentsNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetAttachedComponentsNum");

	UPrimalItem_GetAttachedComponentsNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetAttachedComponent
// ()
// Parameters:
// int                            attachmentIndex                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  UseOtherActor                  (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* UPrimalItem::GetAttachedComponent(int attachmentIndex, class AActor* UseOtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetAttachedComponent");

	UPrimalItem_GetAttachedComponent_Params params;
	params.attachmentIndex = attachmentIndex;
	params.UseOtherActor = UseOtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.GetActualEquipmentType
// ()
// Parameters:
// bool                           bGetBaseValue                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalEquipmentType> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPrimalEquipmentType> UPrimalItem::GetActualEquipmentType(bool bGetBaseValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.GetActualEquipmentType");

	UPrimalItem_GetActualEquipmentType_Params params;
	params.bGetBaseValue = bGetBaseValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.FinishRepairing
// ()

void UPrimalItem::FinishRepairing()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.FinishRepairing");

	UPrimalItem_FinishRepairing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.EquippedBlueprintTick
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::EquippedBlueprintTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.EquippedBlueprintTick");

	UPrimalItem_EquippedBlueprintTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.CreateItemFromNetInfo
// ()
// Parameters:
// struct FItemNetInfo            newItemInfo                    (ConstParm, Parm, OutParm, ReferenceParm)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalItem::CreateItemFromNetInfo(const struct FItemNetInfo& newItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CreateItemFromNetInfo");

	UPrimalItem_CreateItemFromNetInfo_Params params;
	params.newItemInfo = newItemInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CreateFromBytes
// ()
// Parameters:
// TArray<unsigned char>          Bytes                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalItem::CreateFromBytes(TArray<unsigned char> Bytes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CreateFromBytes");

	UPrimalItem_CreateFromBytes_Params params;
	params.Bytes = Bytes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.Crafted
// ()
// Parameters:
// bool                           bWasCraftedFromEngram          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::Crafted(bool bWasCraftedFromEngram)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.Crafted");

	UPrimalItem_Crafted_Params params;
	params.bWasCraftedFromEngram = bWasCraftedFromEngram;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.CraftBlueprint
// ()
// Parameters:
// bool                           bConsumeResources              (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::CraftBlueprint(bool bConsumeResources)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CraftBlueprint");

	UPrimalItem_CraftBlueprint_Params params;
	params.bConsumeResources = bConsumeResources;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ClientUpdatedWeaponClipAmmo
// ()

void UPrimalItem::ClientUpdatedWeaponClipAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ClientUpdatedWeaponClipAmmo");

	UPrimalItem_ClientUpdatedWeaponClipAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.CanUseWithItemSource
// ()
// Parameters:
// class UPrimalItem*             DestinationItem                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanUseWithItemSource(class UPrimalItem* DestinationItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanUseWithItemSource");

	UPrimalItem_CanUseWithItemSource_Params params;
	params.DestinationItem = DestinationItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CanUseWithItemDestination
// ()
// Parameters:
// class UPrimalItem*             SourceItem                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanUseWithItemDestination(class UPrimalItem* SourceItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanUseWithItemDestination");

	UPrimalItem_CanUseWithItemDestination_Params params;
	params.SourceItem = SourceItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CanUse
// ()
// Parameters:
// bool                           bIgnoreCooldown                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanUse(bool bIgnoreCooldown)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanUse");

	UPrimalItem_CanUse_Params params;
	params.bIgnoreCooldown = bIgnoreCooldown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CanSpoil
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanSpoil()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanSpoil");

	UPrimalItem_CanSpoil_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CanRepair
// ()
// Parameters:
// bool                           bIgnoreInventoryRequirement    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanRepair(bool bIgnoreInventoryRequirement)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanRepair");

	UPrimalItem_CanRepair_Params params;
	params.bIgnoreInventoryRequirement = bIgnoreInventoryRequirement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CanFullyCraft
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanFullyCraft()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanFullyCraft");

	UPrimalItem_CanFullyCraft_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CanDrop
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanDrop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanDrop");

	UPrimalItem_CanDrop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.CanCraft
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::CanCraft()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.CanCraft");

	UPrimalItem_CanCraft_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPUsedOntoItem
// ()
// Parameters:
// class UPrimalItem*             DestinationItem                (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalData                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPUsedOntoItem(class UPrimalItem* DestinationItem, int AdditionalData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPUsedOntoItem");

	UPrimalItem_BPUsedOntoItem_Params params;
	params.DestinationItem = DestinationItem;
	params.AdditionalData = AdditionalData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPTributeItemUploaded
// ()
// Parameters:
// class UObject*                 ContextObject                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPTributeItemUploaded(class UObject* ContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPTributeItemUploaded");

	UPrimalItem_BPTributeItemUploaded_Params params;
	params.ContextObject = ContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPTributeItemDownloaded
// ()
// Parameters:
// class UObject*                 ContextObject                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPTributeItemDownloaded(class UObject* ContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPTributeItemDownloaded");

	UPrimalItem_BPTributeItemDownloaded_Params params;
	params.ContextObject = ContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPSupportUseOntoItem
// ()
// Parameters:
// class UPrimalItem*             DestinationItem                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPSupportUseOntoItem(class UPrimalItem* DestinationItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPSupportUseOntoItem");

	UPrimalItem_BPSupportUseOntoItem_Params params;
	params.DestinationItem = DestinationItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPSetWeaponClipAmmo
// ()
// Parameters:
// int                            NewClipAmmo                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPSetWeaponClipAmmo(int NewClipAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPSetWeaponClipAmmo");

	UPrimalItem_BPSetWeaponClipAmmo_Params params;
	params.NewClipAmmo = NewClipAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPSetupHUDIconMaterial
// ()
// Parameters:
// class UMaterialInstanceDynamic* theMID                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPSetupHUDIconMaterial(class UMaterialInstanceDynamic* theMID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPSetupHUDIconMaterial");

	UPrimalItem_BPSetupHUDIconMaterial_Params params;
	params.theMID = theMID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPServerHandleItemNetExecCommand
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimalItem::BPServerHandleItemNetExecCommand(class AShooterPlayerController* ForPC, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPServerHandleItemNetExecCommand");

	UPrimalItem_BPServerHandleItemNetExecCommand_Params params;
	params.ForPC = ForPC;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPPreventWeaponEquip
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPPreventWeaponEquip()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPPreventWeaponEquip");

	UPrimalItem_BPPreventWeaponEquip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPPreventUseOntoItem
// ()
// Parameters:
// class UPrimalItem*             DestinationItem                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPPreventUseOntoItem(class UPrimalItem* DestinationItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPPreventUseOntoItem");

	UPrimalItem_BPPreventUseOntoItem_Params params;
	params.DestinationItem = DestinationItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPPreventEquip
// ()
// Parameters:
// class UPrimalInventoryComponent* toInventory                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPPreventEquip(class UPrimalInventoryComponent* toInventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPPreventEquip");

	UPrimalItem_BPPreventEquip_Params params;
	params.toInventory = toInventory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPPreUseItem
// ()

void UPrimalItem::BPPreUseItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPPreUseItem");

	UPrimalItem_BPPreUseItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPPreInitializeItem
// ()
// Parameters:
// class UWorld*                  OptionalInitWorld              (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPPreInitializeItem(class UWorld* OptionalInitWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPPreInitializeItem");

	UPrimalItem_BPPreInitializeItem_Params params;
	params.OptionalInitWorld = OptionalInitWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPPostInitializeItem
// ()
// Parameters:
// class UWorld*                  OptionalInitWorld              (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPPostInitializeItem(class UWorld* OptionalInitWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPPostInitializeItem");

	UPrimalItem_BPPostInitializeItem_Params params;
	params.OptionalInitWorld = OptionalInitWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPPostAddBuffToGiveOwnerCharacter
// ()
// Parameters:
// class APrimalCharacter*        OwnerCharacter                 (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalBuff*             Buff                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPPostAddBuffToGiveOwnerCharacter(class APrimalCharacter* OwnerCharacter, class APrimalBuff* Buff)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPPostAddBuffToGiveOwnerCharacter");

	UPrimalItem_BPPostAddBuffToGiveOwnerCharacter_Params params;
	params.OwnerCharacter = OwnerCharacter;
	params.Buff = Buff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPOverrideCraftingConsumption
// ()
// Parameters:
// int                            AmountToConsume                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPOverrideCraftingConsumption(int AmountToConsume)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPOverrideCraftingConsumption");

	UPrimalItem_BPOverrideCraftingConsumption_Params params;
	params.AmountToConsume = AmountToConsume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPNotifyDropped
// ()
// Parameters:
// class APrimalCharacter*        FromCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWasThrown                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPNotifyDropped(class APrimalCharacter* FromCharacter, bool bWasThrown)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPNotifyDropped");

	UPrimalItem_BPNotifyDropped_Params params;
	params.FromCharacter = FromCharacter;
	params.bWasThrown = bWasThrown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPMatchesItemID
// ()
// Parameters:
// int                            ItemID1                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemID2                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPMatchesItemID(int ItemID1, int ItemID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPMatchesItemID");

	UPrimalItem_BPMatchesItemID_Params params;
	params.ItemID1 = ItemID1;
	params.ItemID2 = ItemID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPMakeItemID
// ()
// Parameters:
// int                            TheItemID1                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            TheItemID2                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FItemNetID UPrimalItem::BPMakeItemID(int TheItemID1, int TheItemID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPMakeItemID");

	UPrimalItem_BPMakeItemID_Params params;
	params.TheItemID1 = TheItemID1;
	params.TheItemID2 = TheItemID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPItemBroken
// ()

void UPrimalItem::BPItemBroken()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPItemBroken");

	UPrimalItem_BPItemBroken_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPItemBelowDurabilityThreshold
// ()

void UPrimalItem::BPItemBelowDurabilityThreshold()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPItemBelowDurabilityThreshold");

	UPrimalItem_BPItemBelowDurabilityThreshold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPIsValidForCrafting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPIsValidForCrafting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPIsValidForCrafting");

	UPrimalItem_BPIsValidForCrafting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPInitItemColors
// ()
// Parameters:
// TArray<int>                    ColorIDs                       (Parm, OutParm, ZeroConstructor)

void UPrimalItem::BPInitItemColors(TArray<int>* ColorIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPInitItemColors");

	UPrimalItem_BPInitItemColors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ColorIDs != nullptr)
		*ColorIDs = params.ColorIDs;
}


// Function ShooterGame.PrimalItem.BPInitIconMaterial
// ()

void UPrimalItem::BPInitIconMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPInitIconMaterial");

	UPrimalItem_BPInitIconMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPInitFromItemNetInfo
// ()

void UPrimalItem::BPInitFromItemNetInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPInitFromItemNetInfo");

	UPrimalItem_BPInitFromItemNetInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPGetSkinnedCustomInventoryWidgetText
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::BPGetSkinnedCustomInventoryWidgetText()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetSkinnedCustomInventoryWidgetText");

	UPrimalItem_BPGetSkinnedCustomInventoryWidgetText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetItemStatRandomValue
// ()
// Parameters:
// float                          QualityLevel                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            idx                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalItem::BPGetItemStatRandomValue(float QualityLevel, int idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemStatRandomValue");

	UPrimalItem_BPGetItemStatRandomValue_Params params;
	params.QualityLevel = QualityLevel;
	params.idx = idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetItemStatModifier
// ()
// Parameters:
// int                            idx                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemStatValue                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::BPGetItemStatModifier(int idx, int ItemStatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemStatModifier");

	UPrimalItem_BPGetItemStatModifier_Params params;
	params.idx = idx;
	params.ItemStatValue = ItemStatValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetItemNetInfo
// ()

void UPrimalItem::BPGetItemNetInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemNetInfo");

	UPrimalItem_BPGetItemNetInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPGetItemName
// ()
// Parameters:
// class FString                  ItemNameIn                     (Parm, ZeroConstructor)
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::BPGetItemName(const class FString& ItemNameIn, class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemName");

	UPrimalItem_BPGetItemName_Params params;
	params.ItemNameIn = ItemNameIn;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetItemID
// ()
// Parameters:
// int                            ItemID1                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            ItemID2                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPGetItemID(int* ItemID1, int* ItemID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemID");

	UPrimalItem_BPGetItemID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ItemID1 != nullptr)
		*ItemID1 = params.ItemID1;
	if (ItemID2 != nullptr)
		*ItemID2 = params.ItemID2;
}


// Function ShooterGame.PrimalItem.BPGetItemIcon
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture2D* UPrimalItem::BPGetItemIcon(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemIcon");

	UPrimalItem_BPGetItemIcon_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetItemDurabilityPercentage
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::BPGetItemDurabilityPercentage()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemDurabilityPercentage");

	UPrimalItem_BPGetItemDurabilityPercentage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetItemDescription
// ()
// Parameters:
// class FString                  InDescription                  (Parm, ZeroConstructor)
// bool                           bGetLongDescription            (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::BPGetItemDescription(const class FString& InDescription, bool bGetLongDescription, class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetItemDescription");

	UPrimalItem_BPGetItemDescription_Params params;
	params.InDescription = InDescription;
	params.bGetLongDescription = bGetLongDescription;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetFuelParticleSystemOverride
// ()
// Parameters:
// class APrimalStructure*        ForStructure                   (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystem*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UParticleSystem* UPrimalItem::BPGetFuelParticleSystemOverride(class APrimalStructure* ForStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetFuelParticleSystemOverride");

	UPrimalItem_BPGetFuelParticleSystemOverride_Params params;
	params.ForStructure = ForStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetFuelAudioOverride
// ()
// Parameters:
// class APrimalStructure*        ForStructure                   (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USoundBase* UPrimalItem::BPGetFuelAudioOverride(class APrimalStructure* ForStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetFuelAudioOverride");

	UPrimalItem_BPGetFuelAudioOverride_Params params;
	params.ForStructure = ForStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetCustomInventoryWidgetTextColor
// ()
// Parameters:
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FColor UPrimalItem::BPGetCustomInventoryWidgetTextColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetCustomInventoryWidgetTextColor");

	UPrimalItem_BPGetCustomInventoryWidgetTextColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetCustomInventoryWidgetText
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::BPGetCustomInventoryWidgetText()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetCustomInventoryWidgetText");

	UPrimalItem_BPGetCustomInventoryWidgetText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetCustomIconMaterialParent
// ()
// Parameters:
// class UMaterialInterface*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInterface* UPrimalItem::BPGetCustomIconMaterialParent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetCustomIconMaterialParent");

	UPrimalItem_BPGetCustomIconMaterialParent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetCustomDurabilityTextColor
// ()
// Parameters:
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FColor UPrimalItem::BPGetCustomDurabilityTextColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetCustomDurabilityTextColor");

	UPrimalItem_BPGetCustomDurabilityTextColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetCustomDurabilityText
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::BPGetCustomDurabilityText()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetCustomDurabilityText");

	UPrimalItem_BPGetCustomDurabilityText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPGetCustomAutoDecreaseDurabilityPerInterval
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalItem::BPGetCustomAutoDecreaseDurabilityPerInterval()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPGetCustomAutoDecreaseDurabilityPerInterval");

	UPrimalItem_BPGetCustomAutoDecreaseDurabilityPerInterval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPForceAllowRemoteAddToInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* toInventory                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPForceAllowRemoteAddToInventory(class UPrimalInventoryComponent* toInventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPForceAllowRemoteAddToInventory");

	UPrimalItem_BPForceAllowRemoteAddToInventory_Params params;
	params.toInventory = toInventory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPEquippedItemOnXPEarning
// ()
// Parameters:
// class APrimalCharacter*        forChar                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          howMuchXP                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EXPType>           TheXPType                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPEquippedItemOnXPEarning(class APrimalCharacter* forChar, float howMuchXP, TEnumAsByte<EXPType> TheXPType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPEquippedItemOnXPEarning");

	UPrimalItem_BPEquippedItemOnXPEarning_Params params;
	params.forChar = forChar;
	params.howMuchXP = howMuchXP;
	params.TheXPType = TheXPType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPDrawItemIcon
// ()
// Parameters:
// class UCanvas*                 ItemCanvas                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ItemCanvasSize                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector2D               ItemCanvasScale                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bItemEnabled                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TheTintColor                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPrimalItem::BPDrawItemIcon(class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize, const struct FVector2D& ItemCanvasScale, bool bItemEnabled, const struct FLinearColor& TheTintColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPDrawItemIcon");

	UPrimalItem_BPDrawItemIcon_Params params;
	params.ItemCanvas = ItemCanvas;
	params.ItemCanvasSize = ItemCanvasSize;
	params.ItemCanvasScale = ItemCanvasScale;
	params.bItemEnabled = bItemEnabled;
	params.TheTintColor = TheTintColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPCrafted
// ()

void UPrimalItem::BPCrafted()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPCrafted");

	UPrimalItem_BPCrafted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPConsumeProjectileImpact
// ()
// Parameters:
// class AShooterProjectile*      theProjectile                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPConsumeProjectileImpact(class AShooterProjectile* theProjectile, const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPConsumeProjectileImpact");

	UPrimalItem_BPConsumeProjectileImpact_Params params;
	params.theProjectile = theProjectile;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPClientHandleItemNetExecCommand
// ()
// Parameters:
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BPClientHandleItemNetExecCommand(const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPClientHandleItemNetExecCommand");

	UPrimalItem_BPClientHandleItemNetExecCommand_Params params;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BPCanUse
// ()
// Parameters:
// bool                           bIgnoreCooldown                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPCanUse(bool bIgnoreCooldown)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPCanUse");

	UPrimalItem_BPCanUse_Params params;
	params.bIgnoreCooldown = bIgnoreCooldown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPCanAddToInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* toInventory                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPCanAddToInventory(class UPrimalInventoryComponent* toInventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPCanAddToInventory");

	UPrimalItem_BPCanAddToInventory_Params params;
	params.toInventory = toInventory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPAllowRemoteRemoveFromInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* invComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AShooterPlayerController* ByPC                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequestedByPlayer             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPAllowRemoteRemoveFromInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPAllowRemoteRemoveFromInventory");

	UPrimalItem_BPAllowRemoteRemoveFromInventory_Params params;
	params.invComp = invComp;
	params.ByPC = ByPC;
	params.bRequestedByPlayer = bRequestedByPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPAllowRemoteAddToInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* invComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AShooterPlayerController* ByPC                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequestedByPlayer             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::BPAllowRemoteAddToInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPAllowRemoteAddToInventory");

	UPrimalItem_BPAllowRemoteAddToInventory_Params params;
	params.invComp = invComp;
	params.ByPC = ByPC;
	params.bRequestedByPlayer = bRequestedByPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPAllowCrafting
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalItem::BPAllowCrafting(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPAllowCrafting");

	UPrimalItem_BPAllowCrafting_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.BPAddedAttachments
// ()

void UPrimalItem::BPAddedAttachments()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BPAddedAttachments");

	UPrimalItem_BPAddedAttachments_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BlueprintUsed
// ()

void UPrimalItem::BlueprintUsed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BlueprintUsed");

	UPrimalItem_BlueprintUsed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BlueprintUnequipped
// ()

void UPrimalItem::BlueprintUnequipped()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BlueprintUnequipped");

	UPrimalItem_BlueprintUnequipped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BlueprintOwnerPosssessed
// ()
// Parameters:
// class AController*             PossessedByController          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BlueprintOwnerPosssessed(class AController* PossessedByController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BlueprintOwnerPosssessed");

	UPrimalItem_BlueprintOwnerPosssessed_Params params;
	params.PossessedByController = PossessedByController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.BlueprintEquipped
// ()
// Parameters:
// bool                           bIsFromSaveGame                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::BlueprintEquipped(bool bIsFromSaveGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.BlueprintEquipped");

	UPrimalItem_BlueprintEquipped_Params params;
	params.bIsFromSaveGame = bIsFromSaveGame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ApplyingSkinOntoItem
// ()
// Parameters:
// class UPrimalItem*             ToOwnerItem                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFirstTime                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::ApplyingSkinOntoItem(class UPrimalItem* ToOwnerItem, bool bIsFirstTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ApplyingSkinOntoItem");

	UPrimalItem_ApplyingSkinOntoItem_Params params;
	params.ToOwnerItem = ToOwnerItem;
	params.bIsFirstTime = bIsFirstTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.ApplyColorsFromStructure
// ()
// Parameters:
// class APrimalStructure*        theStructure                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::ApplyColorsFromStructure(class APrimalStructure* theStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.ApplyColorsFromStructure");

	UPrimalItem_ApplyColorsFromStructure_Params params;
	params.theStructure = theStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.AllowRemoteAddToInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* invComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AShooterPlayerController* ByPC                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequestedByPlayer             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalItem::AllowRemoteAddToInventory(class UPrimalInventoryComponent* invComp, class AShooterPlayerController* ByPC, bool bRequestedByPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.AllowRemoteAddToInventory");

	UPrimalItem_AllowRemoteAddToInventory_Params params;
	params.invComp = invComp;
	params.ByPC = ByPC;
	params.bRequestedByPlayer = bRequestedByPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.AddToSlot
// ()
// Parameters:
// int                            theSlotIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::AddToSlot(int theSlotIndex, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.AddToSlot");

	UPrimalItem_AddToSlot_Params params;
	params.theSlotIndex = theSlotIndex;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalItem.AddNewItem
// ()
// Parameters:
// class UClass*                  ItemArchetype                  (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalInventoryComponent* GiveToInventory                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontStack                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ItemQuality                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceNoBlueprint              (Parm, ZeroConstructor, IsPlainOldData)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceBlueprint                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxItemDifficultyClamp         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CreateOnClient                 (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ApplyItemSkin                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinRandomQuality               (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalItem::AddNewItem(class UClass* ItemArchetype, class UPrimalInventoryComponent* GiveToInventory, bool bEquipItem, bool bDontStack, float ItemQuality, bool bForceNoBlueprint, int quantityOverride, bool bForceBlueprint, float MaxItemDifficultyClamp, bool CreateOnClient, class UClass* ApplyItemSkin, float MinRandomQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.AddNewItem");

	UPrimalItem_AddNewItem_Params params;
	params.ItemArchetype = ItemArchetype;
	params.GiveToInventory = GiveToInventory;
	params.bEquipItem = bEquipItem;
	params.bDontStack = bDontStack;
	params.ItemQuality = ItemQuality;
	params.bForceNoBlueprint = bForceNoBlueprint;
	params.quantityOverride = quantityOverride;
	params.bForceBlueprint = bForceBlueprint;
	params.MaxItemDifficultyClamp = MaxItemDifficultyClamp;
	params.CreateOnClient = CreateOnClient;
	params.ApplyItemSkin = ApplyItemSkin;
	params.MinRandomQuality = MinRandomQuality;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalItem.AddItemDurability
// ()
// Parameters:
// float                          durabilityToAdd                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalItem::AddItemDurability(float durabilityToAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalItem.AddItemDurability");

	UPrimalItem_AddItemDurability_Params params;
	params.durabilityToAdd = durabilityToAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnSaveItemsFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)

void UAllClustersInventory::OnSaveItemsFinished__DelegateSignature(bool Success, const class FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnSaveItemsFinished__DelegateSignature");

	UAllClustersInventory_OnSaveItemsFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnRemoveAllClusterInventoryItemsFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<struct FItemNetID>      ItemsIds                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UAllClustersInventory::OnRemoveAllClusterInventoryItemsFinished__DelegateSignature(bool Success, const class FString& UserId, TArray<struct FItemNetID> ItemsIds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnRemoveAllClusterInventoryItemsFinished__DelegateSignature");

	UAllClustersInventory_OnRemoveAllClusterInventoryItemsFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.UserId = UserId;
	params.ItemsIds = ItemsIds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnReadLockFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// bool                           Locked                         (Parm, ZeroConstructor, IsPlainOldData)

void UAllClustersInventory::OnReadLockFinished__DelegateSignature(bool Success, const class FString& UserId, bool Locked)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnReadLockFinished__DelegateSignature");

	UAllClustersInventory_OnReadLockFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.UserId = UserId;
	params.Locked = Locked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnLoadItemsFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<struct FItemNetInfo>    Items                          (Parm, OutParm, ZeroConstructor)

void UAllClustersInventory::OnLoadItemsFinished__DelegateSignature(bool Success, const class FString& UserId, TArray<struct FItemNetInfo>* Items)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnLoadItemsFinished__DelegateSignature");

	UAllClustersInventory_OnLoadItemsFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Items != nullptr)
		*Items = params.Items;
}


// Function ShooterGame.AllClustersInventory.OnFinishedSaveForChangingItems
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)

void UAllClustersInventory::OnFinishedSaveForChangingItems(bool Success, const class FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnFinishedSaveForChangingItems");

	UAllClustersInventory_OnFinishedSaveForChangingItems_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnFinishedReadLockForCreateLock
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// bool                           Locked                         (Parm, ZeroConstructor, IsPlainOldData)

void UAllClustersInventory::OnFinishedReadLockForCreateLock(bool Success, const class FString& UserId, bool Locked)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnFinishedReadLockForCreateLock");

	UAllClustersInventory_OnFinishedReadLockForCreateLock_Params params;
	params.Success = Success;
	params.UserId = UserId;
	params.Locked = Locked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnFinishedLoadForChangingItems
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<struct FItemNetInfo>    ArkItems                       (Parm, OutParm, ZeroConstructor)

void UAllClustersInventory::OnFinishedLoadForChangingItems(bool Success, const class FString& UserId, TArray<struct FItemNetInfo>* ArkItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnFinishedLoadForChangingItems");

	UAllClustersInventory_OnFinishedLoadForChangingItems_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ArkItems != nullptr)
		*ArkItems = params.ArkItems;
}


// Function ShooterGame.AllClustersInventory.OnFinishedCreateLockForChangingItems
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)

void UAllClustersInventory::OnFinishedCreateLockForChangingItems(bool Success, const class FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnFinishedCreateLockForChangingItems");

	UAllClustersInventory_OnFinishedCreateLockForChangingItems_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnFinishedClearLockForChangingItems
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)

void UAllClustersInventory::OnFinishedClearLockForChangingItems(bool Success, const class FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnFinishedClearLockForChangingItems");

	UAllClustersInventory_OnFinishedClearLockForChangingItems_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnCreateLockFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)

void UAllClustersInventory::OnCreateLockFinished__DelegateSignature(bool Success, const class FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnCreateLockFinished__DelegateSignature");

	UAllClustersInventory_OnCreateLockFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnClearLockFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)

void UAllClustersInventory::OnClearLockFinished__DelegateSignature(bool Success, const class FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnClearLockFinished__DelegateSignature");

	UAllClustersInventory_OnClearLockFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.AllClustersInventory.OnAddAllClustersInventoryItemsFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<int>                    MasterIndexNum                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UAllClustersInventory::OnAddAllClustersInventoryItemsFinished__DelegateSignature(bool Success, const class FString& UserId, TArray<int> MasterIndexNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.AllClustersInventory.OnAddAllClustersInventoryItemsFinished__DelegateSignature");

	UAllClustersInventory_OnAddAllClustersInventoryItemsFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.UserId = UserId;
	params.MasterIndexNum = MasterIndexNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalLocalProfile.OnSaveArkTributeFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalLocalProfile::OnSaveArkTributeFinished__DelegateSignature(bool Success)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalLocalProfile.OnSaveArkTributeFinished__DelegateSignature");

	UPrimalLocalProfile_OnSaveArkTributeFinished__DelegateSignature_Params params;
	params.Success = Success;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalLocalProfile.OnLoadArkTributePlayersDataFinished__DelegateSignature
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FArkTributePlayerData> PlayersData                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            FailureResponseCode            (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalLocalProfile::OnLoadArkTributePlayersDataFinished__DelegateSignature(bool Success, TArray<struct FArkTributePlayerData> PlayersData, int FailureResponseCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalLocalProfile.OnLoadArkTributePlayersDataFinished__DelegateSignature");

	UPrimalLocalProfile_OnLoadArkTributePlayersDataFinished__DelegateSignature_Params params;
	params.Success = Success;
	params.PlayersData = PlayersData;
	params.FailureResponseCode = FailureResponseCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalLocalProfile.OnFinishedLoadingAllClustersItems
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<struct FItemNetInfo>    ArkItems                       (Parm, OutParm, ZeroConstructor)

void UPrimalLocalProfile::OnFinishedLoadingAllClustersItems(bool Success, const class FString& UserId, TArray<struct FItemNetInfo>* ArkItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalLocalProfile.OnFinishedLoadingAllClustersItems");

	UPrimalLocalProfile_OnFinishedLoadingAllClustersItems_Params params;
	params.Success = Success;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ArkItems != nullptr)
		*ArkItems = params.ArkItems;
}


// Function ShooterGame.PrimalLocalProfile.OnAllClustersItemsRemoved
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<struct FItemNetID>      ItemsIds                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UPrimalLocalProfile::OnAllClustersItemsRemoved(bool Success, const class FString& UserId, TArray<struct FItemNetID> ItemsIds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalLocalProfile.OnAllClustersItemsRemoved");

	UPrimalLocalProfile_OnAllClustersItemsRemoved_Params params;
	params.Success = Success;
	params.UserId = UserId;
	params.ItemsIds = ItemsIds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.SimulateInputKey
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// bool                           bPressed                       (Parm, ZeroConstructor, IsPlainOldData)

void ABasePlayerController::SimulateInputKey(const struct FKey& Key, bool bPressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.SimulateInputKey");

	ABasePlayerController_SimulateInputKey_Params params;
	params.Key = Key;
	params.bPressed = bPressed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.ServerCheat
// ()
// Parameters:
// class FString                  Msg                            (Parm, ZeroConstructor)

void ABasePlayerController::ServerCheat(const class FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.ServerCheat");

	ABasePlayerController_ServerCheat_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.Say
// ()
// Parameters:
// class FString                  Msg                            (Parm, ZeroConstructor)

void ABasePlayerController::Say(const class FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.Say");

	ABasePlayerController_Say_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.ClientStartOnlineGame
// ()

void ABasePlayerController::ClientStartOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.ClientStartOnlineGame");

	ABasePlayerController_ClientStartOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.ClientSetSpectatorCamera
// ()
// Parameters:
// struct FVector                 CameraLocation                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                CameraRotation                 (Parm, ZeroConstructor, IsPlainOldData)

void ABasePlayerController::ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.ClientSetSpectatorCamera");

	ABasePlayerController_ClientSetSpectatorCamera_Params params;
	params.CameraLocation = CameraLocation;
	params.CameraRotation = CameraRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.ClientSendRoundEndEvent
// ()
// Parameters:
// bool                           bIsWinner                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ExpendedTimeInSeconds          (Parm, ZeroConstructor, IsPlainOldData)

void ABasePlayerController::ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.ClientSendRoundEndEvent");

	ABasePlayerController_ClientSendRoundEndEvent_Params params;
	params.bIsWinner = bIsWinner;
	params.ExpendedTimeInSeconds = ExpendedTimeInSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.ClientGameStarted
// ()

void ABasePlayerController::ClientGameStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.ClientGameStarted");

	ABasePlayerController_ClientGameStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BasePlayerController.ClientEndOnlineGame
// ()

void ABasePlayerController::ClientEndOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BasePlayerController.ClientEndOnlineGame");

	ABasePlayerController_ClientEndOnlineGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterHUD.ShowSpawnUI
// ()
// Parameters:
// class APrimalStructure*        FastTravelIgnoreBed            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterHUD::ShowSpawnUI(class APrimalStructure* FastTravelIgnoreBed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.ShowSpawnUI");

	AShooterHUD_ShowSpawnUI_Params params;
	params.FastTravelIgnoreBed = FastTravelIgnoreBed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterHUD.ShowPinEntryUI
// ()
// Parameters:
// class AActor*                  aTargetable                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsSetting                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            CustomIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterHUD::ShowPinEntryUI(class AActor* aTargetable, bool bIsSetting, int CustomIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.ShowPinEntryUI");

	AShooterHUD_ShowPinEntryUI_Params params;
	params.aTargetable = aTargetable;
	params.bIsSetting = bIsSetting;
	params.CustomIndex = CustomIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterHUD.ShowInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UUI_Inventory*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UUI_Inventory* AShooterHUD::ShowInventory(class UPrimalInventoryComponent* InventoryComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.ShowInventory");

	AShooterHUD_ShowInventory_Params params;
	params.InventoryComp = InventoryComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.ShowEngramsMenu
// ()
// Parameters:
// bool                           bInputDelay                    (Parm, ZeroConstructor, IsPlainOldData)
// class UUI_EngramsMenu*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UUI_EngramsMenu* AShooterHUD::ShowEngramsMenu(bool bInputDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.ShowEngramsMenu");

	AShooterHUD_ShowEngramsMenu_Params params;
	params.bInputDelay = bInputDelay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.ShowChatBox
// ()
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFromNewChat                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterHUD::ShowChatBox(bool bShow, bool bIsFromNewChat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.ShowChatBox");

	AShooterHUD_ShowChatBox_Params params;
	params.bShow = bShow;
	params.bIsFromNewChat = bIsFromNewChat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterHUD.HideChatBox
// ()

void AShooterHUD::HideChatBox()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.HideChatBox");

	AShooterHUD_HideChatBox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterHUD.GetSubtitlesWidget
// ()
// Parameters:
// class UUI_Subtitles*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UUI_Subtitles* AShooterHUD::GetSubtitlesWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.GetSubtitlesWidget");

	AShooterHUD_GetSubtitlesWidget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.GetShooterPC
// ()
// Parameters:
// class AShooterPlayerController* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterPlayerController* AShooterHUD::GetShooterPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.GetShooterPC");

	AShooterHUD_GetShooterPC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.GetPlayerOwner
// ()
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerController* AShooterHUD::GetPlayerOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.GetPlayerOwner");

	AShooterHUD_GetPlayerOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.GetCurrentCrosshairScreenLocation
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D AShooterHUD::GetCurrentCrosshairScreenLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.GetCurrentCrosshairScreenLocation");

	AShooterHUD_GetCurrentCrosshairScreenLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.GetChatBoxWidget
// ()
// Parameters:
// class UUI_ChatBox*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UUI_ChatBox* AShooterHUD::GetChatBoxWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.GetChatBoxWidget");

	AShooterHUD_GetChatBoxWidget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.GetAdditionalExplorerNoteDynamicMaterialParams
// ()
// Parameters:
// struct FExplorerNoteEntry      ExplorerNote                   (ConstParm, Parm, OutParm, ReferenceParm)
// TArray<struct FNameScalarPair> ScalarMaterialParams           (Parm, OutParm, ZeroConstructor)
// TArray<struct FNameColorPair>  ColorMaterialParams            (Parm, OutParm, ZeroConstructor)

void AShooterHUD::GetAdditionalExplorerNoteDynamicMaterialParams(const struct FExplorerNoteEntry& ExplorerNote, TArray<struct FNameScalarPair>* ScalarMaterialParams, TArray<struct FNameColorPair>* ColorMaterialParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.GetAdditionalExplorerNoteDynamicMaterialParams");

	AShooterHUD_GetAdditionalExplorerNoteDynamicMaterialParams_Params params;
	params.ExplorerNote = ExplorerNote;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScalarMaterialParams != nullptr)
		*ScalarMaterialParams = params.ScalarMaterialParams;
	if (ColorMaterialParams != nullptr)
		*ColorMaterialParams = params.ColorMaterialParams;
}


// Function ShooterGame.ShooterHUD.BPShowUIScene
// ()
// Parameters:
// class UClass*                  UISceneTemplate                (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 AssociatedObject1              (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 AssociatedObject2              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ExtraID1                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ExtraID2                       (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalUI*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalUI* AShooterHUD::BPShowUIScene(class UClass* UISceneTemplate, class UObject* AssociatedObject1, class UObject* AssociatedObject2, int ExtraID1, int ExtraID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.BPShowUIScene");

	AShooterHUD_BPShowUIScene_Params params;
	params.UISceneTemplate = UISceneTemplate;
	params.AssociatedObject1 = AssociatedObject1;
	params.AssociatedObject2 = AssociatedObject2;
	params.ExtraID1 = ExtraID1;
	params.ExtraID2 = ExtraID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterHUD.BPAddHUDNotification
// ()
// Parameters:
// class FString                  NotificationString             (Parm, ZeroConstructor)
// struct FColor                  NotificationColor              (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      NotificationMaterial           (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              NotificationTexture            (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayScale                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsSingleton                   (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              SoundToPlay                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            MessageTypeID                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemMsgType                    (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ItemName                       (Parm, ZeroConstructor)
// int                            ItemQuantity                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ItemQuantityFloat              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterHUD::BPAddHUDNotification(const class FString& NotificationString, const struct FColor& NotificationColor, class UMaterialInterface* NotificationMaterial, class UTexture2D* NotificationTexture, float DisplayTime, float DisplayScale, bool bIsSingleton, class USoundBase* SoundToPlay, int MessageTypeID, int ItemMsgType, class UClass* ItemClass, const class FString& ItemName, int ItemQuantity, float ItemQuantityFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterHUD.BPAddHUDNotification");

	AShooterHUD_BPAddHUDNotification_Params params;
	params.NotificationString = NotificationString;
	params.NotificationColor = NotificationColor;
	params.NotificationMaterial = NotificationMaterial;
	params.NotificationTexture = NotificationTexture;
	params.DisplayTime = DisplayTime;
	params.DisplayScale = DisplayScale;
	params.bIsSingleton = bIsSingleton;
	params.SoundToPlay = SoundToPlay;
	params.MessageTypeID = MessageTypeID;
	params.ItemMsgType = ItemMsgType;
	params.ItemClass = ItemClass;
	params.ItemName = ItemName;
	params.ItemQuantity = ItemQuantity;
	params.ItemQuantityFloat = ItemQuantityFloat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.UpdateTribeGroupInventoryRank
// ()
// Parameters:
// unsigned char                  NewRank                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::UpdateTribeGroupInventoryRank(unsigned char NewRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.UpdateTribeGroupInventoryRank");

	UPrimalInventoryComponent_UpdateTribeGroupInventoryRank_Params params;
	params.NewRank = NewRank;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.UpdateNetWeaponClipAmmo
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ammo                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::UpdateNetWeaponClipAmmo(class UPrimalItem* anItem, int ammo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.UpdateNetWeaponClipAmmo");

	UPrimalInventoryComponent_UpdateNetWeaponClipAmmo_Params params;
	params.anItem = anItem;
	params.ammo = ammo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.StopAllCraftingRepairing
// ()

void UPrimalInventoryComponent::StopAllCraftingRepairing()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.StopAllCraftingRepairing");

	UPrimalInventoryComponent_StopAllCraftingRepairing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.StaticDropNewItemWithInfo
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetInfo            ItemInfo                       (ConstParm, Parm, OutParm, ReferenceParm)
// class UClass*                  TheDroppedTemplateOverride     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                DroppedRotationOffset          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bOverrideSpawnTransform        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocationOverride               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                RotationOverride               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bPreventDropImpulse            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bThrow                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSecondaryAction               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetItemDropLocation           (Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMesh*             DroppedMeshOverride            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DroppedScaleOverride           (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      DroppedMaterialOverride        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DroppedLifeSpanOverride        (Parm, ZeroConstructor, IsPlainOldData)
// class ADroppedItem*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ADroppedItem* UPrimalInventoryComponent::StaticDropNewItemWithInfo(class AActor* forActor, const struct FItemNetInfo& ItemInfo, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.StaticDropNewItemWithInfo");

	UPrimalInventoryComponent_StaticDropNewItemWithInfo_Params params;
	params.forActor = forActor;
	params.ItemInfo = ItemInfo;
	params.TheDroppedTemplateOverride = TheDroppedTemplateOverride;
	params.DroppedRotationOffset = DroppedRotationOffset;
	params.bOverrideSpawnTransform = bOverrideSpawnTransform;
	params.LocationOverride = LocationOverride;
	params.RotationOverride = RotationOverride;
	params.bPreventDropImpulse = bPreventDropImpulse;
	params.bThrow = bThrow;
	params.bSecondaryAction = bSecondaryAction;
	params.bSetItemDropLocation = bSetItemDropLocation;
	params.DroppedMeshOverride = DroppedMeshOverride;
	params.DroppedScaleOverride = DroppedScaleOverride;
	params.DroppedMaterialOverride = DroppedMaterialOverride;
	params.DroppedLifeSpanOverride = DroppedLifeSpanOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.StaticDropNewItem
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  AnItemClass                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ItemQuality                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceNoBlueprint              (Parm, ZeroConstructor, IsPlainOldData)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceBlueprint                (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  TheDroppedTemplateOverride     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                DroppedRotationOffset          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bOverrideSpawnTransform        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocationOverride               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                RotationOverride               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bPreventDropImpulse            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bThrow                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSecondaryAction               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetItemDropLocation           (Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMesh*             DroppedMeshOverride            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DroppedScaleOverride           (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      DroppedMaterialOverride        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DroppedLifeSpanOverride        (Parm, ZeroConstructor, IsPlainOldData)
// class ADroppedItem*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ADroppedItem* UPrimalInventoryComponent::StaticDropNewItem(class AActor* forActor, class UClass* AnItemClass, float ItemQuality, bool bForceNoBlueprint, int quantityOverride, bool bForceBlueprint, class UClass* TheDroppedTemplateOverride, const struct FRotator& DroppedRotationOffset, bool bOverrideSpawnTransform, const struct FVector& LocationOverride, const struct FRotator& RotationOverride, bool bPreventDropImpulse, bool bThrow, bool bSecondaryAction, bool bSetItemDropLocation, class UStaticMesh* DroppedMeshOverride, const struct FVector& DroppedScaleOverride, class UMaterialInterface* DroppedMaterialOverride, float DroppedLifeSpanOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.StaticDropNewItem");

	UPrimalInventoryComponent_StaticDropNewItem_Params params;
	params.forActor = forActor;
	params.AnItemClass = AnItemClass;
	params.ItemQuality = ItemQuality;
	params.bForceNoBlueprint = bForceNoBlueprint;
	params.quantityOverride = quantityOverride;
	params.bForceBlueprint = bForceBlueprint;
	params.TheDroppedTemplateOverride = TheDroppedTemplateOverride;
	params.DroppedRotationOffset = DroppedRotationOffset;
	params.bOverrideSpawnTransform = bOverrideSpawnTransform;
	params.LocationOverride = LocationOverride;
	params.RotationOverride = RotationOverride;
	params.bPreventDropImpulse = bPreventDropImpulse;
	params.bThrow = bThrow;
	params.bSecondaryAction = bSecondaryAction;
	params.bSetItemDropLocation = bSetItemDropLocation;
	params.DroppedMeshOverride = DroppedMeshOverride;
	params.DroppedScaleOverride = DroppedScaleOverride;
	params.DroppedMaterialOverride = DroppedMaterialOverride;
	params.DroppedLifeSpanOverride = DroppedLifeSpanOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.SetNextItemSpoilingID
// ()
// Parameters:
// struct FItemNetID              NextItemID                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::SetNextItemSpoilingID(const struct FItemNetID& NextItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.SetNextItemSpoilingID");

	UPrimalInventoryComponent_SetNextItemSpoilingID_Params params;
	params.NextItemID = NextItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.SetNextItemConsumptionID
// ()
// Parameters:
// struct FItemNetID              NextItemID                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::SetNextItemConsumptionID(const struct FItemNetID& NextItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.SetNextItemConsumptionID");

	UPrimalInventoryComponent_SetNextItemConsumptionID_Params params;
	params.NextItemID = NextItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.SetCraftingEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::SetCraftingEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.SetCraftingEnabled");

	UPrimalInventoryComponent_SetCraftingEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ServerSplitItemStack
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            AmountToSplit                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ServerSplitItemStack(const struct FItemNetID& ItemId, int AmountToSplit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerSplitItemStack");

	UPrimalInventoryComponent_ServerSplitItemStack_Params params;
	params.ItemId = ItemId;
	params.AmountToSplit = AmountToSplit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ServerRepairItem
// ()
// Parameters:
// struct FItemNetID              ItemId                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AShooterPlayerController* ByPC                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRepairIgnoreInventoryRequirement (Parm, ZeroConstructor, IsPlainOldData)
// float                          RepairPercentage               (Parm, ZeroConstructor, IsPlainOldData)
// float                          RepairSpeedMultiplier          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ServerRepairItem(const struct FItemNetID& ItemId, class AShooterPlayerController* ByPC, bool bRepairIgnoreInventoryRequirement, float RepairPercentage, float RepairSpeedMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerRepairItem");

	UPrimalInventoryComponent_ServerRepairItem_Params params;
	params.ItemId = ItemId;
	params.ByPC = ByPC;
	params.bRepairIgnoreInventoryRequirement = bRepairIgnoreInventoryRequirement;
	params.RepairPercentage = RepairPercentage;
	params.RepairSpeedMultiplier = RepairSpeedMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ServerRemoveItemFromSlot
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ServerRemoveItemFromSlot(const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerRemoveItemFromSlot");

	UPrimalInventoryComponent_ServerRemoveItemFromSlot_Params params;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ServerMergeItemStack
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ServerMergeItemStack(const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerMergeItemStack");

	UPrimalInventoryComponent_ServerMergeItemStack_Params params;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ServerMakeRecipeItem
// ()
// Parameters:
// class APrimalStructureItemContainer* Container                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              NoteToConsume                  (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  RecipeItemTemplate             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  CustomName                     (Parm, ZeroConstructor)
// class FString                  CustomDescription              (Parm, ZeroConstructor)
// TArray<struct FColor>          CustomColors                   (ConstParm, Parm, ZeroConstructor)
// TArray<struct FCraftingResourceRequirement> CustomRequirements             (ConstParm, Parm, ZeroConstructor)

void UPrimalInventoryComponent::ServerMakeRecipeItem(class APrimalStructureItemContainer* Container, const struct FItemNetID& NoteToConsume, class UClass* RecipeItemTemplate, const class FString& CustomName, const class FString& CustomDescription, TArray<struct FColor> CustomColors, TArray<struct FCraftingResourceRequirement> CustomRequirements)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerMakeRecipeItem");

	UPrimalInventoryComponent_ServerMakeRecipeItem_Params params;
	params.Container = Container;
	params.NoteToConsume = NoteToConsume;
	params.RecipeItemTemplate = RecipeItemTemplate;
	params.CustomName = CustomName;
	params.CustomDescription = CustomDescription;
	params.CustomColors = CustomColors;
	params.CustomRequirements = CustomRequirements;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ServerForceMergeItemStack
// ()
// Parameters:
// struct FItemNetID              Item1ID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              Item2ID                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ServerForceMergeItemStack(const struct FItemNetID& Item1ID, const struct FItemNetID& Item2ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerForceMergeItemStack");

	UPrimalInventoryComponent_ServerForceMergeItemStack_Params params;
	params.Item1ID = Item1ID;
	params.Item2ID = Item2ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ServerCraftItem
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ByPC                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ServerCraftItem(class AShooterPlayerController* ByPC, struct FItemNetID* ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerCraftItem");

	UPrimalInventoryComponent_ServerCraftItem_Params params;
	params.ByPC = ByPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ItemId != nullptr)
		*ItemId = params.ItemId;
}


// Function ShooterGame.PrimalInventoryComponent.ServerAddItemToSlot
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            SlotIndex                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ServerAddItemToSlot(const struct FItemNetID& ItemId, int SlotIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ServerAddItemToSlot");

	UPrimalInventoryComponent_ServerAddItemToSlot_Params params;
	params.ItemId = ItemId;
	params.SlotIndex = SlotIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.RemoveItem
// ()
// Parameters:
// struct FItemNetID              ItemId                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bDoDrop                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSecondryAction                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceRemoval                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           showHUDMessage                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::RemoveItem(const struct FItemNetID& ItemId, bool bDoDrop, bool bSecondryAction, bool bForceRemoval, bool showHUDMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.RemoveItem");

	UPrimalInventoryComponent_RemoveItem_Params params;
	params.ItemId = ItemId;
	params.bDoDrop = bDoDrop;
	params.bSecondryAction = bSecondryAction;
	params.bForceRemoval = bForceRemoval;
	params.showHUDMessage = showHUDMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.RemoteInventoryAllowViewing
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAllowedDistanceOffset       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::RemoteInventoryAllowViewing(class AShooterPlayerController* PC, float MaxAllowedDistanceOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.RemoteInventoryAllowViewing");

	UPrimalInventoryComponent_RemoteInventoryAllowViewing_Params params;
	params.PC = PC;
	params.MaxAllowedDistanceOffset = MaxAllowedDistanceOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.RemoteInventoryAllowRepairingItems
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreEnabled                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::RemoteInventoryAllowRepairingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.RemoteInventoryAllowRepairingItems");

	UPrimalInventoryComponent_RemoteInventoryAllowRepairingItems_Params params;
	params.PC = PC;
	params.bIgnoreEnabled = bIgnoreEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.RemoteInventoryAllowCraftingItems
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreEnabled                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::RemoteInventoryAllowCraftingItems(class AShooterPlayerController* PC, bool bIgnoreEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.RemoteInventoryAllowCraftingItems");

	UPrimalInventoryComponent_RemoteInventoryAllowCraftingItems_Params params;
	params.PC = PC;
	params.bIgnoreEnabled = bIgnoreEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.OverrideUseItem
// ()
// Parameters:
// class UPrimalItem*             theItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::OverrideUseItem(class UPrimalItem* theItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.OverrideUseItem");

	UPrimalInventoryComponent_OverrideUseItem_Params params;
	params.theItem = theItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.NotifyClientsDurabilityChange
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::NotifyClientsDurabilityChange(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.NotifyClientsDurabilityChange");

	UPrimalInventoryComponent_NotifyClientsDurabilityChange_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.IsRepairingAllowed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::IsRepairingAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.IsRepairingAllowed");

	UPrimalInventoryComponent_IsRepairingAllowed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.IsLocalToPlayer
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::IsLocalToPlayer(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.IsLocalToPlayer");

	UPrimalInventoryComponent_IsLocalToPlayer_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.IsLocal
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::IsLocal()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.IsLocal");

	UPrimalInventoryComponent_IsLocal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.IsCraftingAllowed
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::IsCraftingAllowed(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.IsCraftingAllowed");

	UPrimalInventoryComponent_IsCraftingAllowed_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.IsAtMaxInventoryItems
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::IsAtMaxInventoryItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.IsAtMaxInventoryItems");

	UPrimalInventoryComponent_IsAtMaxInventoryItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.IsAllowedInventoryAccess
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::IsAllowedInventoryAccess(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.IsAllowedInventoryAccess");

	UPrimalInventoryComponent_IsAllowedInventoryAccess_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.InventoryViewersStopLocalSound
// ()
// Parameters:
// class USoundBase*              aSound                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::InventoryViewersStopLocalSound(class USoundBase* aSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.InventoryViewersStopLocalSound");

	UPrimalInventoryComponent_InventoryViewersStopLocalSound_Params params;
	params.aSound = aSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.InventoryViewersPlayLocalSound
// ()
// Parameters:
// class USoundBase*              aSound                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAttach                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::InventoryViewersPlayLocalSound(class USoundBase* aSound, bool bAttach)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.InventoryViewersPlayLocalSound");

	UPrimalInventoryComponent_InventoryViewersPlayLocalSound_Params params;
	params.aSound = aSound;
	params.bAttach = bAttach;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.InventoryRefresh
// ()

void UPrimalInventoryComponent::InventoryRefresh()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.InventoryRefresh");

	UPrimalInventoryComponent_InventoryRefresh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.InitializeInventory
// ()

void UPrimalInventoryComponent::InitializeInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.InitializeInventory");

	UPrimalInventoryComponent_InitializeInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.HasItemsEquipped
// ()
// Parameters:
// TArray<class UClass*>          ItemTemplates                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bRequiresExactClassMatch       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyArkItems                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnsureAllItems                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::HasItemsEquipped(TArray<class UClass*> ItemTemplates, bool bRequiresExactClassMatch, bool bOnlyArkItems, bool bEnsureAllItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.HasItemsEquipped");

	UPrimalInventoryComponent_HasItemsEquipped_Params params;
	params.ItemTemplates = ItemTemplates;
	params.bRequiresExactClassMatch = bRequiresExactClassMatch;
	params.bOnlyArkItems = bOnlyArkItems;
	params.bEnsureAllItems = bEnsureAllItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.GetTotalEquippedItemStat
// ()
// Parameters:
// TEnumAsByte<EPrimalItemStat>   statType                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalInventoryComponent::GetTotalEquippedItemStat(TEnumAsByte<EPrimalItemStat> statType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.GetTotalEquippedItemStat");

	UPrimalInventoryComponent_GetTotalEquippedItemStat_Params params;
	params.statType = statType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.GetMaxInventoryItems
// ()
// Parameters:
// bool                           bIgnoreHiddenDefaultInventory  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalInventoryComponent::GetMaxInventoryItems(bool bIgnoreHiddenDefaultInventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.GetMaxInventoryItems");

	UPrimalInventoryComponent_GetMaxInventoryItems_Params params;
	params.bIgnoreHiddenDefaultInventory = bIgnoreHiddenDefaultInventory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.GetItemTemplateQuantity
// ()
// Parameters:
// class UClass*                  ItemTemplate                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             IgnoreItem                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreBlueprints              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckValidForCrafting         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequireExactClassMatch        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalInventoryComponent::GetItemTemplateQuantity(class UClass* ItemTemplate, class UPrimalItem* IgnoreItem, bool bIgnoreBlueprints, bool bCheckValidForCrafting, bool bRequireExactClassMatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.GetItemTemplateQuantity");

	UPrimalInventoryComponent_GetItemTemplateQuantity_Params params;
	params.ItemTemplate = ItemTemplate;
	params.IgnoreItem = IgnoreItem;
	params.bIgnoreBlueprints = bIgnoreBlueprints;
	params.bCheckValidForCrafting = bCheckValidForCrafting;
	params.bRequireExactClassMatch = bRequireExactClassMatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.GetEquippedItemOfType
// ()
// Parameters:
// TEnumAsByte<EPrimalEquipmentType> aType                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalInventoryComponent::GetEquippedItemOfType(TEnumAsByte<EPrimalEquipmentType> aType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.GetEquippedItemOfType");

	UPrimalInventoryComponent_GetEquippedItemOfType_Params params;
	params.aType = aType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.GetEquippedItemOfClass
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalInventoryComponent::GetEquippedItemOfClass(class UClass* ItemClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.GetEquippedItemOfClass");

	UPrimalInventoryComponent_GetEquippedItemOfClass_Params params;
	params.ItemClass = ItemClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.GetEquippedArmorRating
// ()
// Parameters:
// TEnumAsByte<EPrimalEquipmentType> equipmentType                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalInventoryComponent::GetEquippedArmorRating(TEnumAsByte<EPrimalEquipmentType> equipmentType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.GetEquippedArmorRating");

	UPrimalInventoryComponent_GetEquippedArmorRating_Params params;
	params.equipmentType = equipmentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.GenerateCrateItems
// ()
// Parameters:
// float                          MinQualityMultiplier           (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxQualityMultiplier           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumPasses                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          QuantityMultiplier             (Parm, ZeroConstructor, IsPlainOldData)
// float                          SetPowerWeight                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxItemDifficultyClamp         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::GenerateCrateItems(float MinQualityMultiplier, float MaxQualityMultiplier, int NumPasses, float QuantityMultiplier, float SetPowerWeight, float MaxItemDifficultyClamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.GenerateCrateItems");

	UPrimalInventoryComponent_GenerateCrateItems_Params params;
	params.MinQualityMultiplier = MinQualityMultiplier;
	params.MaxQualityMultiplier = MaxQualityMultiplier;
	params.NumPasses = NumPasses;
	params.QuantityMultiplier = QuantityMultiplier;
	params.SetPowerWeight = SetPowerWeight;
	params.MaxItemDifficultyClamp = MaxItemDifficultyClamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.EjectItem
// ()
// Parameters:
// struct FItemNetID              ItemId                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bPreventImpule                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceEject                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetItemLocation               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LocationOverride               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           showHUDMessage                 (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  TheDroppedTemplateOverride     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAssignToTribeForPickup        (Parm, ZeroConstructor, IsPlainOldData)
// int                            AssignedTribeID                (Parm, ZeroConstructor, IsPlainOldData)
// class ADroppedItem*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ADroppedItem* UPrimalInventoryComponent::EjectItem(const struct FItemNetID& ItemId, bool bPreventImpule, bool bForceEject, bool bSetItemLocation, const struct FVector& LocationOverride, bool showHUDMessage, class UClass* TheDroppedTemplateOverride, bool bAssignToTribeForPickup, int AssignedTribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.EjectItem");

	UPrimalInventoryComponent_EjectItem_Params params;
	params.ItemId = ItemId;
	params.bPreventImpule = bPreventImpule;
	params.bForceEject = bForceEject;
	params.bSetItemLocation = bSetItemLocation;
	params.LocationOverride = LocationOverride;
	params.showHUDMessage = showHUDMessage;
	params.TheDroppedTemplateOverride = TheDroppedTemplateOverride;
	params.bAssignToTribeForPickup = bAssignToTribeForPickup;
	params.AssignedTribeID = AssignedTribeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.ConsumeArmorDurability
// ()
// Parameters:
// float                          ConsumptionAmount              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllArmorTypes                 (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalEquipmentType> SpecificArmorType              (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ConsumeArmorDurability(float ConsumptionAmount, bool bAllArmorTypes, TEnumAsByte<EPrimalEquipmentType> SpecificArmorType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ConsumeArmorDurability");

	UPrimalInventoryComponent_ConsumeArmorDurability_Params params;
	params.ConsumptionAmount = ConsumptionAmount;
	params.bAllArmorTypes = bAllArmorTypes;
	params.SpecificArmorType = SpecificArmorType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ClientUpdateFreeCraftingMode
// ()
// Parameters:
// bool                           bNewFreeCraftingModeValue      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ClientUpdateFreeCraftingMode(bool bNewFreeCraftingModeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ClientUpdateFreeCraftingMode");

	UPrimalInventoryComponent_ClientUpdateFreeCraftingMode_Params params;
	params.bNewFreeCraftingModeValue = bNewFreeCraftingModeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ClientOnArkTributeItemsAdded
// ()

void UPrimalInventoryComponent::ClientOnArkTributeItemsAdded()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ClientOnArkTributeItemsAdded");

	UPrimalInventoryComponent_ClientOnArkTributeItemsAdded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ClientItemMessageNotification
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalItemMessage> ItemMessageType                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ClientItemMessageNotification(const struct FItemNetID& ItemId, TEnumAsByte<EPrimalItemMessage> ItemMessageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ClientItemMessageNotification");

	UPrimalInventoryComponent_ClientItemMessageNotification_Params params;
	params.ItemId = ItemId;
	params.ItemMessageType = ItemMessageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.ClearCraftQueue
// ()
// Parameters:
// bool                           bForceClearActiveCraftRepair   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::ClearCraftQueue(bool bForceClearActiveCraftRepair)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.ClearCraftQueue");

	UPrimalInventoryComponent_ClearCraftQueue_Params params;
	params.bForceClearActiveCraftRepair = bForceClearActiveCraftRepair;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPRequestedInventoryItems
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPRequestedInventoryItems(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRequestedInventoryItems");

	UPrimalInventoryComponent_BPRequestedInventoryItems_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryGetMaxVisibleSlots
// ()
// Parameters:
// int                            NumItems                       (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLocal                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalInventoryComponent::BPRemoteInventoryGetMaxVisibleSlots(int NumItems, class AShooterPlayerController* PC, bool bIsLocal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryGetMaxVisibleSlots");

	UPrimalInventoryComponent_BPRemoteInventoryGetMaxVisibleSlots_Params params;
	params.NumItems = NumItems;
	params.PC = PC;
	params.bIsLocal = bIsLocal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowViewing
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPRemoteInventoryAllowViewing(class AShooterPlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowViewing");

	UPrimalInventoryComponent_BPRemoteInventoryAllowViewing_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowRemoveItems
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             anItemToTransfer               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowRemoveItems");

	UPrimalInventoryComponent_BPRemoteInventoryAllowRemoveItems_Params params;
	params.PC = PC;
	params.anItemToTransfer = anItemToTransfer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowCrafting
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPRemoteInventoryAllowCrafting(class AShooterPlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowCrafting");

	UPrimalInventoryComponent_BPRemoteInventoryAllowCrafting_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowAddItems
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPRemoteInventoryAllowAddItems(class AShooterPlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowAddItems");

	UPrimalInventoryComponent_BPRemoteInventoryAllowAddItems_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowAddItem_SpecificQuantity
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            SpecificQuantityIn             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            SpecificQuantityOut            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPRemoteInventoryAllowAddItem_SpecificQuantity(class AShooterPlayerController* PC, class UPrimalItem* anItem, int SpecificQuantityIn, int* SpecificQuantityOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowAddItem_SpecificQuantity");

	UPrimalInventoryComponent_BPRemoteInventoryAllowAddItem_SpecificQuantity_Params params;
	params.PC = PC;
	params.anItem = anItem;
	params.SpecificQuantityIn = SpecificQuantityIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpecificQuantityOut != nullptr)
		*SpecificQuantityOut = params.SpecificQuantityOut;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowAddItem
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPRemoteInventoryAllowAddItem(class AShooterPlayerController* PC, class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPRemoteInventoryAllowAddItem");

	UPrimalInventoryComponent_BPRemoteInventoryAllowAddItem_Params params;
	params.PC = PC;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPPreventEquipItemType
// ()
// Parameters:
// TEnumAsByte<EPrimalEquipmentType> equipmentType                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPPreventEquipItemType(TEnumAsByte<EPrimalEquipmentType> equipmentType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPPreventEquipItemType");

	UPrimalInventoryComponent_BPPreventEquipItemType_Params params;
	params.equipmentType = equipmentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPPreventEquipItem
// ()
// Parameters:
// class UPrimalItem*             theItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPPreventEquipItem(class UPrimalItem* theItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPPreventEquipItem");

	UPrimalInventoryComponent_BPPreventEquipItem_Params params;
	params.theItem = theItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPPreInitDefaultInventory
// ()

void UPrimalInventoryComponent::BPPreInitDefaultInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPPreInitDefaultInventory");

	UPrimalInventoryComponent_BPPreInitDefaultInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPPostInitDefaultInventory
// ()

void UPrimalInventoryComponent::BPPostInitDefaultInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPPostInitDefaultInventory");

	UPrimalInventoryComponent_BPPostInitDefaultInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPOverrideItemMinimumUseInterval
// ()
// Parameters:
// class UPrimalItem*             theItem                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalInventoryComponent::BPOverrideItemMinimumUseInterval(class UPrimalItem* theItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPOverrideItemMinimumUseInterval");

	UPrimalInventoryComponent_BPOverrideItemMinimumUseInterval_Params params;
	params.theItem = theItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPNotifyItemRemoved
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPNotifyItemRemoved(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPNotifyItemRemoved");

	UPrimalInventoryComponent_BPNotifyItemRemoved_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPNotifyItemQuantityUpdated
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            amount                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPNotifyItemQuantityUpdated(class UPrimalItem* anItem, int amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPNotifyItemQuantityUpdated");

	UPrimalInventoryComponent_BPNotifyItemQuantityUpdated_Params params;
	params.anItem = anItem;
	params.amount = amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPNotifyItemAdded
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPNotifyItemAdded(class UPrimalItem* anItem, bool bEquipItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPNotifyItemAdded");

	UPrimalInventoryComponent_BPNotifyItemAdded_Params params;
	params.anItem = anItem;
	params.bEquipItem = bEquipItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPIsValidCraftingResource
// ()
// Parameters:
// class UPrimalItem*             theItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPIsValidCraftingResource(class UPrimalItem* theItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPIsValidCraftingResource");

	UPrimalInventoryComponent_BPIsValidCraftingResource_Params params;
	params.theItem = theItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPIsCraftingAllowed
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPIsCraftingAllowed(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPIsCraftingAllowed");

	UPrimalInventoryComponent_BPIsCraftingAllowed_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPInventoryRefresh
// ()

void UPrimalInventoryComponent::BPInventoryRefresh()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPInventoryRefresh");

	UPrimalInventoryComponent_BPInventoryRefresh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPInitializeInventory
// ()

void UPrimalInventoryComponent::BPInitializeInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPInitializeInventory");

	UPrimalInventoryComponent_BPInitializeInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPIncrementItemTemplateQuantity
// ()
// Parameters:
// class UClass*                  ItemTemplate                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            amount                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToClient             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBlueprint                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequireExactClassMatch        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCraftingResourceConsumption (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFromUseConsumption          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsArkTributeItem              (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             UseSpecificItem                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontExceedMaxItems            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalInventoryComponent::BPIncrementItemTemplateQuantity(class UClass* ItemTemplate, int amount, bool bReplicateToClient, bool bIsBlueprint, bool bRequireExactClassMatch, bool bIsCraftingResourceConsumption, bool bIsFromUseConsumption, bool bIsArkTributeItem, class UPrimalItem* UseSpecificItem, bool bDontExceedMaxItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPIncrementItemTemplateQuantity");

	UPrimalInventoryComponent_BPIncrementItemTemplateQuantity_Params params;
	params.ItemTemplate = ItemTemplate;
	params.amount = amount;
	params.bReplicateToClient = bReplicateToClient;
	params.bIsBlueprint = bIsBlueprint;
	params.bRequireExactClassMatch = bRequireExactClassMatch;
	params.bIsCraftingResourceConsumption = bIsCraftingResourceConsumption;
	params.bIsFromUseConsumption = bIsFromUseConsumption;
	params.bIsArkTributeItem = bIsArkTributeItem;
	params.UseSpecificItem = UseSpecificItem;
	params.bDontExceedMaxItems = bDontExceedMaxItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPGetItemOfTemplate
// ()
// Parameters:
// class UClass*                  ItemTemplate                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyInventoryItems            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyEquippedItems             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IgnoreItemsWithFullQuantity    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFavorSlotItems                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBlueprint                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequiresExactClassMatch       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreSlotItems               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyArkItems                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreferEngram                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsForCraftingConsumption      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalInventoryComponent::BPGetItemOfTemplate(class UClass* ItemTemplate, bool bOnlyInventoryItems, bool bOnlyEquippedItems, bool IgnoreItemsWithFullQuantity, bool bFavorSlotItems, bool bIsBlueprint, bool bRequiresExactClassMatch, bool bIgnoreSlotItems, bool bOnlyArkItems, bool bPreferEngram, bool bIsForCraftingConsumption)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPGetItemOfTemplate");

	UPrimalInventoryComponent_BPGetItemOfTemplate_Params params;
	params.ItemTemplate = ItemTemplate;
	params.bOnlyInventoryItems = bOnlyInventoryItems;
	params.bOnlyEquippedItems = bOnlyEquippedItems;
	params.IgnoreItemsWithFullQuantity = IgnoreItemsWithFullQuantity;
	params.bFavorSlotItems = bFavorSlotItems;
	params.bIsBlueprint = bIsBlueprint;
	params.bRequiresExactClassMatch = bRequiresExactClassMatch;
	params.bIgnoreSlotItems = bIgnoreSlotItems;
	params.bOnlyArkItems = bOnlyArkItems;
	params.bPreferEngram = bPreferEngram;
	params.bIsForCraftingConsumption = bIsForCraftingConsumption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPGetExtraItemDisplay
// ()
// Parameters:
// bool                           bShowExtraItem                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class FString                  Description                    (Parm, OutParm, ZeroConstructor)
// class FString                  CustomString                   (Parm, OutParm, ZeroConstructor)
// class UTexture2D*              EntryIcon                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      EntryMaterial                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPGetExtraItemDisplay(bool* bShowExtraItem, class FString* Description, class FString* CustomString, class UTexture2D** EntryIcon, class UMaterialInterface** EntryMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPGetExtraItemDisplay");

	UPrimalInventoryComponent_BPGetExtraItemDisplay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bShowExtraItem != nullptr)
		*bShowExtraItem = params.bShowExtraItem;
	if (Description != nullptr)
		*Description = params.Description;
	if (CustomString != nullptr)
		*CustomString = params.CustomString;
	if (EntryIcon != nullptr)
		*EntryIcon = params.EntryIcon;
	if (EntryMaterial != nullptr)
		*EntryMaterial = params.EntryMaterial;
}


// Function ShooterGame.PrimalInventoryComponent.BPFindItemWithID
// ()
// Parameters:
// int                            ItemID1                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemID2                        (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalInventoryComponent::BPFindItemWithID(int ItemID1, int ItemID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPFindItemWithID");

	UPrimalInventoryComponent_BPFindItemWithID_Params params;
	params.ItemID1 = ItemID1;
	params.ItemID2 = ItemID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPDropInventoryDeposit
// ()
// Parameters:
// double                         DestroyAtTime                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            OverrideMaxItemsDropped        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideDepositLocation       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DepositLocationOverride        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPDropInventoryDeposit(double DestroyAtTime, int OverrideMaxItemsDropped, bool bOverrideDepositLocation, const struct FVector& DepositLocationOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPDropInventoryDeposit");

	UPrimalInventoryComponent_BPDropInventoryDeposit_Params params;
	params.DestroyAtTime = DestroyAtTime;
	params.OverrideMaxItemsDropped = OverrideMaxItemsDropped;
	params.bOverrideDepositLocation = bOverrideDepositLocation;
	params.DepositLocationOverride = DepositLocationOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPCustomRemoteInventoryAllowRemoveItems
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             anItemToTransfer               (Parm, ZeroConstructor, IsPlainOldData)
// int                            RequestedQuantity              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequestedByPlayer             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPCustomRemoteInventoryAllowRemoveItems(class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer, int RequestedQuantity, bool bRequestedByPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPCustomRemoteInventoryAllowRemoveItems");

	UPrimalInventoryComponent_BPCustomRemoteInventoryAllowRemoveItems_Params params;
	params.PC = PC;
	params.anItemToTransfer = anItemToTransfer;
	params.RequestedQuantity = RequestedQuantity;
	params.bRequestedByPlayer = bRequestedByPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPCustomRemoteInventoryAllowAddItems
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            anItemQuantityOverride         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRequestedByPlayer             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPCustomRemoteInventoryAllowAddItems(class AShooterPlayerController* PC, class UPrimalItem* anItem, int anItemQuantityOverride, bool bRequestedByPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPCustomRemoteInventoryAllowAddItems");

	UPrimalInventoryComponent_BPCustomRemoteInventoryAllowAddItems_Params params;
	params.PC = PC;
	params.anItem = anItem;
	params.anItemQuantityOverride = anItemQuantityOverride;
	params.bRequestedByPlayer = bRequestedByPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPCraftingFinishedNotification
// ()
// Parameters:
// class UPrimalItem*             itemToBeCrafted                (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPCraftingFinishedNotification(class UPrimalItem* itemToBeCrafted)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPCraftingFinishedNotification");

	UPrimalInventoryComponent_BPCraftingFinishedNotification_Params params;
	params.itemToBeCrafted = itemToBeCrafted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.BPAllowUseInInventory
// ()
// Parameters:
// class UPrimalItem*             theItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsRemoteInventory             (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ByPC                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPAllowUseInInventory(class UPrimalItem* theItem, bool bIsRemoteInventory, class AShooterPlayerController* ByPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPAllowUseInInventory");

	UPrimalInventoryComponent_BPAllowUseInInventory_Params params;
	params.theItem = theItem;
	params.bIsRemoteInventory = bIsRemoteInventory;
	params.ByPC = ByPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPAllowAddInventoryItem
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            RequestedQuantity              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyAddAll                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::BPAllowAddInventoryItem(class UPrimalItem* Item, int RequestedQuantity, bool bOnlyAddAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPAllowAddInventoryItem");

	UPrimalInventoryComponent_BPAllowAddInventoryItem_Params params;
	params.Item = Item;
	params.RequestedQuantity = RequestedQuantity;
	params.bOnlyAddAll = bOnlyAddAll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.BPAccessedInventory
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalInventoryComponent::BPAccessedInventory(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.BPAccessedInventory");

	UPrimalInventoryComponent_BPAccessedInventory_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalInventoryComponent.AllowAddInventoryItem_OnlyAddAll
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::AllowAddInventoryItem_OnlyAddAll(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.AllowAddInventoryItem_OnlyAddAll");

	UPrimalInventoryComponent_AllowAddInventoryItem_OnlyAddAll_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.AllowAddInventoryItem_MaxQuantity
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            requestedQuantityIn            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            requestedQuantityOut           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::AllowAddInventoryItem_MaxQuantity(class UPrimalItem* anItem, int requestedQuantityIn, int* requestedQuantityOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.AllowAddInventoryItem_MaxQuantity");

	UPrimalInventoryComponent_AllowAddInventoryItem_MaxQuantity_Params params;
	params.anItem = anItem;
	params.requestedQuantityIn = requestedQuantityIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (requestedQuantityOut != nullptr)
		*requestedQuantityOut = params.requestedQuantityOut;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.AllowAddInventoryItem_AnyQuantity
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalInventoryComponent::AllowAddInventoryItem_AnyQuantity(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.AllowAddInventoryItem_AnyQuantity");

	UPrimalInventoryComponent_AllowAddInventoryItem_AnyQuantity_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.AddItemObjectEx
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AddToSlot                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontStack                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShowHUDNotification            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontRecalcSpoilingTime        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceIncompleteStacking       (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       OwnerPlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalInventoryComponent::AddItemObjectEx(class UPrimalItem* anItem, bool bEquipItem, bool AddToSlot, bool bDontStack, bool ShowHUDNotification, bool bDontRecalcSpoilingTime, bool bForceIncompleteStacking, class AShooterCharacter* OwnerPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.AddItemObjectEx");

	UPrimalInventoryComponent_AddItemObjectEx_Params params;
	params.anItem = anItem;
	params.bEquipItem = bEquipItem;
	params.AddToSlot = AddToSlot;
	params.bDontStack = bDontStack;
	params.ShowHUDNotification = ShowHUDNotification;
	params.bDontRecalcSpoilingTime = bDontRecalcSpoilingTime;
	params.bForceIncompleteStacking = bForceIncompleteStacking;
	params.OwnerPlayer = OwnerPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalInventoryComponent.AddItemObject
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* UPrimalInventoryComponent::AddItemObject(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalInventoryComponent.AddItemObject");

	UPrimalInventoryComponent_AddItemObject_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalPlayerData.SavePlayerData
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalPlayerData::SavePlayerData(class UWorld* ForWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.SavePlayerData");

	UPrimalPlayerData_SavePlayerData_Params params;
	params.ForWorld = ForWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalPlayerData.LinkedPlayerIDString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalPlayerData::LinkedPlayerIDString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.LinkedPlayerIDString");

	UPrimalPlayerData_LinkedPlayerIDString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalPlayerData.GetUniqueIdString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalPlayerData::GetUniqueIdString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.GetUniqueIdString");

	UPrimalPlayerData_GetUniqueIdString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalPlayerData.GetPlayerState
// ()
// Parameters:
// class AShooterPlayerState*     ignorePlayerState              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyCheckExistingPlayers      (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerState*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterPlayerState* UPrimalPlayerData::GetPlayerState(class AShooterPlayerState* ignorePlayerState, bool bOnlyCheckExistingPlayers)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.GetPlayerState");

	UPrimalPlayerData_GetPlayerState_Params params;
	params.ignorePlayerState = ignorePlayerState;
	params.bOnlyCheckExistingPlayers = bOnlyCheckExistingPlayers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalPlayerData.FindCharacterForPlayer
// ()
// Parameters:
// class UWorld*                  inWorld                        (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* UPrimalPlayerData::FindCharacterForPlayer(class UWorld* inWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.FindCharacterForPlayer");

	UPrimalPlayerData_FindCharacterForPlayer_Params params;
	params.inWorld = inWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalPlayerData.BPForceDefeatedBoss
// ()
// Parameters:
// int                            DifficultyIndex                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BossName                       (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* PlayerController               (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalPlayerData::BPForceDefeatedBoss(int DifficultyIndex, const struct FName& BossName, class AShooterPlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.BPForceDefeatedBoss");

	UPrimalPlayerData_BPForceDefeatedBoss_Params params;
	params.DifficultyIndex = DifficultyIndex;
	params.BossName = BossName;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalPlayerData.BPCreatedNewPlayerData
// ()

void UPrimalPlayerData::BPCreatedNewPlayerData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.BPCreatedNewPlayerData");

	UPrimalPlayerData_BPCreatedNewPlayerData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalPlayerData.BPApplyToPlayerCharacter
// ()
// Parameters:
// class AShooterPlayerState*     ForPlayerState                 (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       NewPlayerCharacter             (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalPlayerData::BPApplyToPlayerCharacter(class AShooterPlayerState* ForPlayerState, class AShooterCharacter* NewPlayerCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.BPApplyToPlayerCharacter");

	UPrimalPlayerData_BPApplyToPlayerCharacter_Params params;
	params.ForPlayerState = ForPlayerState;
	params.NewPlayerCharacter = NewPlayerCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalPlayerData.BPAppliedToPlayerState
// ()
// Parameters:
// class AShooterPlayerState*     ForPlayerState                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalPlayerData::BPAppliedToPlayerState(class AShooterPlayerState* ForPlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalPlayerData.BPAppliedToPlayerState");

	UPrimalPlayerData_BPAppliedToPlayerState_Params params;
	params.ForPlayerState = ForPlayerState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerUnlockEngram
// ()
// Parameters:
// class UClass*                  forItemEntry                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNotifyPlayerHUD               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUnlock                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerUnlockEngram(class UClass* forItemEntry, bool bNotifyPlayerHUD, bool bForceUnlock)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerUnlockEngram");

	AShooterPlayerState_ServerUnlockEngram_Params params;
	params.forItemEntry = forItemEntry;
	params.bNotifyPlayerHUD = bNotifyPlayerHUD;
	params.bForceUnlock = bForceUnlock;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerTribeRequestRemoveRankGroup
// ()
// Parameters:
// int                            RankGroupIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerTribeRequestRemoveRankGroup(int RankGroupIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerTribeRequestRemoveRankGroup");

	AShooterPlayerState_ServerTribeRequestRemoveRankGroup_Params params;
	params.RankGroupIndex = RankGroupIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerTribeRequestNewAlliance
// ()
// Parameters:
// class FString                  AllianceName                   (Parm, ZeroConstructor)

void AShooterPlayerState::ServerTribeRequestNewAlliance(const class FString& AllianceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerTribeRequestNewAlliance");

	AShooterPlayerState_ServerTribeRequestNewAlliance_Params params;
	params.AllianceName = AllianceName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerTribeRequestApplyRankGroupSettings
// ()
// Parameters:
// int                            RankGroupIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FTribeRankGroup         newGroupSettings               (Parm)

void AShooterPlayerState::ServerTribeRequestApplyRankGroupSettings(int RankGroupIndex, const struct FTribeRankGroup& newGroupSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerTribeRequestApplyRankGroupSettings");

	AShooterPlayerState_ServerTribeRequestApplyRankGroupSettings_Params params;
	params.RankGroupIndex = RankGroupIndex;
	params.newGroupSettings = newGroupSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerTribeRequestAddRankGroup
// ()
// Parameters:
// class FString                  GroupName                      (Parm, ZeroConstructor)

void AShooterPlayerState::ServerTribeRequestAddRankGroup(const class FString& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerTribeRequestAddRankGroup");

	AShooterPlayerState_ServerTribeRequestAddRankGroup_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerSetSelectedDinoOrderGroup
// ()
// Parameters:
// int                            newGroup                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerSetSelectedDinoOrderGroup(int newGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerSetSelectedDinoOrderGroup");

	AShooterPlayerState_ServerSetSelectedDinoOrderGroup_Params params;
	params.newGroup = newGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerSetDinoGroupName
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  GroupName                      (Parm, ZeroConstructor)

void AShooterPlayerState::ServerSetDinoGroupName(int groupIndex, const class FString& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerSetDinoGroupName");

	AShooterPlayerState_ServerSetDinoGroupName_Params params;
	params.groupIndex = groupIndex;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerSetDefaultItemSlotClass
// ()
// Parameters:
// int                            slotNum                        (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEngram                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerSetDefaultItemSlotClass(int slotNum, class UClass* ItemClass, bool bIsEngram)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerSetDefaultItemSlotClass");

	AShooterPlayerState_ServerSetDefaultItemSlotClass_Params params;
	params.slotNum = slotNum;
	params.ItemClass = ItemClass;
	params.bIsEngram = bIsEngram;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestTransferOwnershipInMyTribe
// ()
// Parameters:
// int                            PlayerIndexInTribe             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestTransferOwnershipInMyTribe(int PlayerIndexInTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestTransferOwnershipInMyTribe");

	AShooterPlayerState_ServerRequestTransferOwnershipInMyTribe_Params params;
	params.PlayerIndexInTribe = PlayerIndexInTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestSpawnPointsForDownloadedCharacters
// ()
// Parameters:
// uint64_t                       PlayerDataID                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            IgnoreBedID                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestSpawnPointsForDownloadedCharacters(uint64_t PlayerDataID, int IgnoreBedID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestSpawnPointsForDownloadedCharacters");

	AShooterPlayerState_ServerRequestSpawnPointsForDownloadedCharacters_Params params;
	params.PlayerDataID = PlayerDataID;
	params.IgnoreBedID = IgnoreBedID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestSetTribeMemberGroupRank
// ()
// Parameters:
// int                            PlayerIndexInTribe             (Parm, ZeroConstructor, IsPlainOldData)
// int                            RankGroupIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestSetTribeMemberGroupRank(int PlayerIndexInTribe, int RankGroupIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestSetTribeMemberGroupRank");

	AShooterPlayerState_ServerRequestSetTribeMemberGroupRank_Params params;
	params.PlayerIndexInTribe = PlayerIndexInTribe;
	params.RankGroupIndex = RankGroupIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestSetTribeGovernment
// ()
// Parameters:
// struct FTribeGovernment        TribeGovernment                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestSetTribeGovernment(const struct FTribeGovernment& TribeGovernment)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestSetTribeGovernment");

	AShooterPlayerState_ServerRequestSetTribeGovernment_Params params;
	params.TribeGovernment = TribeGovernment;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestRenameTribe
// ()
// Parameters:
// class FString                  ServerRequestRenameTribe       (Parm, ZeroConstructor)

void AShooterPlayerState::ServerRequestRenameTribe(const class FString& ServerRequestRenameTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestRenameTribe");

	AShooterPlayerState_ServerRequestRenameTribe_Params params;
	params.ServerRequestRenameTribe = ServerRequestRenameTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestRemovePlayerIndexFromMyTribe
// ()
// Parameters:
// int                            PlayerIndexInTribe             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestRemovePlayerIndexFromMyTribe(int PlayerIndexInTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestRemovePlayerIndexFromMyTribe");

	AShooterPlayerState_ServerRequestRemovePlayerIndexFromMyTribe_Params params;
	params.PlayerIndexInTribe = PlayerIndexInTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestRemoveAllianceMember
// ()
// Parameters:
// uint32_t                       AllianceID                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       MemberID                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestRemoveAllianceMember(uint32_t AllianceID, uint32_t MemberID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestRemoveAllianceMember");

	AShooterPlayerState_ServerRequestRemoveAllianceMember_Params params;
	params.AllianceID = AllianceID;
	params.MemberID = MemberID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestPromotePlayerInMyTribe
// ()
// Parameters:
// int                            PlayerIndexInTribe             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestPromotePlayerInMyTribe(int PlayerIndexInTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestPromotePlayerInMyTribe");

	AShooterPlayerState_ServerRequestPromotePlayerInMyTribe_Params params;
	params.PlayerIndexInTribe = PlayerIndexInTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestPromoteAllianceMember
// ()
// Parameters:
// uint32_t                       AllianceID                     (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       MemberID                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestPromoteAllianceMember(uint32_t AllianceID, uint32_t MemberID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestPromoteAllianceMember");

	AShooterPlayerState_ServerRequestPromoteAllianceMember_Params params;
	params.AllianceID = AllianceID;
	params.MemberID = MemberID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestMySpawnPoints
// ()
// Parameters:
// int                            IgnoreBedID                    (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  FilterClass                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestMySpawnPoints(int IgnoreBedID, class UClass* FilterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestMySpawnPoints");

	AShooterPlayerState_ServerRequestMySpawnPoints_Params params;
	params.IgnoreBedID = IgnoreBedID;
	params.FilterClass = FilterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestLeaveTribe
// ()

void AShooterPlayerState::ServerRequestLeaveTribe()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestLeaveTribe");

	AShooterPlayerState_ServerRequestLeaveTribe_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestLeaveAlliance
// ()
// Parameters:
// uint32_t                       AllianceID                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestLeaveAlliance(uint32_t AllianceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestLeaveAlliance");

	AShooterPlayerState_ServerRequestLeaveAlliance_Params params;
	params.AllianceID = AllianceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestDinoOrderGroups
// ()

void AShooterPlayerState::ServerRequestDinoOrderGroups()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestDinoOrderGroups");

	AShooterPlayerState_ServerRequestDinoOrderGroups_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestDemotePlayerInMyTribe
// ()
// Parameters:
// int                            PlayerIndexInTribe             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestDemotePlayerInMyTribe(int PlayerIndexInTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestDemotePlayerInMyTribe");

	AShooterPlayerState_ServerRequestDemotePlayerInMyTribe_Params params;
	params.PlayerIndexInTribe = PlayerIndexInTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestCreateNewTribe
// ()
// Parameters:
// class FString                  TribeName                      (Parm, ZeroConstructor)
// struct FTribeGovernment        TribeGovernment                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestCreateNewTribe(const class FString& TribeName, const struct FTribeGovernment& TribeGovernment)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestCreateNewTribe");

	AShooterPlayerState_ServerRequestCreateNewTribe_Params params;
	params.TribeName = TribeName;
	params.TribeGovernment = TribeGovernment;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestCreateNewPlayer
// ()
// Parameters:
// struct FPrimalPlayerCharacterConfigStructReplicated PlayerCharacterConfig          (Parm)

void AShooterPlayerState::ServerRequestCreateNewPlayer(const struct FPrimalPlayerCharacterConfigStructReplicated& PlayerCharacterConfig)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestCreateNewPlayer");

	AShooterPlayerState_ServerRequestCreateNewPlayer_Params params;
	params.PlayerCharacterConfig = PlayerCharacterConfig;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRequestApplyEngramPoints
// ()
// Parameters:
// class UClass*                  forItemEntry                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRequestApplyEngramPoints(class UClass* forItemEntry)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRequestApplyEngramPoints");

	AShooterPlayerState_ServerRequestApplyEngramPoints_Params params;
	params.forItemEntry = forItemEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerRejectTribeWar
// ()
// Parameters:
// int                            EnemyTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerRejectTribeWar(int EnemyTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerRejectTribeWar");

	AShooterPlayerState_ServerRejectTribeWar_Params params;
	params.EnemyTeamID = EnemyTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerGetServerOptions
// ()

void AShooterPlayerState::ServerGetServerOptions()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerGetServerOptions");

	AShooterPlayerState_ServerGetServerOptions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerGetPlayerWhiteListedData
// ()

void AShooterPlayerState::ServerGetPlayerWhiteListedData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerGetPlayerWhiteListedData");

	AShooterPlayerState_ServerGetPlayerWhiteListedData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerGetPlayerConnectedData
// ()

void AShooterPlayerState::ServerGetPlayerConnectedData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerGetPlayerConnectedData");

	AShooterPlayerState_ServerGetPlayerConnectedData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerGetPlayerBannedData
// ()

void AShooterPlayerState::ServerGetPlayerBannedData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerGetPlayerBannedData");

	AShooterPlayerState_ServerGetPlayerBannedData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerGetAllPlayerNamesAndLocations
// ()

void AShooterPlayerState::ServerGetAllPlayerNamesAndLocations()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerGetAllPlayerNamesAndLocations");

	AShooterPlayerState_ServerGetAllPlayerNamesAndLocations_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerGetAlivePlayerConnectedData
// ()

void AShooterPlayerState::ServerGetAlivePlayerConnectedData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerGetAlivePlayerConnectedData");

	AShooterPlayerState_ServerGetAlivePlayerConnectedData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_RemoveEntryByIndex
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsClass                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            entryIndex                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerDinoOrderGroup_RemoveEntryByIndex(int groupIndex, bool bIsClass, int entryIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_RemoveEntryByIndex");

	AShooterPlayerState_ServerDinoOrderGroup_RemoveEntryByIndex_Params params;
	params.groupIndex = groupIndex;
	params.bIsClass = bIsClass;
	params.entryIndex = entryIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_Clear
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearClasses                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearChars                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerDinoOrderGroup_Clear(int groupIndex, bool bClearClasses, bool bClearChars)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_Clear");

	AShooterPlayerState_ServerDinoOrderGroup_Clear_Params params;
	params.groupIndex = groupIndex;
	params.bClearClasses = bClearClasses;
	params.bClearChars = bClearChars;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_AddOrRemoveDinoClass
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAdd                           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerDinoOrderGroup_AddOrRemoveDinoClass(int groupIndex, class UClass* DinoClass, bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_AddOrRemoveDinoClass");

	AShooterPlayerState_ServerDinoOrderGroup_AddOrRemoveDinoClass_Params params;
	params.groupIndex = groupIndex;
	params.DinoClass = DinoClass;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_AddOrRemoveDinoCharacter
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    DinoCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAdd                           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerDinoOrderGroup_AddOrRemoveDinoCharacter(int groupIndex, class APrimalDinoCharacter* DinoCharacter, bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerDinoOrderGroup_AddOrRemoveDinoCharacter");

	AShooterPlayerState_ServerDinoOrderGroup_AddOrRemoveDinoCharacter_Params params;
	params.groupIndex = groupIndex;
	params.DinoCharacter = DinoCharacter;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerDeclareTribeWar
// ()
// Parameters:
// int                            EnemyTeamID                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            StartDayNum                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            EndDayNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          WarStartTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          WarEndTime                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerDeclareTribeWar(int EnemyTeamID, int StartDayNum, int EndDayNumber, float WarStartTime, float WarEndTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerDeclareTribeWar");

	AShooterPlayerState_ServerDeclareTribeWar_Params params;
	params.EnemyTeamID = EnemyTeamID;
	params.StartDayNum = StartDayNum;
	params.EndDayNumber = EndDayNumber;
	params.WarStartTime = WarStartTime;
	params.WarEndTime = WarEndTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ServerAcceptTribeWar
// ()
// Parameters:
// int                            EnemyTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ServerAcceptTribeWar(int EnemyTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ServerAcceptTribeWar");

	AShooterPlayerState_ServerAcceptTribeWar_Params params;
	params.EnemyTeamID = EnemyTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.SendTribeInviteData
// ()
// Parameters:
// struct FTribeData              TribeInviteData                (Parm)

void AShooterPlayerState::SendTribeInviteData(const struct FTribeData& TribeInviteData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.SendTribeInviteData");

	AShooterPlayerState_SendTribeInviteData_Params params;
	params.TribeInviteData = TribeInviteData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ResetFlexPipeGlobalCooldown
// ()

void AShooterPlayerState::ResetFlexPipeGlobalCooldown()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ResetFlexPipeGlobalCooldown");

	AShooterPlayerState_ResetFlexPipeGlobalCooldown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.OnRep_UpdatedEngrams
// ()

void AShooterPlayerState::OnRep_UpdatedEngrams()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.OnRep_UpdatedEngrams");

	AShooterPlayerState_OnRep_UpdatedEngrams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyUniqueDinoDownloaded
// ()
// Parameters:
// class FString                  TheDinoName                    (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyUniqueDinoDownloaded(const class FString& TheDinoName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyUniqueDinoDownloaded");

	AShooterPlayerState_NotifyUniqueDinoDownloaded_Params params;
	params.TheDinoName = TheDinoName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyUniqueDinoDownloadAllowed
// ()
// Parameters:
// class FString                  TheDinoName                    (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyUniqueDinoDownloadAllowed(const class FString& TheDinoName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyUniqueDinoDownloadAllowed");

	AShooterPlayerState_NotifyUniqueDinoDownloadAllowed_Params params;
	params.TheDinoName = TheDinoName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyTribememberLeft
// ()
// Parameters:
// class FString                  ThePlayerName                  (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyTribememberLeft(const class FString& ThePlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyTribememberLeft");

	AShooterPlayerState_NotifyTribememberLeft_Params params;
	params.ThePlayerName = ThePlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyTribememberJoined
// ()
// Parameters:
// class FString                  ThePlayerName                  (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyTribememberJoined(const class FString& ThePlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyTribememberJoined");

	AShooterPlayerState_NotifyTribememberJoined_Params params;
	params.ThePlayerName = ThePlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyPlayerLeftTribe
// ()
// Parameters:
// class FString                  ThePlayerName                  (Parm, ZeroConstructor)
// class FString                  TribeName                      (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyPlayerLeftTribe(const class FString& ThePlayerName, const class FString& TribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyPlayerLeftTribe");

	AShooterPlayerState_NotifyPlayerLeftTribe_Params params;
	params.ThePlayerName = ThePlayerName;
	params.TribeName = TribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyPlayerLeft
// ()
// Parameters:
// class FString                  ThePlayerName                  (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyPlayerLeft(const class FString& ThePlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyPlayerLeft");

	AShooterPlayerState_NotifyPlayerLeft_Params params;
	params.ThePlayerName = ThePlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyPlayerJoinedTribe
// ()
// Parameters:
// class FString                  ThePlayerName                  (Parm, ZeroConstructor)
// class FString                  TribeName                      (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyPlayerJoinedTribe(const class FString& ThePlayerName, const class FString& TribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyPlayerJoinedTribe");

	AShooterPlayerState_NotifyPlayerJoinedTribe_Params params;
	params.ThePlayerName = ThePlayerName;
	params.TribeName = TribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.NotifyPlayerJoined
// ()
// Parameters:
// class FString                  ThePlayerName                  (Parm, ZeroConstructor)

void AShooterPlayerState::NotifyPlayerJoined(const class FString& ThePlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.NotifyPlayerJoined");

	AShooterPlayerState_NotifyPlayerJoined_Params params;
	params.ThePlayerName = ThePlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.IsTribeAdmin
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::IsTribeAdmin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.IsTribeAdmin");

	AShooterPlayerState_IsTribeAdmin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.IsInTribe
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::IsInTribe()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.IsInTribe");

	AShooterPlayerState_IsInTribe_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.IsFriendly
// ()
// Parameters:
// int                            OtherTeam                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::IsFriendly(int OtherTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.IsFriendly");

	AShooterPlayerState_IsFriendly_Params params;
	params.OtherTeam = OtherTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.IsDinoInOrderGroup
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    dinoChar                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::IsDinoInOrderGroup(int groupIndex, class APrimalDinoCharacter* dinoChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.IsDinoInOrderGroup");

	AShooterPlayerState_IsDinoInOrderGroup_Params params;
	params.groupIndex = groupIndex;
	params.dinoChar = dinoChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.IsDinoClassInOrderGroup
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::IsDinoClassInOrderGroup(int groupIndex, class UClass* DinoClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.IsDinoClassInOrderGroup");

	AShooterPlayerState_IsDinoClassInOrderGroup_Params params;
	params.groupIndex = groupIndex;
	params.DinoClass = DinoClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.IsAllowedToRefreshFlexPipeConnections
// ()
// Parameters:
// float                          Cooldown                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::IsAllowedToRefreshFlexPipeConnections(float Cooldown)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.IsAllowedToRefreshFlexPipeConnections");

	AShooterPlayerState_IsAllowedToRefreshFlexPipeConnections_Params params;
	params.Cooldown = Cooldown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.IsAlliedWith
// ()
// Parameters:
// int                            OtherTeam                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::IsAlliedWith(int OtherTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.IsAlliedWith");

	AShooterPlayerState_IsAlliedWith_Params params;
	params.OtherTeam = OtherTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.HasEngram
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::HasEngram(class UClass* ItemClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.HasEngram");

	AShooterPlayerState_HasEngram_Params params;
	params.ItemClass = ItemClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.GetUniqueIdString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterPlayerState::GetUniqueIdString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.GetUniqueIdString");

	AShooterPlayerState_GetUniqueIdString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.GetTribeId
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterPlayerState::GetTribeId()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.GetTribeId");

	AShooterPlayerState_GetTribeId_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.DoRespec
// ()
// Parameters:
// class UPrimalPlayerData*       ForPlayerData                  (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ForCharacte                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetRespecedAtCharacterLevel   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::DoRespec(class UPrimalPlayerData* ForPlayerData, class AShooterCharacter* ForCharacte, bool bSetRespecedAtCharacterLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.DoRespec");

	AShooterPlayerState_DoRespec_Params params;
	params.ForPlayerData = ForPlayerData;
	params.ForCharacte = ForCharacte;
	params.bSetRespecedAtCharacterLevel = bSetRespecedAtCharacterLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientRefreshDinoOrderGroup
// ()
// Parameters:
// int                            groupIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FDinoOrderGroup         groupData                      (Parm)
// int                            UseCurrentlySelectedGroup      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ClientRefreshDinoOrderGroup(int groupIndex, const struct FDinoOrderGroup& groupData, int UseCurrentlySelectedGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientRefreshDinoOrderGroup");

	AShooterPlayerState_ClientRefreshDinoOrderGroup_Params params;
	params.groupIndex = groupIndex;
	params.groupData = groupData;
	params.UseCurrentlySelectedGroup = UseCurrentlySelectedGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientReceiveSpawnPoints
// ()
// Parameters:
// TArray<struct FSpawnPointInfo> SpawnPointsInfos               (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerState::ClientReceiveSpawnPoints(TArray<struct FSpawnPointInfo> SpawnPointsInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientReceiveSpawnPoints");

	AShooterPlayerState_ClientReceiveSpawnPoints_Params params;
	params.SpawnPointsInfos = SpawnPointsInfos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientNotifyLevelUpAvailable
// ()

void AShooterPlayerState::ClientNotifyLevelUpAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientNotifyLevelUpAvailable");

	AShooterPlayerState_ClientNotifyLevelUpAvailable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientGetServerOptions
// ()
// Parameters:
// struct FServerOptions          Info                           (Parm)

void AShooterPlayerState::ClientGetServerOptions(const struct FServerOptions& Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientGetServerOptions");

	AShooterPlayerState_ClientGetServerOptions_Params params;
	params.Info = Info;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientGetPlayerWhiteListedData
// ()
// Parameters:
// TArray<struct FAdminPlayerDataInfo> list                           (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerState::ClientGetPlayerWhiteListedData(TArray<struct FAdminPlayerDataInfo> list)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientGetPlayerWhiteListedData");

	AShooterPlayerState_ClientGetPlayerWhiteListedData_Params params;
	params.list = list;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientGetPlayerConnectedData
// ()
// Parameters:
// TArray<struct FAdminPlayerDataInfo> list                           (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerState::ClientGetPlayerConnectedData(TArray<struct FAdminPlayerDataInfo> list)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientGetPlayerConnectedData");

	AShooterPlayerState_ClientGetPlayerConnectedData_Params params;
	params.list = list;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientGetPlayerBannedData
// ()
// Parameters:
// TArray<struct FAdminPlayerDataInfo> list                           (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerState::ClientGetPlayerBannedData(TArray<struct FAdminPlayerDataInfo> list)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientGetPlayerBannedData");

	AShooterPlayerState_ClientGetPlayerBannedData_Params params;
	params.list = list;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientGetAllPlayerNamesAndLocations
// ()
// Parameters:
// TArray<struct FAliveNameAndLocation> list                           (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerState::ClientGetAllPlayerNamesAndLocations(TArray<struct FAliveNameAndLocation> list)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientGetAllPlayerNamesAndLocations");

	AShooterPlayerState_ClientGetAllPlayerNamesAndLocations_Params params;
	params.list = list;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClientGetAlivePlayerConnectedData
// ()
// Parameters:
// TArray<struct FAlivePlayerDataInfo> list                           (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerState::ClientGetAlivePlayerConnectedData(TArray<struct FAlivePlayerDataInfo> list)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClientGetAlivePlayerConnectedData");

	AShooterPlayerState_ClientGetAlivePlayerConnectedData_Params params;
	params.list = list;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.ClearTribe
// ()
// Parameters:
// bool                           bDontRemoveFromTribe           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::ClearTribe(bool bDontRemoveFromTribe, bool bForce, class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.ClearTribe");

	AShooterPlayerState_ClearTribe_Params params;
	params.bDontRemoveFromTribe = bDontRemoveFromTribe;
	params.bForce = bForce;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.BroadcastDeath
// ()
// Parameters:
// class AShooterPlayerState*     KillerPlayerState              (Parm, ZeroConstructor, IsPlainOldData)
// class UDamageType*             KillerDamageType               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerState*     KilledPlayerState              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerState::BroadcastDeath(class AShooterPlayerState* KillerPlayerState, class UDamageType* KillerDamageType, class AShooterPlayerState* KilledPlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.BroadcastDeath");

	AShooterPlayerState_BroadcastDeath_Params params;
	params.KillerPlayerState = KillerPlayerState;
	params.KillerDamageType = KillerDamageType;
	params.KilledPlayerState = KilledPlayerState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerState.AllowTribeGroupPermission
// ()
// Parameters:
// TEnumAsByte<ETribeGroupPermission> TribeGroupPermission           (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 OnObject                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::AllowTribeGroupPermission(TEnumAsByte<ETribeGroupPermission> TribeGroupPermission, class UObject* OnObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.AllowTribeGroupPermission");

	AShooterPlayerState_AllowTribeGroupPermission_Params params;
	params.TribeGroupPermission = TribeGroupPermission;
	params.OnObject = OnObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.AllowDinoOrderByGroup
// ()
// Parameters:
// class APrimalDinoCharacter*    orderDino                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::AllowDinoOrderByGroup(class APrimalDinoCharacter* orderDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.AllowDinoOrderByGroup");

	AShooterPlayerState_AllowDinoOrderByGroup_Params params;
	params.orderDino = orderDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerState.AddToTribe
// ()
// Parameters:
// struct FTribeData              MyNewTribe                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bMergeTribe                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFromInvite                  (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       InviterPC                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerState::AddToTribe(const struct FTribeData& MyNewTribe, bool bMergeTribe, bool bForce, bool bIsFromInvite, class APlayerController* InviterPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerState.AddToTribe");

	AShooterPlayerState_AddToTribe_Params params;
	params.MyNewTribe = MyNewTribe;
	params.bMergeTribe = bMergeTribe;
	params.bForce = bForce;
	params.bIsFromInvite = bIsFromInvite;
	params.InviterPC = InviterPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.WritePNTScreenshot
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterPlayerController::WritePNTScreenshot()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.WritePNTScreenshot");

	AShooterPlayerController_WritePNTScreenshot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.ViewingAnUploadTerminal
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::ViewingAnUploadTerminal()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ViewingAnUploadTerminal");

	AShooterPlayerController_ViewingAnUploadTerminal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.UnlockExplorerNote
// ()
// Parameters:
// int                            ExplorerNoteIndex              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           forceShowExplorerNoteUI        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::UnlockExplorerNote(int ExplorerNoteIndex, bool forceShowExplorerNoteUI)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.UnlockExplorerNote");

	AShooterPlayerController_UnlockExplorerNote_Params params;
	params.ExplorerNoteIndex = ExplorerNoteIndex;
	params.forceShowExplorerNoteUI = forceShowExplorerNoteUI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.UnlockEmote
// ()
// Parameters:
// struct FName                   EmoteName                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::UnlockEmote(const struct FName& EmoteName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.UnlockEmote");

	AShooterPlayerController_UnlockEmote_Params params;
	params.EmoteName = EmoteName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.TurnOnGmBuffAndTekArmorAndStatFpsAndAlsoStatUnitBecauseThisIsEasierToTypeOnXbox
// ()

void AShooterPlayerController::TurnOnGmBuffAndTekArmorAndStatFpsAndAlsoStatUnitBecauseThisIsEasierToTypeOnXbox()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.TurnOnGmBuffAndTekArmorAndStatFpsAndAlsoStatUnitBecauseThisIsEasierToTypeOnXbox");

	AShooterPlayerController_TurnOnGmBuffAndTekArmorAndStatFpsAndAlsoStatUnitBecauseThisIsEasierToTypeOnXbox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.TryToForceUploadCharacter
// ()

void AShooterPlayerController::TryToForceUploadCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.TryToForceUploadCharacter");

	AShooterPlayerController_TryToForceUploadCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ToggleWeaponAccessory
// ()

void AShooterPlayerController::ToggleWeaponAccessory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ToggleWeaponAccessory");

	AShooterPlayerController_ToggleWeaponAccessory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.TestPhysxPerf
// ()
// Parameters:
// int                            RayCount                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DistanceOfRays                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::TestPhysxPerf(int RayCount, float DistanceOfRays)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.TestPhysxPerf");

	AShooterPlayerController_TestPhysxPerf_Params params;
	params.RayCount = RayCount;
	params.DistanceOfRays = DistanceOfRays;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.TestNotification
// ()

void AShooterPlayerController::TestNotification()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.TestNotification");

	AShooterPlayerController_TestNotification_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.TestAlarmNotification
// ()
// Parameters:
// class FString                  Title                          (Parm, ZeroConstructor)
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterPlayerController::TestAlarmNotification(const class FString& Title, const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.TestAlarmNotification");

	AShooterPlayerController_TestAlarmNotification_Params params;
	params.Title = Title;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.StopSpectating
// ()

void AShooterPlayerController::StopSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.StopSpectating");

	AShooterPlayerController_StopSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.StartSurfaceCameraForPassenger
// ()
// Parameters:
// float                          OnSurfaceTargetYaw             (Parm, ZeroConstructor, IsPlainOldData)
// float                          OnSurfaceTargetPitch           (Parm, ZeroConstructor, IsPlainOldData)
// float                          OnSurfaceTargetRoll            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::StartSurfaceCameraForPassenger(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.StartSurfaceCameraForPassenger");

	AShooterPlayerController_StartSurfaceCameraForPassenger_Params params;
	params.OnSurfaceTargetYaw = OnSurfaceTargetYaw;
	params.OnSurfaceTargetPitch = OnSurfaceTargetPitch;
	params.OnSurfaceTargetRoll = OnSurfaceTargetRoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.StartSurfaceCamera
// ()
// Parameters:
// float                          OnSurfaceTargetYaw             (Parm, ZeroConstructor, IsPlainOldData)
// float                          OnSurfaceTargetPitch           (Parm, ZeroConstructor, IsPlainOldData)
// float                          OnSurfaceTargetRoll            (Parm, ZeroConstructor, IsPlainOldData)
// float                          OnSurfaceCameraInterpolationSpeed (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UseSurfaceCameraInterpolation  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CameraOffset                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AShooterPlayerController::StartSurfaceCamera(float OnSurfaceTargetYaw, float OnSurfaceTargetPitch, float OnSurfaceTargetRoll, float OnSurfaceCameraInterpolationSpeed, bool UseSurfaceCameraInterpolation, const struct FVector& CameraOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.StartSurfaceCamera");

	AShooterPlayerController_StartSurfaceCamera_Params params;
	params.OnSurfaceTargetYaw = OnSurfaceTargetYaw;
	params.OnSurfaceTargetPitch = OnSurfaceTargetPitch;
	params.OnSurfaceTargetRoll = OnSurfaceTargetRoll;
	params.OnSurfaceCameraInterpolationSpeed = OnSurfaceCameraInterpolationSpeed;
	params.UseSurfaceCameraInterpolation = UseSurfaceCameraInterpolation;
	params.CameraOffset = CameraOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ShowMyAdminManager
// ()

void AShooterPlayerController::ShowMyAdminManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ShowMyAdminManager");

	AShooterPlayerController_ShowMyAdminManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ShouldHideGameplayUI
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::ShouldHideGameplayUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ShouldHideGameplayUI");

	AShooterPlayerController_ShouldHideGameplayUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.SetPlayerPos
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::SetPlayerPos(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SetPlayerPos");

	AShooterPlayerController_SetPlayerPos_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.SetMultiUseWheelCategory
// ()
// Parameters:
// int                            Category                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::SetMultiUseWheelCategory(int Category)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SetMultiUseWheelCategory");

	AShooterPlayerController_SetMultiUseWheelCategory_Params params;
	params.Category = Category;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.SetDoFInterpTime
// ()
// Parameters:
// float                          InterpTime                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::SetDoFInterpTime(float InterpTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SetDoFInterpTime");

	AShooterPlayerController_SetDoFInterpTime_Params params;
	params.InterpTime = InterpTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.SetControllerGamepadActive
// ()
// Parameters:
// bool                           bIsActive                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::SetControllerGamepadActive(bool bIsActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SetControllerGamepadActive");

	AShooterPlayerController_SetControllerGamepadActive_Params params;
	params.bIsActive = bIsActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.SetCheatPlayer
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::SetCheatPlayer(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SetCheatPlayer");

	AShooterPlayerController_SetCheatPlayer_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.SetAdminIcon
// ()
// Parameters:
// bool                           bAdminIcon                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::SetAdminIcon(bool bAdminIcon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SetAdminIcon");

	AShooterPlayerController_SetAdminIcon_Params params;
	params.bAdminIcon = bAdminIcon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerUploadDino
// ()
// Parameters:
// class APrimalDinoCharacter*    DownloadedDino                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerUploadDino(class APrimalDinoCharacter* DownloadedDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerUploadDino");

	AShooterPlayerController_ServerUploadDino_Params params;
	params.DownloadedDino = DownloadedDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerUploadCurrentCharacterAndItems
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterPlayerController::ServerUploadCurrentCharacterAndItems(class UPrimalInventoryComponent* InventoryComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerUploadCurrentCharacterAndItems");

	AShooterPlayerController_ServerUploadCurrentCharacterAndItems_Params params;
	params.InventoryComp = InventoryComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerUploadCharaterDataToArk
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterPlayerController::ServerUploadCharaterDataToArk(class UPrimalInventoryComponent* InventoryComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerUploadCharaterDataToArk");

	AShooterPlayerController_ServerUploadCharaterDataToArk_Params params;
	params.InventoryComp = InventoryComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerUnlockPerMapExplorerNote
// ()
// Parameters:
// int                            ExplorerNoteIndex              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerUnlockPerMapExplorerNote(int ExplorerNoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerUnlockPerMapExplorerNote");

	AShooterPlayerController_ServerUnlockPerMapExplorerNote_Params params;
	params.ExplorerNoteIndex = ExplorerNoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerUnbanPlayer
// ()
// Parameters:
// class FString                  PlayerSteamName                (Parm, ZeroConstructor)
// class FString                  PlayerSteamID                  (Parm, ZeroConstructor)

void AShooterPlayerController::ServerUnbanPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerUnbanPlayer");

	AShooterPlayerController_ServerUnbanPlayer_Params params;
	params.PlayerSteamName = PlayerSteamName;
	params.PlayerSteamID = PlayerSteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerTransferToRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlsoTryToEqup                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            RequestedQuantity              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerTransferToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, bool bAlsoTryToEqup, int RequestedQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerTransferToRemoteInventory");

	AShooterPlayerController_ServerTransferToRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;
	params.bAlsoTryToEqup = bAlsoTryToEqup;
	params.RequestedQuantity = RequestedQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerTransferredPlayerConfirmationResult
// ()
// Parameters:
// bool                           bAccept                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerTransferredPlayerConfirmationResult(bool bAccept)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerTransferredPlayerConfirmationResult");

	AShooterPlayerController_ServerTransferredPlayerConfirmationResult_Params params;
	params.bAccept = bAccept;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerTransferFromRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            RequestedQuantity              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ToSlotIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerTransferFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int RequestedQuantity, int ToSlotIndex, bool bEquipItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerTransferFromRemoteInventory");

	AShooterPlayerController_ServerTransferFromRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;
	params.RequestedQuantity = RequestedQuantity;
	params.ToSlotIndex = ToSlotIndex;
	params.bEquipItem = bEquipItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerTransferAllToRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class FString                  CurrentCustomFolderFilter      (Parm, ZeroConstructor)
// class FString                  CurrentNameFilter              (Parm, ZeroConstructor)
// class FString                  CurrentDestinationFolder       (Parm, ZeroConstructor)
// bool                           bNoFolderView                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerTransferAllToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter, const class FString& CurrentDestinationFolder, bool bNoFolderView)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerTransferAllToRemoteInventory");

	AShooterPlayerController_ServerTransferAllToRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.CurrentCustomFolderFilter = CurrentCustomFolderFilter;
	params.CurrentNameFilter = CurrentNameFilter;
	params.CurrentDestinationFolder = CurrentDestinationFolder;
	params.bNoFolderView = bNoFolderView;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerTransferAllFromRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class FString                  CurrentCustomFolderFilter      (Parm, ZeroConstructor)
// class FString                  CurrentNameFilter              (Parm, ZeroConstructor)
// class FString                  CurrentDestinationFolder       (Parm, ZeroConstructor)
// bool                           bNoFolderView                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerTransferAllFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter, const class FString& CurrentDestinationFolder, bool bNoFolderView)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerTransferAllFromRemoteInventory");

	AShooterPlayerController_ServerTransferAllFromRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.CurrentCustomFolderFilter = CurrentCustomFolderFilter;
	params.CurrentNameFilter = CurrentNameFilter;
	params.CurrentDestinationFolder = CurrentDestinationFolder;
	params.bNoFolderView = bNoFolderView;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSuicide
// ()

void AShooterPlayerController::ServerSuicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSuicide");

	AShooterPlayerController_ServerSuicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerStopWeaponFire
// ()
// Parameters:
// class AShooterWeapon*          weapon                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerStopWeaponFire(class AShooterWeapon* weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerStopWeaponFire");

	AShooterPlayerController_ServerStopWeaponFire_Params params;
	params.weapon = weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerStopWeaponAltFire
// ()
// Parameters:
// class AShooterWeapon*          weapon                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerStopWeaponAltFire(class AShooterWeapon* weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerStopWeaponAltFire");

	AShooterPlayerController_ServerStopWeaponAltFire_Params params;
	params.weapon = weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerStopSpectating
// ()

void AShooterPlayerController::ServerStopSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerStopSpectating");

	AShooterPlayerController_ServerStopSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerStayAlive
// ()

void AShooterPlayerController::ServerStayAlive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerStayAlive");

	AShooterPlayerController_ServerStayAlive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerStartWeaponFire
// ()
// Parameters:
// class AShooterWeapon*          weapon                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerStartWeaponFire(class AShooterWeapon* weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerStartWeaponFire");

	AShooterPlayerController_ServerStartWeaponFire_Params params;
	params.weapon = weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerStartWeaponAltFire
// ()
// Parameters:
// class AShooterWeapon*          weapon                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerStartWeaponAltFire(class AShooterWeapon* weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerStartWeaponAltFire");

	AShooterPlayerController_ServerStartWeaponAltFire_Params params;
	params.weapon = weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSpectateToPlayerByID
// ()
// Parameters:
// uint64_t                       PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerSpectateToPlayerByID(uint64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSpectateToPlayerByID");

	AShooterPlayerController_ServerSpectateToPlayerByID_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerShowMessageOfTheDay
// ()

void AShooterPlayerController::ServerShowMessageOfTheDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerShowMessageOfTheDay");

	AShooterPlayerController_ServerShowMessageOfTheDay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSetVRPlayer
// ()
// Parameters:
// bool                           bSetVRPlayer                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerSetVRPlayer(bool bSetVRPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSetVRPlayer");

	AShooterPlayerController_ServerSetVRPlayer_Params params;
	params.bSetVRPlayer = bSetVRPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSetSupressAdminIcon
// ()
// Parameters:
// bool                           bSuppress                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerSetSupressAdminIcon(bool bSuppress)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSetSupressAdminIcon");

	AShooterPlayerController_ServerSetSupressAdminIcon_Params params;
	params.bSuppress = bSuppress;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSetSubscribedApp
// ()
// Parameters:
// int                            AppID                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreventDefaultItems           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerSetSubscribedApp(int AppID, bool bPreventDefaultItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSetSubscribedApp");

	AShooterPlayerController_ServerSetSubscribedApp_Params params;
	params.AppID = AppID;
	params.bPreventDefaultItems = bPreventDefaultItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSetMessageOfTheDay
// ()
// Parameters:
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterPlayerController::ServerSetMessageOfTheDay(const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSetMessageOfTheDay");

	AShooterPlayerController_ServerSetMessageOfTheDay_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSetItemBalloonLocation
// ()
// Parameters:
// class APrimalStructureMovingContainer* ItemBalloon                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FPrimalMapMarkerEntryData MapMarker                      (Parm)

void AShooterPlayerController::ServerSetItemBalloonLocation(class APrimalStructureMovingContainer* ItemBalloon, const struct FPrimalMapMarkerEntryData& MapMarker)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSetItemBalloonLocation");

	AShooterPlayerController_ServerSetItemBalloonLocation_Params params;
	params.ItemBalloon = ItemBalloon;
	params.MapMarker = MapMarker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSendDirectMessage
// ()
// Parameters:
// class FString                  PlayerSteamID                  (Parm, ZeroConstructor)
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterPlayerController::ServerSendDirectMessage(const class FString& PlayerSteamID, const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSendDirectMessage");

	AShooterPlayerController_ServerSendDirectMessage_Params params;
	params.PlayerSteamID = PlayerSteamID;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSendChatMessage
// ()
// Parameters:
// class FString                  ChatMessage                    (Parm, ZeroConstructor)
// TEnumAsByte<EChatSendMode>     SendMode                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerSendChatMessage(const class FString& ChatMessage, TEnumAsByte<EChatSendMode> SendMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSendChatMessage");

	AShooterPlayerController_ServerSendChatMessage_Params params;
	params.ChatMessage = ChatMessage;
	params.SendMode = SendMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSendArkDataPayloadEnd
// ()
// Parameters:
// struct FGuid                   ID                             (Parm, ZeroConstructor)
// TEnumAsByte<EPrimalARKTributeDataType> ArkDataType                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerSendArkDataPayloadEnd(const struct FGuid& ID, TEnumAsByte<EPrimalARKTributeDataType> ArkDataType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSendArkDataPayloadEnd");

	AShooterPlayerController_ServerSendArkDataPayloadEnd_Params params;
	params.ID = ID;
	params.ArkDataType = ArkDataType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSendArkDataPayloadBegin
// ()
// Parameters:
// struct FGuid                   ID                             (Parm, ZeroConstructor)
// TEnumAsByte<EPrimalARKTributeDataType> ArkDataType                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  DataClass                      (Parm, ZeroConstructor)
// class FString                  TagName                        (Parm, ZeroConstructor)
// class FString                  Name                           (Parm, ZeroConstructor)
// TArray<class FString>          DataStats                      (ConstParm, Parm, ZeroConstructor)
// uint32_t                       ID1                            (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ID2                            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerSendArkDataPayloadBegin(const struct FGuid& ID, TEnumAsByte<EPrimalARKTributeDataType> ArkDataType, const class FString& DataClass, const class FString& TagName, const class FString& Name, TArray<class FString> DataStats, uint32_t ID1, uint32_t ID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSendArkDataPayloadBegin");

	AShooterPlayerController_ServerSendArkDataPayloadBegin_Params params;
	params.ID = ID;
	params.ArkDataType = ArkDataType;
	params.DataClass = DataClass;
	params.TagName = TagName;
	params.Name = Name;
	params.DataStats = DataStats;
	params.ID1 = ID1;
	params.ID2 = ID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSendArkDataPayload
// ()
// Parameters:
// struct FGuid                   ID                             (Parm, ZeroConstructor)
// TEnumAsByte<EPrimalARKTributeDataType> ArkDataType                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<unsigned char>          DataBytes                      (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ServerSendArkDataPayload(const struct FGuid& ID, TEnumAsByte<EPrimalARKTributeDataType> ArkDataType, TArray<unsigned char> DataBytes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSendArkDataPayload");

	AShooterPlayerController_ServerSendArkDataPayload_Params params;
	params.ID = ID;
	params.ArkDataType = ArkDataType;
	params.DataBytes = DataBytes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerSaveWorld
// ()

void AShooterPlayerController::ServerSaveWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerSaveWorld");

	AShooterPlayerController_ServerSaveWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestTribeLog
// ()

void AShooterPlayerController::ServerRequestTribeLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestTribeLog");

	AShooterPlayerController_ServerRequestTribeLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestSetPin
// ()
// Parameters:
// class UObject*                 forTarget                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            PinValue                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsSetting                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            TheCustomIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestSetPin(class UObject* forTarget, int PinValue, bool bIsSetting, int TheCustomIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestSetPin");

	AShooterPlayerController_ServerRequestSetPin_Params params;
	params.forTarget = forTarget;
	params.PinValue = PinValue;
	params.bIsSetting = bIsSetting;
	params.TheCustomIndex = TheCustomIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestRespawnAtPoint
// ()
// Parameters:
// int                            SpawnPointID                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            spawnRegionIndex               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestRespawnAtPoint(int SpawnPointID, int spawnRegionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestRespawnAtPoint");

	AShooterPlayerController_ServerRequestRespawnAtPoint_Params params;
	params.SpawnPointID = SpawnPointID;
	params.spawnRegionIndex = spawnRegionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestRemoveWeaponClipAmmo
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestRemoveWeaponClipAmmo(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestRemoveWeaponClipAmmo");

	AShooterPlayerController_ServerRequestRemoveWeaponClipAmmo_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestRemoveWeaponAccessoryOnly
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestRemoveWeaponAccessoryOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestRemoveWeaponAccessoryOnly");

	AShooterPlayerController_ServerRequestRemoveWeaponAccessoryOnly_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestRemoveItemSkinOnly
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestRemoveItemSkinOnly(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestRemoveItemSkinOnly");

	AShooterPlayerController_ServerRequestRemoveItemSkinOnly_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestRemoveItemSkin
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestRemoveItemSkin(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestRemoveItemSkin");

	AShooterPlayerController_ServerRequestRemoveItemSkin_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestRemoteDropAllItems
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class FString                  CurrentCustomFolderFilter      (Parm, ZeroConstructor)
// class FString                  CurrentNameFilter              (Parm, ZeroConstructor)

void AShooterPlayerController::ServerRequestRemoteDropAllItems(class UPrimalInventoryComponent* InventoryComp, const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestRemoteDropAllItems");

	AShooterPlayerController_ServerRequestRemoteDropAllItems_Params params;
	params.InventoryComp = InventoryComp;
	params.CurrentCustomFolderFilter = CurrentCustomFolderFilter;
	params.CurrentNameFilter = CurrentNameFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestPlaceStructure
// ()
// Parameters:
// int                            StructureIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BuildLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                BuildRotation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                PlayerViewRotation             (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   AttachToPawn                   (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    DinoCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              PlaceUsingItemID               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSnapped                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsCheat                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFlipped                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            SnapPointCycle                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestPlaceStructure(int StructureIndex, const struct FVector& BuildLocation, const struct FRotator& BuildRotation, const struct FRotator& PlayerViewRotation, class APawn* AttachToPawn, class APrimalDinoCharacter* DinoCharacter, const struct FName& BoneName, const struct FItemNetID& PlaceUsingItemID, bool bSnapped, bool bIsCheat, bool bIsFlipped, int SnapPointCycle)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestPlaceStructure");

	AShooterPlayerController_ServerRequestPlaceStructure_Params params;
	params.StructureIndex = StructureIndex;
	params.BuildLocation = BuildLocation;
	params.BuildRotation = BuildRotation;
	params.PlayerViewRotation = PlayerViewRotation;
	params.AttachToPawn = AttachToPawn;
	params.DinoCharacter = DinoCharacter;
	params.BoneName = BoneName;
	params.PlaceUsingItemID = PlaceUsingItemID;
	params.bSnapped = bSnapped;
	params.bIsCheat = bIsCheat;
	params.bIsFlipped = bIsFlipped;
	params.SnapPointCycle = SnapPointCycle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestMyTribeOnlineList
// ()

void AShooterPlayerController::ServerRequestMyTribeOnlineList()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestMyTribeOnlineList");

	AShooterPlayerController_ServerRequestMyTribeOnlineList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestLevelUp
// ()
// Parameters:
// class UPrimalCharacterStatusComponent* forStatusComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestLevelUp(class UPrimalCharacterStatusComponent* forStatusComp, TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestLevelUp");

	AShooterPlayerController_ServerRequestLevelUp_Params params;
	params.forStatusComp = forStatusComp;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestInventoryUseItemWithItem
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemID1                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              ItemID2                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalData                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestInventoryUseItemWithItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2, int AdditionalData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestInventoryUseItemWithItem");

	AShooterPlayerController_ServerRequestInventoryUseItemWithItem_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemID1 = ItemID1;
	params.ItemID2 = ItemID2;
	params.AdditionalData = AdditionalData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestInventoryUseItemWithActor
// ()
// Parameters:
// class AActor*                  AnActor                        (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemID1                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            AdditionalData                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestInventoryUseItemWithActor(class AActor* AnActor, class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, int AdditionalData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestInventoryUseItemWithActor");

	AShooterPlayerController_ServerRequestInventoryUseItemWithActor_Params params;
	params.AnActor = AnActor;
	params.InventoryComp = InventoryComp;
	params.ItemID1 = ItemID1;
	params.AdditionalData = AdditionalData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestInventoryUseItem
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestInventoryUseItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestInventoryUseItem");

	AShooterPlayerController_ServerRequestInventoryUseItem_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestInventorySwapItems
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemID1                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              ItemID2                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestInventorySwapItems(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestInventorySwapItems");

	AShooterPlayerController_ServerRequestInventorySwapItems_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemID1 = ItemID1;
	params.ItemID2 = ItemID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestFastTravelToPoint
// ()
// Parameters:
// int                            fromSpawnPointID               (Parm, ZeroConstructor, IsPlainOldData)
// int                            SpawnPointID                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestFastTravelToPoint(int fromSpawnPointID, int SpawnPointID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestFastTravelToPoint");

	AShooterPlayerController_ServerRequestFastTravelToPoint_Params params;
	params.fromSpawnPointID = fromSpawnPointID;
	params.SpawnPointID = SpawnPointID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestDropAllItems
// ()
// Parameters:
// class FString                  CurrentCustomFolderFilter      (Parm, ZeroConstructor)
// class FString                  CurrentNameFilter              (Parm, ZeroConstructor)

void AShooterPlayerController::ServerRequestDropAllItems(const class FString& CurrentCustomFolderFilter, const class FString& CurrentNameFilter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestDropAllItems");

	AShooterPlayerController_ServerRequestDropAllItems_Params params;
	params.CurrentCustomFolderFilter = CurrentCustomFolderFilter;
	params.CurrentNameFilter = CurrentNameFilter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestDownloadPlayerCharacter
// ()
// Parameters:
// struct FArkTributePlayerData   DownloadedCharacter            (Parm)
// int                            SpawnPointID                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            spawnRegionIndex               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestDownloadPlayerCharacter(const struct FArkTributePlayerData& DownloadedCharacter, int SpawnPointID, int spawnRegionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestDownloadPlayerCharacter");

	AShooterPlayerController_ServerRequestDownloadPlayerCharacter_Params params;
	params.DownloadedCharacter = DownloadedCharacter;
	params.SpawnPointID = SpawnPointID;
	params.spawnRegionIndex = spawnRegionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestDownloadDino
// ()
// Parameters:
// struct FARKTributeDino         DownloadedDino                 (Parm)

void AShooterPlayerController::ServerRequestDownloadDino(const struct FARKTributeDino& DownloadedDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestDownloadDino");

	AShooterPlayerController_ServerRequestDownloadDino_Params params;
	params.DownloadedDino = DownloadedDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestDinoAncestors
// ()
// Parameters:
// class APrimalDinoCharacter*    ForDino                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestDinoAncestors(class APrimalDinoCharacter* ForDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestDinoAncestors");

	AShooterPlayerController_ServerRequestDinoAncestors_Params params;
	params.ForDino = ForDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRequestActorItems
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bInventoryItems                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFirstSpawn                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRequestActorItems(class UPrimalInventoryComponent* forInventory, bool bInventoryItems, bool bIsFirstSpawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRequestActorItems");

	AShooterPlayerController_ServerRequestActorItems_Params params;
	params.forInventory = forInventory;
	params.bInventoryItems = bInventoryItems;
	params.bIsFirstSpawn = bIsFirstSpawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRepeatMultiUse
// ()
// Parameters:
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRepeatMultiUse(class UObject* ForObject, int UseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRepeatMultiUse");

	AShooterPlayerController_ServerRepeatMultiUse_Params params;
	params.ForObject = ForObject;
	params.UseIndex = UseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRepairItem
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRepairItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRepairItem");

	AShooterPlayerController_ServerRepairItem_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRemoveSteamItemSucceeded
// ()

void AShooterPlayerController::ServerRemoveSteamItemSucceeded()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRemoveSteamItemSucceeded");

	AShooterPlayerController_ServerRemoveSteamItemSucceeded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRemoveSteamItem
// ()
// Parameters:
// uint32_t                       ItemdDefId                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRemoveSteamItem(uint32_t ItemdDefId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRemoveSteamItem");

	AShooterPlayerController_ServerRemoveSteamItem_Params params;
	params.ItemdDefId = ItemdDefId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRemovePawnItem
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSecondryAction                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRemovePawnItem(const struct FItemNetID& ItemId, bool bSecondryAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRemovePawnItem");

	AShooterPlayerController_ServerRemovePawnItem_Params params;
	params.ItemId = ItemId;
	params.bSecondryAction = bSecondryAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRemovePassenger
// ()

void AShooterPlayerController::ServerRemovePassenger()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRemovePassenger");

	AShooterPlayerController_ServerRemovePassenger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerReleaseSeatingStructure
// ()

void AShooterPlayerController::ServerReleaseSeatingStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerReleaseSeatingStructure");

	AShooterPlayerController_ServerReleaseSeatingStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRefreshSteamInventory
// ()

void AShooterPlayerController::ServerRefreshSteamInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRefreshSteamInventory");

	AShooterPlayerController_ServerRefreshSteamInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerRecieveSpectatorLocationAndRotation
// ()
// Parameters:
// struct FVector                 spectatorLocation              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                spectatorRotation              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerRecieveSpectatorLocationAndRotation(const struct FVector& spectatorLocation, const struct FRotator& spectatorRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerRecieveSpectatorLocationAndRotation");

	AShooterPlayerController_ServerRecieveSpectatorLocationAndRotation_Params params;
	params.spectatorLocation = spectatorLocation;
	params.spectatorRotation = spectatorRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerReadMessageOFTheDay
// ()

void AShooterPlayerController::ServerReadMessageOFTheDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerReadMessageOFTheDay");

	AShooterPlayerController_ServerReadMessageOFTheDay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerProcessItemNetExecCommandUnreliableBP
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ForItemID                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEquippedItem                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void AShooterPlayerController::ServerProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerProcessItemNetExecCommandUnreliableBP");

	AShooterPlayerController_ServerProcessItemNetExecCommandUnreliableBP_Params params;
	params.forInventory = forInventory;
	params.ForItemID = ForItemID;
	params.bIsEquippedItem = bIsEquippedItem;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerProcessItemNetExecCommandBP
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ForItemID                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEquippedItem                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void AShooterPlayerController::ServerProcessItemNetExecCommandBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerProcessItemNetExecCommandBP");

	AShooterPlayerController_ServerProcessItemNetExecCommandBP_Params params;
	params.forInventory = forInventory;
	params.ForItemID = ForItemID;
	params.bIsEquippedItem = bIsEquippedItem;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerPaint
// ()
// Parameters:
// class UStructurePaintingComponent* Structure                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<struct FPaintItem>      Paints                         (ConstParm, Parm, ZeroConstructor)
// bool                           bLastBatch                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromLoadFile                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerPaint(class UStructurePaintingComponent* Structure, TArray<struct FPaintItem> Paints, bool bLastBatch, bool bFromLoadFile)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerPaint");

	AShooterPlayerController_ServerPaint_Params params;
	params.Structure = Structure;
	params.Paints = Paints;
	params.bLastBatch = bLastBatch;
	params.bFromLoadFile = bFromLoadFile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerNotifyEditText
// ()
// Parameters:
// class FString                  TextToUse                      (Parm, ZeroConstructor)
// bool                           checkedBox                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ForObjectClass                 (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ExtraID1                       (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ExtraID2                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerNotifyEditText(const class FString& TextToUse, bool checkedBox, class UClass* ForObjectClass, uint32_t ExtraID1, uint32_t ExtraID2, class UObject* ForObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerNotifyEditText");

	AShooterPlayerController_ServerNotifyEditText_Params params;
	params.TextToUse = TextToUse;
	params.checkedBox = checkedBox;
	params.ForObjectClass = ForObjectClass;
	params.ExtraID1 = ExtraID1;
	params.ExtraID2 = ExtraID2;
	params.ForObject = ForObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerMultiUse
// ()
// Parameters:
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerMultiUse(class UObject* ForObject, int UseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerMultiUse");

	AShooterPlayerController_ServerMultiUse_Params params;
	params.ForObject = ForObject;
	params.UseIndex = UseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerLoadWorld
// ()

void AShooterPlayerController::ServerLoadWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerLoadWorld");

	AShooterPlayerController_ServerLoadWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerLoadUploadedDinos
// ()

void AShooterPlayerController::ServerLoadUploadedDinos()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerLoadUploadedDinos");

	AShooterPlayerController_ServerLoadUploadedDinos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerLoadUploadedCharacters
// ()

void AShooterPlayerController::ServerLoadUploadedCharacters()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerLoadUploadedCharacters");

	AShooterPlayerController_ServerLoadUploadedCharacters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerLoadArkInventoryItems
// ()
// Parameters:
// TArray<struct FItemNetInfo>    ArkInventoryItems              (ConstParm, Parm, ZeroConstructor)
// bool                           bFinalBatch                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerLoadArkInventoryItems(TArray<struct FItemNetInfo> ArkInventoryItems, bool bFinalBatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerLoadArkInventoryItems");

	AShooterPlayerController_ServerLoadArkInventoryItems_Params params;
	params.ArkInventoryItems = ArkInventoryItems;
	params.bFinalBatch = bFinalBatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerListPlayers
// ()

void AShooterPlayerController::ServerListPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerListPlayers");

	AShooterPlayerController_ServerListPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerKickPlayer
// ()
// Parameters:
// class FString                  PlayerSteamName                (Parm, ZeroConstructor)
// class FString                  PlayerSteamID                  (Parm, ZeroConstructor)

void AShooterPlayerController::ServerKickPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerKickPlayer");

	AShooterPlayerController_ServerKickPlayer_Params params;
	params.PlayerSteamName = PlayerSteamName;
	params.PlayerSteamID = PlayerSteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerInventoryClearCraftQueue
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterPlayerController::ServerInventoryClearCraftQueue(class UPrimalInventoryComponent* InventoryComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerInventoryClearCraftQueue");

	AShooterPlayerController_ServerInventoryClearCraftQueue_Params params;
	params.InventoryComp = InventoryComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerGlobalCommand
// ()
// Parameters:
// class FString                  Msg                            (Parm, ZeroConstructor)

void AShooterPlayerController::ServerGlobalCommand(const class FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerGlobalCommand");

	AShooterPlayerController_ServerGlobalCommand_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerGetOriginalHairColor
// ()

void AShooterPlayerController::ServerGetOriginalHairColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerGetOriginalHairColor");

	AShooterPlayerController_ServerGetOriginalHairColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerGetMessageOfTheDay
// ()

void AShooterPlayerController::ServerGetMessageOfTheDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerGetMessageOfTheDay");

	AShooterPlayerController_ServerGetMessageOfTheDay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerEquipToRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerEquipToRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerEquipToRemoteInventory");

	AShooterPlayerController_ServerEquipToRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerEquipPawnItem
// ()
// Parameters:
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerEquipPawnItem(const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerEquipPawnItem");

	AShooterPlayerController_ServerEquipPawnItem_Params params;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerDropFromRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerDropFromRemoteInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerDropFromRemoteInventory");

	AShooterPlayerController_ServerDropFromRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerDropAllNotReadyForUploadItems
// ()

void AShooterPlayerController::ServerDropAllNotReadyForUploadItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerDropAllNotReadyForUploadItems");

	AShooterPlayerController_ServerDropAllNotReadyForUploadItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerDPC
// ()

void AShooterPlayerController::ServerDPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerDPC");

	AShooterPlayerController_ServerDPC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerDownloadTransferredPlayer
// ()
// Parameters:
// int                            SpawnPointID                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            spawnPointRegionIndex          (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerDownloadTransferredPlayer(int SpawnPointID, int spawnPointRegionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerDownloadTransferredPlayer");

	AShooterPlayerController_ServerDownloadTransferredPlayer_Params params;
	params.SpawnPointID = SpawnPointID;
	params.spawnPointRegionIndex = spawnPointRegionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerDisallowPlayerToJoinNoCheck
// ()
// Parameters:
// class FString                  PlayerId                       (Parm, ZeroConstructor)

void AShooterPlayerController::ServerDisallowPlayerToJoinNoCheck(const class FString& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerDisallowPlayerToJoinNoCheck");

	AShooterPlayerController_ServerDisallowPlayerToJoinNoCheck_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerDeleteItemFromCustomFolder
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class FString                  CFolderName                    (Parm, ZeroConstructor)
// int                            InventoryCompType              (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerDeleteItemFromCustomFolder(class UPrimalInventoryComponent* forInventory, const class FString& CFolderName, int InventoryCompType, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerDeleteItemFromCustomFolder");

	AShooterPlayerController_ServerDeleteItemFromCustomFolder_Params params;
	params.forInventory = forInventory;
	params.CFolderName = CFolderName;
	params.InventoryCompType = InventoryCompType;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerDeleteCustomFolder
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class FString                  CFolderName                    (Parm, ZeroConstructor)
// int                            InventoryCompType              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerDeleteCustomFolder(class UPrimalInventoryComponent* forInventory, const class FString& CFolderName, int InventoryCompType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerDeleteCustomFolder");

	AShooterPlayerController_ServerDeleteCustomFolder_Params params;
	params.forInventory = forInventory;
	params.CFolderName = CFolderName;
	params.InventoryCompType = InventoryCompType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCycleSpectator
// ()
// Parameters:
// bool                           bNext                          (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerCycleSpectator(bool bNext)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCycleSpectator");

	AShooterPlayerController_ServerCycleSpectator_Params params;
	params.bNext = bNext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCraftItem
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerCraftItem(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCraftItem");

	AShooterPlayerController_ServerCraftItem_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCheckUnfreeze
// ()

void AShooterPlayerController::ServerCheckUnfreeze()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCheckUnfreeze");

	AShooterPlayerController_ServerCheckUnfreeze_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCheckIsValidPlayerToDownload
// ()
// Parameters:
// struct FArkTributePlayerData   PlayerData                     (ConstParm, Parm)

void AShooterPlayerController::ServerCheckIsValidPlayerToDownload(const struct FArkTributePlayerData& PlayerData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCheckIsValidPlayerToDownload");

	AShooterPlayerController_ServerCheckIsValidPlayerToDownload_Params params;
	params.PlayerData = PlayerData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_UploadItem
// ()
// Parameters:
// uint64_t                       PlayerDataID                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetInfo            InvItem                        (Parm)

void AShooterPlayerController::ServerCharacterUploadWithItems_UploadItem(uint64_t PlayerDataID, const struct FItemNetInfo& InvItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_UploadItem");

	AShooterPlayerController_ServerCharacterUploadWithItems_UploadItem_Params params;
	params.PlayerDataID = PlayerDataID;
	params.InvItem = InvItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_Start
// ()
// Parameters:
// uint64_t                       PlayerDataID                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FArkTributePlayerData   PlayerData                     (Parm)

void AShooterPlayerController::ServerCharacterUploadWithItems_Start(uint64_t PlayerDataID, const struct FArkTributePlayerData& PlayerData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_Start");

	AShooterPlayerController_ServerCharacterUploadWithItems_Start_Params params;
	params.PlayerDataID = PlayerDataID;
	params.PlayerData = PlayerData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_FinishAndCreateCharacter
// ()
// Parameters:
// uint64_t                       PlayerDataID                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerCharacterUploadWithItems_FinishAndCreateCharacter(uint64_t PlayerDataID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_FinishAndCreateCharacter");

	AShooterPlayerController_ServerCharacterUploadWithItems_FinishAndCreateCharacter_Params params;
	params.PlayerDataID = PlayerDataID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_CharaterPayload
// ()
// Parameters:
// uint64_t                       PlayerDataID                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<unsigned char>          PlayerDataChunk                (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ServerCharacterUploadWithItems_CharaterPayload(uint64_t PlayerDataID, TArray<unsigned char> PlayerDataChunk)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerCharacterUploadWithItems_CharaterPayload");

	AShooterPlayerController_ServerCharacterUploadWithItems_CharaterPayload_Params params;
	params.PlayerDataID = PlayerDataID;
	params.PlayerDataChunk = PlayerDataChunk;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerBanPlayer
// ()
// Parameters:
// class FString                  PlayerSteamName                (Parm, ZeroConstructor)
// class FString                  PlayerSteamID                  (Parm, ZeroConstructor)

void AShooterPlayerController::ServerBanPlayer(const class FString& PlayerSteamName, const class FString& PlayerSteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerBanPlayer");

	AShooterPlayerController_ServerBanPlayer_Params params;
	params.PlayerSteamName = PlayerSteamName;
	params.PlayerSteamID = PlayerSteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerAsyncLoadArkInventoryItems
// ()
// Parameters:
// TArray<struct FItemNetInfo>    ArkInventoryItems              (ConstParm, Parm, ZeroConstructor)
// bool                           bFinalBatch                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerAsyncLoadArkInventoryItems(TArray<struct FItemNetInfo> ArkInventoryItems, bool bFinalBatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerAsyncLoadArkInventoryItems");

	AShooterPlayerController_ServerAsyncLoadArkInventoryItems_Params params;
	params.ArkInventoryItems = ArkInventoryItems;
	params.bFinalBatch = bFinalBatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerAllowPlayerToJoinNoCheck
// ()
// Parameters:
// class FString                  PlayerId                       (Parm, ZeroConstructor)

void AShooterPlayerController::ServerAllowPlayerToJoinNoCheck(const class FString& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerAllowPlayerToJoinNoCheck");

	AShooterPlayerController_ServerAllowPlayerToJoinNoCheck_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerAddItemToCustomFolder
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class FString                  CFolderName                    (Parm, ZeroConstructor)
// int                            InventoryCompType              (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerAddItemToCustomFolder(class UPrimalInventoryComponent* forInventory, const class FString& CFolderName, int InventoryCompType, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerAddItemToCustomFolder");

	AShooterPlayerController_ServerAddItemToCustomFolder_Params params;
	params.forInventory = forInventory;
	params.CFolderName = CFolderName;
	params.InventoryCompType = InventoryCompType;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerAddItemToArkInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            RequestedQuantity              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerAddItemToArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int RequestedQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerAddItemToArkInventory");

	AShooterPlayerController_ServerAddItemToArkInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;
	params.RequestedQuantity = RequestedQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerAddItemFromArkInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            RequestedQuantity              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerAddItemFromArkInventory(class UPrimalInventoryComponent* InventoryComp, const struct FItemNetID& ItemId, int RequestedQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerAddItemFromArkInventory");

	AShooterPlayerController_ServerAddItemFromArkInventory_Params params;
	params.InventoryComp = InventoryComp;
	params.ItemId = ItemId;
	params.RequestedQuantity = RequestedQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerAddAchievementID
// ()
// Parameters:
// class FString                  AchievementID                  (Parm, ZeroConstructor)
// bool                           bIsOnSpawn                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ServerAddAchievementID(const class FString& AchievementID, bool bIsOnSpawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerAddAchievementID");

	AShooterPlayerController_ServerAddAchievementID_Params params;
	params.AchievementID = AchievementID;
	params.bIsOnSpawn = bIsOnSpawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerActorViewRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterPlayerController::ServerActorViewRemoteInventory(class UPrimalInventoryComponent* InventoryComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerActorViewRemoteInventory");

	AShooterPlayerController_ServerActorViewRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ServerActorCloseRemoteInventory
// ()
// Parameters:
// class UPrimalInventoryComponent* InventoryComp                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterPlayerController::ServerActorCloseRemoteInventory(class UPrimalInventoryComponent* InventoryComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ServerActorCloseRemoteInventory");

	AShooterPlayerController_ServerActorCloseRemoteInventory_Params params;
	params.InventoryComp = InventoryComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.SendAlarmNotification
// ()
// Parameters:
// class FString                  SteamID                        (Parm, ZeroConstructor)
// class FString                  Title                          (Parm, ZeroConstructor)
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterPlayerController::SendAlarmNotification(const class FString& SteamID, const class FString& Title, const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SendAlarmNotification");

	AShooterPlayerController_SendAlarmNotification_Params params;
	params.SteamID = SteamID;
	params.Title = Title;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.SameLinkedId
// ()
// Parameters:
// int64_t                        Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::SameLinkedId(int64_t Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.SameLinkedId");

	AShooterPlayerController_SameLinkedId_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.RPCStayAlive
// ()

void AShooterPlayerController::RPCStayAlive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.RPCStayAlive");

	AShooterPlayerController_RPCStayAlive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.RequestSpectator
// ()
// Parameters:
// class FString                  InSpectatorPass                (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::RequestSpectator(const class FString& InSpectatorPass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.RequestSpectator");

	AShooterPlayerController_RequestSpectator_Params params;
	params.InSpectatorPass = InSpectatorPass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.RemoveItemSucceeded
// ()

void AShooterPlayerController::RemoveItemSucceeded()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.RemoveItemSucceeded");

	AShooterPlayerController_RemoveItemSucceeded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.QuitToMainMenu
// ()

void AShooterPlayerController::QuitToMainMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.QuitToMainMenu");

	AShooterPlayerController_QuitToMainMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.PrintColors
// ()

void AShooterPlayerController::PrintColors()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.PrintColors");

	AShooterPlayerController_PrintColors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.PlayHitMarkerStructureAlly
// ()

void AShooterPlayerController::PlayHitMarkerStructureAlly()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.PlayHitMarkerStructureAlly");

	AShooterPlayerController_PlayHitMarkerStructureAlly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.PlayHitMarkerStructure
// ()

void AShooterPlayerController::PlayHitMarkerStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.PlayHitMarkerStructure");

	AShooterPlayerController_PlayHitMarkerStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.PlayHitMarkerCharacter
// ()
// Parameters:
// bool                           bHitFriendlyTarget             (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitMarkerSettings      HitMarkerSettings              (ConstParm, Parm)

void AShooterPlayerController::PlayHitMarkerCharacter(bool bHitFriendlyTarget, const struct FHitMarkerSettings& HitMarkerSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.PlayHitMarkerCharacter");

	AShooterPlayerController_PlayHitMarkerCharacter_Params params;
	params.bHitFriendlyTarget = bHitFriendlyTarget;
	params.HitMarkerSettings = HitMarkerSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.PlayerCommand
// ()
// Parameters:
// class FString                  TheCommand                     (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterPlayerController::PlayerCommand(const class FString& TheCommand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.PlayerCommand");

	AShooterPlayerController_PlayerCommand_Params params;
	params.TheCommand = TheCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.OnToggleInGameMenu
// ()

void AShooterPlayerController::OnToggleInGameMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnToggleInGameMenu");

	AShooterPlayerController_OnToggleInGameMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnToggleDoFMenu
// ()

void AShooterPlayerController::OnToggleDoFMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnToggleDoFMenu");

	AShooterPlayerController_OnToggleDoFMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnStopTargeting
// ()

void AShooterPlayerController::OnStopTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnStopTargeting");

	AShooterPlayerController_OnStopTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnStopFire
// ()

void AShooterPlayerController::OnStopFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnStopFire");

	AShooterPlayerController_OnStopFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnStartTargeting
// ()

void AShooterPlayerController::OnStartTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnStartTargeting");

	AShooterPlayerController_OnStartTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnStartFire
// ()

void AShooterPlayerController::OnStartFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnStartFire");

	AShooterPlayerController_OnStartFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnServerRefreshSteamInventoryFinished
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       SteamID                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnServerRefreshSteamInventoryFinished(bool bSuccess, uint64_t SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnServerRefreshSteamInventoryFinished");

	AShooterPlayerController_OnServerRefreshSteamInventoryFinished_Params params;
	params.bSuccess = bSuccess;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnRefreshSteamInventoryToCheckConsumeFinished
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       SteamID                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnRefreshSteamInventoryToCheckConsumeFinished(bool bSuccess, uint64_t SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnRefreshSteamInventoryToCheckConsumeFinished");

	AShooterPlayerController_OnRefreshSteamInventoryToCheckConsumeFinished_Params params;
	params.bSuccess = bSuccess;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnRefreshSteamInventoryFinished
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       SteamID                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnRefreshSteamInventoryFinished(bool bSuccess, uint64_t SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnRefreshSteamInventoryFinished");

	AShooterPlayerController_OnRefreshSteamInventoryFinished_Params params;
	params.bSuccess = bSuccess;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnLoadArkTributePlayersDataFinished
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FArkTributePlayerData> PlayersData                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            FailureResponseCode            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnLoadArkTributePlayersDataFinished(bool Success, TArray<struct FArkTributePlayerData> PlayersData, int FailureResponseCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnLoadArkTributePlayersDataFinished");

	AShooterPlayerController_OnLoadArkTributePlayersDataFinished_Params params;
	params.Success = Success;
	params.PlayersData = PlayersData;
	params.FailureResponseCode = FailureResponseCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnDisableSpectator
// ()

void AShooterPlayerController::OnDisableSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnDisableSpectator");

	AShooterPlayerController_OnDisableSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnCurrentCharacterAndItemsUploaded
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnCurrentCharacterAndItemsUploaded(bool Success)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnCurrentCharacterAndItemsUploaded");

	AShooterPlayerController_OnCurrentCharacterAndItemsUploaded_Params params;
	params.Success = Success;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnConsumeItemFinished
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       SteamID                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnConsumeItemFinished(bool bSuccess, uint64_t SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnConsumeItemFinished");

	AShooterPlayerController_OnConsumeItemFinished_Params params;
	params.bSuccess = bSuccess;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnArkTributeSaved
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnArkTributeSaved(bool Success)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnArkTributeSaved");

	AShooterPlayerController_OnArkTributeSaved_Params params;
	params.Success = Success;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnAddItemFinished
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<uint64_t>               SteamItemUserIDs               (Parm, ZeroConstructor)
// uint64_t                       SteamID                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::OnAddItemFinished(bool bSuccess, TArray<uint64_t> SteamItemUserIDs, uint64_t SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnAddItemFinished");

	AShooterPlayerController_OnAddItemFinished_Params params;
	params.bSuccess = bSuccess;
	params.SteamItemUserIDs = SteamItemUserIDs;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.OnAddedItemsToAllClustersInventory
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<int>                    MasterIndexNum                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void AShooterPlayerController::OnAddedItemsToAllClustersInventory(bool Success, const class FString& UserId, TArray<int> MasterIndexNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.OnAddedItemsToAllClustersInventory");

	AShooterPlayerController_OnAddedItemsToAllClustersInventory_Params params;
	params.Success = Success;
	params.UserId = UserId;
	params.MasterIndexNum = MasterIndexNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.NotifyTribeWarStatus
// ()
// Parameters:
// class FString                  EnemyTribeString               (Parm, ZeroConstructor)
// int                            StatusType                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::NotifyTribeWarStatus(const class FString& EnemyTribeString, int StatusType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.NotifyTribeWarStatus");

	AShooterPlayerController_NotifyTribeWarStatus_Params params;
	params.EnemyTribeString = EnemyTribeString;
	params.StatusType = StatusType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.LockEmote
// ()
// Parameters:
// struct FName                   EmoteName                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::LockEmote(const struct FName& EmoteName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.LockEmote");

	AShooterPlayerController_LockEmote_Params params;
	params.EmoteName = EmoteName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.LinkedPlayerIDString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterPlayerController::LinkedPlayerIDString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.LinkedPlayerIDString");

	AShooterPlayerController_LinkedPlayerIDString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.LevelView
// ()

void AShooterPlayerController::LevelView()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.LevelView");

	AShooterPlayerController_LevelView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.IsViewingInventoryUI
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsViewingInventoryUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsViewingInventoryUI");

	AShooterPlayerController_IsViewingInventoryUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsTribeAdmin
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsTribeAdmin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsTribeAdmin");

	AShooterPlayerController_IsTribeAdmin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsSpectator
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsSpectator");

	AShooterPlayerController_IsSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsJumpInputPressed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsJumpInputPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsJumpInputPressed");

	AShooterPlayerController_IsJumpInputPressed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsInTribe
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsInTribe()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsInTribe");

	AShooterPlayerController_IsInTribe_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsHudVisible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsHudVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsHudVisible");

	AShooterPlayerController_IsHudVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsFirstLocalPlayerOrLivingLocalPlayer
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsFirstLocalPlayerOrLivingLocalPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsFirstLocalPlayerOrLivingLocalPlayer");

	AShooterPlayerController_IsFirstLocalPlayerOrLivingLocalPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsFirstLocalPlayer
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsFirstLocalPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsFirstLocalPlayer");

	AShooterPlayerController_IsFirstLocalPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsEmoteUnlocked
// ()
// Parameters:
// struct FName                   EmoteName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsEmoteUnlocked(const struct FName& EmoteName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsEmoteUnlocked");

	AShooterPlayerController_IsEmoteUnlocked_Params params;
	params.EmoteName = EmoteName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsAtPersonalTameLimit
// ()
// Parameters:
// bool                           bIsForStructure                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsAtPersonalTameLimit(bool bIsForStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsAtPersonalTameLimit");

	AShooterPlayerController_IsAtPersonalTameLimit_Params params;
	params.bIsForStructure = bIsForStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.IsAltFireInputPressed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::IsAltFireInputPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.IsAltFireInputPressed");

	AShooterPlayerController_IsAltFireInputPressed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.InitCharacterPainting
// ()
// Parameters:
// class APrimalCharacter*        Char                           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::InitCharacterPainting(class APrimalCharacter* Char)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.InitCharacterPainting");

	AShooterPlayerController_InitCharacterPainting_Params params;
	params.Char = Char;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.HideRiders
// ()
// Parameters:
// bool                           bDoHide                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::HideRiders(bool bDoHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.HideRiders");

	AShooterPlayerController_HideRiders_Params params;
	params.bDoHide = bDoHide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.GlobalCommand
// ()
// Parameters:
// class FString                  Msg                            (Parm, ZeroConstructor)

void AShooterPlayerController::GlobalCommand(const class FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GlobalCommand");

	AShooterPlayerController_GlobalCommand_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.GiveSlotItemNum
// ()
// Parameters:
// int                            MasterIndexNum                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            slotNum                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::GiveSlotItemNum(int MasterIndexNum, int slotNum, int quantityOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GiveSlotItemNum");

	AShooterPlayerController_GiveSlotItemNum_Params params;
	params.MasterIndexNum = MasterIndexNum;
	params.slotNum = slotNum;
	params.quantityOverride = quantityOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GiveSlotItem
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// int                            slotNum                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::GiveSlotItem(const class FString& blueprintPath, int slotNum, int quantityOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GiveSlotItem");

	AShooterPlayerController_GiveSlotItem_Params params;
	params.blueprintPath = blueprintPath;
	params.slotNum = slotNum;
	params.quantityOverride = quantityOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GiveColors
// ()
// Parameters:
// int                            Quantity                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::GiveColors(int Quantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GiveColors");

	AShooterPlayerController_GiveColors_Params params;
	params.Quantity = Quantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.GetSubscribedAppIds
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterPlayerController::GetSubscribedAppIds()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetSubscribedAppIds");

	AShooterPlayerController_GetSubscribedAppIds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetShooterHUD
// ()
// Parameters:
// class AShooterHUD*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterHUD* AShooterPlayerController::GetShooterHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetShooterHUD");

	AShooterPlayerController_GetShooterHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetPlayerCharacterName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterPlayerController::GetPlayerCharacterName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetPlayerCharacterName");

	AShooterPlayerController_GetPlayerCharacterName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetPlayerCharacter
// ()
// Parameters:
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* AShooterPlayerController::GetPlayerCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetPlayerCharacter");

	AShooterPlayerController_GetPlayerCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetPersonalTameLimitString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterPlayerController::GetPersonalTameLimitString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetPersonalTameLimitString");

	AShooterPlayerController_GetPersonalTameLimitString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetLinkedPlayerID
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterPlayerController::GetLinkedPlayerID()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetLinkedPlayerID");

	AShooterPlayerController_GetLinkedPlayerID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetInventoryUISelectedItemRemote
// ()
// Parameters:
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* AShooterPlayerController::GetInventoryUISelectedItemRemote()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetInventoryUISelectedItemRemote");

	AShooterPlayerController_GetInventoryUISelectedItemRemote_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetInventoryUISelectedItemLocal
// ()
// Parameters:
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* AShooterPlayerController::GetInventoryUISelectedItemLocal()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetInventoryUISelectedItemLocal");

	AShooterPlayerController_GetInventoryUISelectedItemLocal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetExplorerNoteEntry
// ()
// Parameters:
// int                            ExplorerNoteIndex              (Parm, ZeroConstructor, IsPlainOldData)
// struct FExplorerNoteEntry      ReturnValue                    (Parm, OutParm, ReturnParm)

struct FExplorerNoteEntry AShooterPlayerController::GetExplorerNoteEntry(int ExplorerNoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetExplorerNoteEntry");

	AShooterPlayerController_GetExplorerNoteEntry_Params params;
	params.ExplorerNoteIndex = ExplorerNoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.GetAllMatinees
// ()

void AShooterPlayerController::GetAllMatinees()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetAllMatinees");

	AShooterPlayerController_GetAllMatinees_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.GetAllAimedHarvestActors
// ()
// Parameters:
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutHarvestActors               (Parm, OutParm, ZeroConstructor)
// TArray<class UActorComponent*> OutHarvestComponents           (Parm, OutParm, ZeroConstructor)
// TArray<int>                    OutHitBodyIndices              (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::GetAllAimedHarvestActors(float MaxDistance, TArray<class AActor*>* OutHarvestActors, TArray<class UActorComponent*>* OutHarvestComponents, TArray<int>* OutHitBodyIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.GetAllAimedHarvestActors");

	AShooterPlayerController_GetAllAimedHarvestActors_Params params;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHarvestActors != nullptr)
		*OutHarvestActors = params.OutHarvestActors;
	if (OutHarvestComponents != nullptr)
		*OutHarvestComponents = params.OutHarvestComponents;
	if (OutHitBodyIndices != nullptr)
		*OutHitBodyIndices = params.OutHitBodyIndices;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.FlushPrimalStats
// ()

void AShooterPlayerController::FlushPrimalStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.FlushPrimalStats");

	AShooterPlayerController_FlushPrimalStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.FlushLevelStreaming
// ()

void AShooterPlayerController::FlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.FlushLevelStreaming");

	AShooterPlayerController_FlushLevelStreaming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.EnvQA
// ()

void AShooterPlayerController::EnvQA()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.EnvQA");

	AShooterPlayerController_EnvQA_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.EndSurfaceCamera
// ()

void AShooterPlayerController::EndSurfaceCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.EndSurfaceCamera");

	AShooterPlayerController_EndSurfaceCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.EnableSpectator
// ()

void AShooterPlayerController::EnableSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.EnableSpectator");

	AShooterPlayerController_EnableSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.DoServerCheckUnfreeze
// ()

void AShooterPlayerController::DoServerCheckUnfreeze()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.DoServerCheckUnfreeze");

	AShooterPlayerController_DoServerCheckUnfreeze_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.DoCrash
// ()

void AShooterPlayerController::DoCrash()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.DoCrash");

	AShooterPlayerController_DoCrash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.DisableSurfaceCameraInterpolation
// ()

void AShooterPlayerController::DisableSurfaceCameraInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.DisableSurfaceCameraInterpolation");

	AShooterPlayerController_DisableSurfaceCameraInterpolation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.DebugStructures
// ()

void AShooterPlayerController::DebugStructures()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.DebugStructures");

	AShooterPlayerController_DebugStructures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.DebugCheckSeven
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::DebugCheckSeven(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.DebugCheckSeven");

	AShooterPlayerController_DebugCheckSeven_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.CopyCoordsToClipboard
// ()

void AShooterPlayerController::CopyCoordsToClipboard()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.CopyCoordsToClipboard");

	AShooterPlayerController_CopyCoordsToClipboard_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUsedActorItem
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientUsedActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUsedActorItem");

	AShooterPlayerController_ClientUsedActorItem_Params params;
	params.forInventory = forInventory;
	params.ItemId = ItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUploadedDinosLoaded
// ()
// Parameters:
// TArray<struct FARKTributeDinoListing> UploadedDinosDataListings      (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientUploadedDinosLoaded(TArray<struct FARKTributeDinoListing> UploadedDinosDataListings)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUploadedDinosLoaded");

	AShooterPlayerController_ClientUploadedDinosLoaded_Params params;
	params.UploadedDinosDataListings = UploadedDinosDataListings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUploadedCharactersLoaded
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FArkTributePlayerDataListing> UploadedCharactersDataListings (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientUploadedCharactersLoaded(bool Success, TArray<struct FArkTributePlayerDataListing> UploadedCharactersDataListings)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUploadedCharactersLoaded");

	AShooterPlayerController_ClientUploadedCharactersLoaded_Params params;
	params.Success = Success;
	params.UploadedCharactersDataListings = UploadedCharactersDataListings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUploadDino
// ()
// Parameters:
// class APrimalDinoCharacter*    DownloadedDino                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientUploadDino(class APrimalDinoCharacter* DownloadedDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUploadDino");

	AShooterPlayerController_ClientUploadDino_Params params;
	params.DownloadedDino = DownloadedDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUpdateItemWeaponClipAmmo
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ammo                           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientUpdateItemWeaponClipAmmo(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, int ammo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUpdateItemWeaponClipAmmo");

	AShooterPlayerController_ClientUpdateItemWeaponClipAmmo_Params params;
	params.forInventory = forInventory;
	params.ItemId = ItemId;
	params.ammo = ammo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUpdateItemQuantity
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ItemQuantity                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientUpdateItemQuantity(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, int ItemQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUpdateItemQuantity");

	AShooterPlayerController_ClientUpdateItemQuantity_Params params;
	params.forInventory = forInventory;
	params.ItemId = ItemId;
	params.ItemQuantity = ItemQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUpdateItemDurability
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ItemDurability                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientUpdateItemDurability(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, float ItemDurability)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUpdateItemDurability");

	AShooterPlayerController_ClientUpdateItemDurability_Params params;
	params.forInventory = forInventory;
	params.ItemId = ItemId;
	params.ItemDurability = ItemDurability;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUpdateInventoryCraftQueue
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<struct FItemCraftQueueEntry> CraftQueueEntries              (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientUpdateInventoryCraftQueue(class UPrimalInventoryComponent* forInventory, TArray<struct FItemCraftQueueEntry> CraftQueueEntries)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUpdateInventoryCraftQueue");

	AShooterPlayerController_ClientUpdateInventoryCraftQueue_Params params;
	params.forInventory = forInventory;
	params.CraftQueueEntries = CraftQueueEntries;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUnlockExplorerNote
// ()
// Parameters:
// int                            ExplorerNoteIndex              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientUnlockExplorerNote(int ExplorerNoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUnlockExplorerNote");

	AShooterPlayerController_ClientUnlockExplorerNote_Params params;
	params.ExplorerNoteIndex = ExplorerNoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientUnlockAchievement
// ()
// Parameters:
// class FString                  AchievementID                  (Parm, ZeroConstructor)

void AShooterPlayerController::ClientUnlockAchievement(const class FString& AchievementID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientUnlockAchievement");

	AShooterPlayerController_ClientUnlockAchievement_Params params;
	params.AchievementID = AchievementID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientTeleportSpectator
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientTeleportSpectator(const struct FVector& Location, uint64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientTeleportSpectator");

	AShooterPlayerController_ClientTeleportSpectator_Params params;
	params.Location = Location;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSwapActorItems
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemID1                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FItemNetID              ItemID2                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSwapActorItems(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemID1, const struct FItemNetID& ItemID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSwapActorItems");

	AShooterPlayerController_ClientSwapActorItems_Params params;
	params.forInventory = forInventory;
	params.ItemID1 = ItemID1;
	params.ItemID2 = ItemID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientStopLocalSound
// ()
// Parameters:
// class USoundBase*              aSound                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientStopLocalSound(class USoundBase* aSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientStopLocalSound");

	AShooterPlayerController_ClientStopLocalSound_Params params;
	params.aSound = aSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientStartSurfaceCameraForPassenger
// ()
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInvertTurnInput               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bInvertTurnInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientStartSurfaceCameraForPassenger");

	AShooterPlayerController_ClientStartSurfaceCameraForPassenger_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Roll = Roll;
	params.bInvertTurnInput = bInvertTurnInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientStartReceivingTribeLog
// ()

void AShooterPlayerController::ClientStartReceivingTribeLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientStartReceivingTribeLog");

	AShooterPlayerController_ClientStartReceivingTribeLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientStartReceivingActorItems
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bEquippedItems                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientStartReceivingActorItems(class UPrimalInventoryComponent* forInventory, bool bEquippedItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientStartReceivingActorItems");

	AShooterPlayerController_ClientStartReceivingActorItems_Params params;
	params.forInventory = forInventory;
	params.bEquippedItems = bEquippedItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientShowTransferredPlayerConfirmationDialog
// ()

void AShooterPlayerController::ClientShowTransferredPlayerConfirmationDialog()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientShowTransferredPlayerConfirmationDialog");

	AShooterPlayerController_ClientShowTransferredPlayerConfirmationDialog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientShowSpawnUIForTransferringPlayer
// ()
// Parameters:
// class UClass*                  NewHUDClass                    (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       TransferingPlayerID            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseTimer                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientShowSpawnUIForTransferringPlayer(class UClass* NewHUDClass, uint64_t TransferingPlayerID, bool bUseTimer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientShowSpawnUIForTransferringPlayer");

	AShooterPlayerController_ClientShowSpawnUIForTransferringPlayer_Params params;
	params.NewHUDClass = NewHUDClass;
	params.TransferingPlayerID = TransferingPlayerID;
	params.bUseTimer = bUseTimer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientShowSpawnUI
// ()
// Parameters:
// float                          Delay                          (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientShowSpawnUI(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientShowSpawnUI");

	AShooterPlayerController_ClientShowSpawnUI_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientShowPaintingUI
// ()
// Parameters:
// class UObject*                 ObjectToPaint                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientShowPaintingUI(class UObject* ObjectToPaint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientShowPaintingUI");

	AShooterPlayerController_ClientShowPaintingUI_Params params;
	params.ObjectToPaint = ObjectToPaint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientShowCharacterCreationUI
// ()
// Parameters:
// bool                           bShowDownloadCharacter         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientShowCharacterCreationUI(bool bShowDownloadCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientShowCharacterCreationUI");

	AShooterPlayerController_ClientShowCharacterCreationUI_Params params;
	params.bShowDownloadCharacter = bShowDownloadCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSetSpectatorLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSetSpectatorLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSetSpectatorLocation");

	AShooterPlayerController_ClientSetSpectatorLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSetPersonalDinoTameCount
// ()
// Parameters:
// int                            NewPersonalDinoTameCount       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSetPersonalDinoTameCount(int NewPersonalDinoTameCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSetPersonalDinoTameCount");

	AShooterPlayerController_ClientSetPersonalDinoTameCount_Params params;
	params.NewPersonalDinoTameCount = NewPersonalDinoTameCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSetHUDAndInitUIScenes
// ()
// Parameters:
// class UClass*                  NewHUDClass                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSetHUDAndInitUIScenes(class UClass* NewHUDClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSetHUDAndInitUIScenes");

	AShooterPlayerController_ClientSetHUDAndInitUIScenes_Params params;
	params.NewHUDClass = NewHUDClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSetControlRotation
// ()
// Parameters:
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSetControlRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSetControlRotation");

	AShooterPlayerController_ClientSetControlRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSetArkTributeLimits
// ()
// Parameters:
// bool                           LimitItems                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           LimitDinos                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           LimitCharacters                (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxItems                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxDinos                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxCharacters                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSetArkTributeLimits(bool LimitItems, bool LimitDinos, bool LimitCharacters, int MaxItems, int MaxDinos, int MaxCharacters)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSetArkTributeLimits");

	AShooterPlayerController_ClientSetArkTributeLimits_Params params;
	params.LimitItems = LimitItems;
	params.LimitDinos = LimitDinos;
	params.LimitCharacters = LimitCharacters;
	params.MaxItems = MaxItems;
	params.MaxDinos = MaxDinos;
	params.MaxCharacters = MaxCharacters;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientServerSOTFNotificationCustom
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayScale                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayTime                    (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              MessageIcon                    (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              SoundToPlay                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientServerSOTFNotificationCustom(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientServerSOTFNotificationCustom");

	AShooterPlayerController_ClientServerSOTFNotificationCustom_Params params;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.DisplayScale = DisplayScale;
	params.DisplayTime = DisplayTime;
	params.MessageIcon = MessageIcon;
	params.SoundToPlay = SoundToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientServerSOTFNotification
// ()
// Parameters:
// TEnumAsByte<ESTOFNotificationType> NotificationType               (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayScale                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayTime                    (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              MessageIcon                    (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              SoundToPlay                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLastPlayer                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  TribeName                      (Parm, ZeroConstructor)
// TArray<class FString>          PlayerNames                    (ConstParm, Parm, ZeroConstructor)
// class FString                  DeathReason                    (Parm, ZeroConstructor)
// TArray<struct FPrimalPlayerCharacterConfigStructReplicated> DeadPlayersData                (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientServerSOTFNotification(TEnumAsByte<ESTOFNotificationType> NotificationType, const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, bool bLastPlayer, const class FString& TribeName, TArray<class FString> PlayerNames, const class FString& DeathReason, TArray<struct FPrimalPlayerCharacterConfigStructReplicated> DeadPlayersData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientServerSOTFNotification");

	AShooterPlayerController_ClientServerSOTFNotification_Params params;
	params.NotificationType = NotificationType;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.DisplayScale = DisplayScale;
	params.DisplayTime = DisplayTime;
	params.MessageIcon = MessageIcon;
	params.SoundToPlay = SoundToPlay;
	params.bLastPlayer = bLastPlayer;
	params.TribeName = TribeName;
	params.PlayerNames = PlayerNames;
	params.DeathReason = DeathReason;
	params.DeadPlayersData = DeadPlayersData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientServerNotificationSingle
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayScale                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayTime                    (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              MessageIcon                    (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              SoundToPlay                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            MessageTypeID                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientServerNotificationSingle(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int MessageTypeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientServerNotificationSingle");

	AShooterPlayerController_ClientServerNotificationSingle_Params params;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.DisplayScale = DisplayScale;
	params.DisplayTime = DisplayTime;
	params.MessageIcon = MessageIcon;
	params.SoundToPlay = SoundToPlay;
	params.MessageTypeID = MessageTypeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientServerNotification
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayScale                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayTime                    (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              MessageIcon                    (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              SoundToPlay                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientServerNotification(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientServerNotification");

	AShooterPlayerController_ClientServerNotification_Params params;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.DisplayScale = DisplayScale;
	params.DisplayTime = DisplayTime;
	params.MessageIcon = MessageIcon;
	params.SoundToPlay = SoundToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientServerChatMessage
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBold                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientServerChatMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientServerChatMessage");

	AShooterPlayerController_ClientServerChatMessage_Params params;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.bIsBold = bIsBold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientServerChatDirectMessage
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBold                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientServerChatDirectMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientServerChatDirectMessage");

	AShooterPlayerController_ClientServerChatDirectMessage_Params params;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.bIsBold = bIsBold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSendItemNetExecCommandToServer
// ()
// Parameters:
// class UPrimalItem*             forItem                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsReliable                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSendItemNetExecCommandToServer(class UPrimalItem* forItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams, bool bIsReliable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSendItemNetExecCommandToServer");

	AShooterPlayerController_ClientSendItemNetExecCommandToServer_Params params;
	params.forItem = forItem;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;
	params.bIsReliable = bIsReliable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSendFolderData
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<struct FServerCustomFolder> ServerCustomFolder             (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientSendFolderData(class UPrimalInventoryComponent* forInventory, TArray<struct FServerCustomFolder> ServerCustomFolder)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSendFolderData");

	AShooterPlayerController_ClientSendFolderData_Params params;
	params.forInventory = forInventory;
	params.ServerCustomFolder = ServerCustomFolder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSendArkDataPayloadEnd
// ()
// Parameters:
// struct FGuid                   ID                             (Parm, ZeroConstructor)
// TEnumAsByte<EPrimalARKTributeDataType> ArkDataType                    (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       PlayerDataID                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSendArkDataPayloadEnd(const struct FGuid& ID, TEnumAsByte<EPrimalARKTributeDataType> ArkDataType, uint64_t PlayerDataID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSendArkDataPayloadEnd");

	AShooterPlayerController_ClientSendArkDataPayloadEnd_Params params;
	params.ID = ID;
	params.ArkDataType = ArkDataType;
	params.PlayerDataID = PlayerDataID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSendArkDataPayloadBegin
// ()
// Parameters:
// struct FGuid                   ID                             (Parm, ZeroConstructor)
// TEnumAsByte<EPrimalARKTributeDataType> ArkDataType                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  DataClass                      (Parm, ZeroConstructor)
// class FString                  TagName                        (Parm, ZeroConstructor)
// class FString                  Name                           (Parm, ZeroConstructor)
// TArray<class FString>          DataStats                      (ConstParm, Parm, ZeroConstructor)
// uint32_t                       ID1                            (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ID2                            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientSendArkDataPayloadBegin(const struct FGuid& ID, TEnumAsByte<EPrimalARKTributeDataType> ArkDataType, const class FString& DataClass, const class FString& TagName, const class FString& Name, TArray<class FString> DataStats, uint32_t ID1, uint32_t ID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSendArkDataPayloadBegin");

	AShooterPlayerController_ClientSendArkDataPayloadBegin_Params params;
	params.ID = ID;
	params.ArkDataType = ArkDataType;
	params.DataClass = DataClass;
	params.TagName = TagName;
	params.Name = Name;
	params.DataStats = DataStats;
	params.ID1 = ID1;
	params.ID2 = ID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientSendArkDataPayload
// ()
// Parameters:
// struct FGuid                   ID                             (Parm, ZeroConstructor)
// TEnumAsByte<EPrimalARKTributeDataType> ArkDataType                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<unsigned char>          DataBytes                      (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientSendArkDataPayload(const struct FGuid& ID, TEnumAsByte<EPrimalARKTributeDataType> ArkDataType, TArray<unsigned char> DataBytes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientSendArkDataPayload");

	AShooterPlayerController_ClientSendArkDataPayload_Params params;
	params.ID = ID;
	params.ArkDataType = ArkDataType;
	params.DataBytes = DataBytes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientRunLocalConsoleCommand
// ()
// Parameters:
// class FString                  Command                        (Parm, ZeroConstructor)
// bool                           bWriteToLog                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientRunLocalConsoleCommand(const class FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientRunLocalConsoleCommand");

	AShooterPlayerController_ClientRunLocalConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientResetRespawningFlag
// ()

void AShooterPlayerController::ClientResetRespawningFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientResetRespawningFlag");

	AShooterPlayerController_ClientResetRespawningFlag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientRequestSpectatorLocationAndRotation
// ()

void AShooterPlayerController::ClientRequestSpectatorLocationAndRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientRequestSpectatorLocationAndRotation");

	AShooterPlayerController_ClientRequestSpectatorLocationAndRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientRemoveItemFromSteamInventory
// ()
// Parameters:
// TArray<uint64_t>               ItemSteamUserID                (ConstParm, Parm, ZeroConstructor)
// int                            Quantity                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientRemoveItemFromSteamInventory(TArray<uint64_t> ItemSteamUserID, int Quantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientRemoveItemFromSteamInventory");

	AShooterPlayerController_ClientRemoveItemFromSteamInventory_Params params;
	params.ItemSteamUserID = ItemSteamUserID;
	params.Quantity = Quantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientRemoveItemFromArk
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              RemovedItemID                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientRemoveItemFromArk(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& RemovedItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientRemoveItemFromArk");

	AShooterPlayerController_ClientRemoveItemFromArk_Params params;
	params.forInventory = forInventory;
	params.RemovedItemID = RemovedItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientRemoveActorItem
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ItemId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           showHUDMessage                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientRemoveActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ItemId, bool showHUDMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientRemoveActorItem");

	AShooterPlayerController_ClientRemoveActorItem_Params params;
	params.forInventory = forInventory;
	params.ItemId = ItemId;
	params.showHUDMessage = showHUDMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientRefreshSteamInventoryFinished
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientRefreshSteamInventoryFinished(bool bSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientRefreshSteamInventoryFinished");

	AShooterPlayerController_ClientRefreshSteamInventoryFinished_Params params;
	params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientReceiveTribeLog
// ()
// Parameters:
// class FString                  LogString                      (Parm, ZeroConstructor)

void AShooterPlayerController::ClientReceiveTribeLog(const class FString& LogString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientReceiveTribeLog");

	AShooterPlayerController_ClientReceiveTribeLog_Params params;
	params.LogString = LogString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientReceiveOriginalHairColor
// ()
// Parameters:
// struct FLinearColor            HairColor                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientReceiveOriginalHairColor(const struct FLinearColor& HairColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientReceiveOriginalHairColor");

	AShooterPlayerController_ClientReceiveOriginalHairColor_Params params;
	params.HairColor = HairColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientReceiveMyTribeOnlineList
// ()
// Parameters:
// TArray<uint32_t>               OnlinePlayerIDs                (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientReceiveMyTribeOnlineList(TArray<uint32_t> OnlinePlayerIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientReceiveMyTribeOnlineList");

	AShooterPlayerController_ClientReceiveMyTribeOnlineList_Params params;
	params.OnlinePlayerIDs = OnlinePlayerIDs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientReceiveDinoAncestors
// ()
// Parameters:
// class APrimalDinoCharacter*    ForDino                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FDinoAncestorsEntry> DinoAncestors                  (ConstParm, Parm, ZeroConstructor)
// TArray<struct FDinoAncestorsEntry> DinoAncestorsMale              (ConstParm, Parm, ZeroConstructor)
// int                            RandomMutationsFemale          (Parm, ZeroConstructor, IsPlainOldData)
// int                            RandomMutationsMale            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientReceiveDinoAncestors(class APrimalDinoCharacter* ForDino, TArray<struct FDinoAncestorsEntry> DinoAncestors, TArray<struct FDinoAncestorsEntry> DinoAncestorsMale, int RandomMutationsFemale, int RandomMutationsMale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientReceiveDinoAncestors");

	AShooterPlayerController_ClientReceiveDinoAncestors_Params params;
	params.ForDino = ForDino;
	params.DinoAncestors = DinoAncestors;
	params.DinoAncestorsMale = DinoAncestorsMale;
	params.RandomMutationsFemale = RandomMutationsFemale;
	params.RandomMutationsMale = RandomMutationsMale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientProcessItemNetExecCommandUnreliableBP
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ForItemID                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEquippedItem                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void AShooterPlayerController::ClientProcessItemNetExecCommandUnreliableBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientProcessItemNetExecCommandUnreliableBP");

	AShooterPlayerController_ClientProcessItemNetExecCommandUnreliableBP_Params params;
	params.forInventory = forInventory;
	params.ForItemID = ForItemID;
	params.bIsEquippedItem = bIsEquippedItem;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientProcessItemNetExecCommandBP
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetID              ForItemID                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEquippedItem                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CommandName                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FBPNetExecParams        ExecParams                     (Parm)

void AShooterPlayerController::ClientProcessItemNetExecCommandBP(class UPrimalInventoryComponent* forInventory, const struct FItemNetID& ForItemID, bool bIsEquippedItem, const struct FName& CommandName, const struct FBPNetExecParams& ExecParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientProcessItemNetExecCommandBP");

	AShooterPlayerController_ClientProcessItemNetExecCommandBP_Params params;
	params.forInventory = forInventory;
	params.ForItemID = ForItemID;
	params.bIsEquippedItem = bIsEquippedItem;
	params.CommandName = CommandName;
	params.ExecParams = ExecParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientPlayLocalSound
// ()
// Parameters:
// class USoundBase*              aSound                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAttach                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientPlayLocalSound(class USoundBase* aSound, bool bAttach)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientPlayLocalSound");

	AShooterPlayerController_ClientPlayLocalSound_Params params;
	params.aSound = aSound;
	params.bAttach = bAttach;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientPlayerIsValidToDownload
// ()
// Parameters:
// bool                           bIsValid                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FArkTributePlayerData   PlayerData                     (ConstParm, Parm)

void AShooterPlayerController::ClientPlayerIsValidToDownload(bool bIsValid, const struct FArkTributePlayerData& PlayerData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientPlayerIsValidToDownload");

	AShooterPlayerController_ClientPlayerIsValidToDownload_Params params;
	params.bIsValid = bIsValid;
	params.PlayerData = PlayerData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientOnStartDownloadTransferredPlayerCharacter
// ()

void AShooterPlayerController::ClientOnStartDownloadTransferredPlayerCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientOnStartDownloadTransferredPlayerCharacter");

	AShooterPlayerController_ClientOnStartDownloadTransferredPlayerCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientOnEndDownloadTransferredPlayerCharacter
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            FailureResponseCode            (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FailureResponseMessage         (Parm, ZeroConstructor)

void AShooterPlayerController::ClientOnEndDownloadTransferredPlayerCharacter(bool Success, int FailureResponseCode, const class FString& FailureResponseMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientOnEndDownloadTransferredPlayerCharacter");

	AShooterPlayerController_ClientOnEndDownloadTransferredPlayerCharacter_Params params;
	params.Success = Success;
	params.FailureResponseCode = FailureResponseCode;
	params.FailureResponseMessage = FailureResponseMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientOnDropAllNotReadyForUploadItemsFinished
// ()

void AShooterPlayerController::ClientOnDropAllNotReadyForUploadItemsFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientOnDropAllNotReadyForUploadItemsFinished");

	AShooterPlayerController_ClientOnDropAllNotReadyForUploadItemsFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientOnCurrentCharacterAndItemsUploaded
// ()
// Parameters:
// uint64_t                       TransferringPlayerDataId       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientOnCurrentCharacterAndItemsUploaded(uint64_t TransferringPlayerDataId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientOnCurrentCharacterAndItemsUploaded");

	AShooterPlayerController_ClientOnCurrentCharacterAndItemsUploaded_Params params;
	params.TransferringPlayerDataId = TransferringPlayerDataId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientOnAddedItemsToAllClustersInventory
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  UserId                         (Parm, ZeroConstructor)
// TArray<int>                    MasterIndexNum                 (ConstParm, Parm, ZeroConstructor)

void AShooterPlayerController::ClientOnAddedItemsToAllClustersInventory(bool Success, const class FString& UserId, TArray<int> MasterIndexNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientOnAddedItemsToAllClustersInventory");

	AShooterPlayerController_ClientOnAddedItemsToAllClustersInventory_Params params;
	params.Success = Success;
	params.UserId = UserId;
	params.MasterIndexNum = MasterIndexNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyUnlockHairStyleOrEmote
// ()
// Parameters:
// struct FName                   HairstyleOrEmoteName           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyUnlockHairStyleOrEmote(const struct FName& HairstyleOrEmoteName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyUnlockHairStyleOrEmote");

	AShooterPlayerController_ClientNotifyUnlockHairStyleOrEmote_Params params;
	params.HairstyleOrEmoteName = HairstyleOrEmoteName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyUnlockedEngram
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTekGram                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyUnlockedEngram(class UClass* ItemClass, bool bTekGram)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyUnlockedEngram");

	AShooterPlayerController_ClientNotifyUnlockedEngram_Params params;
	params.ItemClass = ItemClass;
	params.bTekGram = bTekGram;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyTribeXP
// ()
// Parameters:
// float                          HowMuch                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyTribeXP(float HowMuch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyTribeXP");

	AShooterPlayerController_ClientNotifyTribeXP_Params params;
	params.HowMuch = HowMuch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyTorpidityIncrease
// ()

void AShooterPlayerController::ClientNotifyTorpidityIncrease()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyTorpidityIncrease");

	AShooterPlayerController_ClientNotifyTorpidityIncrease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyTamedDino
// ()
// Parameters:
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyTamedDino(class UClass* DinoClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyTamedDino");

	AShooterPlayerController_ClientNotifyTamedDino_Params params;
	params.DinoClass = DinoClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifySummonedDino
// ()
// Parameters:
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifySummonedDino(class UClass* DinoClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifySummonedDino");

	AShooterPlayerController_ClientNotifySummonedDino_Params params;
	params.DinoClass = DinoClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyRemotePlayerDeath
// ()
// Parameters:
// class FString                  PlayerName                     (Parm, ZeroConstructor)
// class FString                  AttackerName                   (Parm, ZeroConstructor)

void AShooterPlayerController::ClientNotifyRemotePlayerDeath(const class FString& PlayerName, const class FString& AttackerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyRemotePlayerDeath");

	AShooterPlayerController_ClientNotifyRemotePlayerDeath_Params params;
	params.PlayerName = PlayerName;
	params.AttackerName = AttackerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyPlayerKill
// ()
// Parameters:
// class AActor*                  PlayerPawn                     (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   VictimPawn                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyPlayerKill(class AActor* PlayerPawn, class APawn* VictimPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyPlayerKill");

	AShooterPlayerController_ClientNotifyPlayerKill_Params params;
	params.PlayerPawn = PlayerPawn;
	params.VictimPawn = VictimPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyPlayerDeathReason
// ()
// Parameters:
// class FString                  ReasonString                   (Parm, ZeroConstructor)

void AShooterPlayerController::ClientNotifyPlayerDeathReason(const class FString& ReasonString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyPlayerDeathReason");

	AShooterPlayerController_ClientNotifyPlayerDeathReason_Params params;
	params.ReasonString = ReasonString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyPlayerDeath
// ()
// Parameters:
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyPlayerDeath(class APawn* InstigatingPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyPlayerDeath");

	AShooterPlayerController_ClientNotifyPlayerDeath_Params params;
	params.InstigatingPawn = InstigatingPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyPaintFinished
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyPaintFinished(bool bSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyPaintFinished");

	AShooterPlayerController_ClientNotifyPaintFinished_Params params;
	params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyMessageOfTheDay
// ()
// Parameters:
// class FString                  Message                        (Parm, ZeroConstructor)
// float                          timeToDisplay                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyMessageOfTheDay(const class FString& Message, float timeToDisplay)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyMessageOfTheDay");

	AShooterPlayerController_ClientNotifyMessageOfTheDay_Params params;
	params.Message = Message;
	params.timeToDisplay = timeToDisplay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyListenServerOutOfRange
// ()

void AShooterPlayerController::ClientNotifyListenServerOutOfRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyListenServerOutOfRange");

	AShooterPlayerController_ClientNotifyListenServerOutOfRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyLevelUp
// ()
// Parameters:
// class APrimalCharacter*        forChar                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewLevel                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyLevelUp(class APrimalCharacter* forChar, int NewLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyLevelUp");

	AShooterPlayerController_ClientNotifyLevelUp_Params params;
	params.forChar = forChar;
	params.NewLevel = NewLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyHitHarvest
// ()

void AShooterPlayerController::ClientNotifyHitHarvest()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyHitHarvest");

	AShooterPlayerController_ClientNotifyHitHarvest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyEditText
// ()
// Parameters:
// class UClass*                  ForObjectClass                 (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ExtraID1                       (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ExtraID2                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyEditText(class UClass* ForObjectClass, uint32_t ExtraID1, uint32_t ExtraID2, class UObject* ForObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyEditText");

	AShooterPlayerController_ClientNotifyEditText_Params params;
	params.ForObjectClass = ForObjectClass;
	params.ExtraID1 = ExtraID1;
	params.ExtraID2 = ExtraID2;
	params.ForObject = ForObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyDinoKill
// ()
// Parameters:
// class APrimalDinoCharacter*    InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   VictimPawn                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyDinoKill(class APrimalDinoCharacter* InstigatingPawn, class APawn* VictimPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyDinoKill");

	AShooterPlayerController_ClientNotifyDinoKill_Params params;
	params.InstigatingPawn = InstigatingPawn;
	params.VictimPawn = VictimPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyDinoDeath
// ()
// Parameters:
// class FString                  DinoName                       (Parm, ZeroConstructor)
// class FString                  AttackerName                   (Parm, ZeroConstructor)
// bool                           bIsVehicle                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyDinoDeath(const class FString& DinoName, const class FString& AttackerName, bool bIsVehicle)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyDinoDeath");

	AShooterPlayerController_ClientNotifyDinoDeath_Params params;
	params.DinoName = DinoName;
	params.AttackerName = AttackerName;
	params.bIsVehicle = bIsVehicle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyDefeatedDino
// ()
// Parameters:
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientNotifyDefeatedDino(class UClass* DinoClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyDefeatedDino");

	AShooterPlayerController_ClientNotifyDefeatedDino_Params params;
	params.DinoClass = DinoClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyCantHitHarvest
// ()

void AShooterPlayerController::ClientNotifyCantHitHarvest()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyCantHitHarvest");

	AShooterPlayerController_ClientNotifyCantHitHarvest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyCantHarvest
// ()

void AShooterPlayerController::ClientNotifyCantHarvest()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyCantHarvest");

	AShooterPlayerController_ClientNotifyCantHarvest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientNotifyAdmin
// ()

void AShooterPlayerController::ClientNotifyAdmin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientNotifyAdmin");

	AShooterPlayerController_ClientNotifyAdmin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientLoadArkItems
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<struct FItemNetInfo>    itemInfos                      (ConstParm, Parm, ZeroConstructor)
// bool                           bClear                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFinalBatch                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientLoadArkItems(class UPrimalInventoryComponent* forInventory, TArray<struct FItemNetInfo> itemInfos, bool bClear, bool bFinalBatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientLoadArkItems");

	AShooterPlayerController_ClientLoadArkItems_Params params;
	params.forInventory = forInventory;
	params.itemInfos = itemInfos;
	params.bClear = bClear;
	params.bFinalBatch = bFinalBatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientInsertActorItem
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetInfo            ItemInfo                       (Parm)
// struct FItemNetID              InsertAfterItemID              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientInsertActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, const struct FItemNetID& InsertAfterItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientInsertActorItem");

	AShooterPlayerController_ClientInsertActorItem_Params params;
	params.forInventory = forInventory;
	params.ItemInfo = ItemInfo;
	params.InsertAfterItemID = InsertAfterItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientHUDNotificationTypeParams
// ()
// Parameters:
// int                            MessageType                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            MessageType1                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MessageParam2                  (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ObjectParam1                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientHUDNotificationTypeParams(int MessageType, int MessageType1, int MessageParam2, class UObject* ObjectParam1)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientHUDNotificationTypeParams");

	AShooterPlayerController_ClientHUDNotificationTypeParams_Params params;
	params.MessageType = MessageType;
	params.MessageType1 = MessageType1;
	params.MessageParam2 = MessageParam2;
	params.ObjectParam1 = ObjectParam1;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientGetMessageOfTheDay
// ()
// Parameters:
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterPlayerController::ClientGetMessageOfTheDay(const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientGetMessageOfTheDay");

	AShooterPlayerController_ClientGetMessageOfTheDay_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientFinishedReceivingActorItems
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bEquippedItems                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientFinishedReceivingActorItems(class UPrimalInventoryComponent* forInventory, bool bEquippedItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientFinishedReceivingActorItems");

	AShooterPlayerController_ClientFinishedReceivingActorItems_Params params;
	params.forInventory = forInventory;
	params.bEquippedItems = bEquippedItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientFinishedLoadArkItems
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterPlayerController::ClientFinishedLoadArkItems(class UPrimalInventoryComponent* forInventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientFinishedLoadArkItems");

	AShooterPlayerController_ClientFinishedLoadArkItems_Params params;
	params.forInventory = forInventory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientFailedToAddItemFromArkInventory
// ()

void AShooterPlayerController::ClientFailedToAddItemFromArkInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientFailedToAddItemFromArkInventory");

	AShooterPlayerController_ClientFailedToAddItemFromArkInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientFailedRemoveSaddle
// ()

void AShooterPlayerController::ClientFailedRemoveSaddle()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientFailedRemoveSaddle");

	AShooterPlayerController_ClientFailedRemoveSaddle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientEndReceivingTribeLog
// ()

void AShooterPlayerController::ClientEndReceivingTribeLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientEndReceivingTribeLog");

	AShooterPlayerController_ClientEndReceivingTribeLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientDownloadPlayerCharacterRequestFinished
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientDownloadPlayerCharacterRequestFinished(bool Success)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientDownloadPlayerCharacterRequestFinished");

	AShooterPlayerController_ClientDownloadPlayerCharacterRequestFinished_Params params;
	params.Success = Success;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientDownloadDinoRequestFinished
// ()
// Parameters:
// bool                           Success                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientDownloadDinoRequestFinished(bool Success)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientDownloadDinoRequestFinished");

	AShooterPlayerController_ClientDownloadDinoRequestFinished_Params params;
	params.Success = Success;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientDoMultiUse
// ()
// Parameters:
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientDoMultiUse(class UObject* ForObject, int UseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientDoMultiUse");

	AShooterPlayerController_ClientDoMultiUse_Params params;
	params.ForObject = ForObject;
	params.UseIndex = UseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientCollectedAchievementItem
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientCollectedAchievementItem(class UClass* ItemClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientCollectedAchievementItem");

	AShooterPlayerController_ClientCollectedAchievementItem_Params params;
	params.ItemClass = ItemClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientChatMessage
// ()
// Parameters:
// struct FChatMessage            Chat                           (Parm)

void AShooterPlayerController::ClientChatMessage(const struct FChatMessage& Chat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientChatMessage");

	AShooterPlayerController_ClientChatMessage_Params params;
	params.Chat = Chat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientAddItemToArk
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetInfo            ItemInfo                       (Parm)
// bool                           bFromLoad                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientAddItemToArk(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bFromLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientAddItemToArk");

	AShooterPlayerController_ClientAddItemToArk_Params params;
	params.forInventory = forInventory;
	params.ItemInfo = ItemInfo;
	params.bFromLoad = bFromLoad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientAddFolderToInventoryComponent
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class FString                  NewCustomFolderName            (Parm, ZeroConstructor)
// int                            InventoryCompType              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientAddFolderToInventoryComponent(class UPrimalInventoryComponent* forInventory, const class FString& NewCustomFolderName, int InventoryCompType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientAddFolderToInventoryComponent");

	AShooterPlayerController_ClientAddFolderToInventoryComponent_Params params;
	params.forInventory = forInventory;
	params.NewCustomFolderName = NewCustomFolderName;
	params.InventoryCompType = InventoryCompType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientAddFloatingText
// ()
// Parameters:
// struct FVector_NetQuantize     AtLocation                     (Parm)
// class FString                  FloatingTextString             (Parm, ZeroConstructor)
// struct FColor                  FloatingTextColor              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleX                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleY                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextLifeSpan                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TextVelocity                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinScale                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeInTime                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientAddFloatingText(const struct FVector_NetQuantize& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientAddFloatingText");

	AShooterPlayerController_ClientAddFloatingText_Params params;
	params.AtLocation = AtLocation;
	params.FloatingTextString = FloatingTextString;
	params.FloatingTextColor = FloatingTextColor;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.TextLifeSpan = TextLifeSpan;
	params.TextVelocity = TextVelocity;
	params.MinScale = MinScale;
	params.FadeInTime = FadeInTime;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientAddFloatingDamageText
// ()
// Parameters:
// struct FVector_NetQuantize     AtLocation                     (Parm)
// int                            DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            FromTeamID                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientAddFloatingDamageText(const struct FVector_NetQuantize& AtLocation, int DamageAmount, int FromTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientAddFloatingDamageText");

	AShooterPlayerController_ClientAddFloatingDamageText_Params params;
	params.AtLocation = AtLocation;
	params.DamageAmount = DamageAmount;
	params.FromTeamID = FromTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientAddActorItemToFolder
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetInfo            ItemInfo                       (Parm)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShowHUDNotification            (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ToFolder                       (Parm, ZeroConstructor)

void AShooterPlayerController::ClientAddActorItemToFolder(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification, const class FString& ToFolder)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientAddActorItemToFolder");

	AShooterPlayerController_ClientAddActorItemToFolder_Params params;
	params.forInventory = forInventory;
	params.ItemInfo = ItemInfo;
	params.bEquipItem = bEquipItem;
	params.ShowHUDNotification = ShowHUDNotification;
	params.ToFolder = ToFolder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.ClientAddActorItem
// ()
// Parameters:
// class UPrimalInventoryComponent* forInventory                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FItemNetInfo            ItemInfo                       (Parm)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShowHUDNotification            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::ClientAddActorItem(class UPrimalInventoryComponent* forInventory, const struct FItemNetInfo& ItemInfo, bool bEquipItem, bool ShowHUDNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.ClientAddActorItem");

	AShooterPlayerController_ClientAddActorItem_Params params;
	params.forInventory = forInventory;
	params.ItemInfo = ItemInfo;
	params.bEquipItem = bEquipItem;
	params.ShowHUDNotification = ShowHUDNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.CheckRequestSpectator
// ()
// Parameters:
// class FString                  InSpectatorPass                (Parm, ZeroConstructor)

void AShooterPlayerController::CheckRequestSpectator(const class FString& InSpectatorPass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.CheckRequestSpectator");

	AShooterPlayerController_CheckRequestSpectator_Params params;
	params.InSpectatorPass = InSpectatorPass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.CheckForPlayerInventory
// ()

void AShooterPlayerController::CheckForPlayerInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.CheckForPlayerInventory");

	AShooterPlayerController_CheckForPlayerInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.CheckforOrbiting
// ()

void AShooterPlayerController::CheckforOrbiting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.CheckforOrbiting");

	AShooterPlayerController_CheckforOrbiting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.CheckCheatsPassword
// ()
// Parameters:
// class FString                  pass                           (Parm, ZeroConstructor)

void AShooterPlayerController::CheckCheatsPassword(const class FString& pass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.CheckCheatsPassword");

	AShooterPlayerController_CheckCheatsPassword_Params params;
	params.pass = pass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.Cheat
// ()
// Parameters:
// class FString                  Msg                            (Parm, ZeroConstructor)

void AShooterPlayerController::Cheat(const class FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.Cheat");

	AShooterPlayerController_Cheat_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.CCC
// ()

void AShooterPlayerController::CCC()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.CCC");

	AShooterPlayerController_CCC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.CanDoPlayerCharacterInput
// ()
// Parameters:
// bool                           bIgnoreCurrentWeapon           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeaponForcesMountedWeaponry   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::CanDoPlayerCharacterInput(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.CanDoPlayerCharacterInput");

	AShooterPlayerController_CanDoPlayerCharacterInput_Params params;
	params.bIgnoreCurrentWeapon = bIgnoreCurrentWeapon;
	params.bWeaponForcesMountedWeaponry = bWeaponForcesMountedWeaponry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.BPCheckCanDinoSpawnFromLocation
// ()
// Parameters:
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CheckLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AShooterPlayerController::BPCheckCanDinoSpawnFromLocation(class UClass* DinoClass, const struct FVector& CheckLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.BPCheckCanDinoSpawnFromLocation");

	AShooterPlayerController_BPCheckCanDinoSpawnFromLocation_Params params;
	params.DinoClass = DinoClass;
	params.CheckLocation = CheckLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.AutoCycle
// ()
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerController::AutoCycle(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.AutoCycle");

	AShooterPlayerController_AutoCycle_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.AttemptTransferRedownload
// ()

void AShooterPlayerController::AttemptTransferRedownload()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.AttemptTransferRedownload");

	AShooterPlayerController_AttemptTransferRedownload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.AsyncLoadInventory
// ()

void AShooterPlayerController::AsyncLoadInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.AsyncLoadInventory");

	AShooterPlayerController_AsyncLoadInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerController.AllowTribeGroupPermission
// ()
// Parameters:
// TEnumAsByte<ETribeGroupPermission> TribeGroupPermission           (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 OnObject                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerController::AllowTribeGroupPermission(TEnumAsByte<ETribeGroupPermission> TribeGroupPermission, class UObject* OnObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.AllowTribeGroupPermission");

	AShooterPlayerController_AllowTribeGroupPermission_Params params;
	params.TribeGroupPermission = TribeGroupPermission;
	params.OnObject = OnObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerController.AdminCheat
// ()
// Parameters:
// class FString                  Msg                            (Parm, ZeroConstructor)

void AShooterPlayerController::AdminCheat(const class FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerController.AdminCheat");

	AShooterPlayerController_AdminCheat_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BiomeZoneVolume.OnEndOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ABiomeZoneVolume::OnEndOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolume.OnEndOverlap");

	ABiomeZoneVolume_OnEndOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BiomeZoneVolume.OnBeginOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ABiomeZoneVolume::OnBeginOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolume.OnBeginOverlap");

	ABiomeZoneVolume_OnBeginOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BiomeZoneVolume.IsPointUnderwater
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtPoint                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFastPath                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinimumWaterHeight             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreVacuumStructures        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnorePainCausingVolumes      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABiomeZoneVolume::IsPointUnderwater(class UWorld* ForWorld, const struct FVector& AtPoint, bool bFastPath, float MinimumWaterHeight, bool bIgnoreVacuumStructures, bool bIgnorePainCausingVolumes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolume.IsPointUnderwater");

	ABiomeZoneVolume_IsPointUnderwater_Params params;
	params.ForWorld = ForWorld;
	params.AtPoint = AtPoint;
	params.bFastPath = bFastPath;
	params.MinimumWaterHeight = MinimumWaterHeight;
	params.bIgnoreVacuumStructures = bIgnoreVacuumStructures;
	params.bIgnorePainCausingVolumes = bIgnorePainCausingVolumes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.BiomeZoneVolume.IsPointInVacuumBase
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtPoint                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABiomeZoneVolume::IsPointInVacuumBase(class UWorld* ForWorld, const struct FVector& AtPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolume.IsPointInVacuumBase");

	ABiomeZoneVolume_IsPointInVacuumBase_Params params;
	params.ForWorld = ForWorld;
	params.AtPoint = AtPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.BiomeZoneVolume.GetBiomeZoneVolume
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class ABiomeZoneVolume*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ABiomeZoneVolume* ABiomeZoneVolume::GetBiomeZoneVolume(class UWorld* World, const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolume.GetBiomeZoneVolume");

	ABiomeZoneVolume_GetBiomeZoneVolume_Params params;
	params.World = World;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.BiomeZoneVolumeEffectUtility.SpawnRelevantEffect
// ()
// Parameters:
// TArray<struct FBiomeZoneVolumeEffect> Effects                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  AttachTo                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bIsImpactActor                 (Parm, ZeroConstructor, IsPlainOldData)

void UBiomeZoneVolumeEffectUtility::SpawnRelevantEffect(TArray<struct FBiomeZoneVolumeEffect> Effects, class AActor* AttachTo, const struct FVector& Location, bool bIsImpactActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolumeEffectUtility.SpawnRelevantEffect");

	UBiomeZoneVolumeEffectUtility_SpawnRelevantEffect_Params params;
	params.Effects = Effects;
	params.AttachTo = AttachTo;
	params.Location = Location;
	params.bIsImpactActor = bIsImpactActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.BiomeZoneVolumeEffectUtility.SpawnImpactEffect
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)
// struct FBiomeZoneImpactEffect  ImpactEffect                   (ConstParm, Parm, OutParm, ReferenceParm)
// class AActor*                  Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UBiomeZoneVolumeEffectUtility::SpawnImpactEffect(class UWorld* World, const struct FHitResult& HitResult, const struct FBiomeZoneImpactEffect& ImpactEffect, class AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolumeEffectUtility.SpawnImpactEffect");

	UBiomeZoneVolumeEffectUtility_SpawnImpactEffect_Params params;
	params.World = World;
	params.HitResult = HitResult;
	params.ImpactEffect = ImpactEffect;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.BiomeZoneVolumeEffectUtility.GetRelevantEffect
// ()
// Parameters:
// TArray<struct FBiomeZoneVolumeEffect> Effects                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  SourceActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ForLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bIsImpactActor                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FBiomeZoneVolumeEffect  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBiomeZoneVolumeEffect UBiomeZoneVolumeEffectUtility::GetRelevantEffect(TArray<struct FBiomeZoneVolumeEffect> Effects, class AActor* SourceActor, const struct FVector& ForLocation, bool bIsImpactActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.BiomeZoneVolumeEffectUtility.GetRelevantEffect");

	UBiomeZoneVolumeEffectUtility_GetRelevantEffect_Params params;
	params.Effects = Effects;
	params.SourceActor = SourceActor;
	params.ForLocation = ForLocation;
	params.bIsImpactActor = bIsImpactActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.VoroniModule
// ()
// Parameters:
// int                            Seed                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Frequency                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          displacement                   (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::VoroniModule(int Seed, float Frequency, float displacement)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.VoroniModule");

	UTerrainGenerator_VoroniModule_Params params;
	params.Seed = Seed;
	params.Frequency = Frequency;
	params.displacement = displacement;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.TurbulenceModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seed                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Frequency                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roughness                      (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::TurbulenceModule(class UGeneratorModule* Source, int Seed, float Frequency, float Power, float Roughness)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.TurbulenceModule");

	UTerrainGenerator_TurbulenceModule_Params params;
	params.Source = Source;
	params.Seed = Seed;
	params.Frequency = Frequency;
	params.Power = Power;
	params.Roughness = Roughness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ToFloatMap
// ()
// Parameters:
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Module                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsTemporary                    (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::ToFloatMap(class UFloatMap* Destination, class UGeneratorModule* Module, bool IsTemporary)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ToFloatMap");

	UTerrainGenerator_ToFloatMap_Params params;
	params.Destination = Destination;
	params.Module = Module;
	params.IsTemporary = IsTemporary;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ThresholdModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Range                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Threshold                      (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::ThresholdModule(class UGeneratorModule* Source, float Power, float Range, float Threshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ThresholdModule");

	UTerrainGenerator_ThresholdModule_Params params;
	params.Source = Source;
	params.Power = Power;
	params.Range = Range;
	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.TerraceModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<float>                  Control                        (Parm, ZeroConstructor)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::TerraceModule(class UGeneratorModule* Source, TArray<float> Control)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.TerraceModule");

	UTerrainGenerator_TerraceModule_Params params;
	params.Source = Source;
	params.Control = Control;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Spread
// ()
// Parameters:
// class UFloatMap*               Destination                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            SpreadIteration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpreadStrength                 (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Spread(class UFloatMap* Source, int SpreadIteration, float SpreadStrength, class UFloatMap** Destination)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Spread");

	UTerrainGenerator_Spread_Params params;
	params.Source = Source;
	params.SpreadIteration = SpreadIteration;
	params.SpreadStrength = SpreadStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Destination != nullptr)
		*Destination = params.Destination;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.SpawnActorOnLandscape
// ()
// Parameters:
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OffsetVector                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UTerrainGenerator::SpawnActorOnLandscape(class UClass* ActorClass, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Scale, const struct FVector& OffsetVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.SpawnActorOnLandscape");

	UTerrainGenerator_SpawnActorOnLandscape_Params params;
	params.ActorClass = ActorClass;
	params.Position = Position;
	params.Rotation = Rotation;
	params.Scale = Scale;
	params.OffsetVector = OffsetVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.SpawnActor
// ()
// Parameters:
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UTerrainGenerator::SpawnActor(class UClass* ActorClass, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.SpawnActor");

	UTerrainGenerator_SpawnActor_Params params;
	params.ActorClass = ActorClass;
	params.Position = Position;
	params.Rotation = Rotation;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.SlopeModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::SlopeModule(class UGeneratorModule* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.SlopeModule");

	UTerrainGenerator_SlopeModule_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ShrinkMask
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            Iterations                     (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::ShrinkMask(class UFloatMap* Source, class UFloatMap* Destination, int Iterations)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ShrinkMask");

	UTerrainGenerator_ShrinkMask_Params params;
	params.Source = Source;
	params.Destination = Destination;
	params.Iterations = Iterations;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.SetAsTemporary
// ()
// Parameters:
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::SetAsTemporary(class UFloatMap* Destination)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.SetAsTemporary");

	UTerrainGenerator_SetAsTemporary_Params params;
	params.Destination = Destination;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.SelectModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Control                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Lower                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Upper                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          EdgeFalloff                    (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::SelectModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Control, float Lower, float Upper, float EdgeFalloff)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.SelectModule");

	UTerrainGenerator_SelectModule_Params params;
	params.First = First;
	params.Second = Second;
	params.Control = Control;
	params.Lower = Lower;
	params.Upper = Upper;
	params.EdgeFalloff = EdgeFalloff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ScaleFloatMap
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::ScaleFloatMap(class UFloatMap* Source, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ScaleFloatMap");

	UTerrainGenerator_ScaleFloatMap_Params params;
	params.Source = Source;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ScaleBiasModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Bias                           (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::ScaleBiasModule(class UGeneratorModule* Source, float Scale, float Bias)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ScaleBiasModule");

	UTerrainGenerator_ScaleBiasModule_Params params;
	params.Source = Source;
	params.Scale = Scale;
	params.Bias = Bias;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Scale
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Scale(class UFloatMap* Source, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Scale");

	UTerrainGenerator_Scale_Params params;
	params.Source = Source;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.SampleFloatMapModule
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::SampleFloatMapModule(class UFloatMap* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.SampleFloatMapModule");

	UTerrainGenerator_SampleFloatMapModule_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.RidgedMultiModule
// ()
// Parameters:
// int                            Seed                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Frequency                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OctaveCount                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Lacunarity                     (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::RidgedMultiModule(int Seed, float Frequency, float OctaveCount, float Lacunarity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.RidgedMultiModule");

	UTerrainGenerator_RidgedMultiModule_Params params;
	params.Seed = Seed;
	params.Frequency = Frequency;
	params.OctaveCount = OctaveCount;
	params.Lacunarity = Lacunarity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Resize
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewSize                        (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Resize(class UFloatMap* Source, int NewSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Resize");

	UTerrainGenerator_Resize_Params params;
	params.Source = Source;
	params.NewSize = NewSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.PreGenerateTerrain
// ()

void UTerrainGenerator::PreGenerateTerrain()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.PreGenerateTerrain");

	UTerrainGenerator_PreGenerateTerrain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainGenerator.PowerModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::PowerModule(class UGeneratorModule* First, class UGeneratorModule* Second)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.PowerModule");

	UTerrainGenerator_PowerModule_Params params;
	params.First = First;
	params.Second = Second;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.PostCreateTerrain
// ()

void UTerrainGenerator::PostCreateTerrain()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.PostCreateTerrain");

	UTerrainGenerator_PostCreateTerrain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainGenerator.Populate
// ()
// Parameters:
// TArray<struct FObjectListItem> ObjectsList                    (Parm, ZeroConstructor)
// class UObjectMap*              Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Probability                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          FixedZ                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumCount                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           SingleThread                   (Parm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObjectMap* UTerrainGenerator::Populate(TArray<struct FObjectListItem> ObjectsList, class UObjectMap* Destination, class UGeneratorModule* Probability, float MinDistance, float FixedZ, int MaximumCount, int Step, bool SingleThread)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Populate");

	UTerrainGenerator_Populate_Params params;
	params.ObjectsList = ObjectsList;
	params.Destination = Destination;
	params.Probability = Probability;
	params.MinDistance = MinDistance;
	params.FixedZ = FixedZ;
	params.MaximumCount = MaximumCount;
	params.Step = Step;
	params.SingleThread = SingleThread;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.PointSampleFloatMapModule
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::PointSampleFloatMapModule(class UFloatMap* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.PointSampleFloatMapModule");

	UTerrainGenerator_PointSampleFloatMapModule_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Pixelate
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            CellSize                       (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Pixelate(class UFloatMap* Source, int CellSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Pixelate");

	UTerrainGenerator_Pixelate_Params params;
	params.Source = Source;
	params.CellSize = CellSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.PerlinModule
// ()
// Parameters:
// int                            Seed                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Frequency                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OctaveCount                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Persistence                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Lacunarity                     (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::PerlinModule(int Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.PerlinModule");

	UTerrainGenerator_PerlinModule_Params params;
	params.Seed = Seed;
	params.Frequency = Frequency;
	params.OctaveCount = OctaveCount;
	params.Persistence = Persistence;
	params.Lacunarity = Lacunarity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.OneMinusModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::OneMinusModule(class UGeneratorModule* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.OneMinusModule");

	UTerrainGenerator_OneMinusModule_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Normalize
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Minimum                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Maximum                        (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Normalize(class UFloatMap* Source, class UFloatMap* Destination, float Minimum, float Maximum)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Normalize");

	UTerrainGenerator_Normalize_Params params;
	params.Source = Source;
	params.Destination = Destination;
	params.Minimum = Minimum;
	params.Maximum = Maximum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.MultiplyModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::MultiplyModule(class UGeneratorModule* First, class UGeneratorModule* Second)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.MultiplyModule");

	UTerrainGenerator_MultiplyModule_Params params;
	params.First = First;
	params.Second = Second;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.MinModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::MinModule(class UGeneratorModule* First, class UGeneratorModule* Second)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.MinModule");

	UTerrainGenerator_MinModule_Params params;
	params.First = First;
	params.Second = Second;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.MergeObjectMaps
// ()
// Parameters:
// class UObjectMap*              First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              Second                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            CellsToClear                   (Parm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObjectMap* UTerrainGenerator::MergeObjectMaps(class UObjectMap* First, class UObjectMap* Second, int CellsToClear)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.MergeObjectMaps");

	UTerrainGenerator_MergeObjectMaps_Params params;
	params.First = First;
	params.Second = Second;
	params.CellsToClear = CellsToClear;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.MaxModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::MaxModule(class UGeneratorModule* First, class UGeneratorModule* Second)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.MaxModule");

	UTerrainGenerator_MaxModule_Params params;
	params.First = First;
	params.Second = Second;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.LinearModule
// ()
// Parameters:
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::LinearModule()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.LinearModule");

	UTerrainGenerator_LinearModule_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.LinearCurveModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<float>                  Input                          (Parm, ZeroConstructor)
// TArray<float>                  Output                         (Parm, ZeroConstructor)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::LinearCurveModule(class UGeneratorModule* First, TArray<float> Input, TArray<float> Output)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.LinearCurveModule");

	UTerrainGenerator_LinearCurveModule_Params params;
	params.First = First;
	params.Input = Input;
	params.Output = Output;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.LerpModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::LerpModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.LerpModule");

	UTerrainGenerator_LerpModule_Params params;
	params.First = First;
	params.Second = Second;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.InvertModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::InvertModule(class UGeneratorModule* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.InvertModule");

	UTerrainGenerator_InvertModule_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.GetPositionRelativeToTerrian
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UTerrainGenerator::GetPositionRelativeToTerrian(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.GetPositionRelativeToTerrian");

	UTerrainGenerator_GetPositionRelativeToTerrian_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.GetLocationOnLandscape
// ()
// Parameters:
// struct FVector                 Position                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UTerrainGenerator::GetLocationOnLandscape(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.GetLocationOnLandscape");

	UTerrainGenerator_GetLocationOnLandscape_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.GenerateTerrain
// ()
// Parameters:
// class UFloatMap*               HeightMap                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          WeightmapsNames                (Parm, OutParm, ZeroConstructor)
// TArray<class UByteMap*>        WeightMaps                     (Parm, OutParm, ZeroConstructor)
// class UObjectMap*              ObjectMap                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              BiomeMap                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              NPCMap                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      LandscapeMaterial              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              PerComponentMaterialOverride   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              SupplyDropsMap                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              SupplyDropsPointsMap           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<struct FBiomeMiniMap>   BiomesMiniMap                  (Parm, OutParm, ZeroConstructor)

void UTerrainGenerator::GenerateTerrain(class UFloatMap** HeightMap, TArray<class FString>* WeightmapsNames, TArray<class UByteMap*>* WeightMaps, class UObjectMap** ObjectMap, class UObjectMap** BiomeMap, class UObjectMap** NPCMap, class UMaterialInterface** LandscapeMaterial, class UObjectMap** PerComponentMaterialOverride, class UObjectMap** SupplyDropsMap, class UObjectMap** SupplyDropsPointsMap, TArray<struct FBiomeMiniMap>* BiomesMiniMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.GenerateTerrain");

	UTerrainGenerator_GenerateTerrain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HeightMap != nullptr)
		*HeightMap = params.HeightMap;
	if (WeightmapsNames != nullptr)
		*WeightmapsNames = params.WeightmapsNames;
	if (WeightMaps != nullptr)
		*WeightMaps = params.WeightMaps;
	if (ObjectMap != nullptr)
		*ObjectMap = params.ObjectMap;
	if (BiomeMap != nullptr)
		*BiomeMap = params.BiomeMap;
	if (NPCMap != nullptr)
		*NPCMap = params.NPCMap;
	if (LandscapeMaterial != nullptr)
		*LandscapeMaterial = params.LandscapeMaterial;
	if (PerComponentMaterialOverride != nullptr)
		*PerComponentMaterialOverride = params.PerComponentMaterialOverride;
	if (SupplyDropsMap != nullptr)
		*SupplyDropsMap = params.SupplyDropsMap;
	if (SupplyDropsPointsMap != nullptr)
		*SupplyDropsPointsMap = params.SupplyDropsPointsMap;
	if (BiomesMiniMap != nullptr)
		*BiomesMiniMap = params.BiomesMiniMap;
}


// Function ShooterGame.TerrainGenerator.GenerateHeightMapFromMask
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            Iterations                     (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::GenerateHeightMapFromMask(class UFloatMap* Source, class UFloatMap* Destination, int Iterations)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.GenerateHeightMapFromMask");

	UTerrainGenerator_GenerateHeightMapFromMask_Params params;
	params.Source = Source;
	params.Destination = Destination;
	params.Iterations = Iterations;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.FloodFill
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTerrainGenerator::FloodFill(class UFloatMap* Source, float X, float Y, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.FloodFill");

	UTerrainGenerator_FloodFill_Params params;
	params.Source = Source;
	params.X = X;
	params.Y = Y;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainGenerator.FillObjectMap
// ()
// Parameters:
// TArray<struct FObjectListItem> ObjectsList                    (Parm, ZeroConstructor)
// class UObjectMap*              Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Probability                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          FixedZ                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaximumCount                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            Step                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           SingleThread                   (Parm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObjectMap* UTerrainGenerator::FillObjectMap(TArray<struct FObjectListItem> ObjectsList, class UObjectMap* Destination, class UGeneratorModule* Probability, float MinDistance, float FixedZ, int MaximumCount, int Step, bool SingleThread)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.FillObjectMap");

	UTerrainGenerator_FillObjectMap_Params params;
	params.ObjectsList = ObjectsList;
	params.Destination = Destination;
	params.Probability = Probability;
	params.MinDistance = MinDistance;
	params.FixedZ = FixedZ;
	params.MaximumCount = MaximumCount;
	params.Step = Step;
	params.SingleThread = SingleThread;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ExponentModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exponent                       (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::ExponentModule(class UGeneratorModule* Source, float Exponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ExponentModule");

	UTerrainGenerator_ExponentModule_Params params;
	params.Source = Source;
	params.Exponent = Exponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.EvaluateModules
// ()
// Parameters:
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Module                         (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::EvaluateModules(class UFloatMap* Destination, class UGeneratorModule* Module)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.EvaluateModules");

	UTerrainGenerator_EvaluateModules_Params params;
	params.Destination = Destination;
	params.Module = Module;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Erosion
// ()
// Parameters:
// class UFloatMap*               HeightMap                      (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            IterationStep                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          SoilCarryCapacity              (Parm, ZeroConstructor, IsPlainOldData)
// float                          WaterEvaporationSpeed          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErosionSpeed                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DepositionSpeed                (Parm, ZeroConstructor, IsPlainOldData)
// float                          DirectionInertia               (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinimumSlope                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Gravity                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinHeightForErosion            (Parm, ZeroConstructor, IsPlainOldData)
// float                          DepositionStrength             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ErosionStrength                (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Erosion(class UFloatMap* HeightMap, class UFloatMap* Destination, int IterationStep, float SoilCarryCapacity, float WaterEvaporationSpeed, float ErosionSpeed, float DepositionSpeed, float DirectionInertia, float MinimumSlope, float Gravity, float MinHeightForErosion, float DepositionStrength, float ErosionStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Erosion");

	UTerrainGenerator_Erosion_Params params;
	params.HeightMap = HeightMap;
	params.Destination = Destination;
	params.IterationStep = IterationStep;
	params.SoilCarryCapacity = SoilCarryCapacity;
	params.WaterEvaporationSpeed = WaterEvaporationSpeed;
	params.ErosionSpeed = ErosionSpeed;
	params.DepositionSpeed = DepositionSpeed;
	params.DirectionInertia = DirectionInertia;
	params.MinimumSlope = MinimumSlope;
	params.Gravity = Gravity;
	params.MinHeightForErosion = MinHeightForErosion;
	params.DepositionStrength = DepositionStrength;
	params.ErosionStrength = ErosionStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.EnlargeMask
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            Iterations                     (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::EnlargeMask(class UFloatMap* Source, class UFloatMap* Destination, int Iterations)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.EnlargeMask");

	UTerrainGenerator_EnlargeMask_Params params;
	params.Source = Source;
	params.Destination = Destination;
	params.Iterations = Iterations;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.DisplaceModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        X                              (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Y                              (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Z                              (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::DisplaceModule(class UGeneratorModule* Source, class UGeneratorModule* X, class UGeneratorModule* Y, class UGeneratorModule* Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.DisplaceModule");

	UTerrainGenerator_DisplaceModule_Params params;
	params.Source = Source;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.DeleteTemporaryMaps
// ()

void UTerrainGenerator::DeleteTemporaryMaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.DeleteTemporaryMaps");

	UTerrainGenerator_DeleteTemporaryMaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainGenerator.CurveModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<float>                  Input                          (Parm, ZeroConstructor)
// TArray<float>                  Output                         (Parm, ZeroConstructor)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::CurveModule(class UGeneratorModule* Source, TArray<float> Input, TArray<float> Output)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.CurveModule");

	UTerrainGenerator_CurveModule_Params params;
	params.Source = Source;
	params.Input = Input;
	params.Output = Output;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.CreateWater
// ()
// Parameters:
// class UClass*                  WaterPlane                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  WaterFloorPlane                (Parm, ZeroConstructor, IsPlainOldData)
// float                          SurfaceLevel                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          FloorLevel                     (Parm, ZeroConstructor, IsPlainOldData)

void UTerrainGenerator::CreateWater(class UClass* WaterPlane, class UClass* WaterFloorPlane, float SurfaceLevel, float FloorLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.CreateWater");

	UTerrainGenerator_CreateWater_Params params;
	params.WaterPlane = WaterPlane;
	params.WaterFloorPlane = WaterFloorPlane;
	params.SurfaceLevel = SurfaceLevel;
	params.FloorLevel = FloorLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainGenerator.CreateObjectMapWithSize
// ()
// Parameters:
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObjectMap* UTerrainGenerator::CreateObjectMapWithSize(int Width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.CreateObjectMapWithSize");

	UTerrainGenerator_CreateObjectMapWithSize_Params params;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.CreateObjectMap
// ()
// Parameters:
// int                            NewSizeX                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewSizeY                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObjectMap*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObjectMap* UTerrainGenerator::CreateObjectMap(int NewSizeX, int NewSizeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.CreateObjectMap");

	UTerrainGenerator_CreateObjectMap_Params params;
	params.NewSizeX = NewSizeX;
	params.NewSizeY = NewSizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.CreateFloatMap
// ()
// Parameters:
// int                            SizeX                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            SizeY                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsTemporary                    (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::CreateFloatMap(int SizeX, int SizeY, bool IsTemporary)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.CreateFloatMap");

	UTerrainGenerator_CreateFloatMap_Params params;
	params.SizeX = SizeX;
	params.SizeY = SizeY;
	params.IsTemporary = IsTemporary;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Copy
// ()
// Parameters:
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Destination                    (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Copy(class UFloatMap* Source, class UFloatMap* Destination)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Copy");

	UTerrainGenerator_Copy_Params params;
	params.Source = Source;
	params.Destination = Destination;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ConvertFloatMapToByteMap
// ()
// Parameters:
// class UFloatMap*               FloatMap                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearFloatMap                 (Parm, ZeroConstructor, IsPlainOldData)
// class UByteMap*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UByteMap* UTerrainGenerator::ConvertFloatMapToByteMap(class UFloatMap* FloatMap, bool bClearFloatMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ConvertFloatMapToByteMap");

	UTerrainGenerator_ConvertFloatMapToByteMap_Params params;
	params.FloatMap = FloatMap;
	params.bClearFloatMap = bClearFloatMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ConstModule
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::ConstModule(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ConstModule");

	UTerrainGenerator_ConstModule_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.ClampModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Lower                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Upper                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::ClampModule(class UGeneratorModule* Source, float Lower, float Upper)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.ClampModule");

	UTerrainGenerator_ClampModule_Params params;
	params.Source = Source;
	params.Lower = Lower;
	params.Upper = Upper;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.CircularMaskModule
// ()
// Parameters:
// struct FVector2D               Center                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          CircleRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Exp                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seed                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Frequency                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OctaveCount                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Persistence                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Lacunarity                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          NoiseAmplitude                 (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::CircularMaskModule(const struct FVector2D& Center, float CircleRadius, float Exp, int Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity, float NoiseAmplitude)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.CircularMaskModule");

	UTerrainGenerator_CircularMaskModule_Params params;
	params.Center = Center;
	params.CircleRadius = CircleRadius;
	params.Exp = Exp;
	params.Seed = Seed;
	params.Frequency = Frequency;
	params.OctaveCount = OctaveCount;
	params.Persistence = Persistence;
	params.Lacunarity = Lacunarity;
	params.NoiseAmplitude = NoiseAmplitude;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Cavity
// ()
// Parameters:
// class UFloatMap*               Destination                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               Source                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Concave                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Intensity                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Threshold                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            SpreadIteration                (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpreadStrength                 (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Cavity(class UFloatMap* Source, bool Concave, float Intensity, float Threshold, int SpreadIteration, float SpreadStrength, class UFloatMap** Destination)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Cavity");

	UTerrainGenerator_Cavity_Params params;
	params.Source = Source;
	params.Concave = Concave;
	params.Intensity = Intensity;
	params.Threshold = Threshold;
	params.SpreadIteration = SpreadIteration;
	params.SpreadStrength = SpreadStrength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Destination != nullptr)
		*Destination = params.Destination;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.Blur
// ()
// Parameters:
// class UFloatMap*               First                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHorizontal                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVertical                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           additive                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Intensity                      (Parm, ZeroConstructor, IsPlainOldData)
// class UFloatMap*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFloatMap* UTerrainGenerator::Blur(class UFloatMap* First, bool bHorizontal, bool bVertical, bool additive, float Intensity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.Blur");

	UTerrainGenerator_Blur_Params params;
	params.First = First;
	params.bHorizontal = bHorizontal;
	params.bVertical = bVertical;
	params.additive = additive;
	params.Intensity = Intensity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.BlendModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Control                        (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::BlendModule(class UGeneratorModule* First, class UGeneratorModule* Second, class UGeneratorModule* Control)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.BlendModule");

	UTerrainGenerator_BlendModule_Params params;
	params.First = First;
	params.Second = Second;
	params.Control = Control;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.BillowModule
// ()
// Parameters:
// int                            Seed                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Frequency                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OctaveCount                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Persistence                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Lacunarity                     (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::BillowModule(int Seed, float Frequency, float OctaveCount, float Persistence, float Lacunarity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.BillowModule");

	UTerrainGenerator_BillowModule_Params params;
	params.Seed = Seed;
	params.Frequency = Frequency;
	params.OctaveCount = OctaveCount;
	params.Persistence = Persistence;
	params.Lacunarity = Lacunarity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.AddModule
// ()
// Parameters:
// class UGeneratorModule*        First                          (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        Second                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::AddModule(class UGeneratorModule* First, class UGeneratorModule* Second)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.AddModule");

	UTerrainGenerator_AddModule_Params params;
	params.First = First;
	params.Second = Second;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TerrainGenerator.AbsModule
// ()
// Parameters:
// class UGeneratorModule*        Source                         (Parm, ZeroConstructor, IsPlainOldData)
// class UGeneratorModule*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UGeneratorModule* UTerrainGenerator::AbsModule(class UGeneratorModule* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainGenerator.AbsModule");

	UTerrainGenerator_AbsModule_Params params;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ByteMap.Init
// ()
// Parameters:
// int                            InSizeX                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            InSizeY                        (Parm, ZeroConstructor, IsPlainOldData)

void UByteMap::Init(int InSizeX, int InSizeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ByteMap.Init");

	UByteMap_Init_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ByteMap.GetSizeY
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UByteMap::GetSizeY()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ByteMap.GetSizeY");

	UByteMap_GetSizeY_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ByteMap.GetSizeX
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UByteMap::GetSizeX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ByteMap.GetSizeX");

	UByteMap_GetSizeX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ByteMap.GetSize
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UByteMap::GetSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ByteMap.GetSize");

	UByteMap_GetSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ByteMap.Delete
// ()

void UByteMap::Delete()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ByteMap.Delete");

	UByteMap_Delete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CharacterViewPanelWidget.RefreshPreviewWidget
// ()

void UCharacterViewPanelWidget::RefreshPreviewWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CharacterViewPanelWidget.RefreshPreviewWidget");

	UCharacterViewPanelWidget_RefreshPreviewWidget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu.SetActiveItem
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu::SetActiveItem(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu.SetActiveItem");

	UContextMenu_SetActiveItem_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu.PopulateContextMenu__DelegateSignature
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu::PopulateContextMenu__DelegateSignature(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu.PopulateContextMenu__DelegateSignature");

	UContextMenu_PopulateContextMenu__DelegateSignature_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu.GetActiveItem
// ()
// Parameters:
// class UContextMenuItem*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UContextMenuItem* UContextMenu::GetActiveItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu.GetActiveItem");

	UContextMenu_GetActiveItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenu.CloseMenu
// ()
// Parameters:
// bool                           CloseParents                   (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu::CloseMenu(bool CloseParents)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu.CloseMenu");

	UContextMenu_CloseMenu_Params params;
	params.CloseParents = CloseParents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu.ActiveMenuItemChanged__DelegateSignature
// ()
// Parameters:
// class UContextMenu*            menu                           (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenuItem*        newItem                        (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenuItem*        oldItem                        (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu::ActiveMenuItemChanged__DelegateSignature(class UContextMenu* menu, class UContextMenuItem* newItem, class UContextMenuItem* oldItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu.ActiveMenuItemChanged__DelegateSignature");

	UContextMenu_ActiveMenuItemChanged__DelegateSignature_Params params;
	params.menu = menu;
	params.newItem = newItem;
	params.oldItem = oldItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.SetSubmenuEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem::SetSubmenuEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.SetSubmenuEnabled");

	UContextMenuItem_SetSubmenuEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.SetShortcutKey
// ()
// Parameters:
// int                            ComboKeyIdx                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FKey                    Key                            (Parm)

void UContextMenuItem::SetShortcutKey(int ComboKeyIdx, const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.SetShortcutKey");

	UContextMenuItem_SetShortcutKey_Params params;
	params.ComboKeyIdx = ComboKeyIdx;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.SetJustification
// ()
// Parameters:
// TEnumAsByte<ETextJustify>      Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem::SetJustification(TEnumAsByte<ETextJustify> Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.SetJustification");

	UContextMenuItem_SetJustification_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.SetCaption
// ()
// Parameters:
// struct FText                   caption                        (ConstParm, Parm, OutParm, ReferenceParm)

void UContextMenuItem::SetCaption(const struct FText& caption)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.SetCaption");

	UContextMenuItem_SetCaption_Params params;
	params.caption = caption;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.OnGetContextMenuContent
// ()
// Parameters:
// class UWidget*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWidget* UContextMenuItem::OnGetContextMenuContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.OnGetContextMenuContent");

	UContextMenuItem_OnGetContextMenuContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenuItem.OnButtonClickedEventObject__DelegateSignature
// ()
// Parameters:
// class UContextMenuItem*        ContextMenuItem                (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem::OnButtonClickedEventObject__DelegateSignature(class UContextMenuItem* ContextMenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.OnButtonClickedEventObject__DelegateSignature");

	UContextMenuItem_OnButtonClickedEventObject__DelegateSignature_Params params;
	params.ContextMenuItem = ContextMenuItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.OnButtonClicked
// ()

void UContextMenuItem::OnButtonClicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.OnButtonClicked");

	UContextMenuItem_OnButtonClicked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.OnActiveMenuItemChanged
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenuItem*        NewActiveItem                  (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenuItem*        OldActiveItem                  (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem::OnActiveMenuItemChanged(class UContextMenu* ContextMenu, class UContextMenuItem* NewActiveItem, class UContextMenuItem* OldActiveItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.OnActiveMenuItemChanged");

	UContextMenuItem_OnActiveMenuItemChanged_Params params;
	params.ContextMenu = ContextMenu;
	params.NewActiveItem = NewActiveItem;
	params.OldActiveItem = OldActiveItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem.GetSubmenuEnabled
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UContextMenuItem::GetSubmenuEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.GetSubmenuEnabled");

	UContextMenuItem_GetSubmenuEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenuItem.GetSubmenuContent__DelegateSignature
// ()
// Parameters:
// class UContextMenuItem*        ContextMenuItem                (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenu*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UContextMenu* UContextMenuItem::GetSubmenuContent__DelegateSignature(class UContextMenuItem* ContextMenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.GetSubmenuContent__DelegateSignature");

	UContextMenuItem_GetSubmenuContent__DelegateSignature_Params params;
	params.ContextMenuItem = ContextMenuItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenuItem.GetJustification
// ()
// Parameters:
// TEnumAsByte<ETextJustify>      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ETextJustify> UContextMenuItem::GetJustification()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.GetJustification");

	UContextMenuItem_GetJustification_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenuItem.GetCaption
// ()
// Parameters:
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UContextMenuItem::GetCaption()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem.GetCaption");

	UContextMenuItem_GetCaption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenu_DinoGroupEntry.PopulateRootMenu
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_DinoGroupEntry::PopulateRootMenu(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_DinoGroupEntry.PopulateRootMenu");

	UContextMenu_DinoGroupEntry_PopulateRootMenu_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_DinoGroupEntry.HandleActionSetGroup
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_DinoGroupEntry::HandleActionSetGroup(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_DinoGroupEntry.HandleActionSetGroup");

	UContextMenu_DinoGroupEntry_HandleActionSetGroup_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_DinoGroupEntry.HandleActionRemoveDino
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_DinoGroupEntry::HandleActionRemoveDino(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_DinoGroupEntry.HandleActionRemoveDino");

	UContextMenu_DinoGroupEntry_HandleActionRemoveDino_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_DinoGroupEntry.HandleActionRemoveClass
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_DinoGroupEntry::HandleActionRemoveClass(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_DinoGroupEntry.HandleActionRemoveClass");

	UContextMenu_DinoGroupEntry_HandleActionRemoveClass_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_InventorySort.PopulateRootMenu
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_InventorySort::PopulateRootMenu(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_InventorySort.PopulateRootMenu");

	UContextMenu_InventorySort_PopulateRootMenu_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_InventorySort.HandleActionWeight
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_InventorySort::HandleActionWeight(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_InventorySort.HandleActionWeight");

	UContextMenu_InventorySort_HandleActionWeight_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_InventorySort.HandleActionUnsort
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_InventorySort::HandleActionUnsort(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_InventorySort.HandleActionUnsort");

	UContextMenu_InventorySort_HandleActionUnsort_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_InventorySort.HandleActionSpoilTimer
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_InventorySort::HandleActionSpoilTimer(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_InventorySort.HandleActionSpoilTimer");

	UContextMenu_InventorySort_HandleActionSpoilTimer_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_InventorySort.HandleActionAlphabetical
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_InventorySort::HandleActionAlphabetical(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_InventorySort.HandleActionAlphabetical");

	UContextMenu_InventorySort_HandleActionAlphabetical_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuSplitStack
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::PopulateSubmenuSplitStack(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuSplitStack");

	UContextMenu_PrimalItem_PopulateSubmenuSplitStack_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuSplitAmount
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::PopulateSubmenuSplitAmount(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuSplitAmount");

	UContextMenu_PrimalItem_PopulateSubmenuSplitAmount_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuRemove
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::PopulateSubmenuRemove(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuRemove");

	UContextMenu_PrimalItem_PopulateSubmenuRemove_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuCraftAmount
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::PopulateSubmenuCraftAmount(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.PopulateSubmenuCraftAmount");

	UContextMenu_PrimalItem_PopulateSubmenuCraftAmount_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.PopulateRootMenu
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::PopulateRootMenu(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.PopulateRootMenu");

	UContextMenu_PrimalItem_PopulateRootMenu_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.PopulateFolderMenu
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::PopulateFolderMenu(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.PopulateFolderMenu");

	UContextMenu_PrimalItem_PopulateFolderMenu_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.PopulateCraftMenu
// ()
// Parameters:
// class UContextMenu*            ContextMenu                    (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::PopulateCraftMenu(class UContextMenu* ContextMenu)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.PopulateCraftMenu");

	UContextMenu_PrimalItem_PopulateCraftMenu_Params params;
	params.ContextMenu = ContextMenu;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleSplitAmountValueCommit
// ()
// Parameters:
// class UContextMenuItem_Spinner* Item                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            InValue                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleSplitAmountValueCommit(class UContextMenuItem_Spinner* Item, int InValue, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleSplitAmountValueCommit");

	UContextMenu_PrimalItem_HandleSplitAmountValueCommit_Params params;
	params.Item = Item;
	params.InValue = InValue;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuSplitStackContent
// ()
// Parameters:
// class UContextMenuItem*        MenuItem                       (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenu*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UContextMenu* UContextMenu_PrimalItem::HandleOnGetSubmenuSplitStackContent(class UContextMenuItem* MenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuSplitStackContent");

	UContextMenu_PrimalItem_HandleOnGetSubmenuSplitStackContent_Params params;
	params.MenuItem = MenuItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuSplitAmountContent
// ()
// Parameters:
// class UContextMenuItem*        MenuItem                       (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenu*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UContextMenu* UContextMenu_PrimalItem::HandleOnGetSubmenuSplitAmountContent(class UContextMenuItem* MenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuSplitAmountContent");

	UContextMenu_PrimalItem_HandleOnGetSubmenuSplitAmountContent_Params params;
	params.MenuItem = MenuItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuRemoveContent
// ()
// Parameters:
// class UContextMenuItem*        MenuItem                       (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenu*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UContextMenu* UContextMenu_PrimalItem::HandleOnGetSubmenuRemoveContent(class UContextMenuItem* MenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuRemoveContent");

	UContextMenu_PrimalItem_HandleOnGetSubmenuRemoveContent_Params params;
	params.MenuItem = MenuItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuCraftContent
// ()
// Parameters:
// class UContextMenuItem*        MenuItem                       (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenu*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UContextMenu* UContextMenu_PrimalItem::HandleOnGetSubmenuCraftContent(class UContextMenuItem* MenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuCraftContent");

	UContextMenu_PrimalItem_HandleOnGetSubmenuCraftContent_Params params;
	params.MenuItem = MenuItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuCraftAmountContent
// ()
// Parameters:
// class UContextMenuItem*        MenuItem                       (Parm, ZeroConstructor, IsPlainOldData)
// class UContextMenu*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UContextMenu* UContextMenu_PrimalItem::HandleOnGetSubmenuCraftAmountContent(class UContextMenuItem* MenuItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleOnGetSubmenuCraftAmountContent");

	UContextMenu_PrimalItem_HandleOnGetSubmenuCraftAmountContent_Params params;
	params.MenuItem = MenuItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleCraftAmountValueCommit
// ()
// Parameters:
// class UContextMenuItem_Spinner* Item                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            InValue                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleCraftAmountValueCommit(class UContextMenuItem_Spinner* Item, int InValue, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleCraftAmountValueCommit");

	UContextMenu_PrimalItem_HandleCraftAmountValueCommit_Params params;
	params.Item = Item;
	params.InValue = InValue;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionUse
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionUse(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionUse");

	UContextMenu_PrimalItem_HandleActionUse_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionUnequip
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionUnequip(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionUnequip");

	UContextMenu_PrimalItem_HandleActionUnequip_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionTransfer
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionTransfer(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionTransfer");

	UContextMenu_PrimalItem_HandleActionTransfer_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitOne
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionSplitOne(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitOne");

	UContextMenu_PrimalItem_HandleActionSplitOne_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitHalf
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionSplitHalf(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitHalf");

	UContextMenu_PrimalItem_HandleActionSplitHalf_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitAmount
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionSplitAmount(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitAmount");

	UContextMenu_PrimalItem_HandleActionSplitAmount_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitAll
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionSplitAll(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionSplitAll");

	UContextMenu_PrimalItem_HandleActionSplitAll_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionRepair
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionRepair(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionRepair");

	UContextMenu_PrimalItem_HandleActionRepair_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionRenameFolder
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionRenameFolder(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionRenameFolder");

	UContextMenu_PrimalItem_HandleActionRenameFolder_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionRemoveSkin
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionRemoveSkin(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionRemoveSkin");

	UContextMenu_PrimalItem_HandleActionRemoveSkin_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionRemoveAmmo
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionRemoveAmmo(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionRemoveAmmo");

	UContextMenu_PrimalItem_HandleActionRemoveAmmo_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionRemoveAccessory
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionRemoveAccessory(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionRemoveAccessory");

	UContextMenu_PrimalItem_HandleActionRemoveAccessory_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionFavorite
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionFavorite(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionFavorite");

	UContextMenu_PrimalItem_HandleActionFavorite_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionEquipAllInFolder
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionEquipAllInFolder(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionEquipAllInFolder");

	UContextMenu_PrimalItem_HandleActionEquipAllInFolder_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionEquip
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionEquip(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionEquip");

	UContextMenu_PrimalItem_HandleActionEquip_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionDiscard
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionDiscard(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionDiscard");

	UContextMenu_PrimalItem_HandleActionDiscard_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionDeleteFolder
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionDeleteFolder(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionDeleteFolder");

	UContextMenu_PrimalItem_HandleActionDeleteFolder_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionCraftOne
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionCraftOne(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionCraftOne");

	UContextMenu_PrimalItem_HandleActionCraftOne_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionCraftAmount
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionCraftAmount(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionCraftAmount");

	UContextMenu_PrimalItem_HandleActionCraftAmount_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenu_PrimalItem.HandleActionCraftAll
// ()
// Parameters:
// class UContextMenuItem*        Item                           (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenu_PrimalItem::HandleActionCraftAll(class UContextMenuItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenu_PrimalItem.HandleActionCraftAll");

	UContextMenu_PrimalItem_HandleActionCraftAll_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.SetValue
// ()
// Parameters:
// int                            newValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem_Spinner::SetValue(int newValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.SetValue");

	UContextMenuItem_Spinner_SetValue_Params params;
	params.newValue = newValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.SetMinValue
// ()
// Parameters:
// int                            newValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem_Spinner::SetMinValue(int newValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.SetMinValue");

	UContextMenuItem_Spinner_SetMinValue_Params params;
	params.newValue = newValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.SetMaxValue
// ()
// Parameters:
// int                            newValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem_Spinner::SetMaxValue(int newValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.SetMaxValue");

	UContextMenuItem_Spinner_SetMaxValue_Params params;
	params.newValue = newValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.OnSpinnerValueCommitedEvent__DelegateSignature
// ()
// Parameters:
// class UContextMenuItem_Spinner* Item                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            InValue                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem_Spinner::OnSpinnerValueCommitedEvent__DelegateSignature(class UContextMenuItem_Spinner* Item, int InValue, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.OnSpinnerValueCommitedEvent__DelegateSignature");

	UContextMenuItem_Spinner_OnSpinnerValueCommitedEvent__DelegateSignature_Params params;
	params.Item = Item;
	params.InValue = InValue;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.HandleOnTextCommited
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UContextMenuItem_Spinner::HandleOnTextCommited(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.HandleOnTextCommited");

	UContextMenuItem_Spinner_HandleOnTextCommited_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.HandleOnTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UContextMenuItem_Spinner::HandleOnTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.HandleOnTextChanged");

	UContextMenuItem_Spinner_HandleOnTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.HandleOnButtonIncreaseClicked
// ()

void UContextMenuItem_Spinner::HandleOnButtonIncreaseClicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.HandleOnButtonIncreaseClicked");

	UContextMenuItem_Spinner_HandleOnButtonIncreaseClicked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.HandleOnButtonDecreaseClicked
// ()

void UContextMenuItem_Spinner::HandleOnButtonDecreaseClicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.HandleOnButtonDecreaseClicked");

	UContextMenuItem_Spinner_HandleOnButtonDecreaseClicked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ContextMenuItem_Spinner.GetValue
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UContextMenuItem_Spinner::GetValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.GetValue");

	UContextMenuItem_Spinner_GetValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenuItem_Spinner.GetMinValue
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UContextMenuItem_Spinner::GetMinValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.GetMinValue");

	UContextMenuItem_Spinner_GetMinValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ContextMenuItem_Spinner.GetMaxValue
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UContextMenuItem_Spinner::GetMaxValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ContextMenuItem_Spinner.GetMaxValue");

	UContextMenuItem_Spinner_GetMaxValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomActorList.DestroyActors
// ()

void ACustomActorList::DestroyActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomActorList.DestroyActors");

	ACustomActorList_DestroyActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomButtonWidget.SetToggledState
// ()
// Parameters:
// bool                           IsToggled                      (Parm, ZeroConstructor, IsPlainOldData)

void UCustomButtonWidget::SetToggledState(bool IsToggled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomButtonWidget.SetToggledState");

	UCustomButtonWidget_SetToggledState_Params params;
	params.IsToggled = IsToggled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomButtonWidget.SetIsToggleButton
// ()
// Parameters:
// bool                           IsToggle                       (Parm, ZeroConstructor, IsPlainOldData)

void UCustomButtonWidget::SetIsToggleButton(bool IsToggle)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomButtonWidget.SetIsToggleButton");

	UCustomButtonWidget_SetIsToggleButton_Params params;
	params.IsToggle = IsToggle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomButtonWidget.GetToggledState
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCustomButtonWidget::GetToggledState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomButtonWidget.GetToggledState");

	UCustomButtonWidget_GetToggledState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomButtonWidget.GetIsToggleButton
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UCustomButtonWidget::GetIsToggleButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomButtonWidget.GetIsToggleButton");

	UCustomButtonWidget_GetIsToggleButton_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomCanvasWidget.OnDraggedClickedEventObject__DelegateSignature
// ()
// Parameters:
// class UWidget*                 draggeddWidget                 (Parm, ZeroConstructor, IsPlainOldData)

void UCustomCanvasWidget::OnDraggedClickedEventObject__DelegateSignature(class UWidget* draggeddWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomCanvasWidget.OnDraggedClickedEventObject__DelegateSignature");

	UCustomCanvasWidget_OnDraggedClickedEventObject__DelegateSignature_Params params;
	params.draggeddWidget = draggeddWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DataListEntryButton.OnGetContextMenuContent
// ()
// Parameters:
// class UWidget*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWidget* UDataListEntryButton::OnGetContextMenuContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DataListEntryButton.OnGetContextMenuContent");

	UDataListEntryButton_OnGetContextMenuContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DataListEntryButton.ClickedSecondaryButton
// ()
// Parameters:
// class UWidget*                 clickedWidget                  (Parm, ZeroConstructor, IsPlainOldData)

void UDataListEntryButton::ClickedSecondaryButton(class UWidget* clickedWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DataListEntryButton.ClickedSecondaryButton");

	UDataListEntryButton_ClickedSecondaryButton_Params params;
	params.clickedWidget = clickedWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DataListEntryButton.ClickedButton
// ()
// Parameters:
// class UWidget*                 clickedWidget                  (Parm, ZeroConstructor, IsPlainOldData)

void UDataListEntryButton::ClickedButton(class UWidget* clickedWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DataListEntryButton.ClickedButton");

	UDataListEntryButton_ClickedButton_Params params;
	params.clickedWidget = clickedWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DataListEntryButton_PrimalItem.HandleOnContextMenuIsOpenChanged
// ()
// Parameters:
// bool                           bIsOpen                        (Parm, ZeroConstructor, IsPlainOldData)

void UDataListEntryButton_PrimalItem::HandleOnContextMenuIsOpenChanged(bool bIsOpen)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DataListEntryButton_PrimalItem.HandleOnContextMenuIsOpenChanged");

	UDataListEntryButton_PrimalItem_HandleOnContextMenuIsOpenChanged_Params params;
	params.bIsOpen = bIsOpen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DamageVolumeBase.OnEndOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ADamageVolumeBase::OnEndOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DamageVolumeBase.OnEndOverlap");

	ADamageVolumeBase_OnEndOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DamageVolumeBase.OnBeginOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ADamageVolumeBase::OnBeginOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DamageVolumeBase.OnBeginOverlap");

	ADamageVolumeBase_OnBeginOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DataListEntryWidget.OnDraggedClickedEventObject
// ()
// Parameters:
// class UWidget*                 draggeddWidget                 (Parm, ZeroConstructor, IsPlainOldData)

void UDataListEntryWidget::OnDraggedClickedEventObject(class UWidget* draggeddWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DataListEntryWidget.OnDraggedClickedEventObject");

	UDataListEntryWidget_OnDraggedClickedEventObject_Params params;
	params.draggeddWidget = draggeddWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DataListEntryWidget.InitializeMeDefaults
// ()

void UDataListEntryWidget::InitializeMeDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DataListEntryWidget.InitializeMeDefaults");

	UDataListEntryWidget_InitializeMeDefaults_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DataListEntryWidget.GetDataListButton
// ()
// Parameters:
// class UDataListEntryButton*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UDataListEntryButton* UDataListEntryWidget::GetDataListButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DataListEntryWidget.GetDataListButton");

	UDataListEntryWidget_GetDataListButton_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.ShooterCharacterSpawned
// ()
// Parameters:
// class AShooterCharacter*       TheShooterCharacter            (Parm, ZeroConstructor, IsPlainOldData)

void ADayCycleManager::ShooterCharacterSpawned(class AShooterCharacter* TheShooterCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.ShooterCharacterSpawned");

	ADayCycleManager_ShooterCharacterSpawned_Params params;
	params.TheShooterCharacter = TheShooterCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DayCycleManager.ShooterCharacterPossessed
// ()
// Parameters:
// class AShooterCharacter*       TheShooterCharacter            (Parm, ZeroConstructor, IsPlainOldData)

void ADayCycleManager::ShooterCharacterPossessed(class AShooterCharacter* TheShooterCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.ShooterCharacterPossessed");

	ADayCycleManager_ShooterCharacterPossessed_Params params;
	params.TheShooterCharacter = TheShooterCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DayCycleManager.IsDaytime
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ADayCycleManager::IsDaytime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.IsDaytime");

	ADayCycleManager_IsDaytime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.GetWindAtLocation
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        ForPrimalCharacter             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADayCycleManager::GetWindAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.GetWindAtLocation");

	ADayCycleManager_GetWindAtLocation_Params params;
	params.AtLocation = AtLocation;
	params.ForPrimalCharacter = ForPrimalCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.GetWaterLineStartZ
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADayCycleManager::GetWaterLineStartZ(const struct FVector& AtLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.GetWaterLineStartZ");

	ADayCycleManager_GetWaterLineStartZ_Params params;
	params.AtLocation = AtLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.GetTemperatureAtLocation
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        ForPrimalCharacter             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADayCycleManager::GetTemperatureAtLocation(const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.GetTemperatureAtLocation");

	ADayCycleManager_GetTemperatureAtLocation_Params params;
	params.AtLocation = AtLocation;
	params.ForPrimalCharacter = ForPrimalCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.GetPreventBuffClassesInDayCycleLevel
// ()
// Parameters:
// TArray<class UClass*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UClass*> ADayCycleManager::GetPreventBuffClassesInDayCycleLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.GetPreventBuffClassesInDayCycleLevel");

	ADayCycleManager_GetPreventBuffClassesInDayCycleLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.GetDeepWaterStartZ
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADayCycleManager::GetDeepWaterStartZ(const struct FVector& AtLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.GetDeepWaterStartZ");

	ADayCycleManager_GetDeepWaterStartZ_Params params;
	params.AtLocation = AtLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.GetDayNumberString
// ()
// Parameters:
// bool                           bIncludeDayString              (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString ADayCycleManager::GetDayNumberString(bool bIncludeDayString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.GetDayNumberString");

	ADayCycleManager_GetDayNumberString_Params params;
	params.bIncludeDayString = bIncludeDayString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.DayCycleManagerStartNighttime__DelegateSignature
// ()

void ADayCycleManager::DayCycleManagerStartNighttime__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.DayCycleManagerStartNighttime__DelegateSignature");

	ADayCycleManager_DayCycleManagerStartNighttime__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DayCycleManager.DayCycleManagerStartDaytime__DelegateSignature
// ()

void ADayCycleManager::DayCycleManagerStartDaytime__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.DayCycleManagerStartDaytime__DelegateSignature");

	ADayCycleManager_DayCycleManagerStartDaytime__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DayCycleManager.DayCycleManagerOnDayChange__DelegateSignature
// ()
// Parameters:
// int                            DayNumber                      (Parm, ZeroConstructor, IsPlainOldData)

void ADayCycleManager::DayCycleManagerOnDayChange__DelegateSignature(int DayNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.DayCycleManagerOnDayChange__DelegateSignature");

	ADayCycleManager_DayCycleManagerOnDayChange__DelegateSignature_Params params;
	params.DayNumber = DayNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DayCycleManager.BPPostDrawSpawnMap
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class UCanvas*                 ItemCanvas                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ItemCanvasSize                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ADayCycleManager::BPPostDrawSpawnMap(class AShooterPlayerController* ForPC, class UCanvas* ItemCanvas, const struct FVector2D& ItemCanvasSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.BPPostDrawSpawnMap");

	ADayCycleManager_BPPostDrawSpawnMap_Params params;
	params.ForPC = ForPC;
	params.ItemCanvas = ItemCanvas;
	params.ItemCanvasSize = ItemCanvasSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DayCycleManager.BPOverrideItemAutoDecreaseDurability
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ADayCycleManager::BPOverrideItemAutoDecreaseDurability(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.BPOverrideItemAutoDecreaseDurability");

	ADayCycleManager_BPOverrideItemAutoDecreaseDurability_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.BPOverrideGameStateMatineePlayRate
// ()
// Parameters:
// class AActor*                  forMatinee                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADayCycleManager::BPOverrideGameStateMatineePlayRate(class AActor* forMatinee, float InPlayRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.BPOverrideGameStateMatineePlayRate");

	ADayCycleManager_BPOverrideGameStateMatineePlayRate_Params params;
	params.forMatinee = forMatinee;
	params.InPlayRate = InPlayRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.BPGetAdditionalMapMarkers
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FPrimalMapMarkerEntryData> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FPrimalMapMarkerEntryData> ADayCycleManager::BPGetAdditionalMapMarkers(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.BPGetAdditionalMapMarkers");

	ADayCycleManager_BPGetAdditionalMapMarkers_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.BPAdjustTemperature
// ()
// Parameters:
// float                          TemperatureIn                  (Parm, ZeroConstructor, IsPlainOldData)
// class ABiomeZoneVolume*        BiomeZoneVolume                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class APrimalCharacter*        ForPrimalCharacter             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADayCycleManager::BPAdjustTemperature(float TemperatureIn, class ABiomeZoneVolume* BiomeZoneVolume, const struct FVector& AtLocation, class APrimalCharacter* ForPrimalCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.BPAdjustTemperature");

	ADayCycleManager_BPAdjustTemperature_Params params;
	params.TemperatureIn = TemperatureIn;
	params.BiomeZoneVolume = BiomeZoneVolume;
	params.AtLocation = AtLocation;
	params.ForPrimalCharacter = ForPrimalCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.AttemptWeaponFiring
// ()
// Parameters:
// class AShooterWeapon*          theWeapon                      (Parm, ZeroConstructor, IsPlainOldData)

void ADayCycleManager::AttemptWeaponFiring(class AShooterWeapon* theWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.AttemptWeaponFiring");

	ADayCycleManager_AttemptWeaponFiring_Params params;
	params.theWeapon = theWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DayCycleManager.AllowWeaponFiring
// ()
// Parameters:
// class AActor*                  theWeaponOrStructure           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ADayCycleManager::AllowWeaponFiring(class AActor* theWeaponOrStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.AllowWeaponFiring");

	ADayCycleManager_AllowWeaponFiring_Params params;
	params.theWeaponOrStructure = theWeaponOrStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.AllowStructureActivation
// ()
// Parameters:
// class APrimalStructure*        theStructure                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ADayCycleManager::AllowStructureActivation(class APrimalStructure* theStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.AllowStructureActivation");

	ADayCycleManager_AllowStructureActivation_Params params;
	params.theStructure = theStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DayCycleManager.AdjustStructureItemInsulation
// ()
// Parameters:
// class AShooterCharacter*       forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ForPrimalItem                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalItemStat>   TypeInsulation                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          insulationValue                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ADayCycleManager::AdjustStructureItemInsulation(class AShooterCharacter* forCharacter, class UPrimalItem* ForPrimalItem, TEnumAsByte<EPrimalItemStat> TypeInsulation, float insulationValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DayCycleManager.AdjustStructureItemInsulation");

	ADayCycleManager_AdjustStructureItemInsulation_Params params;
	params.forCharacter = forCharacter;
	params.ForPrimalItem = ForPrimalItem;
	params.TypeInsulation = TypeInsulation;
	params.insulationValue = insulationValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.DestroyedMeshActor.SetNoCollisionProfile
// ()

void ADestroyedMeshActor::SetNoCollisionProfile()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DestroyedMeshActor.SetNoCollisionProfile");

	ADestroyedMeshActor_SetNoCollisionProfile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DroppedItem.KeepPhysicsActiveForDuration
// ()
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void ADroppedItem::KeepPhysicsActiveForDuration(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DroppedItem.KeepPhysicsActiveForDuration");

	ADroppedItem_KeepPhysicsActiveForDuration_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DroppedItem.FreezePhysics
// ()

void ADroppedItem::FreezePhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DroppedItem.FreezePhysics");

	ADroppedItem_FreezePhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DroppedItem.ForceSleep
// ()

void ADroppedItem::ForceSleep()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DroppedItem.ForceSleep");

	ADroppedItem_ForceSleep_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DroppedItemEgg.NetSpawnDinoEmitter
// ()

void ADroppedItemEgg::NetSpawnDinoEmitter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DroppedItemEgg.NetSpawnDinoEmitter");

	ADroppedItemEgg_NetSpawnDinoEmitter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DroppedItemTorch.OnRep_FireIsOn
// ()

void ADroppedItemTorch::OnRep_FireIsOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DroppedItemTorch.OnRep_FireIsOn");

	ADroppedItemTorch_OnRep_FireIsOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FadingDestructibleActor.SetupFade
// ()

void AFadingDestructibleActor::SetupFade()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FadingDestructibleActor.SetupFade");

	AFadingDestructibleActor_SetupFade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FloatMap.Init
// ()
// Parameters:
// int                            InSizeX                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            InSizeY                        (Parm, ZeroConstructor, IsPlainOldData)

void UFloatMap::Init(int InSizeX, int InSizeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FloatMap.Init");

	UFloatMap_Init_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FloatMap.GetSizeY
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UFloatMap::GetSizeY()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FloatMap.GetSizeY");

	UFloatMap_GetSizeY_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FloatMap.GetSizeX
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UFloatMap::GetSizeX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FloatMap.GetSizeX");

	UFloatMap_GetSizeX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FloatMap.GetSize
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UFloatMap::GetSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FloatMap.GetSize");

	UFloatMap_GetSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FloatMap.Delete
// ()

void UFloatMap::Delete()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FloatMap.Delete");

	UFloatMap_Delete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FlockingBehavior.UpdateFlockComponentLocations_ParticleBoids
// ()
// Parameters:
// TArray<struct FBoid>           BoidArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UParticleSystemComponent*> ComponentArray                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFlockingBehavior::UpdateFlockComponentLocations_ParticleBoids(TArray<struct FBoid> BoidArray, TArray<class UParticleSystemComponent*> ComponentArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.UpdateFlockComponentLocations_ParticleBoids");

	UFlockingBehavior_UpdateFlockComponentLocations_ParticleBoids_Params params;
	params.BoidArray = BoidArray;
	params.ComponentArray = ComponentArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FlockingBehavior.UpdateFlockComponentLocations
// ()
// Parameters:
// TArray<struct FBoid>           BoidArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UStaticMeshComponent*> ComponentArray                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFlockingBehavior::UpdateFlockComponentLocations(TArray<struct FBoid> BoidArray, TArray<class UStaticMeshComponent*> ComponentArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.UpdateFlockComponentLocations");

	UFlockingBehavior_UpdateFlockComponentLocations_Params params;
	params.BoidArray = BoidArray;
	params.ComponentArray = ComponentArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FlockingBehavior.UpdateBoidComponentLocation
// ()
// Parameters:
// struct FBoid                   ThisBoid                       (ConstParm, Parm, OutParm, ReferenceParm)
// class USceneComponent*         Comp                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UFlockingBehavior::UpdateBoidComponentLocation(const struct FBoid& ThisBoid, class USceneComponent* Comp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.UpdateBoidComponentLocation");

	UFlockingBehavior_UpdateBoidComponentLocation_Params params;
	params.ThisBoid = ThisBoid;
	params.Comp = Comp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FlockingBehavior.TickPersistentFlockData
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// TArray<struct FBoid>           BoidArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxNumTracesPerSecond          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::TickPersistentFlockData(class UObject* WorldContextObject, TArray<struct FBoid> BoidArray, float DeltaTime, int MaxNumTracesPerSecond, bool bDrawDebug, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.TickPersistentFlockData");

	UFlockingBehavior_TickPersistentFlockData_Params params;
	params.WorldContextObject = WorldContextObject;
	params.BoidArray = BoidArray;
	params.DeltaTime = DeltaTime;
	params.MaxNumTracesPerSecond = MaxNumTracesPerSecond;
	params.bDrawDebug = bDrawDebug;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.SetAvoidanceAreaTransform
// ()
// Parameters:
// struct FAvoidanceArea          InOutAvoidanceArea             (Parm, OutParm, ReferenceParm)
// struct FTransform              NewTransform                   (Parm, IsPlainOldData)

void UFlockingBehavior::SetAvoidanceAreaTransform(const struct FTransform& NewTransform, struct FAvoidanceArea* InOutAvoidanceArea)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.SetAvoidanceAreaTransform");

	UFlockingBehavior_SetAvoidanceAreaTransform_Params params;
	params.NewTransform = NewTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutAvoidanceArea != nullptr)
		*InOutAvoidanceArea = params.InOutAvoidanceArea;
}


// Function ShooterGame.FlockingBehavior.SetAvoidanceAreaArrayTransform
// ()
// Parameters:
// TArray<struct FAvoidanceArea>  InOutAvoidanceAreas            (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              NewTransform                   (Parm, IsPlainOldData)

void UFlockingBehavior::SetAvoidanceAreaArrayTransform(const struct FTransform& NewTransform, TArray<struct FAvoidanceArea>* InOutAvoidanceAreas)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.SetAvoidanceAreaArrayTransform");

	UFlockingBehavior_SetAvoidanceAreaArrayTransform_Params params;
	params.NewTransform = NewTransform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutAvoidanceAreas != nullptr)
		*InOutAvoidanceAreas = params.InOutAvoidanceAreas;
}


// Function ShooterGame.FlockingBehavior.MakeIndexArray
// ()
// Parameters:
// int                            StartIndex                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumIndices                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    OutIndexArray                  (Parm, OutParm, ZeroConstructor)

void UFlockingBehavior::MakeIndexArray(int StartIndex, int NumIndices, TArray<int>* OutIndexArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.MakeIndexArray");

	UFlockingBehavior_MakeIndexArray_Params params;
	params.StartIndex = StartIndex;
	params.NumIndices = NumIndices;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutIndexArray != nullptr)
		*OutIndexArray = params.OutIndexArray;
}


// Function ShooterGame.FlockingBehavior.IsPointInsideAvoidanceArea
// ()
// Parameters:
// struct FAvoidanceArea          Area                           (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UFlockingBehavior::IsPointInsideAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.IsPointInsideAvoidanceArea");

	UFlockingBehavior_IsPointInsideAvoidanceArea_Params params;
	params.Area = Area;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FlockingBehavior.IsPointInsideAnyAvoidanceArea
// ()
// Parameters:
// TArray<struct FAvoidanceArea>  Areas                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UFlockingBehavior::IsPointInsideAnyAvoidanceArea(TArray<struct FAvoidanceArea> Areas, const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.IsPointInsideAnyAvoidanceArea");

	UFlockingBehavior_IsPointInsideAnyAvoidanceArea_Params params;
	params.Areas = Areas;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FlockingBehavior.InterpVectorArrayToSphere
// ()
// Parameters:
// TArray<struct FVector>         InOutVectorArray               (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumRows                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      LatitudeDistribution           (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpVectorArrayToSphere(const struct FVector& Origin, float Radius, int NumRows, TEnumAsByte<ESimpleCurve> LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FVector>* InOutVectorArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpVectorArrayToSphere");

	UFlockingBehavior_InterpVectorArrayToSphere_Params params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.NumRows = NumRows;
	params.LatitudeDistribution = LatitudeDistribution;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutVectorArray != nullptr)
		*InOutVectorArray = params.InOutVectorArray;
}


// Function ShooterGame.FlockingBehavior.InterpVectorArrayToRandom
// ()
// Parameters:
// TArray<struct FVector>         InOutVectorArray               (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinRadius                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxRadius                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            RandomSeed                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpVectorArrayToRandom(const struct FVector& Origin, float MinRadius, float MaxRadius, int RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FVector>* InOutVectorArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpVectorArrayToRandom");

	UFlockingBehavior_InterpVectorArrayToRandom_Params params;
	params.Origin = Origin;
	params.MinRadius = MinRadius;
	params.MaxRadius = MaxRadius;
	params.RandomSeed = RandomSeed;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutVectorArray != nullptr)
		*InOutVectorArray = params.InOutVectorArray;
}


// Function ShooterGame.FlockingBehavior.InterpVectorArrayToGrid
// ()
// Parameters:
// TArray<struct FVector>         InOutVectorArray               (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          HorizSize                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          VertSize                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumRows                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumCols                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpVectorArrayToGrid(const struct FVector& Origin, const struct FRotator& Rotation, float HorizSize, float VertSize, int NumRows, int NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FVector>* InOutVectorArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpVectorArrayToGrid");

	UFlockingBehavior_InterpVectorArrayToGrid_Params params;
	params.Origin = Origin;
	params.Rotation = Rotation;
	params.HorizSize = HorizSize;
	params.VertSize = VertSize;
	params.NumRows = NumRows;
	params.NumCols = NumCols;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutVectorArray != nullptr)
		*InOutVectorArray = params.InOutVectorArray;
}


// Function ShooterGame.FlockingBehavior.InterpVectorArrayToCircle
// ()
// Parameters:
// TArray<struct FVector>         InOutVectorArray               (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpVectorArrayToCircle(const struct FVector& Origin, const struct FRotator& Rotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FVector>* InOutVectorArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpVectorArrayToCircle");

	UFlockingBehavior_InterpVectorArrayToCircle_Params params;
	params.Origin = Origin;
	params.Rotation = Rotation;
	params.Radius = Radius;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutVectorArray != nullptr)
		*InOutVectorArray = params.InOutVectorArray;
}


// Function ShooterGame.FlockingBehavior.InterpVectorArray
// ()
// Parameters:
// TArray<struct FVector>         InOutVectorArray               (Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FVector>         RelativeTargetLocations        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpVectorArray(TArray<struct FVector> RelativeTargetLocations, const struct FVector& Origin, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FVector>* InOutVectorArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpVectorArray");

	UFlockingBehavior_InterpVectorArray_Params params;
	params.RelativeTargetLocations = RelativeTargetLocations;
	params.Origin = Origin;
	params.Rotation = Rotation;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutVectorArray != nullptr)
		*InOutVectorArray = params.InOutVectorArray;
}


// Function ShooterGame.FlockingBehavior.InterpBoidArrayToSphere
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumRows                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      LatitudeDistribution           (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpBoidArrayToSphere(const struct FTransform& WorldTransform, float Radius, int NumRows, TEnumAsByte<ESimpleCurve> LatitudeDistribution, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpBoidArrayToSphere");

	UFlockingBehavior_InterpBoidArrayToSphere_Params params;
	params.WorldTransform = WorldTransform;
	params.Radius = Radius;
	params.NumRows = NumRows;
	params.LatitudeDistribution = LatitudeDistribution;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.InterpBoidArrayToRandom
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          MinRadius                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxRadius                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            RandomSeed                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpBoidArrayToRandom(const struct FTransform& WorldTransform, float MinRadius, float MaxRadius, int RandomSeed, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpBoidArrayToRandom");

	UFlockingBehavior_InterpBoidArrayToRandom_Params params;
	params.WorldTransform = WorldTransform;
	params.MinRadius = MinRadius;
	params.MaxRadius = MaxRadius;
	params.RandomSeed = RandomSeed;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.InterpBoidArrayToGrid
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          HorizSize                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          VertSize                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumRows                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumCols                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpBoidArrayToGrid(const struct FTransform& WorldTransform, const struct FRotator& Rotation, float HorizSize, float VertSize, int NumRows, int NumCols, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpBoidArrayToGrid");

	UFlockingBehavior_InterpBoidArrayToGrid_Params params;
	params.WorldTransform = WorldTransform;
	params.Rotation = Rotation;
	params.HorizSize = HorizSize;
	params.VertSize = VertSize;
	params.NumRows = NumRows;
	params.NumCols = NumCols;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.InterpBoidArrayToCircle
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                CircleRotation                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpBoidArrayToCircle(const struct FTransform& WorldTransform, const struct FRotator& CircleRotation, float Radius, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpBoidArrayToCircle");

	UFlockingBehavior_InterpBoidArrayToCircle_Params params;
	params.WorldTransform = WorldTransform;
	params.CircleRotation = CircleRotation;
	params.Radius = Radius;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.InterpBoidArray
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FBoid>           RelativeTargetLocations        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMin                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeedMax                 (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::InterpBoidArray(TArray<struct FBoid> RelativeTargetLocations, const struct FTransform& WorldTransform, const struct FRotator& Rotation, float DeltaTime, float InterpSpeedMin, float InterpSpeedMax, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.InterpBoidArray");

	UFlockingBehavior_InterpBoidArray_Params params;
	params.RelativeTargetLocations = RelativeTargetLocations;
	params.WorldTransform = WorldTransform;
	params.Rotation = Rotation;
	params.DeltaTime = DeltaTime;
	params.InterpSpeedMin = InterpSpeedMin;
	params.InterpSpeedMax = InterpSpeedMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.GetFlockRadius
// ()
// Parameters:
// TArray<struct FBoid>           BoidArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 FlockCentroid                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bIgnoreLeaders                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UFlockingBehavior::GetFlockRadius(TArray<struct FBoid> BoidArray, const struct FVector& FlockCentroid, bool bIgnoreLeaders)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.GetFlockRadius");

	UFlockingBehavior_GetFlockRadius_Params params;
	params.BoidArray = BoidArray;
	params.FlockCentroid = FlockCentroid;
	params.bIgnoreLeaders = bIgnoreLeaders;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FlockingBehavior.GetFlockMembersOfType
// ()
// Parameters:
// TArray<struct FBoid>           BoidArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TEnumAsByte<EBoidType>         BoidType                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    OutIndices                     (Parm, OutParm, ZeroConstructor)

void UFlockingBehavior::GetFlockMembersOfType(TArray<struct FBoid> BoidArray, TEnumAsByte<EBoidType> BoidType, TArray<int>* OutIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.GetFlockMembersOfType");

	UFlockingBehavior_GetFlockMembersOfType_Params params;
	params.BoidArray = BoidArray;
	params.BoidType = BoidType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutIndices != nullptr)
		*OutIndices = params.OutIndices;
}


// Function ShooterGame.FlockingBehavior.GetFlockCentroid
// ()
// Parameters:
// TArray<struct FBoid>           BoidArray                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bIgnoreLeaders                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UFlockingBehavior::GetFlockCentroid(TArray<struct FBoid> BoidArray, bool bIgnoreLeaders)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.GetFlockCentroid");

	UFlockingBehavior_GetFlockCentroid_Params params;
	params.BoidArray = BoidArray;
	params.bIgnoreLeaders = bIgnoreLeaders;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FlockingBehavior.GetClosestSurfacePointOnAvoidanceArea
// ()
// Parameters:
// struct FAvoidanceArea          Area                           (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 Loc                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UFlockingBehavior::GetClosestSurfacePointOnAvoidanceArea(const struct FAvoidanceArea& Area, const struct FVector& Loc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.GetClosestSurfacePointOnAvoidanceArea");

	UFlockingBehavior_GetClosestSurfacePointOnAvoidanceArea_Params params;
	params.Area = Area;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FlockingBehavior.GetAvoidanceDirection
// ()
// Parameters:
// struct FAvoidanceArea          Area                           (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 CurrentLoc                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 CurrentDir                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UFlockingBehavior::GetAvoidanceDirection(const struct FAvoidanceArea& Area, const struct FVector& CurrentLoc, const struct FVector& CurrentDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.GetAvoidanceDirection");

	UFlockingBehavior_GetAvoidanceDirection_Params params;
	params.Area = Area;
	params.CurrentLoc = CurrentLoc;
	params.CurrentDir = CurrentDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FlockingBehavior.GetAvoidanceAreaWorldLocation
// ()
// Parameters:
// struct FAvoidanceArea          Area                           (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UFlockingBehavior::GetAvoidanceAreaWorldLocation(const struct FAvoidanceArea& Area)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.GetAvoidanceAreaWorldLocation");

	UFlockingBehavior_GetAvoidanceAreaWorldLocation_Params params;
	params.Area = Area;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.FlockingBehavior.FlockTickSphereFormation
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// bool                           bUseBoidIndexWhitelist         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    BoidIndexWhitelist             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FBoidBehavior           Behavior                       (ConstParm, Parm, OutParm, ReferenceParm)
// float                          MinInterpDistance              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumRows                        (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      LatitudeDistribution           (Parm, ZeroConstructor, IsPlainOldData)
// float                          HelixSpeed                     (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::FlockTickSphereFormation(bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, float Radius, int NumRows, TEnumAsByte<ESimpleCurve> LatitudeDistribution, float HelixSpeed, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.FlockTickSphereFormation");

	UFlockingBehavior_FlockTickSphereFormation_Params params;
	params.bUseBoidIndexWhitelist = bUseBoidIndexWhitelist;
	params.BoidIndexWhitelist = BoidIndexWhitelist;
	params.DeltaTime = DeltaTime;
	params.WorldTransform = WorldTransform;
	params.Behavior = Behavior;
	params.MinInterpDistance = MinInterpDistance;
	params.Radius = Radius;
	params.NumRows = NumRows;
	params.LatitudeDistribution = LatitudeDistribution;
	params.HelixSpeed = HelixSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.FlockTickLeaders
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// bool                           bUseBoidIndexWhitelist         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    BoidIndexWhitelist             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ParentTransform                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          LeaderInterpSpeed              (Parm, ZeroConstructor, IsPlainOldData)
// float                          LeaderAreaWidth                (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::FlockTickLeaders(bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct FTransform& ParentTransform, float LeaderInterpSpeed, float LeaderAreaWidth, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.FlockTickLeaders");

	UFlockingBehavior_FlockTickLeaders_Params params;
	params.bUseBoidIndexWhitelist = bUseBoidIndexWhitelist;
	params.BoidIndexWhitelist = BoidIndexWhitelist;
	params.DeltaTime = DeltaTime;
	params.ParentTransform = ParentTransform;
	params.LeaderInterpSpeed = LeaderInterpSpeed;
	params.LeaderAreaWidth = LeaderAreaWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.FlockTickGridFormation
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// bool                           bUseBoidIndexWhitelist         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    BoidIndexWhitelist             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FBoidBehavior           Behavior                       (ConstParm, Parm, OutParm, ReferenceParm)
// float                          MinInterpDistance              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                GridRotation                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          GridHorizSize                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          GridVertSize                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            GridNumRows                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            GridNumCols                    (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::FlockTickGridFormation(bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, float MinInterpDistance, const struct FRotator& GridRotation, float GridHorizSize, float GridVertSize, int GridNumRows, int GridNumCols, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.FlockTickGridFormation");

	UFlockingBehavior_FlockTickGridFormation_Params params;
	params.bUseBoidIndexWhitelist = bUseBoidIndexWhitelist;
	params.BoidIndexWhitelist = BoidIndexWhitelist;
	params.DeltaTime = DeltaTime;
	params.WorldTransform = WorldTransform;
	params.Behavior = Behavior;
	params.MinInterpDistance = MinInterpDistance;
	params.GridRotation = GridRotation;
	params.GridHorizSize = GridHorizSize;
	params.GridVertSize = GridVertSize;
	params.GridNumRows = GridNumRows;
	params.GridNumCols = GridNumCols;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.FlockTickFollowersAndFreeAgents
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// bool                           bUseBoidIndexWhitelist         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    BoidIndexWhitelist             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FBoidBehavior           Behavior                       (ConstParm, Parm, OutParm, ReferenceParm)

void UFlockingBehavior::FlockTickFollowersAndFreeAgents(bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct FBoidBehavior& Behavior, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.FlockTickFollowersAndFreeAgents");

	UFlockingBehavior_FlockTickFollowersAndFreeAgents_Params params;
	params.bUseBoidIndexWhitelist = bUseBoidIndexWhitelist;
	params.BoidIndexWhitelist = BoidIndexWhitelist;
	params.DeltaTime = DeltaTime;
	params.Behavior = Behavior;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.FlockTickCircleFormation
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// bool                           bUseBoidIndexWhitelist         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    BoidIndexWhitelist             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FBoidBehavior           Behavior                       (ConstParm, Parm, OutParm, ReferenceParm)
// struct FRotator                CircleRotation                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          CircleRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinInterpDistance              (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::FlockTickCircleFormation(bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, float DeltaTime, const struct FTransform& WorldTransform, const struct FBoidBehavior& Behavior, const struct FRotator& CircleRotation, float CircleRadius, float MinInterpDistance, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.FlockTickCircleFormation");

	UFlockingBehavior_FlockTickCircleFormation_Params params;
	params.bUseBoidIndexWhitelist = bUseBoidIndexWhitelist;
	params.BoidIndexWhitelist = BoidIndexWhitelist;
	params.DeltaTime = DeltaTime;
	params.WorldTransform = WorldTransform;
	params.Behavior = Behavior;
	params.CircleRotation = CircleRotation;
	params.CircleRadius = CircleRadius;
	params.MinInterpDistance = MinInterpDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.FlockSetMaxSpeedAndForce
// ()
// Parameters:
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bUseBoidIndexWhitelist         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    BoidIndexWhitelist             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector2D               MaxSpeedRange                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               MaxForceRange                  (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::FlockSetMaxSpeedAndForce(bool bUseBoidIndexWhitelist, TArray<int> BoidIndexWhitelist, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.FlockSetMaxSpeedAndForce");

	UFlockingBehavior_FlockSetMaxSpeedAndForce_Params params;
	params.bUseBoidIndexWhitelist = bUseBoidIndexWhitelist;
	params.BoidIndexWhitelist = BoidIndexWhitelist;
	params.MaxSpeedRange = MaxSpeedRange;
	params.MaxForceRange = MaxForceRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.FlockCreate
// ()
// Parameters:
// TArray<struct FBoid>           NewBoids                       (Parm, OutParm, ZeroConstructor)
// struct FTransform              WorldTransform                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            NumFlockBoids                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumLeaderBoids                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InitialSpawnRadius             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               MaxSpeedRange                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               MaxForceRange                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               TurnRateRange                  (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::FlockCreate(const struct FTransform& WorldTransform, int NumFlockBoids, int NumLeaderBoids, float InitialSpawnRadius, const struct FVector2D& MaxSpeedRange, const struct FVector2D& MaxForceRange, const struct FVector2D& TurnRateRange, TArray<struct FBoid>* NewBoids)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.FlockCreate");

	UFlockingBehavior_FlockCreate_Params params;
	params.WorldTransform = WorldTransform;
	params.NumFlockBoids = NumFlockBoids;
	params.NumLeaderBoids = NumLeaderBoids;
	params.InitialSpawnRadius = InitialSpawnRadius;
	params.MaxSpeedRange = MaxSpeedRange;
	params.MaxForceRange = MaxForceRange;
	params.TurnRateRange = TurnRateRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewBoids != nullptr)
		*NewBoids = params.NewBoids;
}


// Function ShooterGame.FlockingBehavior.DrawDebugAvoidanceArea
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FAvoidanceArea          Area                           (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DrawDuration                   (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::DrawDebugAvoidanceArea(class UObject* WorldContextObject, const struct FAvoidanceArea& Area, float DrawDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.DrawDebugAvoidanceArea");

	UFlockingBehavior_DrawDebugAvoidanceArea_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Area = Area;
	params.DrawDuration = DrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.FlockingBehavior.BoidTick
// ()
// Parameters:
// int                            BoidIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FBoidBehavior           Behavior                       (ConstParm, Parm, OutParm, ReferenceParm)

void UFlockingBehavior::BoidTick(int BoidIndex, float DeltaTime, const struct FBoidBehavior& Behavior, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.BoidTick");

	UFlockingBehavior_BoidTick_Params params;
	params.BoidIndex = BoidIndex;
	params.DeltaTime = DeltaTime;
	params.Behavior = Behavior;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.BoidStopTargeting
// ()
// Parameters:
// int                            BoidIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)

void UFlockingBehavior::BoidStopTargeting(int BoidIndex, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.BoidStopTargeting");

	UFlockingBehavior_BoidStopTargeting_Params params;
	params.BoidIndex = BoidIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.BoidSetTarget
// ()
// Parameters:
// int                            BoidIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FVector                 TargetWorldLocation            (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::BoidSetTarget(int BoidIndex, const struct FVector& TargetWorldLocation, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.BoidSetTarget");

	UFlockingBehavior_BoidSetTarget_Params params;
	params.BoidIndex = BoidIndex;
	params.TargetWorldLocation = TargetWorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.BoidSetAlive
// ()
// Parameters:
// int                            BoidIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bIsAlive                       (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::BoidSetAlive(int BoidIndex, bool bIsAlive, TArray<struct FBoid>* InOutBoidArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.BoidSetAlive");

	UFlockingBehavior_BoidSetAlive_Params params;
	params.BoidIndex = BoidIndex;
	params.bIsAlive = bIsAlive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
}


// Function ShooterGame.FlockingBehavior.BoidMoveTo
// ()
// Parameters:
// int                            BoidIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FBoid>           InOutBoidArray                 (Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// struct FBoidBehavior           Behavior                       (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewWorldLocation               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          TargetDistanceThreshold        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseIterp                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InterpSpeed                    (Parm, ZeroConstructor, IsPlainOldData)

void UFlockingBehavior::BoidMoveTo(int BoidIndex, const struct FBoidBehavior& Behavior, float DeltaTime, const struct FVector& NewWorldLocation, float TargetDistanceThreshold, bool bUseIterp, float InterpSpeed, TArray<struct FBoid>* InOutBoidArray, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.BoidMoveTo");

	UFlockingBehavior_BoidMoveTo_Params params;
	params.BoidIndex = BoidIndex;
	params.Behavior = Behavior;
	params.DeltaTime = DeltaTime;
	params.NewWorldLocation = NewWorldLocation;
	params.TargetDistanceThreshold = TargetDistanceThreshold;
	params.bUseIterp = bUseIterp;
	params.InterpSpeed = InterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutBoidArray != nullptr)
		*InOutBoidArray = params.InOutBoidArray;
	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.FlockingBehavior.AddAvoidanceAreaToFlockData
// ()
// Parameters:
// struct FFlockPersistentData    InOutFlockData                 (Parm, OutParm, ReferenceParm)
// struct FAvoidanceArea          Area                           (Parm)

void UFlockingBehavior::AddAvoidanceAreaToFlockData(const struct FAvoidanceArea& Area, struct FFlockPersistentData* InOutFlockData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.FlockingBehavior.AddAvoidanceAreaToFlockData");

	UFlockingBehavior_AddAvoidanceAreaToFlockData_Params params;
	params.Area = Area;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InOutFlockData != nullptr)
		*InOutFlockData = params.InOutFlockData;
}


// Function ShooterGame.HordeCrateManager.ForceStartHorde
// ()
// Parameters:
// class AActor*                  SpawnNetwork                   (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            DifficultyIndex                (Parm, ZeroConstructor, IsPlainOldData)

void AHordeCrateManager::ForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int DifficultyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HordeCrateManager.ForceStartHorde");

	AHordeCrateManager_ForceStartHorde_Params params;
	params.SpawnNetwork = SpawnNetwork;
	params.PC = PC;
	params.ActorClass = ActorClass;
	params.DifficultyIndex = DifficultyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.HordeCrateManager.BPForceStartHorde
// ()
// Parameters:
// class AActor*                  SpawnNetwork                   (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            DifficultyIndex                (Parm, ZeroConstructor, IsPlainOldData)

void AHordeCrateManager::BPForceStartHorde(class AActor* SpawnNetwork, class AShooterPlayerController* PC, class UClass* ActorClass, int DifficultyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HordeCrateManager.BPForceStartHorde");

	AHordeCrateManager_BPForceStartHorde_Params params;
	params.SpawnNetwork = SpawnNetwork;
	params.PC = PC;
	params.ActorClass = ActorClass;
	params.DifficultyIndex = DifficultyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.HUDElementBarWidget.UpdateBoostIconVisibility
// ()

void UHUDElementBarWidget::UpdateBoostIconVisibility()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDElementBarWidget.UpdateBoostIconVisibility");

	UHUDElementBarWidget_UpdateBoostIconVisibility_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetVectorField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// struct FVector                 Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetVectorField(const class FString& Key, const struct FVector& Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetVectorField");

	UJsonObject_SetVectorField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetVectorArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<struct FVector>         Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetVectorArrayField(const class FString& Key, TArray<struct FVector> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetVectorArrayField");

	UJsonObject_SetVectorArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetStructField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// class UProperty*               Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetStructField(const class FString& Key, class UProperty* Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetStructField");

	UJsonObject_SetStructField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetStringField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// class FString                  Value                          (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetStringField(const class FString& Key, const class FString& Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetStringField");

	UJsonObject_SetStringField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetStringArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<class FString>          Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetStringArrayField(const class FString& Key, TArray<class FString> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetStringArrayField");

	UJsonObject_SetStringArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetRotatorField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// struct FRotator                Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetRotatorField(const class FString& Key, const struct FRotator& Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetRotatorField");

	UJsonObject_SetRotatorField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetRotatorArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<struct FRotator>        Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetRotatorArrayField(const class FString& Key, TArray<struct FRotator> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetRotatorArrayField");

	UJsonObject_SetRotatorArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetNullField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetNullField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetNullField");

	UJsonObject_SetNullField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetJsonObjectField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// class UJsonObject*             Object                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetJsonObjectField(const class FString& Key, class UJsonObject* Object, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetJsonObjectField");

	UJsonObject_SetJsonObjectField_Params params;
	params.Key = Key;
	params.Object = Object;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetJsonObjectArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<class UJsonObject*>     Value                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetJsonObjectArrayField(const class FString& Key, TArray<class UJsonObject*> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetJsonObjectArrayField");

	UJsonObject_SetJsonObjectArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetIntField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetIntField(const class FString& Key, int Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetIntField");

	UJsonObject_SetIntField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetIntArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<int>                    Value                          (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetIntArrayField(const class FString& Key, TArray<int> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetIntArrayField");

	UJsonObject_SetIntArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetFloatField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetFloatField(const class FString& Key, float Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetFloatField");

	UJsonObject_SetFloatField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetFloatArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<float>                  Value                          (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetFloatArrayField(const class FString& Key, TArray<float> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetFloatArrayField");

	UJsonObject_SetFloatArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetDoubleField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// double                         Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetDoubleField(const class FString& Key, double Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetDoubleField");

	UJsonObject_SetDoubleField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetDoubleArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<double>                 Value                          (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetDoubleArrayField(const class FString& Key, TArray<double> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetDoubleArrayField");

	UJsonObject_SetDoubleArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetByteField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// unsigned char                  Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetByteField(const class FString& Key, unsigned char Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetByteField");

	UJsonObject_SetByteField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetByteArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<unsigned char>          Value                          (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetByteArrayField(const class FString& Key, TArray<unsigned char> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetByteArrayField");

	UJsonObject_SetByteArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetBoolField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetBoolField(const class FString& Key, bool Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetBoolField");

	UJsonObject_SetBoolField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.SetBoolArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<bool>                   Value                          (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)

void UJsonObject::SetBoolArrayField(const class FString& Key, TArray<bool> Value, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.SetBoolArrayField");

	UJsonObject_SetBoolArrayField_Params params;
	params.Key = Key;
	params.Value = Value;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.JsonObject.JsonSerialize
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UJsonObject::JsonSerialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.JsonSerialize");

	UJsonObject_JsonSerialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.JsonDeserialize
// ()
// Parameters:
// class FString                  JsonData                       (Parm, ZeroConstructor)
// class FString                  OutErrorMessage                (Parm, OutParm, ZeroConstructor)
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UJsonObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UJsonObject* UJsonObject::JsonDeserialize(const class FString& JsonData, class UObject* WorldContextObject, class FString* OutErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.JsonDeserialize");

	UJsonObject_JsonDeserialize_Params params;
	params.JsonData = JsonData;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutErrorMessage != nullptr)
		*OutErrorMessage = params.OutErrorMessage;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.IsNullField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::IsNullField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.IsNullField");

	UJsonObject_IsNullField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetVectorField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// struct FVector                 OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetVectorField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, struct FVector* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetVectorField");

	UJsonObject_GetVectorField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetVectorArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<struct FVector>         OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetVectorArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<struct FVector>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetVectorArrayField");

	UJsonObject_GetVectorArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetStructField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// class UProperty*               DestStruct                     (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetStructField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, class UProperty** DestStruct)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetStructField");

	UJsonObject_GetStructField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DestStruct != nullptr)
		*DestStruct = params.DestStruct;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetStringField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// class FString                  OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetStringField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, class FString* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetStringField");

	UJsonObject_GetStringField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetStringArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<class FString>          OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetStringArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<class FString>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetStringArrayField");

	UJsonObject_GetStringArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetRotatorField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// struct FRotator                OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetRotatorField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, struct FRotator* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetRotatorField");

	UJsonObject_GetRotatorField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetRotatorArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<struct FRotator>        OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetRotatorArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<struct FRotator>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetRotatorArrayField");

	UJsonObject_GetRotatorArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetJsonObjectField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// class UJsonObject*             OutObject                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetJsonObjectField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, class UJsonObject** OutObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetJsonObjectField");

	UJsonObject_GetJsonObjectField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutObject != nullptr)
		*OutObject = params.OutObject;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetJsonObjectArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<class UJsonObject*>     OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetJsonObjectArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<class UJsonObject*>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetJsonObjectArrayField");

	UJsonObject_GetJsonObjectArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetIntField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// int                            OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetIntField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, int* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetIntField");

	UJsonObject_GetIntField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetIntArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<int>                    OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetIntArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<int>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetIntArrayField");

	UJsonObject_GetIntArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetFloatField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// float                          OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetFloatField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetFloatField");

	UJsonObject_GetFloatField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetFloatArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<float>                  OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetFloatArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<float>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetFloatArrayField");

	UJsonObject_GetFloatArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetDoubleField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// double                         OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetDoubleField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, double* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetDoubleField");

	UJsonObject_GetDoubleField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetDoubleArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<double>                 OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetDoubleArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<double>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetDoubleArrayField");

	UJsonObject_GetDoubleArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetByteField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// unsigned char                  OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetByteField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, unsigned char* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetByteField");

	UJsonObject_GetByteField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetByteArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<unsigned char>          OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetByteArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<unsigned char>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetByteArrayField");

	UJsonObject_GetByteArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetBoolField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// bool                           OutValue                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetBoolField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, bool* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetBoolField");

	UJsonObject_GetBoolField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.GetBoolArrayField
// ()
// Parameters:
// class FString                  Key                            (Parm, ZeroConstructor)
// TArray<bool>                   OutValue                       (Parm, OutParm, ZeroConstructor)
// bool                           bForceSingleKey                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Delimiter                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::GetBoolArrayField(const class FString& Key, bool bForceSingleKey, const class FString& Delimiter, TArray<bool>* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.GetBoolArrayField");

	UJsonObject_GetBoolArrayField_Params params;
	params.Key = Key;
	params.bForceSingleKey = bForceSingleKey;
	params.Delimiter = Delimiter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.CreateJsonObject
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UJsonObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UJsonObject* UJsonObject::CreateJsonObject(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.CreateJsonObject");

	UJsonObject_CreateJsonObject_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.JsonObject.CompareJsonValues
// ()
// Parameters:
// class UJsonObject*             A                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UJsonObject*             B                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UJsonObject::CompareJsonValues(class UJsonObject* A, class UJsonObject* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.JsonObject.CompareJsonValues");

	UJsonObject_CompareJsonValues_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.NPCZoneManager.StaticSpawnNPCs
// ()
// Parameters:
// class UObject*                 WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class ANPCZoneManager*         AtZoneManager                  (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  TheNPCSpawnEntries             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtSpawnPoint                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AtRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            UseSpawnVolumeIndex            (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalDinoCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APrimalDinoCharacter*> ANPCZoneManager::StaticSpawnNPCs(class UObject* WorldContext, class ANPCZoneManager* AtZoneManager, class UClass* TheNPCSpawnEntries, const struct FVector& AtSpawnPoint, const struct FRotator& AtRotation, int UseSpawnVolumeIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.NPCZoneManager.StaticSpawnNPCs");

	ANPCZoneManager_StaticSpawnNPCs_Params params;
	params.WorldContext = WorldContext;
	params.AtZoneManager = AtZoneManager;
	params.TheNPCSpawnEntries = TheNPCSpawnEntries;
	params.AtSpawnPoint = AtSpawnPoint;
	params.AtRotation = AtRotation;
	params.UseSpawnVolumeIndex = UseSpawnVolumeIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.NPCZoneManager.CheckIncreaseNPC
// ()

void ANPCZoneManager::CheckIncreaseNPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.NPCZoneManager.CheckIncreaseNPC");

	ANPCZoneManager_CheckIncreaseNPC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.NPCZoneVolume.OnEndOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ANPCZoneVolume::OnEndOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.NPCZoneVolume.OnEndOverlap");

	ANPCZoneVolume_OnEndOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.NPCZoneVolume.OnBeginOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ANPCZoneVolume::OnBeginOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.NPCZoneVolume.OnBeginOverlap");

	ANPCZoneVolume_OnBeginOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ObjectMap.Init
// ()
// Parameters:
// int                            InSizeX                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            InSizeY                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            InCellSize                     (Parm, ZeroConstructor, IsPlainOldData)

void UObjectMap::Init(int InSizeX, int InSizeY, int InCellSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ObjectMap.Init");

	UObjectMap_Init_Params params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InCellSize = InCellSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ObjectMap.GetSizeY
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UObjectMap::GetSizeY()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ObjectMap.GetSizeY");

	UObjectMap_GetSizeY_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ObjectMap.GetSizeX
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UObjectMap::GetSizeX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ObjectMap.GetSizeX");

	UObjectMap_GetSizeX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ObjectMap.GetSize
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UObjectMap::GetSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ObjectMap.GetSize");

	UObjectMap_GetSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PaintingStreamingComponent.ServerSendNextChunk
// ()
// Parameters:
// class UStructurePaintingComponent* PaintingComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPaintingStreamingComponent::ServerSendNextChunk(class UStructurePaintingComponent* PaintingComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PaintingStreamingComponent.ServerSendNextChunk");

	UPaintingStreamingComponent_ServerSendNextChunk_Params params;
	params.PaintingComponent = PaintingComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PaintingStreamingComponent.ServerRequestPaintingStream
// ()
// Parameters:
// class UStructurePaintingComponent* PaintingComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPaintingStreamingComponent::ServerRequestPaintingStream(class UStructurePaintingComponent* PaintingComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PaintingStreamingComponent.ServerRequestPaintingStream");

	UPaintingStreamingComponent_ServerRequestPaintingStream_Params params;
	params.PaintingComponent = PaintingComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PaintingStreamingComponent.ServerCancelPaintingStream
// ()
// Parameters:
// class UStructurePaintingComponent* PaintingComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPaintingStreamingComponent::ServerCancelPaintingStream(class UStructurePaintingComponent* PaintingComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PaintingStreamingComponent.ServerCancelPaintingStream");

	UPaintingStreamingComponent_ServerCancelPaintingStream_Params params;
	params.PaintingComponent = PaintingComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PaintingStreamingComponent.ClientRecieveChunk
// ()
// Parameters:
// class UStructurePaintingComponent* PaintingComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<unsigned char>          Bytes                          (ConstParm, Parm, ZeroConstructor)

void UPaintingStreamingComponent::ClientRecieveChunk(class UStructurePaintingComponent* PaintingComponent, TArray<unsigned char> Bytes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PaintingStreamingComponent.ClientRecieveChunk");

	UPaintingStreamingComponent_ClientRecieveChunk_Params params;
	params.PaintingComponent = PaintingComponent;
	params.Bytes = Bytes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PaintingStreamingComponent.ClientEndStreamingJob
// ()
// Parameters:
// class UStructurePaintingComponent* PaintingComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPaintingStreamingComponent::ClientEndStreamingJob(class UStructurePaintingComponent* PaintingComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PaintingStreamingComponent.ClientEndStreamingJob");

	UPaintingStreamingComponent_ClientEndStreamingJob_Params params;
	params.PaintingComponent = PaintingComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PaintingStreamingComponent.ClientCancelSteamingJob
// ()
// Parameters:
// class UStructurePaintingComponent* PaintingComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPaintingStreamingComponent::ClientCancelSteamingJob(class UStructurePaintingComponent* PaintingComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PaintingStreamingComponent.ClientCancelSteamingJob");

	UPaintingStreamingComponent_ClientCancelSteamingJob_Params params;
	params.PaintingComponent = PaintingComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PaintingStreamingComponent.ClientBeginStreamingJob
// ()
// Parameters:
// class UStructurePaintingComponent* PaintingComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            Revision                       (Parm, ZeroConstructor, IsPlainOldData)

void UPaintingStreamingComponent::ClientBeginStreamingJob(class UStructurePaintingComponent* PaintingComponent, int Revision)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PaintingStreamingComponent.ClientBeginStreamingJob");

	UPaintingStreamingComponent_ClientBeginStreamingJob_Params params;
	params.PaintingComponent = PaintingComponent;
	params.Revision = Revision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.TickAnimationStateEvent
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetRole>          Role                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::TickAnimationStateEvent(float DeltaTime, const struct FName& CustomEventName, TEnumAsByte<ENetRole> Role)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.TickAnimationStateEvent");

	UPrimalAIState_TickAnimationStateEvent_Params params;
	params.DeltaTime = DeltaTime;
	params.CustomEventName = CustomEventName;
	params.Role = Role;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.TickAnimationState
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetRole>          Role                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::TickAnimationState(float DeltaTime, const struct FName& CustomEventName, TEnumAsByte<ENetRole> Role)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.TickAnimationState");

	UPrimalAIState_TickAnimationState_Params params;
	params.DeltaTime = DeltaTime;
	params.CustomEventName = CustomEventName;
	params.Role = Role;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.StartAnimationStateEvent
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetRole>          Role                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::StartAnimationStateEvent(const struct FName& CustomEventName, TEnumAsByte<ENetRole> Role)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.StartAnimationStateEvent");

	UPrimalAIState_StartAnimationStateEvent_Params params;
	params.CustomEventName = CustomEventName;
	params.Role = Role;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.StartAnimationState
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetRole>          Role                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::StartAnimationState(const struct FName& CustomEventName, TEnumAsByte<ENetRole> Role)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.StartAnimationState");

	UPrimalAIState_StartAnimationState_Params params;
	params.CustomEventName = CustomEventName;
	params.Role = Role;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.ShouldSkipRangeCheckEvent
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIState::ShouldSkipRangeCheckEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.ShouldSkipRangeCheckEvent");

	UPrimalAIState_ShouldSkipRangeCheckEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.ShouldSkipIntervalCheckEvent
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIState::ShouldSkipIntervalCheckEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.ShouldSkipIntervalCheckEvent");

	UPrimalAIState_ShouldSkipIntervalCheckEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.SetLastAttackTime
// ()

void UPrimalAIState::SetLastAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.SetLastAttackTime");

	UPrimalAIState_SetLastAttackTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.SetInAnimationStateActive
// ()
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::SetInAnimationStateActive(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.SetInAnimationStateActive");

	UPrimalAIState_SetInAnimationStateActive_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.OnTickEvent
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::OnTickEvent(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnTickEvent");

	UPrimalAIState_OnTickEvent_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.OnTick
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::OnTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnTick");

	UPrimalAIState_OnTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.OnEndEvent
// ()

void UPrimalAIState::OnEndEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnEndEvent");

	UPrimalAIState_OnEndEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.OnEnd
// ()

void UPrimalAIState::OnEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnEnd");

	UPrimalAIState_OnEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.OnChildStateEndedEvent
// ()
// Parameters:
// class UPrimalAIState*          PrimalAIState                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::OnChildStateEndedEvent(class UPrimalAIState* PrimalAIState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnChildStateEndedEvent");

	UPrimalAIState_OnChildStateEndedEvent_Params params;
	params.PrimalAIState = PrimalAIState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.OnCanUseStateEvent
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIState::OnCanUseStateEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnCanUseStateEvent");

	UPrimalAIState_OnCanUseStateEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.OnBeginEvent
// ()
// Parameters:
// class UPrimalAIState*          InParentState                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::OnBeginEvent(class UPrimalAIState* InParentState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnBeginEvent");

	UPrimalAIState_OnBeginEvent_Params params;
	params.InParentState = InParentState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.OnBegin
// ()
// Parameters:
// class UPrimalAIState*          InParentState                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::OnBegin(class UPrimalAIState* InParentState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.OnBegin");

	UPrimalAIState_OnBegin_Params params;
	params.InParentState = InParentState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.GetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalAIState::GetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.GetDebugInfoString");

	UPrimalAIState_GetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.EndAnimationStateEvent
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetRole>          Role                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::EndAnimationStateEvent(const struct FName& CustomEventName, TEnumAsByte<ENetRole> Role)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.EndAnimationStateEvent");

	UPrimalAIState_EndAnimationStateEvent_Params params;
	params.CustomEventName = CustomEventName;
	params.Role = Role;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.EndAnimationState
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetRole>          Role                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIState::EndAnimationState(const struct FName& CustomEventName, TEnumAsByte<ENetRole> Role)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.EndAnimationState");

	UPrimalAIState_EndAnimationState_Params params;
	params.CustomEventName = CustomEventName;
	params.Role = Role;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIState.CanUseState
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIState::CanUseState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.CanUseState");

	UPrimalAIState_CanUseState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.BPOverrideAttackWeight
// ()
// Parameters:
// float                          inputWeight                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          attackRangeOffset              (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalAIState::BPOverrideAttackWeight(float inputWeight, float Distance, float attackRangeOffset, class AActor* OtherTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.BPOverrideAttackWeight");

	UPrimalAIState_BPOverrideAttackWeight_Params params;
	params.inputWeight = inputWeight;
	params.Distance = Distance;
	params.attackRangeOffset = attackRangeOffset;
	params.OtherTarget = OtherTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.BPIsChildState
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIState::BPIsChildState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.BPIsChildState");

	UPrimalAIState_BPIsChildState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.BPGetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalAIState::BPGetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.BPGetDebugInfoString");

	UPrimalAIState_BPGetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIState.BPCanAttack
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          attackRangeOffset              (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIState::BPCanAttack(float Distance, float attackRangeOffset, class AActor* OtherTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIState.BPCanAttack");

	UPrimalAIState_BPCanAttack_Params params;
	params.Distance = Distance;
	params.attackRangeOffset = attackRangeOffset;
	params.OtherTarget = OtherTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateBPBase.SpawnAndFireProjectile
// ()
// Parameters:
// class UClass*                  ProjectileClass                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ProjectileSocket               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ProjectileInterval             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideProjectileSpawn       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OverrideSpawnLoc               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                OverrideSpawnRot               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIStateBPBase::SpawnAndFireProjectile(class UClass* ProjectileClass, const struct FName& ProjectileSocket, float ProjectileInterval, bool bOverrideProjectileSpawn, const struct FVector& OverrideSpawnLoc, const struct FRotator& OverrideSpawnRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.SpawnAndFireProjectile");

	UPrimalAIStateBPBase_SpawnAndFireProjectile_Params params;
	params.ProjectileClass = ProjectileClass;
	params.ProjectileSocket = ProjectileSocket;
	params.ProjectileInterval = ProjectileInterval;
	params.bOverrideProjectileSpawn = bOverrideProjectileSpawn;
	params.OverrideSpawnLoc = OverrideSpawnLoc;
	params.OverrideSpawnRot = OverrideSpawnRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateBPBase.SetLastAttackTimeToNow
// ()
// Parameters:
// float                          Offset                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateBPBase::SetLastAttackTimeToNow(float Offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.SetLastAttackTimeToNow");

	UPrimalAIStateBPBase_SetLastAttackTimeToNow_Params params;
	params.Offset = Offset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.IsTimeSinceStateBegin
// ()
// Parameters:
// float                          CheckTimeSince                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTrueAtZeroTime           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIStateBPBase::IsTimeSinceStateBegin(float CheckTimeSince, bool bForceTrueAtZeroTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.IsTimeSinceStateBegin");

	UPrimalAIStateBPBase_IsTimeSinceStateBegin_Params params;
	params.CheckTimeSince = CheckTimeSince;
	params.bForceTrueAtZeroTime = bForceTrueAtZeroTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateBPBase.GetTimeSinceStateBegin
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalAIStateBPBase::GetTimeSinceStateBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.GetTimeSinceStateBegin");

	UPrimalAIStateBPBase_GetTimeSinceStateBegin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateBPBase.GetStateBeginTime
// ()
// Parameters:
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UPrimalAIStateBPBase::GetStateBeginTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.GetStateBeginTime");

	UPrimalAIStateBPBase_GetStateBeginTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateBPBase.GetLastAttackTimeAndInterval
// ()
// Parameters:
// double                         LastAttackTime                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          AttackInterval                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateBPBase::GetLastAttackTimeAndInterval(double* LastAttackTime, float* AttackInterval)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.GetLastAttackTimeAndInterval");

	UPrimalAIStateBPBase_GetLastAttackTimeAndInterval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LastAttackTime != nullptr)
		*LastAttackTime = params.LastAttackTime;
	if (AttackInterval != nullptr)
		*AttackInterval = params.AttackInterval;
}


// Function ShooterGame.PrimalAIStateBPBase.FinishState
// ()

void UPrimalAIStateBPBase::FinishState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.FinishState");

	UPrimalAIStateBPBase_FinishState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.DealMeleeDamageDirect
// ()
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DamageSourceWorldLocation      (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseBlueprintAdjustOutputDamage (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInstantlyHarvestCorpse        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateBPBase::DealMeleeDamageDirect(class AActor* TargetActor, const struct FVector& DamageSourceWorldLocation, float DamageAmount, float DamageImpulse, class UClass* DamageTypeClass, bool bUseBlueprintAdjustOutputDamage, bool bInstantlyHarvestCorpse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.DealMeleeDamageDirect");

	UPrimalAIStateBPBase_DealMeleeDamageDirect_Params params;
	params.TargetActor = TargetActor;
	params.DamageSourceWorldLocation = DamageSourceWorldLocation;
	params.DamageAmount = DamageAmount;
	params.DamageImpulse = DamageImpulse;
	params.DamageTypeClass = DamageTypeClass;
	params.bUseBlueprintAdjustOutputDamage = bUseBlueprintAdjustOutputDamage;
	params.bInstantlyHarvestCorpse = bInstantlyHarvestCorpse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.DealMeleeDamage
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              FromHitResult                  (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimalAIStateBPBase::DealMeleeDamage(class AActor* Actor, const struct FHitResult& FromHitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.DealMeleeDamage");

	UPrimalAIStateBPBase_DealMeleeDamage_Params params;
	params.Actor = Actor;
	params.FromHitResult = FromHitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.BPShouldEndAttack
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalAIStateBPBase::BPShouldEndAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.BPShouldEndAttack");

	UPrimalAIStateBPBase_BPShouldEndAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateBPBase.BPOnClearAttackState
// ()

void UPrimalAIStateBPBase::BPOnClearAttackState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.BPOnClearAttackState");

	UPrimalAIStateBPBase_BPOnClearAttackState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.BPOnAttackTick
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateBPBase::BPOnAttackTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.BPOnAttackTick");

	UPrimalAIStateBPBase_BPOnAttackTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.BPOnAttackStart
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateBPBase::BPOnAttackStart(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.BPOnAttackStart");

	UPrimalAIStateBPBase_BPOnAttackStart_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.BPOnAttackEnd
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateBPBase::BPOnAttackEnd(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.BPOnAttackEnd");

	UPrimalAIStateBPBase_BPOnAttackEnd_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateBPBase.BPOnAnimNotifyCustomEvent
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ENetRole>          Role                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateBPBase::BPOnAnimNotifyCustomEvent(const struct FName& CustomEventName, class UAnimSequenceBase* Animation, TEnumAsByte<ENetRole> Role)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateBPBase.BPOnAnimNotifyCustomEvent");

	UPrimalAIStateBPBase_BPOnAnimNotifyCustomEvent_Params params;
	params.CustomEventName = CustomEventName;
	params.Animation = Animation;
	params.Role = Role;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateDinoMeleeState.BPOnHitActor
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)

void UPrimalAIStateDinoMeleeState::BPOnHitActor(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoMeleeState.BPOnHitActor");

	UPrimalAIStateDinoMeleeState_BPOnHitActor_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateDinoRangedState.PreventAttackForTime
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalAIStateDinoRangedState::PreventAttackForTime(float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoRangedState.PreventAttackForTime");

	UPrimalAIStateDinoRangedState_PreventAttackForTime_Params params;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateDinoRangedState.OffsetVectorRandomlyReturnsAltered
// ()
// Parameters:
// struct FVector                 InVector                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          minPercent                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          maxPercent                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimalAIStateDinoRangedState::OffsetVectorRandomlyReturnsAltered(const struct FVector& InVector, float minPercent, float maxPercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoRangedState.OffsetVectorRandomlyReturnsAltered");

	UPrimalAIStateDinoRangedState_OffsetVectorRandomlyReturnsAltered_Params params;
	params.InVector = InVector;
	params.minPercent = minPercent;
	params.maxPercent = maxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateDinoRangedState.GetZGravityOffset
// ()
// Parameters:
// struct FVector                 ProjectileVelocity             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ProjectileStartLocation        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ProjectileFinalLocation        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalAIStateDinoRangedState::GetZGravityOffset(const struct FVector& ProjectileVelocity, const struct FVector& ProjectileStartLocation, const struct FVector& ProjectileFinalLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoRangedState.GetZGravityOffset");

	UPrimalAIStateDinoRangedState_GetZGravityOffset_Params params;
	params.ProjectileVelocity = ProjectileVelocity;
	params.ProjectileStartLocation = ProjectileStartLocation;
	params.ProjectileFinalLocation = ProjectileFinalLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateDinoRangedState.FindDirectionToLeadTarget
// ()
// Parameters:
// struct FVector                 VectorToHitTargetStandingStill (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          extraTimeAllowed               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 currentVelocityOfTarget        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimalAIStateDinoRangedState::FindDirectionToLeadTarget(const struct FVector& VectorToHitTargetStandingStill, float extraTimeAllowed, const struct FVector& currentVelocityOfTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoRangedState.FindDirectionToLeadTarget");

	UPrimalAIStateDinoRangedState_FindDirectionToLeadTarget_Params params;
	params.VectorToHitTargetStandingStill = VectorToHitTargetStandingStill;
	params.extraTimeAllowed = extraTimeAllowed;
	params.currentVelocityOfTarget = currentVelocityOfTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateDinoRangedState.ClampProjectileVectorInForwardDirection
// ()
// Parameters:
// struct FVector                 OriginalShootingDirection      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FName                   RangedSocket                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimalAIStateDinoRangedState::ClampProjectileVectorInForwardDirection(const struct FVector& OriginalShootingDirection, const struct FName& RangedSocket)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoRangedState.ClampProjectileVectorInForwardDirection");

	UPrimalAIStateDinoRangedState_ClampProjectileVectorInForwardDirection_Params params;
	params.OriginalShootingDirection = OriginalShootingDirection;
	params.RangedSocket = RangedSocket;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalAIStateDinoRangedState.BPRangedAttackOnBegin
// ()
// Parameters:
// struct FVector                 TargetLocation                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 TargetVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPrimalAIStateDinoRangedState::BPRangedAttackOnBegin(const struct FVector& TargetLocation, const struct FVector& TargetVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoRangedState.BPRangedAttackOnBegin");

	UPrimalAIStateDinoRangedState_BPRangedAttackOnBegin_Params params;
	params.TargetLocation = TargetLocation;
	params.TargetVelocity = TargetVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalAIStateDinoRangedState.BPRangedAttack
// ()
// Parameters:
// struct FVector                 TargetLocation                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 TargetVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPrimalAIStateDinoRangedState::BPRangedAttack(const struct FVector& TargetLocation, const struct FVector& TargetVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalAIStateDinoRangedState.BPRangedAttack");

	UPrimalAIStateDinoRangedState_BPRangedAttack_Params params;
	params.TargetLocation = TargetLocation;
	params.TargetVelocity = TargetVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCableComponent.SpreadOutParticles
// ()
// Parameters:
// struct FVector                 StartPosition                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 EndPosition                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UPrimalCableComponent::SpreadOutParticles(const struct FVector& StartPosition, const struct FVector& EndPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCableComponent.SpreadOutParticles");

	UPrimalCableComponent_SpreadOutParticles_Params params;
	params.StartPosition = StartPosition;
	params.EndPosition = EndPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCableComponent.SetAttachEndOverrideComponent
// ()
// Parameters:
// class USceneComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UPrimalCableComponent::SetAttachEndOverrideComponent(class USceneComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCableComponent.SetAttachEndOverrideComponent");

	UPrimalCableComponent_SetAttachEndOverrideComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCableComponent.MarkRenderDynamicDataDirtyBP
// ()

void UPrimalCableComponent::MarkRenderDynamicDataDirtyBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCableComponent.MarkRenderDynamicDataDirtyBP");

	UPrimalCableComponent_MarkRenderDynamicDataDirtyBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCableComponent.GetEndPositions
// ()
// Parameters:
// struct FVector                 OutStartPosition               (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutEndPosition                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPrimalCableComponent::GetEndPositions(struct FVector* OutStartPosition, struct FVector* OutEndPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCableComponent.GetEndPositions");

	UPrimalCableComponent_GetEndPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutStartPosition != nullptr)
		*OutStartPosition = params.OutStartPosition;
	if (OutEndPosition != nullptr)
		*OutEndPosition = params.OutEndPosition;
}


// Function ShooterGame.PrimalCableComponent.GetCableParticle
// ()
// Parameters:
// int                            idx                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FCableParticle          ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCableParticle UPrimalCableComponent::GetCableParticle(int idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCableComponent.GetCableParticle");

	UPrimalCableComponent_GetCableParticle_Params params;
	params.idx = idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCableComponent.GetCableMidPoint
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UPrimalCableComponent::GetCableMidPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCableComponent.GetCableMidPoint");

	UPrimalCableComponent_GetCableMidPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCableComponent.GetAttachEndOverrideComponent
// ()
// Parameters:
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* UPrimalCableComponent::GetAttachEndOverrideComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCableComponent.GetAttachEndOverrideComponent");

	UPrimalCableComponent_GetAttachEndOverrideComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.TargetableInterface.ToUObject
// ()
// Parameters:
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UTargetableInterface::ToUObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TargetableInterface.ToUObject");

	UTargetableInterface_ToUObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.ZoomOut
// ()

void APrimalCharacter::ZoomOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ZoomOut");

	APrimalCharacter_ZoomOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ZoomIn
// ()

void APrimalCharacter::ZoomIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ZoomIn");

	APrimalCharacter_ZoomIn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.UseFastTurretTargeting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::UseFastTurretTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.UseFastTurretTargeting");

	APrimalCharacter_UseFastTurretTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.UpdateTickSetting
// ()

void APrimalCharacter::UpdateTickSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.UpdateTickSetting");

	APrimalCharacter_UpdateTickSetting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.TurnAtRate
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::TurnAtRate(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.TurnAtRate");

	APrimalCharacter_TurnAtRate_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.TryPoop
// ()

void APrimalCharacter::TryPoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.TryPoop");

	APrimalCharacter_TryPoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.TryGiveDefaultWeapon
// ()

void APrimalCharacter::TryGiveDefaultWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.TryGiveDefaultWeapon");

	APrimalCharacter_TryGiveDefaultWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.TickMovementComponent
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::TickMovementComponent(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.TickMovementComponent");

	APrimalCharacter_TickMovementComponent_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.TempDampenInputAcceleration
// ()

void APrimalCharacter::TempDampenInputAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.TempDampenInputAcceleration");

	APrimalCharacter_TempDampenInputAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.TakeDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::TakeDamage(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.TakeDamage");

	APrimalCharacter_TakeDamage_Params params;
	params.Damage = Damage;
	params.DamageEvent = DamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.StopAnimEx
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToOwner              (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::StopAnimEx(class UAnimMontage* AnimMontage, bool bReplicate, bool bReplicateToOwner, float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.StopAnimEx");

	APrimalCharacter_StopAnimEx_Params params;
	params.AnimMontage = AnimMontage;
	params.bReplicate = bReplicate;
	params.bReplicateToOwner = bReplicateToOwner;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.StaticRemoveCharacterSnapshot
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  From                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::StaticRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.StaticRemoveCharacterSnapshot");

	APrimalCharacter_StaticRemoveCharacterSnapshot_Params params;
	params.Item = Item;
	params.From = From;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.StaticGetSnapshotPoseCount
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalCharacter::StaticGetSnapshotPoseCount(class UPrimalItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.StaticGetSnapshotPoseCount");

	APrimalCharacter_StaticGetSnapshotPoseCount_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.StaticGetSnapshotPose
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            PoseIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FPrimalSnapshotPose     ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPrimalSnapshotPose APrimalCharacter::StaticGetSnapshotPose(class UPrimalItem* Item, int PoseIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.StaticGetSnapshotPose");

	APrimalCharacter_StaticGetSnapshotPose_Params params;
	params.Item = Item;
	params.PoseIndex = PoseIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.StaticApplyCharacterSnapshotEquipment
// ()
// Parameters:
// class UPrimalInventoryComponent* Inventory                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  To                             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::StaticApplyCharacterSnapshotEquipment(class UPrimalInventoryComponent* Inventory, class AActor* To)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.StaticApplyCharacterSnapshotEquipment");

	APrimalCharacter_StaticApplyCharacterSnapshotEquipment_Params params;
	params.Inventory = Inventory;
	params.To = To;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.StaticApplyCharacterSnapshot
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  To                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Offset                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::StaticApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.StaticApplyCharacterSnapshot");

	APrimalCharacter_StaticApplyCharacterSnapshot_Params params;
	params.Item = Item;
	params.To = To;
	params.Offset = Offset;
	params.MaxExtent = MaxExtent;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.StartForceSkelUpdate
// ()
// Parameters:
// float                          ForTime                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUpdateMesh               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bServerOnly                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::StartForceSkelUpdate(float ForTime, bool bForceUpdateMesh, bool bServerOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.StartForceSkelUpdate");

	APrimalCharacter_StartForceSkelUpdate_Params params;
	params.ForTime = ForTime;
	params.bForceUpdateMesh = bForceUpdateMesh;
	params.bServerOnly = bServerOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.SleepBodies
// ()

void APrimalCharacter::SleepBodies()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.SleepBodies");

	APrimalCharacter_SleepBodies_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ShouldDealDamageTo
// ()
// Parameters:
// class APrimalCharacter*        OtherCharacter                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowDamageToSelf             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowDamageToTribe            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowDamageToAlliedTribes     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::ShouldDealDamageTo(class APrimalCharacter* OtherCharacter, bool bAllowDamageToSelf, bool bAllowDamageToTribe, bool bAllowDamageToAlliedTribes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ShouldDealDamageTo");

	APrimalCharacter_ShouldDealDamageTo_Params params;
	params.OtherCharacter = OtherCharacter;
	params.bAllowDamageToSelf = bAllowDamageToSelf;
	params.bAllowDamageToTribe = bAllowDamageToTribe;
	params.bAllowDamageToAlliedTribes = bAllowDamageToAlliedTribes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.SetSleeping
// ()
// Parameters:
// bool                           bSleeping                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseRagdollLocationOffset      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::SetSleeping(bool bSleeping, bool bUseRagdollLocationOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.SetSleeping");

	APrimalCharacter_SetSleeping_Params params;
	params.bSleeping = bSleeping;
	params.bUseRagdollLocationOffset = bUseRagdollLocationOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.SetMyInventoryComponent
// ()
// Parameters:
// class UPrimalInventoryComponent* theInventoryComponent          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APrimalCharacter::SetMyInventoryComponent(class UPrimalInventoryComponent* theInventoryComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.SetMyInventoryComponent");

	APrimalCharacter_SetMyInventoryComponent_Params params;
	params.theInventoryComponent = theInventoryComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.SetLastCausedDamageTime
// ()
// Parameters:
// double                         lastCausedDamageTimeValue      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::SetLastCausedDamageTime(double lastCausedDamageTimeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.SetLastCausedDamageTime");

	APrimalCharacter_SetLastCausedDamageTime_Params params;
	params.lastCausedDamageTimeValue = lastCausedDamageTimeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.SetEnableIK
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::SetEnableIK(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.SetEnableIK");

	APrimalCharacter_SetEnableIK_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.SetBoundsScale
// ()
// Parameters:
// float                          NewScale                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::SetBoundsScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.SetBoundsScale");

	APrimalCharacter_SetBoundsScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerTryPoop
// ()

void APrimalCharacter::ServerTryPoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerTryPoop");

	APrimalCharacter_ServerTryPoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerSetRunning
// ()
// Parameters:
// bool                           bNewRunning                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerSetRunning(bool bNewRunning)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerSetRunning");

	APrimalCharacter_ServerSetRunning_Params params;
	params.bNewRunning = bNewRunning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerRequestDrag
// ()

void APrimalCharacter::ServerRequestDrag()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerRequestDrag");

	APrimalCharacter_ServerRequestDrag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerGiveDefaultWeapon
// ()

void APrimalCharacter::ServerGiveDefaultWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerGiveDefaultWeapon");

	APrimalCharacter_ServerGiveDefaultWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerDinoOrder
// ()
// Parameters:
// class APrimalDinoCharacter*    aDino                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EDinoTamedOrder>   OrderType                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerDinoOrder(class APrimalDinoCharacter* aDino, TEnumAsByte<EDinoTamedOrder> OrderType, class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerDinoOrder");

	APrimalCharacter_ServerDinoOrder_Params params;
	params.aDino = aDino;
	params.OrderType = OrderType;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCaptureDermis
// ()
// Parameters:
// class APrimalCharacter*        Target                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerCaptureDermis(class APrimalCharacter* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCaptureDermis");

	APrimalCharacter_ServerCaptureDermis_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallStayOne
// ()
// Parameters:
// class APrimalDinoCharacter*    ForDinoChar                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerCallStayOne(class APrimalDinoCharacter* ForDinoChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallStayOne");

	APrimalCharacter_ServerCallStayOne_Params params;
	params.ForDinoChar = ForDinoChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallStay
// ()

void APrimalCharacter::ServerCallStay()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallStay");

	APrimalCharacter_ServerCallStay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallSetAggressive
// ()

void APrimalCharacter::ServerCallSetAggressive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallSetAggressive");

	APrimalCharacter_ServerCallSetAggressive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallPassive
// ()

void APrimalCharacter::ServerCallPassive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallPassive");

	APrimalCharacter_ServerCallPassive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallNeutral
// ()

void APrimalCharacter::ServerCallNeutral()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallNeutral");

	APrimalCharacter_ServerCallNeutral_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallMoveTo
// ()
// Parameters:
// struct FVector                 MoveToLoc                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerCallMoveTo(const struct FVector& MoveToLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallMoveTo");

	APrimalCharacter_ServerCallMoveTo_Params params;
	params.MoveToLoc = MoveToLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallLandFlyerOne
// ()
// Parameters:
// class APrimalDinoCharacter*    ForDinoChar                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerCallLandFlyerOne(class APrimalDinoCharacter* ForDinoChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallLandFlyerOne");

	APrimalCharacter_ServerCallLandFlyerOne_Params params;
	params.ForDinoChar = ForDinoChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallFollowOne
// ()
// Parameters:
// class APrimalDinoCharacter*    ForDinoChar                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerCallFollowOne(class APrimalDinoCharacter* ForDinoChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallFollowOne");

	APrimalCharacter_ServerCallFollowOne_Params params;
	params.ForDinoChar = ForDinoChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallFollowDistanceCycleOne
// ()
// Parameters:
// class APrimalDinoCharacter*    ForDinoChar                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerCallFollowDistanceCycleOne(class APrimalDinoCharacter* ForDinoChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallFollowDistanceCycleOne");

	APrimalCharacter_ServerCallFollowDistanceCycleOne_Params params;
	params.ForDinoChar = ForDinoChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallFollow
// ()

void APrimalCharacter::ServerCallFollow()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallFollow");

	APrimalCharacter_ServerCallFollow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallAttackTarget
// ()
// Parameters:
// class AActor*                  TheTarget                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ServerCallAttackTarget(class AActor* TheTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallAttackTarget");

	APrimalCharacter_ServerCallAttackTarget_Params params;
	params.TheTarget = TheTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ServerCallAggressive
// ()

void APrimalCharacter::ServerCallAggressive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ServerCallAggressive");

	APrimalCharacter_ServerCallAggressive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.RemoveAllJumpDeactivatedBuffs
// ()
// Parameters:
// class APrimalBuff*             IgnoredBuff                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::RemoveAllJumpDeactivatedBuffs(class APrimalBuff* IgnoredBuff)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.RemoveAllJumpDeactivatedBuffs");

	APrimalCharacter_RemoveAllJumpDeactivatedBuffs_Params params;
	params.IgnoredBuff = IgnoredBuff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PrimalCharacterNotifyUnstasis__DelegateSignature
// ()
// Parameters:
// class APrimalCharacter*        ForPrimalCharacter             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PrimalCharacterNotifyUnstasis__DelegateSignature(class APrimalCharacter* ForPrimalCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PrimalCharacterNotifyUnstasis__DelegateSignature");

	APrimalCharacter_PrimalCharacterNotifyUnstasis__DelegateSignature_Params params;
	params.ForPrimalCharacter = ForPrimalCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PrimalCharacterNotifyLevelUp__DelegateSignature
// ()
// Parameters:
// int                            ExtraCharacterLevel            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PrimalCharacterNotifyLevelUp__DelegateSignature(int ExtraCharacterLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PrimalCharacterNotifyLevelUp__DelegateSignature");

	APrimalCharacter_PrimalCharacterNotifyLevelUp__DelegateSignature_Params params;
	params.ExtraCharacterLevel = ExtraCharacterLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PrimalCharacterDied__DelegateSignature
// ()
// Parameters:
// class APrimalCharacter*        DiedCharacter                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PrimalCharacterDied__DelegateSignature(class APrimalCharacter* DiedCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PrimalCharacterDied__DelegateSignature");

	APrimalCharacter_PrimalCharacterDied__DelegateSignature_Params params;
	params.DiedCharacter = DiedCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PreventsTargeting
// ()
// Parameters:
// class AActor*                  ByActor                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::PreventsTargeting(class AActor* ByActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PreventsTargeting");

	APrimalCharacter_PreventsTargeting_Params params;
	params.ByActor = ByActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.PreventInputType
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterInputType> inputType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::PreventInputType(TEnumAsByte<EPrimalCharacterInputType> inputType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PreventInputType");

	APrimalCharacter_PreventInputType_Params params;
	params.inputType = inputType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.PreventInputDoesOffset
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::PreventInputDoesOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PreventInputDoesOffset");

	APrimalCharacter_PreventInputDoesOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.Poop
// ()
// Parameters:
// bool                           bForcePoop                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::Poop(bool bForcePoop)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.Poop");

	APrimalCharacter_Poop_Params params;
	params.bForcePoop = bForcePoop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.PlayHitEffectRadial
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRadialDamageEvent      DamageEvent                    (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayHitEffectRadial");

	APrimalCharacter_PlayHitEffectRadial_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PlayHitEffectPoint
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FPointDamageEvent       DamageEvent                    (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayHitEffectPoint");

	APrimalCharacter_PlayHitEffectPoint_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PlayHitEffectGeneric
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayHitEffectGeneric");

	APrimalCharacter_PlayHitEffectGeneric_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PlayerCommand
// ()
// Parameters:
// class FString                  TheCommand                     (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalCharacter::PlayerCommand(const class FString& TheCommand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayerCommand");

	APrimalCharacter_PlayerCommand_Params params;
	params.TheCommand = TheCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.PlayDyingRadial
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FRadialDamageEvent      DamageEvent                    (Parm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayDyingRadial");

	APrimalCharacter_PlayDyingRadial_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PlayDyingPoint
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FPointDamageEvent       DamageEvent                    (Parm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayDyingPoint");

	APrimalCharacter_PlayDyingPoint_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PlayDyingGeneric
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (Parm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayDyingGeneric");

	APrimalCharacter_PlayDyingGeneric_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.PlayAnimEx
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartSectionName               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToOwner              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseOnServer         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceKeepSynced               (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::PlayAnimEx(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, bool bForceKeepSynced, float BlendInTime, float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.PlayAnimEx");

	APrimalCharacter_PlayAnimEx_Params params;
	params.AnimMontage = AnimMontage;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;
	params.bReplicate = bReplicate;
	params.bReplicateToOwner = bReplicateToOwner;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.bForceTickPoseOnServer = bForceTickPoseOnServer;
	params.bForceKeepSynced = bForceKeepSynced;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.OrbitCamToggle
// ()

void APrimalCharacter::OrbitCamToggle()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OrbitCamToggle");

	APrimalCharacter_OrbitCamToggle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OrbitCamOn
// ()

void APrimalCharacter::OrbitCamOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OrbitCamOn");

	APrimalCharacter_OrbitCamOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OrbitCamOff
// ()

void APrimalCharacter::OrbitCamOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OrbitCamOff");

	APrimalCharacter_OrbitCamOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStopRunning
// ()

void APrimalCharacter::OnStopRunning()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStopRunning");

	APrimalCharacter_OnStopRunning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStopJump
// ()

void APrimalCharacter::OnStopJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStopJump");

	APrimalCharacter_OnStopJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStopFire
// ()
// Parameters:
// bool                           bFromGamepadRight              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::OnStopFire(bool bFromGamepadRight)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStopFire");

	APrimalCharacter_OnStopFire_Params params;
	params.bFromGamepadRight = bFromGamepadRight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStopAltFire
// ()

void APrimalCharacter::OnStopAltFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStopAltFire");

	APrimalCharacter_OnStopAltFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStartRunning
// ()

void APrimalCharacter::OnStartRunning()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStartRunning");

	APrimalCharacter_OnStartRunning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStartJump
// ()

void APrimalCharacter::OnStartJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStartJump");

	APrimalCharacter_OnStartJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStartFire
// ()
// Parameters:
// bool                           bFromGamepadRight              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::OnStartFire(bool bFromGamepadRight)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStartFire");

	APrimalCharacter_OnStartFire_Params params;
	params.bFromGamepadRight = bFromGamepadRight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnStartAltFire
// ()

void APrimalCharacter::OnStartAltFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnStartAltFire");

	APrimalCharacter_OnStartAltFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnRep_RagdollPositions
// ()

void APrimalCharacter::OnRep_RagdollPositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnRep_RagdollPositions");

	APrimalCharacter_OnRep_RagdollPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnRep_PaintingComponent
// ()

void APrimalCharacter::OnRep_PaintingComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnRep_PaintingComponent");

	APrimalCharacter_OnRep_PaintingComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnRep_MountedDino
// ()

void APrimalCharacter::OnRep_MountedDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnRep_MountedDino");

	APrimalCharacter_OnRep_MountedDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnRep_IsSleeping
// ()

void APrimalCharacter::OnRep_IsSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnRep_IsSleeping");

	APrimalCharacter_OnRep_IsSleeping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnRep_IsDead
// ()

void APrimalCharacter::OnRep_IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnRep_IsDead");

	APrimalCharacter_OnRep_IsDead_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnEndDrag
// ()

void APrimalCharacter::OnEndDrag()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnEndDrag");

	APrimalCharacter_OnEndDrag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnDetachedFromCharacter
// ()
// Parameters:
// class APrimalCharacter*        ACharacter                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            OverrideDirection              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::OnDetachedFromCharacter(class APrimalCharacter* ACharacter, int OverrideDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnDetachedFromCharacter");

	APrimalCharacter_OnDetachedFromCharacter_Params params;
	params.ACharacter = ACharacter;
	params.OverrideDirection = OverrideDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnBeginDrag
// ()
// Parameters:
// class APrimalCharacter*        Dragged                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            BoneIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWithGrapHook                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::OnBeginDrag(class APrimalCharacter* Dragged, int BoneIndex, bool bWithGrapHook)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnBeginDrag");

	APrimalCharacter_OnBeginDrag_Params params;
	params.Dragged = Dragged;
	params.BoneIndex = BoneIndex;
	params.bWithGrapHook = bWithGrapHook;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.OnAttachedToCharacter
// ()

void APrimalCharacter::OnAttachedToCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.OnAttachedToCharacter");

	APrimalCharacter_OnAttachedToCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetUpdateTribeName
// ()
// Parameters:
// class FString                  NewTribeName                   (Parm, ZeroConstructor)

void APrimalCharacter::NetUpdateTribeName(const class FString& NewTribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetUpdateTribeName");

	APrimalCharacter_NetUpdateTribeName_Params params;
	params.NewTribeName = NewTribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetStopAllAnimMontage
// ()

void APrimalCharacter::NetStopAllAnimMontage()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetStopAllAnimMontage");

	APrimalCharacter_NetStopAllAnimMontage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetSetCharacterMovementVelocity
// ()
// Parameters:
// bool                           bSetNewVelocity                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetNewMovementMode            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     newMovementMode                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::NetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, TEnumAsByte<EMovementMode> newMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetSetCharacterMovementVelocity");

	APrimalCharacter_NetSetCharacterMovementVelocity_Params params;
	params.bSetNewVelocity = bSetNewVelocity;
	params.NewVelocity = NewVelocity;
	params.bSetNewMovementMode = bSetNewMovementMode;
	params.newMovementMode = newMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetPlaySoundOnCharacter
// ()
// Parameters:
// class USoundBase*              SoundToPlay                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPlayOnOwner                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::NetPlaySoundOnCharacter(class USoundBase* SoundToPlay, bool bPlayOnOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetPlaySoundOnCharacter");

	APrimalCharacter_NetPlaySoundOnCharacter_Params params;
	params.SoundToPlay = SoundToPlay;
	params.bPlayOnOwner = bPlayOnOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetOnJumped
// ()

void APrimalCharacter::NetOnJumped()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetOnJumped");

	APrimalCharacter_NetOnJumped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetForceUpdateAimedCharacters
// ()
// Parameters:
// struct FVector                 StartLoc                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 EndLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  IgnoreActor                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUpdateIgnoreActor        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TraceRadius                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::NetForceUpdateAimedCharacters(const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetForceUpdateAimedCharacters");

	APrimalCharacter_NetForceUpdateAimedCharacters_Params params;
	params.StartLoc = StartLoc;
	params.EndLoc = EndLoc;
	params.IgnoreActor = IgnoreActor;
	params.bForceUpdateIgnoreActor = bForceUpdateIgnoreActor;
	params.TraceRadius = TraceRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetDidLand
// ()

void APrimalCharacter::NetDidLand()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetDidLand");

	APrimalCharacter_NetDidLand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.NetAddCharacterMovementImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ImpulseExponent                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetNewMovementMode            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     newMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideMaxImpulseZ           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::NetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, TEnumAsByte<EMovementMode> newMovementMode, bool bOverrideMaxImpulseZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.NetAddCharacterMovementImpulse");

	APrimalCharacter_NetAddCharacterMovementImpulse_Params params;
	params.Impulse = Impulse;
	params.bVelChange = bVelChange;
	params.ImpulseExponent = ImpulseExponent;
	params.bSetNewMovementMode = bSetNewMovementMode;
	params.newMovementMode = newMovementMode;
	params.bOverrideMaxImpulseZ = bOverrideMaxImpulseZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.MoveUp
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::MoveUp(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.MoveUp");

	APrimalCharacter_MoveUp_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.MoveRight
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::MoveRight(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.MoveRight");

	APrimalCharacter_MoveRight_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.MoveForward
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::MoveForward(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.MoveForward");

	APrimalCharacter_MoveForward_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ModifyStasisComponentRadius
// ()
// Parameters:
// float                          Delta                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ModifyStasisComponentRadius(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ModifyStasisComponentRadius");

	APrimalCharacter_ModifyStasisComponentRadius_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.LookUpAtRate
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::LookUpAtRate(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.LookUpAtRate");

	APrimalCharacter_LookUpAtRate_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.LocalUnpossessed
// ()

void APrimalCharacter::LocalUnpossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.LocalUnpossessed");

	APrimalCharacter_LocalUnpossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.LevelUpPlayerAddedStat
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> StatToLevel                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumLevels                      (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ForPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalCharacter::LevelUpPlayerAddedStat(TEnumAsByte<EPrimalCharacterStatusValue> StatToLevel, int NumLevels, class AShooterPlayerController* ForPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.LevelUpPlayerAddedStat");

	APrimalCharacter_LevelUpPlayerAddedStat_Params params;
	params.StatToLevel = StatToLevel;
	params.NumLevels = NumLevels;
	params.ForPlayer = ForPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsWatered
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsWatered()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsWatered");

	APrimalCharacter_IsWatered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsValidForCombatMusic
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsValidForCombatMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsValidForCombatMusic");

	APrimalCharacter_IsValidForCombatMusic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsSubmerged
// ()
// Parameters:
// bool                           bDontCheckSwimming             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseFullThreshold              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceCheck                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromVolumeChange              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsSubmerged(bool bDontCheckSwimming, bool bUseFullThreshold, bool bForceCheck, bool bFromVolumeChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsSubmerged");

	APrimalCharacter_IsSubmerged_Params params;
	params.bDontCheckSwimming = bDontCheckSwimming;
	params.bUseFullThreshold = bUseFullThreshold;
	params.bForceCheck = bForceCheck;
	params.bFromVolumeChange = bFromVolumeChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsSitting
// ()
// Parameters:
// bool                           bIgnoreLockedToSeat            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsSitting(bool bIgnoreLockedToSeat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsSitting");

	APrimalCharacter_IsSitting_Params params;
	params.bIgnoreLockedToSeat = bIgnoreLockedToSeat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsRunning
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsRunning()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsRunning");

	APrimalCharacter_IsRunning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsProneOrSitting
// ()
// Parameters:
// bool                           bIgnoreLockedToSeat            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsProneOrSitting(bool bIgnoreLockedToSeat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsProneOrSitting");

	APrimalCharacter_IsProneOrSitting_Params params;
	params.bIgnoreLockedToSeat = bIgnoreLockedToSeat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsPrimalCharFriendly
// ()
// Parameters:
// class APrimalCharacter*        primalChar                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsPrimalCharFriendly(class APrimalCharacter* primalChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsPrimalCharFriendly");

	APrimalCharacter_IsPrimalCharFriendly_Params params;
	params.primalChar = primalChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsOwningClient
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsOwningClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsOwningClient");

	APrimalCharacter_IsOwningClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsMoving
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsMoving()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsMoving");

	APrimalCharacter_IsMoving_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsMontagePlaying
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeFromEndToConsiderFinished  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsMontagePlaying(class UAnimMontage* AnimMontage, float TimeFromEndToConsiderFinished)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsMontagePlaying");

	APrimalCharacter_IsMontagePlaying_Params params;
	params.AnimMontage = AnimMontage;
	params.TimeFromEndToConsiderFinished = TimeFromEndToConsiderFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsMeshGameplayRelevant
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsMeshGameplayRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsMeshGameplayRelevant");

	APrimalCharacter_IsMeshGameplayRelevant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsInvincible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsInvincible()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsInvincible");

	APrimalCharacter_IsInvincible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsInVacuumSealedSpace
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsInVacuumSealedSpace()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsInVacuumSealedSpace");

	APrimalCharacter_IsInVacuumSealedSpace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsInStatusState
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusState> StatusStateType                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsInStatusState(TEnumAsByte<EPrimalCharacterStatusState> StatusStateType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsInStatusState");

	APrimalCharacter_IsInStatusState_Params params;
	params.StatusStateType = StatusStateType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsHostileTo
// ()
// Parameters:
// class APrimalCharacter*        OtherCharacter                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsHostileTo(class APrimalCharacter* OtherCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsHostileTo");

	APrimalCharacter_IsHostileTo_Params params;
	params.OtherCharacter = OtherCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsFirstPerson
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsFirstPerson");

	APrimalCharacter_IsFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsDamageOccludedByStructures
// ()
// Parameters:
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsDamageOccludedByStructures(class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsDamageOccludedByStructures");

	APrimalCharacter_IsDamageOccludedByStructures_Params params;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsCharacterHardAttached
// ()
// Parameters:
// bool                           bIgnoreRiding                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreCarried                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsCharacterHardAttached");

	APrimalCharacter_IsCharacterHardAttached_Params params;
	params.bIgnoreRiding = bIgnoreRiding;
	params.bIgnoreCarried = bIgnoreCarried;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsBossDino
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsBossDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsBossDino");

	APrimalCharacter_IsBossDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsBlockedByShield
// ()
// Parameters:
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ShotDirection                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bBlockAllPointDamage           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsBlockedByShield(const struct FHitResult& HitInfo, const struct FVector& ShotDirection, bool bBlockAllPointDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsBlockedByShield");

	APrimalCharacter_IsBlockedByShield_Params params;
	params.HitInfo = HitInfo;
	params.ShotDirection = ShotDirection;
	params.bBlockAllPointDamage = bBlockAllPointDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsAttachedToSomething
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsAttachedToSomething()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsAttachedToSomething");

	APrimalCharacter_IsAttachedToSomething_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsAlliedWithOtherTeam
// ()
// Parameters:
// int                            OtherTeamID                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsAlliedWithOtherTeam(int OtherTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsAlliedWithOtherTeam");

	APrimalCharacter_IsAlliedWithOtherTeam_Params params;
	params.OtherTeamID = OtherTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.IsAlive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::IsAlive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.IsAlive");

	APrimalCharacter_IsAlive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.Immobilize
// ()
// Parameters:
// bool                           bImmobilize                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  UsingActor                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bImmobilizeFalling             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreventDismount               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::Immobilize(bool bImmobilize, class AActor* UsingActor, bool bImmobilizeFalling, bool bPreventDismount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.Immobilize");

	APrimalCharacter_Immobilize_Params params;
	params.bImmobilize = bImmobilize;
	params.UsingActor = UsingActor;
	params.bImmobilizeFalling = bImmobilizeFalling;
	params.bPreventDismount = bPreventDismount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.HurtMe
// ()
// Parameters:
// int                            HowMuch                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::HurtMe(int HowMuch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.HurtMe");

	APrimalCharacter_HurtMe_Params params;
	params.HowMuch = HowMuch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.HasCryoSickness
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::HasCryoSickness()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.HasCryoSickness");

	APrimalCharacter_HasCryoSickness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.HasBuff
// ()
// Parameters:
// class UClass*                  BuffClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           useExactMatch                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::HasBuff(class UClass* BuffClass, bool useExactMatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.HasBuff");

	APrimalCharacter_HasBuff_Params params;
	params.BuffClass = BuffClass;
	params.useExactMatch = useExactMatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GiveKillExperience
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::GiveKillExperience()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GiveKillExperience");

	APrimalCharacter_GiveKillExperience_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetSnapshotComponent
// ()
// Parameters:
// class AActor*                  From                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* APrimalCharacter::GetSnapshotComponent(class AActor* From, const struct FName& Tag)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetSnapshotComponent");

	APrimalCharacter_GetSnapshotComponent_Params params;
	params.From = From;
	params.Tag = Tag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetShortName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalCharacter::GetShortName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetShortName");

	APrimalCharacter_GetShortName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetRunningSpeedModifier
// ()
// Parameters:
// bool                           bIsForDefaultSpeed             (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetRunningSpeedModifier(bool bIsForDefaultSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetRunningSpeedModifier");

	APrimalCharacter_GetRunningSpeedModifier_Params params;
	params.bIsForDefaultSpeed = bIsForDefaultSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetRole
// ()
// Parameters:
// TEnumAsByte<ENetRole>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<ENetRole> APrimalCharacter::GetRole()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetRole");

	APrimalCharacter_GetRole_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetOverridenMontage
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* APrimalCharacter::GetOverridenMontage(class UAnimMontage* AnimMontage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetOverridenMontage");

	APrimalCharacter_GetOverridenMontage_Params params;
	params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetOverridenAnimSequence
// ()
// Parameters:
// class UAnimSequence*           AnimSeq                        (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* APrimalCharacter::GetOverridenAnimSequence(class UAnimSequence* AnimSeq)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetOverridenAnimSequence");

	APrimalCharacter_GetOverridenAnimSequence_Params params;
	params.AnimSeq = AnimSeq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetMyBiomeZoneVolume
// ()
// Parameters:
// class ABiomeZoneVolume*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ABiomeZoneVolume* APrimalCharacter::GetMyBiomeZoneVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetMyBiomeZoneVolume");

	APrimalCharacter_GetMyBiomeZoneVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetMaxHealth
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetMaxHealth");

	APrimalCharacter_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetLastCausedDamageTime
// ()
// Parameters:
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double APrimalCharacter::GetLastCausedDamageTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetLastCausedDamageTime");

	APrimalCharacter_GetLastCausedDamageTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetKillXP
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetKillXP()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetKillXP");

	APrimalCharacter_GetKillXP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetInputDirectionVector
// ()
// Parameters:
// bool                           bRelativeToViewDirection       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalCharacter::GetInputDirectionVector(bool bRelativeToViewDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetInputDirectionVector");

	APrimalCharacter_GetInputDirectionVector_Params params;
	params.bRelativeToViewDirection = bRelativeToViewDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetImmersionDepth
// ()
// Parameters:
// bool                           bUseLineTrace                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetImmersionDepth(bool bUseLineTrace)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetImmersionDepth");

	APrimalCharacter_GetImmersionDepth_Params params;
	params.bUseLineTrace = bUseLineTrace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetHealthPercentage
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetHealthPercentage()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetHealthPercentage");

	APrimalCharacter_GetHealthPercentage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetHealth
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetHealth");

	APrimalCharacter_GetHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetFootPhysicalSurfaceType
// ()
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPhysicalSurface>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPhysicalSurface> APrimalCharacter::GetFootPhysicalSurfaceType(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetFootPhysicalSurfaceType");

	APrimalCharacter_GetFootPhysicalSurfaceType_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetFloatingHUDLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalCharacter::GetFloatingHUDLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetFloatingHUDLocation");

	APrimalCharacter_GetFloatingHUDLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetFallAcceleration
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetFallAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetFallAcceleration");

	APrimalCharacter_GetFallAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetDragWeight
// ()
// Parameters:
// class APrimalCharacter*        ForDragger                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetDragWeight(class APrimalCharacter* ForDragger)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetDragWeight");

	APrimalCharacter_GetDragWeight_Params params;
	params.ForDragger = ForDragger;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetDetailedDescription
// ()
// Parameters:
// class FString                  IndentPrefix                   (Parm, ZeroConstructor)
// TArray<class FString>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class FString> APrimalCharacter::GetDetailedDescription(const class FString& IndentPrefix)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetDetailedDescription");

	APrimalCharacter_GetDetailedDescription_Params params;
	params.IndentPrefix = IndentPrefix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetDescriptiveName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalCharacter::GetDescriptiveName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetDescriptiveName");

	APrimalCharacter_GetDescriptiveName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetDefaultMovementSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetDefaultMovementSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetDefaultMovementSpeed");

	APrimalCharacter_GetDefaultMovementSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalCharacter::GetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetDebugInfoString");

	APrimalCharacter_GetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetCharacterViewLocationAndDirection
// ()
// Parameters:
// struct FVector                 ViewLocation                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ViewDirection                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bFromCrosshairOrCamera         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          FallbackAngleOffsetDegrees     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::GetCharacterViewLocationAndDirection(float FallbackAngleOffsetDegrees, struct FVector* ViewLocation, struct FVector* ViewDirection, bool* bFromCrosshairOrCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetCharacterViewLocationAndDirection");

	APrimalCharacter_GetCharacterViewLocationAndDirection_Params params;
	params.FallbackAngleOffsetDegrees = FallbackAngleOffsetDegrees;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewLocation != nullptr)
		*ViewLocation = params.ViewLocation;
	if (ViewDirection != nullptr)
		*ViewDirection = params.ViewDirection;
	if (bFromCrosshairOrCamera != nullptr)
		*bFromCrosshairOrCamera = params.bFromCrosshairOrCamera;
}


// Function ShooterGame.PrimalCharacter.GetCharacterStatusComponent
// ()
// Parameters:
// class UPrimalCharacterStatusComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimalCharacterStatusComponent* APrimalCharacter::GetCharacterStatusComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetCharacterStatusComponent");

	APrimalCharacter_GetCharacterStatusComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetBuffStackCount
// ()
// Parameters:
// class UClass*                  BuffClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           useExactMatch                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalCharacter::GetBuffStackCount(class UClass* BuffClass, bool useExactMatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetBuffStackCount");

	APrimalCharacter_GetBuffStackCount_Params params;
	params.BuffClass = BuffClass;
	params.useExactMatch = useExactMatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetBuffs
// ()
// Parameters:
// TArray<class APrimalBuff*>     TheBuffs                       (Parm, OutParm, ZeroConstructor)

void APrimalCharacter::GetBuffs(TArray<class APrimalBuff*>* TheBuffs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetBuffs");

	APrimalCharacter_GetBuffs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TheBuffs != nullptr)
		*TheBuffs = params.TheBuffs;
}


// Function ShooterGame.PrimalCharacter.GetBuff
// ()
// Parameters:
// class UClass*                  BuffClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalBuff*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalBuff* APrimalCharacter::GetBuff(class UClass* BuffClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetBuff");

	APrimalCharacter_GetBuff_Params params;
	params.BuffClass = BuffClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetBaseStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> StatusValueType                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::GetBaseStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> StatusValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetBaseStatusValue");

	APrimalCharacter_GetBaseStatusValue_Params params;
	params.StatusValueType = StatusValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetBasedOnDino
// ()
// Parameters:
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* APrimalCharacter::GetBasedOnDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetBasedOnDino");

	APrimalCharacter_GetBasedOnDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetBasedMovementComponent
// ()
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPrimitiveComponent* APrimalCharacter::GetBasedMovementComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetBasedMovementComponent");

	APrimalCharacter_GetBasedMovementComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetAttachedExplosive
// ()
// Parameters:
// class APrimalStructureExplosive* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalStructureExplosive* APrimalCharacter::GetAttachedExplosive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetAttachedExplosive");

	APrimalCharacter_GetAttachedExplosive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.GetAllBuffs
// ()
// Parameters:
// TArray<class APrimalBuff*>     AllBuffs                       (Parm, OutParm, ZeroConstructor)

void APrimalCharacter::GetAllBuffs(TArray<class APrimalBuff*>* AllBuffs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetAllBuffs");

	APrimalCharacter_GetAllBuffs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AllBuffs != nullptr)
		*AllBuffs = params.AllBuffs;
}


// Function ShooterGame.PrimalCharacter.GetAimOffsets
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                RootRotOffset                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          TheRootYawSpeed                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxYawAimClamp                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RootLocOffset                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalCharacter::GetAimOffsets(float DeltaTime, float MaxYawAimClamp, struct FRotator* RootRotOffset, float* TheRootYawSpeed, struct FVector* RootLocOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.GetAimOffsets");

	APrimalCharacter_GetAimOffsets_Params params;
	params.DeltaTime = DeltaTime;
	params.MaxYawAimClamp = MaxYawAimClamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RootRotOffset != nullptr)
		*RootRotOffset = params.RootRotOffset;
	if (TheRootYawSpeed != nullptr)
		*TheRootYawSpeed = params.TheRootYawSpeed;
	if (RootLocOffset != nullptr)
		*RootLocOffset = params.RootLocOffset;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.ForceUpdateCharacter
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        primalChar                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ForceUpdateCharacter(class UWorld* World, class APrimalCharacter* primalChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ForceUpdateCharacter");

	APrimalCharacter_ForceUpdateCharacter_Params params;
	params.World = World;
	params.primalChar = primalChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ForceUpdateAimedCharacters
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLoc                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 EndLoc                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AActor*                  IgnoreActor                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUpdateIgnoreActor        (Parm, ZeroConstructor, IsPlainOldData)
// float                          TraceRadius                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ForceUpdateAimedCharacters(class UWorld* World, const struct FVector& StartLoc, const struct FVector& EndLoc, class AActor* IgnoreActor, bool bForceUpdateIgnoreActor, float TraceRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ForceUpdateAimedCharacters");

	APrimalCharacter_ForceUpdateAimedCharacters_Params params;
	params.World = World;
	params.StartLoc = StartLoc;
	params.EndLoc = EndLoc;
	params.IgnoreActor = IgnoreActor;
	params.bForceUpdateIgnoreActor = bForceUpdateIgnoreActor;
	params.TraceRadius = TraceRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ForceTickPoseDelta
// ()

void APrimalCharacter::ForceTickPoseDelta()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ForceTickPoseDelta");

	APrimalCharacter_ForceTickPoseDelta_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ForceRefreshBones
// ()

void APrimalCharacter::ForceRefreshBones()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ForceRefreshBones");

	APrimalCharacter_ForceRefreshBones_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ForceAddUnderwaterCharacterStatusValues
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::ForceAddUnderwaterCharacterStatusValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ForceAddUnderwaterCharacterStatusValues");

	APrimalCharacter_ForceAddUnderwaterCharacterStatusValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.FadeOutLoadingMusic
// ()

void APrimalCharacter::FadeOutLoadingMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.FadeOutLoadingMusic");

	APrimalCharacter_FadeOutLoadingMusic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ExecSetSleeping
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ExecSetSleeping(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ExecSetSleeping");

	APrimalCharacter_ExecSetSleeping_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ExecSetPawnSleeping
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ExecSetPawnSleeping(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ExecSetPawnSleeping");

	APrimalCharacter_ExecSetPawnSleeping_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.EndForceSkelUpdate
// ()

void APrimalCharacter::EndForceSkelUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.EndForceSkelUpdate");

	APrimalCharacter_EndForceSkelUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.EndDragCharacter
// ()

void APrimalCharacter::EndDragCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.EndDragCharacter");

	APrimalCharacter_EndDragCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.EnableTurnToFaceRotation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::EnableTurnToFaceRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.EnableTurnToFaceRotation");

	APrimalCharacter_EnableTurnToFaceRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.EnableBPTimerServer
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::EnableBPTimerServer(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.EnableBPTimerServer");

	APrimalCharacter_EnableBPTimerServer_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.EnableBPTimerNonDedicated
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::EnableBPTimerNonDedicated(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.EnableBPTimerNonDedicated");

	APrimalCharacter_EnableBPTimerNonDedicated_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.EnableBodiesGravity
// ()

void APrimalCharacter::EnableBodiesGravity()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.EnableBodiesGravity");

	APrimalCharacter_EnableBodiesGravity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.DoSetRagdollPhysics
// ()

void APrimalCharacter::DoSetRagdollPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DoSetRagdollPhysics");

	APrimalCharacter_DoSetRagdollPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.DoFindGoodSpot
// ()
// Parameters:
// struct FVector                 RagdollLoc                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearCollisionSweep           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::DoFindGoodSpot(const struct FVector& RagdollLoc, bool bClearCollisionSweep)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DoFindGoodSpot");

	APrimalCharacter_DoFindGoodSpot_Params params;
	params.RagdollLoc = RagdollLoc;
	params.bClearCollisionSweep = bClearCollisionSweep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.DoCharacterDetachment
// ()
// Parameters:
// bool                           bIncludeRiding                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIncludeCarrying               (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalBuff*             BuffToIgnore                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::DoCharacterDetachment(bool bIncludeRiding, bool bIncludeCarrying, class APrimalBuff* BuffToIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DoCharacterDetachment");

	APrimalCharacter_DoCharacterDetachment_Params params;
	params.bIncludeRiding = bIncludeRiding;
	params.bIncludeCarrying = bIncludeCarrying;
	params.BuffToIgnore = BuffToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.DinoMountOnMe
// ()
// Parameters:
// class APrimalDinoCharacter*    DinoCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::DinoMountOnMe(class APrimalDinoCharacter* DinoCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DinoMountOnMe");

	APrimalCharacter_DinoMountOnMe_Params params;
	params.DinoCharacter = DinoCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.DidTeleport
// ()
// Parameters:
// struct FVector                 NewLoc                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                newRot                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::DidTeleport(const struct FVector& NewLoc, const struct FRotator& newRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DidTeleport");

	APrimalCharacter_DidTeleport_Params params;
	params.NewLoc = NewLoc;
	params.newRot = newRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.DetachFromOtherCharacter
// ()
// Parameters:
// bool                           enableMovementAndCollision     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::DetachFromOtherCharacter(bool enableMovementAndCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DetachFromOtherCharacter");

	APrimalCharacter_DetachFromOtherCharacter_Params params;
	params.enableMovementAndCollision = enableMovementAndCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.DeathHarvestingFadeOut
// ()

void APrimalCharacter::DeathHarvestingFadeOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DeathHarvestingFadeOut");

	APrimalCharacter_DeathHarvestingFadeOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.DeactivateBuffs
// ()
// Parameters:
// class UClass*                  ForBuffClass                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ForInstigatorItem              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           perfectClassMatch              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::DeactivateBuffs(class UClass* ForBuffClass, class UPrimalItem* ForInstigatorItem, bool perfectClassMatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.DeactivateBuffs");

	APrimalCharacter_DeactivateBuffs_Params params;
	params.ForBuffClass = ForBuffClass;
	params.ForInstigatorItem = ForInstigatorItem;
	params.perfectClassMatch = perfectClassMatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.CreateSnapshotComponent
// ()
// Parameters:
// class AActor*                  For                            (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Template                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Tag                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UActorComponent* APrimalCharacter::CreateSnapshotComponent(class AActor* For, class UObject* Template, const struct FName& Tag, const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.CreateSnapshotComponent");

	APrimalCharacter_CreateSnapshotComponent_Params params;
	params.For = For;
	params.Template = Template;
	params.Tag = Tag;
	params.Name = Name;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.ClientSyncAnimation
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlayRate                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ServerCurrentMontageTime       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendInTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ClientSyncAnimation(class UAnimMontage* AnimMontage, float PlayRate, float ServerCurrentMontageTime, bool bForceTickPoseAndServerUpdateMesh, float BlendInTime, float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientSyncAnimation");

	APrimalCharacter_ClientSyncAnimation_Params params;
	params.AnimMontage = AnimMontage;
	params.PlayRate = PlayRate;
	params.ServerCurrentMontageTime = ServerCurrentMontageTime;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ClientStopAnimation
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopOnOwner                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendOutTime                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ClientStopAnimation(class UAnimMontage* AnimMontage, bool bStopOnOwner, float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientStopAnimation");

	APrimalCharacter_ClientStopAnimation_Params params;
	params.AnimMontage = AnimMontage;
	params.bStopOnOwner = bStopOnOwner;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ClientRagdollUpdate
// ()
// Parameters:
// TArray<struct FVector_NetQuantize> BoneLocations                  (ConstParm, Parm, ZeroConstructor)
// struct FRotator_NetQuantize    TargetRootRotation             (Parm)

void APrimalCharacter::ClientRagdollUpdate(TArray<struct FVector_NetQuantize> BoneLocations, const struct FRotator_NetQuantize& TargetRootRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientRagdollUpdate");

	APrimalCharacter_ClientRagdollUpdate_Params params;
	params.BoneLocations = BoneLocations;
	params.TargetRootRotation = TargetRootRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ClientPlayAnimation
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlayRate                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartSectionName               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPlayOnOwner                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::ClientPlayAnimation(class UAnimMontage* AnimMontage, float PlayRate, const struct FName& StartSectionName, bool bPlayOnOwner, bool bForceTickPoseAndServerUpdateMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientPlayAnimation");

	APrimalCharacter_ClientPlayAnimation_Params params;
	params.AnimMontage = AnimMontage;
	params.PlayRate = PlayRate;
	params.StartSectionName = StartSectionName;
	params.bPlayOnOwner = bPlayOnOwner;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ClientNotifyLevelUp
// ()

void APrimalCharacter::ClientNotifyLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientNotifyLevelUp");

	APrimalCharacter_ClientNotifyLevelUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ClientFailedPoop
// ()

void APrimalCharacter::ClientFailedPoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientFailedPoop");

	APrimalCharacter_ClientFailedPoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ClientEndRagdollUpdate
// ()

void APrimalCharacter::ClientEndRagdollUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientEndRagdollUpdate");

	APrimalCharacter_ClientEndRagdollUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.ClientDidPoop
// ()

void APrimalCharacter::ClientDidPoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.ClientDidPoop");

	APrimalCharacter_ClientDidPoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.CharacterIsCarriedAsPassenger
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::CharacterIsCarriedAsPassenger()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.CharacterIsCarriedAsPassenger");

	APrimalCharacter_CharacterIsCarriedAsPassenger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.CharacterBuffsPreventFirstPerson
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::CharacterBuffsPreventFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.CharacterBuffsPreventFirstPerson");

	APrimalCharacter_CharacterBuffsPreventFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.CaptureCharacterSnapshot
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::CaptureCharacterSnapshot(class UPrimalItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.CaptureCharacterSnapshot");

	APrimalCharacter_CaptureCharacterSnapshot_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.CanMountOnMe
// ()
// Parameters:
// class APrimalDinoCharacter*    DinoCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::CanMountOnMe(class APrimalDinoCharacter* DinoCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.CanMountOnMe");

	APrimalCharacter_CanMountOnMe_Params params;
	params.DinoCharacter = DinoCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.CanDragCharacter
// ()
// Parameters:
// class APrimalCharacter*        Character                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::CanDragCharacter(class APrimalCharacter* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.CanDragCharacter");

	APrimalCharacter_CanDragCharacter_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPTriggerStasisEvent
// ()

void APrimalCharacter::BPTriggerStasisEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPTriggerStasisEvent");

	APrimalCharacter_BPTriggerStasisEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPTimerServer
// ()

void APrimalCharacter::BPTimerServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPTimerServer");

	APrimalCharacter_BPTimerServer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPTimerNonDedicated
// ()

void APrimalCharacter::BPTimerNonDedicated()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPTimerNonDedicated");

	APrimalCharacter_BPTimerNonDedicated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPShouldLimitForwardDirection
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPShouldLimitForwardDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPShouldLimitForwardDirection");

	APrimalCharacter_BPShouldLimitForwardDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPRemoveCharacterSnapshot
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  From                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPRemoveCharacterSnapshot(class UPrimalItem* Item, class AActor* From)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPRemoveCharacterSnapshot");

	APrimalCharacter_BPRemoveCharacterSnapshot_Params params;
	params.Item = Item;
	params.From = From;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPPreventStasis
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPPreventStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPPreventStasis");

	APrimalCharacter_BPPreventStasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPPreventInputType
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterInputType> inputType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPPreventInputType(TEnumAsByte<EPrimalCharacterInputType> inputType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPPreventInputType");

	APrimalCharacter_BPPreventInputType_Params params;
	params.inputType = inputType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPPreventFirstPerson
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPPreventFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPPreventFirstPerson");

	APrimalCharacter_BPPreventFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPPreventFallDamage
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)
// float                          FallDamageAmount               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPPreventFallDamage(const struct FHitResult& HitResult, float FallDamageAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPPreventFallDamage");

	APrimalCharacter_BPPreventFallDamage_Params params;
	params.HitResult = HitResult;
	params.FallDamageAmount = FallDamageAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPPreSerializeSaveGame
// ()

void APrimalCharacter::BPPreSerializeSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPPreSerializeSaveGame");

	APrimalCharacter_BPPreSerializeSaveGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPPostLoadedFromSaveGame
// ()

void APrimalCharacter::BPPostLoadedFromSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPPostLoadedFromSaveGame");

	APrimalCharacter_BPPostLoadedFromSaveGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPPlayDying
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPPlayDying");

	APrimalCharacter_BPPlayDying_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPOverrideHurtAnim
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLocalPath                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPointDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PointDamageLocation            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PointDamageHitNormal           (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimMontage*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimMontage* APrimalCharacter::BPOverrideHurtAnim(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, bool bIsPointDamage, const struct FVector& PointDamageLocation, const struct FVector& PointDamageHitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOverrideHurtAnim");

	APrimalCharacter_BPOverrideHurtAnim_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;
	params.bIsLocalPath = bIsLocalPath;
	params.bIsPointDamage = bIsPointDamage;
	params.PointDamageLocation = PointDamageLocation;
	params.PointDamageHitNormal = PointDamageHitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPOverrideFPVViewLocation
// ()
// Parameters:
// class APrimalCharacter*        viewingCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPOverrideFPVViewLocation(class APrimalCharacter* viewingCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOverrideFPVViewLocation");

	APrimalCharacter_BPOverrideFPVViewLocation_Params params;
	params.viewingCharacter = viewingCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPOverrideDamageCauserHitMarker
// ()
// Parameters:
// class AShooterPlayerController* DamageCauserController         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bHitFriendlyTarget             (Parm, ZeroConstructor, IsPlainOldData)
// float                          PreDamageHealth                (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsPointDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              PointDamageHitResult           (ConstParm, Parm, OutParm, ReferenceParm)
// struct FHitMarkerSettings      ReturnValue                    (Parm, OutParm, ReturnParm)

struct FHitMarkerSettings APrimalCharacter::BPOverrideDamageCauserHitMarker(class AShooterPlayerController* DamageCauserController, bool bHitFriendlyTarget, float PreDamageHealth, float DamageAmount, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointDamageHitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOverrideDamageCauserHitMarker");

	APrimalCharacter_BPOverrideDamageCauserHitMarker_Params params;
	params.DamageCauserController = DamageCauserController;
	params.bHitFriendlyTarget = bHitFriendlyTarget;
	params.PreDamageHealth = PreDamageHealth;
	params.DamageAmount = DamageAmount;
	params.DamageEvent = DamageEvent;
	params.bIsPointDamage = bIsPointDamage;
	params.PointDamageHitResult = PointDamageHitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPOverrideCharacterNewFallVelocity
// ()
// Parameters:
// struct FVector                 InitialVelocity                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Gravity                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalCharacter::BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOverrideCharacterNewFallVelocity");

	APrimalCharacter_BPOverrideCharacterNewFallVelocity_Params params;
	params.InitialVelocity = InitialVelocity;
	params.Gravity = Gravity;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPOnStaminaDrained
// ()

void APrimalCharacter::BPOnStaminaDrained()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOnStaminaDrained");

	APrimalCharacter_BPOnStaminaDrained_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPOnMovementModeChangedNotify
// ()
// Parameters:
// TEnumAsByte<EMovementMode>     PrevMovementMode               (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  PreviousCustomMode             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPOnMovementModeChangedNotify(TEnumAsByte<EMovementMode> PrevMovementMode, unsigned char PreviousCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOnMovementModeChangedNotify");

	APrimalCharacter_BPOnMovementModeChangedNotify_Params params;
	params.PrevMovementMode = PrevMovementMode;
	params.PreviousCustomMode = PreviousCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPOnLethalDamage
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             Killer                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreventDeath                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPOnLethalDamage(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser, bool* bPreventDeath)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOnLethalDamage");

	APrimalCharacter_BPOnLethalDamage_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.Killer = Killer;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bPreventDeath != nullptr)
		*bPreventDeath = params.bPreventDeath;
}


// Function ShooterGame.PrimalCharacter.BPOnAttachmentReplication
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPOnAttachmentReplication()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOnAttachmentReplication");

	APrimalCharacter_BPOnAttachmentReplication_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPOnAnimPlayedNotify
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartSectionName               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToOwner              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseOnServer         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPOnAnimPlayedNotify(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName, bool bReplicate, bool bReplicateToOwner, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPOnAnimPlayedNotify");

	APrimalCharacter_BPOnAnimPlayedNotify_Params params;
	params.AnimMontage = AnimMontage;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;
	params.bReplicate = bReplicate;
	params.bReplicateToOwner = bReplicateToOwner;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.bForceTickPoseOnServer = bForceTickPoseOnServer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPNotifyLevelUp
// ()
// Parameters:
// int                            ExtraCharacterLevel            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPNotifyLevelUp(int ExtraCharacterLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPNotifyLevelUp");

	APrimalCharacter_BPNotifyLevelUp_Params params;
	params.ExtraCharacterLevel = ExtraCharacterLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPNotifyInventoryItemChange
// ()
// Parameters:
// bool                           bIsItemAdd                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             theItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* theItem, bool bEquipItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPNotifyInventoryItemChange");

	APrimalCharacter_BPNotifyInventoryItemChange_Params params;
	params.bIsItemAdd = bIsItemAdd;
	params.theItem = theItem;
	params.bEquipItem = bEquipItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPNotifyDroppedItemPickedUp
// ()
// Parameters:
// class ADroppedItem*            itemPickedUp                   (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        PickedUpBy                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPNotifyDroppedItemPickedUp(class ADroppedItem* itemPickedUp, class APrimalCharacter* PickedUpBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPNotifyDroppedItemPickedUp");

	APrimalCharacter_BPNotifyDroppedItemPickedUp_Params params;
	params.itemPickedUp = itemPickedUp;
	params.PickedUpBy = PickedUpBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPNotifyBumpedPawn
// ()
// Parameters:
// class APrimalCharacter*        BumpedPawn                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPNotifyBumpedPawn(class APrimalCharacter* BumpedPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPNotifyBumpedPawn");

	APrimalCharacter_BPNotifyBumpedPawn_Params params;
	params.BumpedPawn = BumpedPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPNotifyBumpedByPawn
// ()
// Parameters:
// class APrimalCharacter*        ByPawn                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPNotifyBumpedByPawn(class APrimalCharacter* ByPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPNotifyBumpedByPawn");

	APrimalCharacter_BPNotifyBumpedByPawn_Params params;
	params.ByPawn = ByPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPNetSetCharacterMovementVelocity
// ()
// Parameters:
// bool                           bSetNewVelocity                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetNewMovementMode            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     newMovementMode                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPNetSetCharacterMovementVelocity(bool bSetNewVelocity, const struct FVector& NewVelocity, bool bSetNewMovementMode, TEnumAsByte<EMovementMode> newMovementMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPNetSetCharacterMovementVelocity");

	APrimalCharacter_BPNetSetCharacterMovementVelocity_Params params;
	params.bSetNewVelocity = bSetNewVelocity;
	params.NewVelocity = NewVelocity;
	params.bSetNewMovementMode = bSetNewMovementMode;
	params.newMovementMode = newMovementMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPNetAddCharacterMovementImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelChange                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ImpulseExponent                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetNewMovementMode            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     newMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideMaxImpulseZ           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyToBigPawns               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPNetAddCharacterMovementImpulse(const struct FVector& Impulse, bool bVelChange, float ImpulseExponent, bool bSetNewMovementMode, TEnumAsByte<EMovementMode> newMovementMode, bool bOverrideMaxImpulseZ, bool bApplyToBigPawns)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPNetAddCharacterMovementImpulse");

	APrimalCharacter_BPNetAddCharacterMovementImpulse_Params params;
	params.Impulse = Impulse;
	params.bVelChange = bVelChange;
	params.ImpulseExponent = ImpulseExponent;
	params.bSetNewMovementMode = bSetNewMovementMode;
	params.newMovementMode = newMovementMode;
	params.bOverrideMaxImpulseZ = bOverrideMaxImpulseZ;
	params.bApplyToBigPawns = bApplyToBigPawns;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPModifyViewHitDir
// ()
// Parameters:
// class APrimalCharacter*        viewingCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// float                          InViewHitDir                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPModifyViewHitDir(class APrimalCharacter* viewingCharacter, float InViewHitDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPModifyViewHitDir");

	APrimalCharacter_BPModifyViewHitDir_Params params;
	params.viewingCharacter = viewingCharacter;
	params.InViewHitDir = InViewHitDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPModifyFOVInterpSpeed
// ()
// Parameters:
// float                          FOVInterpSpeedIn               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPModifyFOVInterpSpeed(float FOVInterpSpeedIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPModifyFOVInterpSpeed");

	APrimalCharacter_BPModifyFOVInterpSpeed_Params params;
	params.FOVInterpSpeedIn = FOVInterpSpeedIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPModifyFOV
// ()
// Parameters:
// float                          FOVIn                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPModifyFOV(float FOVIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPModifyFOV");

	APrimalCharacter_BPModifyFOV_Params params;
	params.FOVIn = FOVIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPModifyForwardDirectionInput
// ()
// Parameters:
// struct FVector                 directionInput                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalCharacter::BPModifyForwardDirectionInput(const struct FVector& directionInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPModifyForwardDirectionInput");

	APrimalCharacter_BPModifyForwardDirectionInput_Params params;
	params.directionInput = directionInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPLimitPlayerRotation
// ()
// Parameters:
// class APrimalCharacter*        viewingCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InViewRotation                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalCharacter::BPLimitPlayerRotation(class APrimalCharacter* viewingCharacter, const struct FRotator& InViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPLimitPlayerRotation");

	APrimalCharacter_BPLimitPlayerRotation_Params params;
	params.viewingCharacter = viewingCharacter;
	params.InViewRotation = InViewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPIsConscious
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPIsConscious()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPIsConscious");

	APrimalCharacter_BPIsConscious_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPIsBasedOnDynamicActor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPIsBasedOnDynamicActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPIsBasedOnDynamicActor");

	APrimalCharacter_BPIsBasedOnDynamicActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPHandleRightShoulderButton
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPHandleRightShoulderButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPHandleRightShoulderButton");

	APrimalCharacter_BPHandleRightShoulderButton_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPHandlePoop
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPHandlePoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPHandlePoop");

	APrimalCharacter_BPHandlePoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPHandleLeftShoulderButton
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPHandleLeftShoulderButton()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPHandleLeftShoulderButton");

	APrimalCharacter_BPHandleLeftShoulderButton_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPGrabDebugSnapshot
// ()
// Parameters:
// TArray<struct FBlueprintVisualLogEntry> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FBlueprintVisualLogEntry> APrimalCharacter::BPGrabDebugSnapshot()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGrabDebugSnapshot");

	APrimalCharacter_BPGrabDebugSnapshot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPGetOverrideCameraInterpSpeed
// ()
// Parameters:
// float                          DefaultTPVCameraSpeedInterpolationMultiplier (Parm, ZeroConstructor, IsPlainOldData)
// float                          DefaultTPVOffsetInterpSpeed    (Parm, ZeroConstructor, IsPlainOldData)
// float                          TPVCameraSpeedInterpolationMultiplier (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          TPVOffsetInterpSpeed           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPGetOverrideCameraInterpSpeed(float DefaultTPVCameraSpeedInterpolationMultiplier, float DefaultTPVOffsetInterpSpeed, float* TPVCameraSpeedInterpolationMultiplier, float* TPVOffsetInterpSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetOverrideCameraInterpSpeed");

	APrimalCharacter_BPGetOverrideCameraInterpSpeed_Params params;
	params.DefaultTPVCameraSpeedInterpolationMultiplier = DefaultTPVCameraSpeedInterpolationMultiplier;
	params.DefaultTPVOffsetInterpSpeed = DefaultTPVOffsetInterpSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TPVCameraSpeedInterpolationMultiplier != nullptr)
		*TPVCameraSpeedInterpolationMultiplier = params.TPVCameraSpeedInterpolationMultiplier;
	if (TPVOffsetInterpSpeed != nullptr)
		*TPVOffsetInterpSpeed = params.TPVOffsetInterpSpeed;
}


// Function ShooterGame.PrimalCharacter.BPGetHUDOverrideBuffProgressBarPercent
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPGetHUDOverrideBuffProgressBarPercent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetHUDOverrideBuffProgressBarPercent");

	APrimalCharacter_BPGetHUDOverrideBuffProgressBarPercent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPGetHUDElements
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHUDElement>     OutElements                    (Parm, OutParm, ZeroConstructor)

void APrimalCharacter::BPGetHUDElements(class APlayerController* ForPC, TArray<struct FHUDElement>* OutElements)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetHUDElements");

	APrimalCharacter_BPGetHUDElements_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutElements != nullptr)
		*OutElements = params.OutElements;
}


// Function ShooterGame.PrimalCharacter.BPGetGravityZScale
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPGetGravityZScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetGravityZScale");

	APrimalCharacter_BPGetGravityZScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPGetFPVViewLocation
// ()
// Parameters:
// class APrimalCharacter*        viewingCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalCharacter::BPGetFPVViewLocation(class APrimalCharacter* viewingCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetFPVViewLocation");

	APrimalCharacter_BPGetFPVViewLocation_Params params;
	params.viewingCharacter = viewingCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPGetExtraMeleeDamageModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPGetExtraMeleeDamageModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetExtraMeleeDamageModifier");

	APrimalCharacter_BPGetExtraMeleeDamageModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPGetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalCharacter::BPGetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetDebugInfoString");

	APrimalCharacter_BPGetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPGetAddForwardVelocityOnJump
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPGetAddForwardVelocityOnJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPGetAddForwardVelocityOnJump");

	APrimalCharacter_BPGetAddForwardVelocityOnJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPCheckJumpInput
// ()
// Parameters:
// bool                           bUseCustomErrorMessage         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class FString                  ErrorMessageToDisplay          (Parm, OutParm, ZeroConstructor)

void APrimalCharacter::BPCheckJumpInput(bool* bUseCustomErrorMessage, class FString* ErrorMessageToDisplay)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCheckJumpInput");

	APrimalCharacter_BPCheckJumpInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bUseCustomErrorMessage != nullptr)
		*bUseCustomErrorMessage = params.bUseCustomErrorMessage;
	if (ErrorMessageToDisplay != nullptr)
		*ErrorMessageToDisplay = params.ErrorMessageToDisplay;
}


// Function ShooterGame.PrimalCharacter.BPCharacterUnsleeped
// ()

void APrimalCharacter::BPCharacterUnsleeped()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCharacterUnsleeped");

	APrimalCharacter_BPCharacterUnsleeped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPCharacterSleeped
// ()

void APrimalCharacter::BPCharacterSleeped()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCharacterSleeped");

	APrimalCharacter_BPCharacterSleeped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPCharacterDetach
// ()

void APrimalCharacter::BPCharacterDetach()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCharacterDetach");

	APrimalCharacter_BPCharacterDetach_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPCanNotifyTeamAggroAI
// ()
// Parameters:
// class APrimalDinoCharacter*    Dino                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPCanNotifyTeamAggroAI(class APrimalDinoCharacter* Dino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCanNotifyTeamAggroAI");

	APrimalCharacter_BPCanNotifyTeamAggroAI_Params params;
	params.Dino = Dino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPCanBeBaseForCharacter
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPCanBeBaseForCharacter(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCanBeBaseForCharacter");

	APrimalCharacter_BPCanBeBaseForCharacter_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPCanBaseOnCharacter
// ()
// Parameters:
// class APrimalCharacter*        BaseCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BPCanBaseOnCharacter(class APrimalCharacter* BaseCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCanBaseOnCharacter");

	APrimalCharacter_BPCanBaseOnCharacter_Params params;
	params.BaseCharacter = BaseCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPCameraRotationFinal
// ()
// Parameters:
// class APrimalCharacter*        viewingCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                InCurrentFinalRot              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalCharacter::BPCameraRotationFinal(class APrimalCharacter* viewingCharacter, const struct FRotator& InCurrentFinalRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCameraRotationFinal");

	APrimalCharacter_BPCameraRotationFinal_Params params;
	params.viewingCharacter = viewingCharacter;
	params.InCurrentFinalRot = InCurrentFinalRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPCameraBaseOrientation
// ()
// Parameters:
// class APrimalCharacter*        viewingCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalCharacter::BPCameraBaseOrientation(class APrimalCharacter* viewingCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPCameraBaseOrientation");

	APrimalCharacter_BPCameraBaseOrientation_Params params;
	params.viewingCharacter = viewingCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPApplyCharacterSnapshot
// ()
// Parameters:
// class UPrimalItem*             Item                           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  To                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Offset                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxExtent                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            Pose                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPApplyCharacterSnapshot(class UPrimalItem* Item, class AActor* To, const struct FVector& Offset, float MaxExtent, int Pose)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPApplyCharacterSnapshot");

	APrimalCharacter_BPApplyCharacterSnapshot_Params params;
	params.Item = Item;
	params.To = To;
	params.Offset = Offset;
	params.MaxExtent = MaxExtent;
	params.Pose = Pose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BPAdjustTorpidityDamage
// ()
// Parameters:
// float                          DesiredTorpidityDamage         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HealthDamageAmount             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPAdjustTorpidityDamage(float DesiredTorpidityDamage, float HealthDamageAmount, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPAdjustTorpidityDamage");

	APrimalCharacter_BPAdjustTorpidityDamage_Params params;
	params.DesiredTorpidityDamage = DesiredTorpidityDamage;
	params.HealthDamageAmount = HealthDamageAmount;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPAdjustImpulseFromDamage
// ()
// Parameters:
// struct FVector                 DesiredImpulse                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPointDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              PointHitInfo                   (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalCharacter::BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPAdjustImpulseFromDamage");

	APrimalCharacter_BPAdjustImpulseFromDamage_Params params;
	params.DesiredImpulse = DesiredImpulse;
	params.DamageTaken = DamageTaken;
	params.TheDamageEvent = TheDamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;
	params.bIsPointDamage = bIsPointDamage;
	params.PointHitInfo = PointHitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPAdjustDamage
// ()
// Parameters:
// float                          IncomingDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPointDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              PointHitInfo                   (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPAdjustDamage");

	APrimalCharacter_BPAdjustDamage_Params params;
	params.IncomingDamage = IncomingDamage;
	params.TheDamageEvent = TheDamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.bIsPointDamage = bIsPointDamage;
	params.PointHitInfo = PointHitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPAdjustCharacterMovementImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelocityChange                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MassScaleImpulseExponent       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideMaxImpulseZ           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalCharacter::BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPAdjustCharacterMovementImpulse");

	APrimalCharacter_BPAdjustCharacterMovementImpulse_Params params;
	params.Impulse = Impulse;
	params.bVelocityChange = bVelocityChange;
	params.MassScaleImpulseExponent = MassScaleImpulseExponent;
	params.bOverrideMaxImpulseZ = bOverrideMaxImpulseZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BPAddedAttachmentsForItem
// ()
// Parameters:
// class UPrimalItem*             anItem                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BPAddedAttachmentsForItem(class UPrimalItem* anItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BPAddedAttachmentsForItem");

	APrimalCharacter_BPAddedAttachmentsForItem_Params params;
	params.anItem = anItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BP_OnZoomOut
// ()

void APrimalCharacter::BP_OnZoomOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_OnZoomOut");

	APrimalCharacter_BP_OnZoomOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BP_OnZoomIn
// ()

void APrimalCharacter::BP_OnZoomIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_OnZoomIn");

	APrimalCharacter_BP_OnZoomIn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BP_OnSetRunning
// ()
// Parameters:
// bool                           bNewIsRunning                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BP_OnSetRunning(bool bNewIsRunning)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_OnSetRunning");

	APrimalCharacter_BP_OnSetRunning_Params params;
	params.bNewIsRunning = bNewIsRunning;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BP_OnSetDeath
// ()

void APrimalCharacter::BP_OnSetDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_OnSetDeath");

	APrimalCharacter_BP_OnSetDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BP_OnJumpReleased
// ()

void APrimalCharacter::BP_OnJumpReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_OnJumpReleased");

	APrimalCharacter_BP_OnJumpReleased_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BP_OnJumpPressed
// ()

void APrimalCharacter::BP_OnJumpPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_OnJumpPressed");

	APrimalCharacter_BP_OnJumpPressed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.BP_IsCharacterHardAttached
// ()
// Parameters:
// bool                           bIgnoreRiding                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreCarried                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::BP_IsCharacterHardAttached(bool bIgnoreRiding, bool bIgnoreCarried)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_IsCharacterHardAttached");

	APrimalCharacter_BP_IsCharacterHardAttached_Params params;
	params.bIgnoreRiding = bIgnoreRiding;
	params.bIgnoreCarried = bIgnoreCarried;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BP_GetMaxSpeedModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalCharacter::BP_GetMaxSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_GetMaxSpeedModifier");

	APrimalCharacter_BP_GetMaxSpeedModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BP_CameraBaseOrientation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalCharacter::BP_CameraBaseOrientation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BP_CameraBaseOrientation");

	APrimalCharacter_BP_CameraBaseOrientation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacter.BlueprintAnimNotifyCustomEvent
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimNotify*             AnimNotifyObject               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::BlueprintAnimNotifyCustomEvent(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.BlueprintAnimNotifyCustomEvent");

	APrimalCharacter_BlueprintAnimNotifyCustomEvent_Params params;
	params.CustomEventName = CustomEventName;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.AnimNotifyObject = AnimNotifyObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.AttachToOtherCharacter
// ()
// Parameters:
// class APrimalCharacter*        characterToAttachTo            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   InSocketName                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           enableMovementAndCollision     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void APrimalCharacter::AttachToOtherCharacter(class APrimalCharacter* characterToAttachTo, const struct FName& InSocketName, bool enableMovementAndCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.AttachToOtherCharacter");

	APrimalCharacter_AttachToOtherCharacter_Params params;
	params.characterToAttachTo = characterToAttachTo;
	params.InSocketName = InSocketName;
	params.enableMovementAndCollision = enableMovementAndCollision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.AttachedToOtherCharacterUpdateWorldLocation
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void APrimalCharacter::AttachedToOtherCharacterUpdateWorldLocation(const struct FVector& WorldLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.AttachedToOtherCharacterUpdateWorldLocation");

	APrimalCharacter_AttachedToOtherCharacterUpdateWorldLocation_Params params;
	params.WorldLocation = WorldLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacter.AllowPlayMontage
// ()
// Parameters:
// class UAnimMontage*            AnimMontage                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalCharacter::AllowPlayMontage(class UAnimMontage* AnimMontage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacter.AllowPlayMontage");

	APrimalCharacter_AllowPlayMontage_Params params;
	params.AnimMontage = AnimMontage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.UpdateTribeGroupRanks
// ()
// Parameters:
// unsigned char                  NewTribeGroupPetOrderingRank   (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewTribeGroupPetRidingRank     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::UpdateTribeGroupRanks(unsigned char NewTribeGroupPetOrderingRank, unsigned char NewTribeGroupPetRidingRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UpdateTribeGroupRanks");

	APrimalDinoCharacter_UpdateTribeGroupRanks_Params params;
	params.NewTribeGroupPetOrderingRank = NewTribeGroupPetOrderingRank;
	params.NewTribeGroupPetRidingRank = NewTribeGroupPetRidingRank;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.UpdateNextAllowedMatingTime
// ()
// Parameters:
// double                         fromTime                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::UpdateNextAllowedMatingTime(double fromTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UpdateNextAllowedMatingTime");

	APrimalDinoCharacter_UpdateNextAllowedMatingTime_Params params;
	params.fromTime = fromTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.UpdateMateBoost
// ()

void APrimalDinoCharacter::UpdateMateBoost()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UpdateMateBoost");

	APrimalDinoCharacter_UpdateMateBoost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.UpdateImprintingQuality
// ()
// Parameters:
// float                          NewImprintingQuality           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::UpdateImprintingQuality(float NewImprintingQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UpdateImprintingQuality");

	APrimalDinoCharacter_UpdateImprintingQuality_Params params;
	params.NewImprintingQuality = NewImprintingQuality;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.UpdateImprintingDetails
// ()
// Parameters:
// class FString                  NewImprinterName               (Parm, ZeroConstructor)
// uint64_t                       NewImprinterPlayerDataID       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::UpdateImprintingDetails(const class FString& NewImprinterName, uint64_t NewImprinterPlayerDataID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UpdateImprintingDetails");

	APrimalDinoCharacter_UpdateImprintingDetails_Params params;
	params.NewImprinterName = NewImprinterName;
	params.NewImprinterPlayerDataID = NewImprinterPlayerDataID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.UpdateBabyCuddling
// ()
// Parameters:
// double                         NewBabyNextCuddleTime          (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  NewBabyCuddleType              (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  NewBabyCuddleFood              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::UpdateBabyCuddling(double NewBabyNextCuddleTime, unsigned char NewBabyCuddleType, class UClass* NewBabyCuddleFood)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UpdateBabyCuddling");

	APrimalDinoCharacter_UpdateBabyCuddling_Params params;
	params.NewBabyNextCuddleTime = NewBabyNextCuddleTime;
	params.NewBabyCuddleType = NewBabyCuddleType;
	params.NewBabyCuddleFood = NewBabyCuddleFood;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.UpdateAttackTargets
// ()

void APrimalDinoCharacter::UpdateAttackTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UpdateAttackTargets");

	APrimalDinoCharacter_UpdateAttackTargets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.UnclaimDino
// ()
// Parameters:
// bool                           bDestroyAI                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::UnclaimDino(bool bDestroyAI)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.UnclaimDino");

	APrimalDinoCharacter_UnclaimDino_Params params;
	params.bDestroyAI = bDestroyAI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.TamedProcessOrder
// ()
// Parameters:
// class APrimalCharacter*        FromCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EDinoTamedOrder>   OrderType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  enemyTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::TamedProcessOrder(class APrimalCharacter* FromCharacter, TEnumAsByte<EDinoTamedOrder> OrderType, bool bForce, class AActor* enemyTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.TamedProcessOrder");

	APrimalDinoCharacter_TamedProcessOrder_Params params;
	params.FromCharacter = FromCharacter;
	params.OrderType = OrderType;
	params.bForce = bForce;
	params.enemyTarget = enemyTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.TameDino
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreMaxTameLimit            (Parm, ZeroConstructor, IsPlainOldData)
// int                            OverrideTamingTeamID           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreventNameDialog             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipAddingTamedLevels         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::TameDino(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit, int OverrideTamingTeamID, bool bPreventNameDialog, bool bSkipAddingTamedLevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.TameDino");

	APrimalDinoCharacter_TameDino_Params params;
	params.ForPC = ForPC;
	params.bIgnoreMaxTameLimit = bIgnoreMaxTameLimit;
	params.OverrideTamingTeamID = OverrideTamingTeamID;
	params.bPreventNameDialog = bPreventNameDialog;
	params.bSkipAddingTamedLevels = bSkipAddingTamedLevels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.StopActiveState
// ()
// Parameters:
// bool                           bShouldResetAttackIndex        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::StopActiveState(bool bShouldResetAttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.StopActiveState");

	APrimalDinoCharacter_StopActiveState_Params params;
	params.bShouldResetAttackIndex = bShouldResetAttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.StartSurfaceCameraForPassengers
// ()
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::StartSurfaceCameraForPassengers(float Yaw, float Pitch, float Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.StartSurfaceCameraForPassengers");

	APrimalDinoCharacter_StartSurfaceCameraForPassengers_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.StartSurfaceCameraForPassenger
// ()
// Parameters:
// class AShooterCharacter*       Passenger                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInvertTurnInput               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::StartSurfaceCameraForPassenger(class AShooterCharacter* Passenger, float Yaw, float Pitch, float Roll, bool bInvertTurnInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.StartSurfaceCameraForPassenger");

	APrimalDinoCharacter_StartSurfaceCameraForPassenger_Params params;
	params.Passenger = Passenger;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Roll = Roll;
	params.bInvertTurnInput = bInvertTurnInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.StartLanding
// ()
// Parameters:
// struct FVector                 OverrideLandingLocation        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::StartLanding(const struct FVector& OverrideLandingLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.StartLanding");

	APrimalDinoCharacter_StartLanding_Params params;
	params.OverrideLandingLocation = OverrideLandingLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SpawnNewAIController
// ()
// Parameters:
// class UClass*                  NewAIController                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SpawnNewAIController(class UClass* NewAIController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SpawnNewAIController");

	APrimalDinoCharacter_SpawnNewAIController_Params params;
	params.NewAIController = NewAIController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SpawnFromDinoDataEx
// ()
// Parameters:
// struct FARKDinoData            InDinoData                     (ConstParm, Parm, OutParm, ReferenceParm)
// class UWorld*                  inWorld                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                AtRotation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           dupedDino                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            ForTeam                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bGenerateNewDinoID             (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* TamerController                (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* APrimalDinoCharacter::SpawnFromDinoDataEx(const struct FARKDinoData& InDinoData, class UWorld* inWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, int ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController, bool* dupedDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SpawnFromDinoDataEx");

	APrimalDinoCharacter_SpawnFromDinoDataEx_Params params;
	params.InDinoData = InDinoData;
	params.inWorld = inWorld;
	params.AtLocation = AtLocation;
	params.AtRotation = AtRotation;
	params.ForTeam = ForTeam;
	params.bGenerateNewDinoID = bGenerateNewDinoID;
	params.TamerController = TamerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (dupedDino != nullptr)
		*dupedDino = params.dupedDino;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.SpawnFromDinoData
// ()
// Parameters:
// struct FARKDinoData            InDinoData                     (ConstParm, Parm, OutParm, ReferenceParm)
// class UWorld*                  inWorld                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                AtRotation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            ForTeam                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bGenerateNewDinoID             (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* TamerController                (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* APrimalDinoCharacter::SpawnFromDinoData(const struct FARKDinoData& InDinoData, class UWorld* inWorld, const struct FVector& AtLocation, const struct FRotator& AtRotation, int ForTeam, bool bGenerateNewDinoID, class AShooterPlayerController* TamerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SpawnFromDinoData");

	APrimalDinoCharacter_SpawnFromDinoData_Params params;
	params.InDinoData = InDinoData;
	params.inWorld = inWorld;
	params.AtLocation = AtLocation;
	params.AtRotation = AtRotation;
	params.ForTeam = ForTeam;
	params.bGenerateNewDinoID = bGenerateNewDinoID;
	params.TamerController = TamerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.SpawnDino
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpawnLoc                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                SpawnRot                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          LevelMultiplier                (Parm, ZeroConstructor, IsPlainOldData)
// int                            ExtraLevelOffset               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           AddLevelOffsetBeforeMultiplier (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideBaseNPCLevel          (Parm, ZeroConstructor, IsPlainOldData)
// int                            BaseLevelOverrideValue         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNPCDontWander                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          NPCAIRangeMultiplier           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NPCAbsoluteBaseLevel           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSpawnWithoutCapsuleOffset     (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* APrimalDinoCharacter::SpawnDino(class UWorld* World, class UClass* DinoClass, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot, float LevelMultiplier, int ExtraLevelOffset, bool AddLevelOffsetBeforeMultiplier, bool bOverrideBaseNPCLevel, int BaseLevelOverrideValue, bool bNPCDontWander, float NPCAIRangeMultiplier, int NPCAbsoluteBaseLevel, bool bSpawnWithoutCapsuleOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SpawnDino");

	APrimalDinoCharacter_SpawnDino_Params params;
	params.World = World;
	params.DinoClass = DinoClass;
	params.SpawnLoc = SpawnLoc;
	params.SpawnRot = SpawnRot;
	params.LevelMultiplier = LevelMultiplier;
	params.ExtraLevelOffset = ExtraLevelOffset;
	params.AddLevelOffsetBeforeMultiplier = AddLevelOffsetBeforeMultiplier;
	params.bOverrideBaseNPCLevel = bOverrideBaseNPCLevel;
	params.BaseLevelOverrideValue = BaseLevelOverrideValue;
	params.bNPCDontWander = bNPCDontWander;
	params.NPCAIRangeMultiplier = NPCAIRangeMultiplier;
	params.NPCAbsoluteBaseLevel = NPCAbsoluteBaseLevel;
	params.bSpawnWithoutCapsuleOffset = bSpawnWithoutCapsuleOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.ShouldForceFlee
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::ShouldForceFlee()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ShouldForceFlee");

	APrimalDinoCharacter_ShouldForceFlee_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.ShouldDealDamage
// ()
// Parameters:
// class AActor*                  TestActor                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::ShouldDealDamage(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ShouldDealDamage");

	APrimalDinoCharacter_ShouldDealDamage_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.ShouldAttackOfPlayedAnimationStopMovement
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::ShouldAttackOfPlayedAnimationStopMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ShouldAttackOfPlayedAnimationStopMovement");

	APrimalDinoCharacter_ShouldAttackOfPlayedAnimationStopMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.SetTurretMode
// ()
// Parameters:
// bool                           Enabled                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::SetTurretMode(bool Enabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetTurretMode");

	APrimalDinoCharacter_SetTurretMode_Params params;
	params.Enabled = Enabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.SetState
// ()
// Parameters:
// class UPrimalAIState*          State                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetState(class UPrimalAIState* State)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetState");

	APrimalDinoCharacter_SetState_Params params;
	params.State = State;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetStasisComponentRadius
// ()
// Parameters:
// float                          StasisOverrideRadius           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetStasisComponentRadius(float StasisOverrideRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetStasisComponentRadius");

	APrimalDinoCharacter_SetStasisComponentRadius_Params params;
	params.StasisOverrideRadius = StasisOverrideRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetRider
// ()
// Parameters:
// class AShooterCharacter*       aRider                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetRider(class AShooterCharacter* aRider)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetRider");

	APrimalDinoCharacter_SetRider_Params params;
	params.aRider = aRider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetPreventSaving
// ()
// Parameters:
// bool                           fPreventSaving                 (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetPreventSaving(bool fPreventSaving)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetPreventSaving");

	APrimalDinoCharacter_SetPreventSaving_Params params;
	params.fPreventSaving = fPreventSaving;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetNextAllowedMatingTime
// ()
// Parameters:
// double                         NextAllowedMatingTime          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetNextAllowedMatingTime(double NextAllowedMatingTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetNextAllowedMatingTime");

	APrimalDinoCharacter_SetNextAllowedMatingTime_Params params;
	params.NextAllowedMatingTime = NextAllowedMatingTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetMovementAccelerationVector
// ()
// Parameters:
// struct FVector                 fVector                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetMovementAccelerationVector(const struct FVector& fVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetMovementAccelerationVector");

	APrimalDinoCharacter_SetMovementAccelerationVector_Params params;
	params.fVector = fVector;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetLastMovementDesiredRotation
// ()
// Parameters:
// struct FRotator                InRotation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void APrimalDinoCharacter::SetLastMovementDesiredRotation(const struct FRotator& InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetLastMovementDesiredRotation");

	APrimalDinoCharacter_SetLastMovementDesiredRotation_Params params;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetLastAttackTimeForAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// double                         NewTime                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetLastAttackTimeForAttack(int AttackIndex, double NewTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetLastAttackTimeForAttack");

	APrimalDinoCharacter_SetLastAttackTimeForAttack_Params params;
	params.AttackIndex = AttackIndex;
	params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetImprintPlayer
// ()
// Parameters:
// class AShooterCharacter*       forChar                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetImprintPlayer(class AShooterCharacter* forChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetImprintPlayer");

	APrimalDinoCharacter_SetImprintPlayer_Params params;
	params.forChar = forChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetFlight
// ()
// Parameters:
// bool                           bFly                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCancelForceLand               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetFlight(bool bFly, bool bCancelForceLand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetFlight");

	APrimalDinoCharacter_SetFlight_Params params;
	params.bFly = bFly;
	params.bCancelForceLand = bCancelForceLand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetCurrentAttackIndex
// ()
// Parameters:
// unsigned char                  index                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetCurrentAttackIndex(unsigned char index)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetCurrentAttackIndex");

	APrimalDinoCharacter_SetCurrentAttackIndex_Params params;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetColorizationData
// ()
// Parameters:
// TArray<unsigned char>          ColorData                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void APrimalDinoCharacter::SetColorizationData(TArray<unsigned char> ColorData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetColorizationData");

	APrimalDinoCharacter_SetColorizationData_Params params;
	params.ColorData = ColorData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetBabyAge
// ()
// Parameters:
// float                          TheAge                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::SetBabyAge(float TheAge)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetBabyAge");

	APrimalDinoCharacter_SetBabyAge_Params params;
	params.TheAge = TheAge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.SetAnimWeightsForAttackAtIndex
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<float>                  newWeights                     (ConstParm, Parm, ZeroConstructor)

void APrimalDinoCharacter::SetAnimWeightsForAttackAtIndex(int AttackIndex, TArray<float> newWeights)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.SetAnimWeightsForAttackAtIndex");

	APrimalDinoCharacter_SetAnimWeightsForAttackAtIndex_Params params;
	params.AttackIndex = AttackIndex;
	params.newWeights = newWeights;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerUpdateAttackTargets
// ()
// Parameters:
// class AActor*                  AttackTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AttackLocation                 (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ServerUpdateAttackTargets(class AActor* AttackTarget, const struct FVector& AttackLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerUpdateAttackTargets");

	APrimalDinoCharacter_ServerUpdateAttackTargets_Params params;
	params.AttackTarget = AttackTarget;
	params.AttackLocation = AttackLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerToggleCharging
// ()

void APrimalDinoCharacter::ServerToggleCharging()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerToggleCharging");

	APrimalDinoCharacter_ServerToggleCharging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerToClientsPlayAttackAnimation
// ()
// Parameters:
// int8_t                         AttackinfoIndex                (Parm, ZeroConstructor, IsPlainOldData)
// int8_t                         animationIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   StartSectionName               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseOnServer         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  MyTarget                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ServerToClientsPlayAttackAnimation(int8_t AttackinfoIndex, int8_t animationIndex, float InPlayRate, const struct FName& StartSectionName, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer, class AActor* MyTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerToClientsPlayAttackAnimation");

	APrimalDinoCharacter_ServerToClientsPlayAttackAnimation_Params params;
	params.AttackinfoIndex = AttackinfoIndex;
	params.animationIndex = animationIndex;
	params.InPlayRate = InPlayRate;
	params.StartSectionName = StartSectionName;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.bForceTickPoseOnServer = bForceTickPoseOnServer;
	params.MyTarget = MyTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerTamedTick
// ()

void APrimalDinoCharacter::ServerTamedTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerTamedTick");

	APrimalDinoCharacter_ServerTamedTick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerSleepingTick
// ()

void APrimalDinoCharacter::ServerSleepingTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerSleepingTick");

	APrimalDinoCharacter_ServerSleepingTick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerSetRiderMountedWeaponRotation
// ()
// Parameters:
// struct FRotator                InVal                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ServerSetRiderMountedWeaponRotation(const struct FRotator& InVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerSetRiderMountedWeaponRotation");

	APrimalDinoCharacter_ServerSetRiderMountedWeaponRotation_Params params;
	params.InVal = InVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerRequestWaterSurfaceJump
// ()

void APrimalDinoCharacter::ServerRequestWaterSurfaceJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerRequestWaterSurfaceJump");

	APrimalDinoCharacter_ServerRequestWaterSurfaceJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerRequestToggleFlight
// ()

void APrimalDinoCharacter::ServerRequestToggleFlight()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerRequestToggleFlight");

	APrimalDinoCharacter_ServerRequestToggleFlight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerRequestBraking
// ()
// Parameters:
// bool                           bWantsToBrake                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ServerRequestBraking(bool bWantsToBrake)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerRequestBraking");

	APrimalDinoCharacter_ServerRequestBraking_Params params;
	params.bWantsToBrake = bWantsToBrake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerRequestAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ServerRequestAttack(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerRequestAttack");

	APrimalDinoCharacter_ServerRequestAttack_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerInterruptLanding
// ()

void APrimalDinoCharacter::ServerInterruptLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerInterruptLanding");

	APrimalDinoCharacter_ServerInterruptLanding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerFinishedLanding
// ()

void APrimalDinoCharacter::ServerFinishedLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerFinishedLanding");

	APrimalDinoCharacter_ServerFinishedLanding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ServerClearRider
// ()
// Parameters:
// int                            OverrideUnboardDirection       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ServerClearRider(int OverrideUnboardDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ServerClearRider");

	APrimalDinoCharacter_ServerClearRider_Params params;
	params.OverrideUnboardDirection = OverrideUnboardDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.RidingTick
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::RidingTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.RidingTick");

	APrimalDinoCharacter_RidingTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.RemovePassenger
// ()
// Parameters:
// class APrimalCharacter*        ACharacter                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromCharacter                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromPlayerController          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::RemovePassenger(class APrimalCharacter* ACharacter, bool bFromCharacter, bool bFromPlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.RemovePassenger");

	APrimalDinoCharacter_RemovePassenger_Params params;
	params.ACharacter = ACharacter;
	params.bFromCharacter = bFromCharacter;
	params.bFromPlayerController = bFromPlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.RemoveFromMeleeSwingHurtList
// ()
// Parameters:
// class AActor*                  AnActor                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::RemoveFromMeleeSwingHurtList(class AActor* AnActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.RemoveFromMeleeSwingHurtList");

	APrimalDinoCharacter_RemoveFromMeleeSwingHurtList_Params params;
	params.AnActor = AnActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.RemoveDinoReferenceFromLatchingStructure
// ()

void APrimalDinoCharacter::RemoveDinoReferenceFromLatchingStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.RemoveDinoReferenceFromLatchingStructure");

	APrimalDinoCharacter_RemoveDinoReferenceFromLatchingStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.RefreshColorization
// ()
// Parameters:
// bool                           bForceRefresh                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::RefreshColorization(bool bForceRefresh)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.RefreshColorization");

	APrimalDinoCharacter_RefreshColorization_Params params;
	params.bForceRefresh = bForceRefresh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.RefreshBabyScaling
// ()

void APrimalDinoCharacter::RefreshBabyScaling()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.RefreshBabyScaling");

	APrimalDinoCharacter_RefreshBabyScaling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ReassertColorization
// ()

void APrimalDinoCharacter::ReassertColorization()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ReassertColorization");

	APrimalDinoCharacter_ReassertColorization_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.PlayWeightedAttackAnimation
// ()

void APrimalDinoCharacter::PlayWeightedAttackAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.PlayWeightedAttackAnimation");

	APrimalDinoCharacter_PlayWeightedAttackAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.PlayHardEndChargingShake
// ()

void APrimalDinoCharacter::PlayHardEndChargingShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.PlayHardEndChargingShake");

	APrimalDinoCharacter_PlayHardEndChargingShake_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.PlayedAnimationHasAttack
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::PlayedAnimationHasAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.PlayedAnimationHasAttack");

	APrimalDinoCharacter_PlayedAnimationHasAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.OverrideRandomWanderLocation
// ()
// Parameters:
// struct FVector                 originalDestination            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 inVec                          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::OverrideRandomWanderLocation(const struct FVector& originalDestination, struct FVector* inVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OverrideRandomWanderLocation");

	APrimalDinoCharacter_OverrideRandomWanderLocation_Params params;
	params.originalDestination = originalDestination;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (inVec != nullptr)
		*inVec = params.inVec;
}


// Function ShooterGame.PrimalDinoCharacter.OverrideFinalWanderLocation
// ()
// Parameters:
// struct FVector                 outVec                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::OverrideFinalWanderLocation(struct FVector* outVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OverrideFinalWanderLocation");

	APrimalDinoCharacter_OverrideFinalWanderLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outVec != nullptr)
		*outVec = params.outVec;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.OnUpdateMountedDinoMeshHiding
// ()
// Parameters:
// bool                           bshouldBeVisible               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::OnUpdateMountedDinoMeshHiding(bool bshouldBeVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnUpdateMountedDinoMeshHiding");

	APrimalDinoCharacter_OnUpdateMountedDinoMeshHiding_Params params;
	params.bshouldBeVisible = bshouldBeVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.OnRep_Saddle
// ()

void APrimalDinoCharacter::OnRep_Saddle()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnRep_Saddle");

	APrimalDinoCharacter_OnRep_Saddle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.OnRep_Rider
// ()

void APrimalDinoCharacter::OnRep_Rider()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnRep_Rider");

	APrimalDinoCharacter_OnRep_Rider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.OnRep_PassengerPerSeat
// ()

void APrimalDinoCharacter::OnRep_PassengerPerSeat()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnRep_PassengerPerSeat");

	APrimalDinoCharacter_OnRep_PassengerPerSeat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.OnRep_CarriedCharacter
// ()

void APrimalDinoCharacter::OnRep_CarriedCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnRep_CarriedCharacter");

	APrimalDinoCharacter_OnRep_CarriedCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.OnRep_bIsFlying
// ()

void APrimalDinoCharacter::OnRep_bIsFlying()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnRep_bIsFlying");

	APrimalDinoCharacter_OnRep_bIsFlying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.OnRep_bIsCharging
// ()

void APrimalDinoCharacter::OnRep_bIsCharging()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnRep_bIsCharging");

	APrimalDinoCharacter_OnRep_bIsCharging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.OnRep_bBonesHidden
// ()

void APrimalDinoCharacter::OnRep_bBonesHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.OnRep_bBonesHidden");

	APrimalDinoCharacter_OnRep_bBonesHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.NetUpdateDinoOwnerData
// ()
// Parameters:
// class FString                  NewOwningPlayerName            (Parm, ZeroConstructor)
// int                            NewOwningPlayerID              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::NetUpdateDinoOwnerData(const class FString& NewOwningPlayerName, int NewOwningPlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.NetUpdateDinoOwnerData");

	APrimalDinoCharacter_NetUpdateDinoOwnerData_Params params;
	params.NewOwningPlayerName = NewOwningPlayerName;
	params.NewOwningPlayerID = NewOwningPlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.NetUpdateDinoNameStrings
// ()
// Parameters:
// class FString                  NewTamerString                 (Parm, ZeroConstructor)
// class FString                  NewTamedName                   (Parm, ZeroConstructor)

void APrimalDinoCharacter::NetUpdateDinoNameStrings(const class FString& NewTamerString, const class FString& NewTamedName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.NetUpdateDinoNameStrings");

	APrimalDinoCharacter_NetUpdateDinoNameStrings_Params params;
	params.NewTamerString = NewTamerString;
	params.NewTamedName = NewTamedName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.MulticastUpdateAllColorSets
// ()
// Parameters:
// int                            Color0                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Color1                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Color2                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Color3                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Color4                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Color5                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::MulticastUpdateAllColorSets(int Color0, int Color1, int Color2, int Color3, int Color4, int Color5)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.MulticastUpdateAllColorSets");

	APrimalDinoCharacter_MulticastUpdateAllColorSets_Params params;
	params.Color0 = Color0;
	params.Color1 = Color1;
	params.Color2 = Color2;
	params.Color3 = Color3;
	params.Color4 = Color4;
	params.Color5 = Color5;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.LowerDinoBP
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::LowerDinoBP(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.LowerDinoBP");

	APrimalDinoCharacter_LowerDinoBP_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.KeepFlightTimer
// ()

void APrimalDinoCharacter::KeepFlightTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.KeepFlightTimer");

	APrimalDinoCharacter_KeepFlightTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.IsPassengerSeatAvailable
// ()
// Parameters:
// int                            PassengerSeatIndex             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsPassengerSeatAvailable(int PassengerSeatIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsPassengerSeatAvailable");

	APrimalDinoCharacter_IsPassengerSeatAvailable_Params params;
	params.PassengerSeatIndex = PassengerSeatIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.IsInTekShield
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsInTekShield()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsInTekShield");

	APrimalDinoCharacter_IsInTekShield_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.IsImprintPlayer
// ()
// Parameters:
// class AShooterCharacter*       forChar                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsImprintPlayer(class AShooterCharacter* forChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsImprintPlayer");

	APrimalDinoCharacter_IsImprintPlayer_Params params;
	params.forChar = forChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.IsFleeing
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsFleeing()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsFleeing");

	APrimalDinoCharacter_IsFleeing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.IsCurrentlyPlayingAttackAnimation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsCurrentlyPlayingAttackAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsCurrentlyPlayingAttackAnimation");

	APrimalDinoCharacter_IsCurrentlyPlayingAttackAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.IsCurrentAttackStopsMovement
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsCurrentAttackStopsMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsCurrentAttackStopsMovement");

	APrimalDinoCharacter_IsCurrentAttackStopsMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.IsAttacking
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsAttacking()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsAttacking");

	APrimalDinoCharacter_IsAttacking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.IsActiveEventDino
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::IsActiveEventDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.IsActiveEventDino");

	APrimalDinoCharacter_IsActiveEventDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.InterruptLatching
// ()

void APrimalDinoCharacter::InterruptLatching()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.InterruptLatching");

	APrimalDinoCharacter_InterruptLatching_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.InterruptLanding
// ()

void APrimalDinoCharacter::InterruptLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.InterruptLanding");

	APrimalDinoCharacter_InterruptLanding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ImprintOnPlayerTarget
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreMaxTameLimit            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ImprintOnPlayerTarget(class AShooterPlayerController* ForPC, bool bIgnoreMaxTameLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ImprintOnPlayerTarget");

	APrimalDinoCharacter_ImprintOnPlayerTarget_Params params;
	params.ForPC = ForPC;
	params.bIgnoreMaxTameLimit = bIgnoreMaxTameLimit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.HasTarget
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::HasTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.HasTarget");

	APrimalDinoCharacter_HasTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.HasBuffPreventingFlight
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::HasBuffPreventingFlight()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.HasBuffPreventingFlight");

	APrimalDinoCharacter_HasBuffPreventingFlight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.HasBuffPreventingClearRiderOnDinoImmobilized
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::HasBuffPreventingClearRiderOnDinoImmobilized()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.HasBuffPreventingClearRiderOnDinoImmobilized");

	APrimalDinoCharacter_HasBuffPreventingClearRiderOnDinoImmobilized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.HandleMountedDinoAction
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::HandleMountedDinoAction(class AShooterPlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.HandleMountedDinoAction");

	APrimalDinoCharacter_HandleMountedDinoAction_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.GiveSaddleFromString
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// float                          Quality                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinRandomQuality               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoEquip                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* APrimalDinoCharacter::GiveSaddleFromString(const class FString& blueprintPath, float Quality, float MinRandomQuality, bool bAutoEquip)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GiveSaddleFromString");

	APrimalDinoCharacter_GiveSaddleFromString_Params params;
	params.blueprintPath = blueprintPath;
	params.Quality = Quality;
	params.MinRandomQuality = MinRandomQuality;
	params.bAutoEquip = bAutoEquip;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GiveSaddle
// ()
// Parameters:
// class UClass*                  SaddleType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Quality                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinRandomQuality               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAutoEquip                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalItem* APrimalDinoCharacter::GiveSaddle(class UClass* SaddleType, float Quality, float MinRandomQuality, bool bAutoEquip)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GiveSaddle");

	APrimalDinoCharacter_GiveSaddle_Params params;
	params.SaddleType = SaddleType;
	params.Quality = Quality;
	params.MinRandomQuality = MinRandomQuality;
	params.bAutoEquip = bAutoEquip;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GiveDeathDossier
// ()

void APrimalDinoCharacter::GiveDeathDossier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GiveDeathDossier");

	APrimalDinoCharacter_GiveDeathDossier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.GetWiegthedAttack
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          attackRangeOffset              (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char APrimalDinoCharacter::GetWiegthedAttack(float Distance, float attackRangeOffset, class AActor* OtherTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetWiegthedAttack");

	APrimalDinoCharacter_GetWiegthedAttack_Params params;
	params.Distance = Distance;
	params.attackRangeOffset = attackRangeOffset;
	params.OtherTarget = OtherTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetTamedLandTarget
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APrimalDinoCharacter::GetTamedLandTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetTamedLandTarget");

	APrimalDinoCharacter_GetTamedLandTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetTamedFollowTarget
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APrimalDinoCharacter::GetTamedFollowTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetTamedFollowTarget");

	APrimalDinoCharacter_GetTamedFollowTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetStateOfPlayedAnimationAttack
// ()
// Parameters:
// class UPrimalAIState*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalAIState* APrimalDinoCharacter::GetStateOfPlayedAnimationAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetStateOfPlayedAnimationAttack");

	APrimalDinoCharacter_GetStateOfPlayedAnimationAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetSocketLocationTemp
// ()
// Parameters:
// struct FName                   SocketName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::GetSocketLocationTemp(const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetSocketLocationTemp");

	APrimalDinoCharacter_GetSocketLocationTemp_Params params;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetSeatIndexForPassenger
// ()
// Parameters:
// class APrimalCharacter*        PassengerChar                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoCharacter::GetSeatIndexForPassenger(class APrimalCharacter* PassengerChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetSeatIndexForPassenger");

	APrimalDinoCharacter_GetSeatIndexForPassenger_Params params;
	params.PassengerChar = PassengerChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetRootYawSpeed
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::GetRootYawSpeed(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetRootYawSpeed");

	APrimalDinoCharacter_GetRootYawSpeed_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetPassengersAndSeatIndexes
// ()
// Parameters:
// TArray<class APrimalCharacter*> Passengers                     (Parm, OutParm, ZeroConstructor)
// TArray<int>                    Indexes                        (Parm, OutParm, ZeroConstructor)

void APrimalDinoCharacter::GetPassengersAndSeatIndexes(TArray<class APrimalCharacter*>* Passengers, TArray<int>* Indexes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetPassengersAndSeatIndexes");

	APrimalDinoCharacter_GetPassengersAndSeatIndexes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Passengers != nullptr)
		*Passengers = params.Passengers;
	if (Indexes != nullptr)
		*Indexes = params.Indexes;
}


// Function ShooterGame.PrimalDinoCharacter.GetPassengers
// ()
// Parameters:
// TArray<class APrimalCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APrimalCharacter*> APrimalDinoCharacter::GetPassengers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetPassengers");

	APrimalDinoCharacter_GetPassengers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetPassengerPerSeat
// ()
// Parameters:
// int                            SeatIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalCharacter* APrimalDinoCharacter::GetPassengerPerSeat(int SeatIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetPassengerPerSeat");

	APrimalDinoCharacter_GetPassengerPerSeat_Params params;
	params.SeatIndex = SeatIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetNumPassengerSeats
// ()
// Parameters:
// bool                           bOnlyManualPassengerSeats      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoCharacter::GetNumPassengerSeats(bool bOnlyManualPassengerSeats)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetNumPassengerSeats");

	APrimalDinoCharacter_GetNumPassengerSeats_Params params;
	params.bOnlyManualPassengerSeats = bOnlyManualPassengerSeats;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetNumAvailablePassengerSeats
// ()
// Parameters:
// bool                           bOnlyManualPassengerSeats      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoCharacter::GetNumAvailablePassengerSeats(bool bOnlyManualPassengerSeats)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetNumAvailablePassengerSeats");

	APrimalDinoCharacter_GetNumAvailablePassengerSeats_Params params;
	params.bOnlyManualPassengerSeats = bOnlyManualPassengerSeats;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetLandingLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::GetLandingLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetLandingLocation");

	APrimalDinoCharacter_GetLandingLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetGestationTimeRemaining
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::GetGestationTimeRemaining()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetGestationTimeRemaining");

	APrimalDinoCharacter_GetGestationTimeRemaining_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetForceTickPose
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::GetForceTickPose()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetForceTickPose");

	APrimalDinoCharacter_GetForceTickPose_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetFoodItemEffectivenessMultipliersIndex
// ()
// Parameters:
// class UPrimalItem*             foodItem                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoCharacter::GetFoodItemEffectivenessMultipliersIndex(class UPrimalItem* foodItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetFoodItemEffectivenessMultipliersIndex");

	APrimalDinoCharacter_GetFoodItemEffectivenessMultipliersIndex_Params params;
	params.foodItem = foodItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetFirstAffinityFoodItemClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* APrimalDinoCharacter::GetFirstAffinityFoodItemClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetFirstAffinityFoodItemClass");

	APrimalDinoCharacter_GetFirstAffinityFoodItemClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoVelocity
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::GetDinoVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoVelocity");

	APrimalDinoCharacter_GetDinoVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoTameSound
// ()
// Parameters:
// class USoundBase*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USoundBase* APrimalDinoCharacter::GetDinoTameSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoTameSound");

	APrimalDinoCharacter_GetDinoTameSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoPlatformCollisionIgnoreActors
// ()
// Parameters:
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> APrimalDinoCharacter::GetDinoPlatformCollisionIgnoreActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoPlatformCollisionIgnoreActors");

	APrimalDinoCharacter_GetDinoPlatformCollisionIgnoreActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoIDsAsStrings
// ()
// Parameters:
// class FString                  OutDinoID1                     (Parm, OutParm, ZeroConstructor)
// class FString                  OutDinoID2                     (Parm, OutParm, ZeroConstructor)

void APrimalDinoCharacter::GetDinoIDsAsStrings(class FString* OutDinoID1, class FString* OutDinoID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoIDsAsStrings");

	APrimalDinoCharacter_GetDinoIDsAsStrings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDinoID1 != nullptr)
		*OutDinoID1 = params.OutDinoID1;
	if (OutDinoID2 != nullptr)
		*OutDinoID2 = params.OutDinoID2;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoIDs
// ()
// Parameters:
// int                            OutDinoID1                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            OutDinoID2                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::GetDinoIDs(int* OutDinoID1, int* OutDinoID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoIDs");

	APrimalDinoCharacter_GetDinoIDs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDinoID1 != nullptr)
		*OutDinoID1 = params.OutDinoID1;
	if (OutDinoID2 != nullptr)
		*OutDinoID2 = params.OutDinoID2;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoEntryIcon
// ()
// Parameters:
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture* APrimalDinoCharacter::GetDinoEntryIcon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoEntryIcon");

	APrimalDinoCharacter_GetDinoEntryIcon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoDescriptiveName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalDinoCharacter::GetDinoDescriptiveName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoDescriptiveName");

	APrimalDinoCharacter_GetDinoDescriptiveName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoDeathTime
// ()
// Parameters:
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double APrimalDinoCharacter::GetDinoDeathTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoDeathTime");

	APrimalDinoCharacter_GetDinoDeathTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoData
// ()
// Parameters:
// struct FARKDinoData            OutDinoData                    (Parm, OutParm)

void APrimalDinoCharacter::GetDinoData(struct FARKDinoData* OutDinoData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoData");

	APrimalDinoCharacter_GetDinoData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDinoData != nullptr)
		*OutDinoData = params.OutDinoData;
}


// Function ShooterGame.PrimalDinoCharacter.GetDinoColor
// ()
// Parameters:
// int                            ColorRegionIndex               (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor APrimalDinoCharacter::GetDinoColor(int ColorRegionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetDinoColor");

	APrimalDinoCharacter_GetDinoColor_Params params;
	params.ColorRegionIndex = ColorRegionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetCurrentAttackInfo
// ()
// Parameters:
// int                            AttackIndex                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FDinoAttackInfo         AttackInfo                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::GetCurrentAttackInfo(int* AttackIndex, struct FDinoAttackInfo* AttackInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetCurrentAttackInfo");

	APrimalDinoCharacter_GetCurrentAttackInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AttackIndex != nullptr)
		*AttackIndex = params.AttackIndex;
	if (AttackInfo != nullptr)
		*AttackInfo = params.AttackInfo;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetCurrentAimOffsetsRotation
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalDinoCharacter::GetCurrentAimOffsetsRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetCurrentAimOffsetsRotation");

	APrimalDinoCharacter_GetCurrentAimOffsetsRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetColorizationData
// ()
// Parameters:
// TArray<unsigned char>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<unsigned char> APrimalDinoCharacter::GetColorizationData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetColorizationData");

	APrimalDinoCharacter_GetColorizationData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetColorForColorizationRegion
// ()
// Parameters:
// int                            Region                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ColorIndexOverride             (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor APrimalDinoCharacter::GetColorForColorizationRegion(int Region, int ColorIndexOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetColorForColorizationRegion");

	APrimalDinoCharacter_GetColorForColorizationRegion_Params params;
	params.Region = Region;
	params.ColorIndexOverride = ColorIndexOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetAimOffsetsTransform
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              RootRotOffsetTransform         (Parm, OutParm, IsPlainOldData)
// float                          TheRootYawSpeed                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxYawAimClamp                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RootLocOffset                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalDinoCharacter::GetAimOffsetsTransform(float DeltaTime, float MaxYawAimClamp, struct FTransform* RootRotOffsetTransform, float* TheRootYawSpeed, struct FVector* RootLocOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetAimOffsetsTransform");

	APrimalDinoCharacter_GetAimOffsetsTransform_Params params;
	params.DeltaTime = DeltaTime;
	params.MaxYawAimClamp = MaxYawAimClamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RootRotOffsetTransform != nullptr)
		*RootRotOffsetTransform = params.RootRotOffsetTransform;
	if (TheRootYawSpeed != nullptr)
		*TheRootYawSpeed = params.TheRootYawSpeed;
	if (RootLocOffset != nullptr)
		*RootLocOffset = params.RootLocOffset;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetAIFollowStoppingDistanceOffset
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::GetAIFollowStoppingDistanceOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetAIFollowStoppingDistanceOffset");

	APrimalDinoCharacter_GetAIFollowStoppingDistanceOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetAIFollowStoppingDistanceMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::GetAIFollowStoppingDistanceMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetAIFollowStoppingDistanceMultiplier");

	APrimalDinoCharacter_GetAIFollowStoppingDistanceMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetAffinityIncreaseForFoodItem
// ()
// Parameters:
// class UPrimalItem*             foodItem                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::GetAffinityIncreaseForFoodItem(class UPrimalItem* foodItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetAffinityIncreaseForFoodItem");

	APrimalDinoCharacter_GetAffinityIncreaseForFoodItem_Params params;
	params.foodItem = foodItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetActorCenterTraceLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::GetActorCenterTraceLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetActorCenterTraceLocation");

	APrimalDinoCharacter_GetActorCenterTraceLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.GetActiveState
// ()
// Parameters:
// class UPrimalAIState*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalAIState* APrimalDinoCharacter::GetActiveState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.GetActiveState");

	APrimalDinoCharacter_GetActiveState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.ForceUpdateColorSets
// ()
// Parameters:
// int                            ColorRegion                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ColorSet                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ForceUpdateColorSets(int ColorRegion, int ColorSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ForceUpdateColorSets");

	APrimalDinoCharacter_ForceUpdateColorSets_Params params;
	params.ColorRegion = ColorRegion;
	params.ColorSet = ColorSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ForceClearRider
// ()

void APrimalDinoCharacter::ForceClearRider()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ForceClearRider");

	APrimalDinoCharacter_ForceClearRider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.FireProjectile
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)
// bool                           bScaleProjDamageByDinoDamage   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::FireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.FireProjectile");

	APrimalDinoCharacter_FireProjectile_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;
	params.bScaleProjDamageByDinoDamage = bScaleProjDamageByDinoDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.FireMultipleProjectilesEx
// ()
// Parameters:
// class UClass*                  ProjectileClass                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         Locations                      (ConstParm, Parm, ZeroConstructor)
// TArray<struct FVector>         Directions                     (ConstParm, Parm, ZeroConstructor)
// bool                           bAddPawnVelocityToProjectile   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScaleProjDamageByDinoDamage   (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         HomingTarget                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 HomingTargetOffset             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::FireMultipleProjectilesEx(class UClass* ProjectileClass, TArray<struct FVector> Locations, TArray<struct FVector> Directions, bool bAddPawnVelocityToProjectile, bool bScaleProjDamageByDinoDamage, class USceneComponent* HomingTarget, const struct FVector& HomingTargetOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.FireMultipleProjectilesEx");

	APrimalDinoCharacter_FireMultipleProjectilesEx_Params params;
	params.ProjectileClass = ProjectileClass;
	params.Locations = Locations;
	params.Directions = Directions;
	params.bAddPawnVelocityToProjectile = bAddPawnVelocityToProjectile;
	params.bScaleProjDamageByDinoDamage = bScaleProjDamageByDinoDamage;
	params.HomingTarget = HomingTarget;
	params.HomingTargetOffset = HomingTargetOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.FireMultipleProjectiles
// ()
// Parameters:
// TArray<struct FVector>         Locations                      (ConstParm, Parm, ZeroConstructor)
// TArray<struct FVector>         Directions                     (ConstParm, Parm, ZeroConstructor)
// bool                           bScaleProjectileDamageByDinoDamage (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::FireMultipleProjectiles(TArray<struct FVector> Locations, TArray<struct FVector> Directions, bool bScaleProjectileDamageByDinoDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.FireMultipleProjectiles");

	APrimalDinoCharacter_FireMultipleProjectiles_Params params;
	params.Locations = Locations;
	params.Directions = Directions;
	params.bScaleProjectileDamageByDinoDamage = bScaleProjectileDamageByDinoDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.FedWakingTameDino
// ()

void APrimalDinoCharacter::FedWakingTameDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.FedWakingTameDino");

	APrimalDinoCharacter_FedWakingTameDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.EndCharging
// ()
// Parameters:
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::EndCharging(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.EndCharging");

	APrimalDinoCharacter_EndCharging_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ElevateDinoBP
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ElevateDinoBP(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ElevateDinoBP");

	APrimalDinoCharacter_ElevateDinoBP_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.DoOverrideMountedAirControl
// ()
// Parameters:
// float                          AirControlIn                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::DoOverrideMountedAirControl(float AirControlIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.DoOverrideMountedAirControl");

	APrimalDinoCharacter_DoOverrideMountedAirControl_Params params;
	params.AirControlIn = AirControlIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.DoNeuter
// ()

void APrimalDinoCharacter::DoNeuter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.DoNeuter");

	APrimalDinoCharacter_DoNeuter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.DoDeathHarvestingFadeOut
// ()

void APrimalDinoCharacter::DoDeathHarvestingFadeOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.DoDeathHarvestingFadeOut");

	APrimalDinoCharacter_DoDeathHarvestingFadeOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.DoAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetCurrentAttack              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInterruptCurrentAttack        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::DoAttack(int AttackIndex, bool bSetCurrentAttack, bool bInterruptCurrentAttack)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.DoAttack");

	APrimalDinoCharacter_DoAttack_Params params;
	params.AttackIndex = AttackIndex;
	params.bSetCurrentAttack = bSetCurrentAttack;
	params.bInterruptCurrentAttack = bInterruptCurrentAttack;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.DinoShoulderMountedLaunch
// ()
// Parameters:
// struct FVector                 launchDir                      (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       throwingCharacter              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::DinoShoulderMountedLaunch(const struct FVector& launchDir, class AShooterCharacter* throwingCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.DinoShoulderMountedLaunch");

	APrimalDinoCharacter_DinoShoulderMountedLaunch_Params params;
	params.launchDir = launchDir;
	params.throwingCharacter = throwingCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.DinoFireProjectileEx
// ()
// Parameters:
// class UClass*                  ProjectileClass                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)
// bool                           bScaleProjDamageByDinoDamage   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddDinoVelocityToProjectile   (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverrideInitialSpeed           (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverrideMaxSpeed               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ExtraDirectDamageMultiplier    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ExtraExplosionDamageMultiplier (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::DinoFireProjectileEx(class UClass* ProjectileClass, const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bScaleProjDamageByDinoDamage, bool bAddDinoVelocityToProjectile, float OverrideInitialSpeed, float OverrideMaxSpeed, float ExtraDirectDamageMultiplier, float ExtraExplosionDamageMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.DinoFireProjectileEx");

	APrimalDinoCharacter_DinoFireProjectileEx_Params params;
	params.ProjectileClass = ProjectileClass;
	params.Origin = Origin;
	params.ShootDir = ShootDir;
	params.bScaleProjDamageByDinoDamage = bScaleProjDamageByDinoDamage;
	params.bAddDinoVelocityToProjectile = bAddDinoVelocityToProjectile;
	params.OverrideInitialSpeed = OverrideInitialSpeed;
	params.OverrideMaxSpeed = OverrideMaxSpeed;
	params.ExtraDirectDamageMultiplier = ExtraDirectDamageMultiplier;
	params.ExtraExplosionDamageMultiplier = ExtraExplosionDamageMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.Die
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             Killer                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::Die(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.Die");

	APrimalDinoCharacter_Die_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.Killer = Killer;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.DestroyController
// ()

void APrimalDinoCharacter::DestroyController()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.DestroyController");

	APrimalDinoCharacter_DestroyController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.CycleAttackWeightsForAttackAtIndex
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::CycleAttackWeightsForAttackAtIndex(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CycleAttackWeightsForAttackAtIndex");

	APrimalDinoCharacter_CycleAttackWeightsForAttackAtIndex_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.CreateCloneFertilizedEgg
// ()
// Parameters:
// struct FVector                 AtLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AtRot                          (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DroppedItemTemplateOverride    (Parm, ZeroConstructor, IsPlainOldData)
// class ADroppedItem*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ADroppedItem* APrimalDinoCharacter::CreateCloneFertilizedEgg(const struct FVector& AtLoc, const struct FRotator& AtRot, class UClass* DroppedItemTemplateOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CreateCloneFertilizedEgg");

	APrimalDinoCharacter_CreateCloneFertilizedEgg_Params params;
	params.AtLoc = AtLoc;
	params.AtRot = AtRot;
	params.DroppedItemTemplateOverride = DroppedItemTemplateOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.ClientStartLanding
// ()
// Parameters:
// struct FVector                 landingLoc                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ClientStartLanding(const struct FVector& landingLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClientStartLanding");

	APrimalDinoCharacter_ClientStartLanding_Params params;
	params.landingLoc = landingLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClientShouldNotifyLanded
// ()

void APrimalDinoCharacter::ClientShouldNotifyLanded()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClientShouldNotifyLanded");

	APrimalDinoCharacter_ClientShouldNotifyLanded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClientInterruptLanding
// ()

void APrimalDinoCharacter::ClientInterruptLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClientInterruptLanding");

	APrimalDinoCharacter_ClientInterruptLanding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClearTamedLandTarget
// ()

void APrimalDinoCharacter::ClearTamedLandTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClearTamedLandTarget");

	APrimalDinoCharacter_ClearTamedLandTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClearRider
// ()
// Parameters:
// bool                           bFromRider                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCancelForceLand               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           SpawnDinoDefaultController     (Parm, ZeroConstructor, IsPlainOldData)
// int                            OverrideUnboardDirection       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceEvenIfBuffPreventsClear  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ClearRider(bool bFromRider, bool bCancelForceLand, bool SpawnDinoDefaultController, int OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClearRider");

	APrimalDinoCharacter_ClearRider_Params params;
	params.bFromRider = bFromRider;
	params.bCancelForceLand = bCancelForceLand;
	params.SpawnDinoDefaultController = SpawnDinoDefaultController;
	params.OverrideUnboardDirection = OverrideUnboardDirection;
	params.bForceEvenIfBuffPreventsClear = bForceEvenIfBuffPreventsClear;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClearPassengers
// ()

void APrimalDinoCharacter::ClearPassengers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClearPassengers");

	APrimalDinoCharacter_ClearPassengers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClearMountCharacter
// ()
// Parameters:
// bool                           bFromMountCharacter            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ClearMountCharacter(bool bFromMountCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClearMountCharacter");

	APrimalDinoCharacter_ClearMountCharacter_Params params;
	params.bFromMountCharacter = bFromMountCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClearCharacterAIMovement
// ()

void APrimalDinoCharacter::ClearCharacterAIMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClearCharacterAIMovement");

	APrimalDinoCharacter_ClearCharacterAIMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.ClearCarriedCharacter
// ()
// Parameters:
// bool                           fromCarriedCharacter           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCancelAnyCarryBuffs           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::ClearCarriedCharacter(bool fromCarriedCharacter, bool bCancelAnyCarryBuffs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ClearCarriedCharacter");

	APrimalDinoCharacter_ClearCarriedCharacter_Params params;
	params.fromCarriedCharacter = fromCarriedCharacter;
	params.bCancelAnyCarryBuffs = bCancelAnyCarryBuffs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.CheckForTamedFoodConsumption
// ()
// Parameters:
// int                            Steps                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::CheckForTamedFoodConsumption(int Steps)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CheckForTamedFoodConsumption");

	APrimalDinoCharacter_CheckForTamedFoodConsumption_Params params;
	params.Steps = Steps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.CarryCharacter
// ()
// Parameters:
// class APrimalCharacter*        aRider                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           byPassCanCarryCheck            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CarryCharacter(class APrimalCharacter* aRider, bool byPassCanCarryCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CarryCharacter");

	APrimalDinoCharacter_CarryCharacter_Params params;
	params.aRider = aRider;
	params.byPassCanCarryCheck = byPassCanCarryCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CanTakePassenger
// ()
// Parameters:
// class APrimalCharacter*        ACharacter                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            PassengerSeatIndex             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForcePassenger                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowFlyersAndWaterDinos      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CanTakePassenger(class APrimalCharacter* ACharacter, int PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CanTakePassenger");

	APrimalDinoCharacter_CanTakePassenger_Params params;
	params.ACharacter = ACharacter;
	params.PassengerSeatIndex = PassengerSeatIndex;
	params.bForcePassenger = bForcePassenger;
	params.bAllowFlyersAndWaterDinos = bAllowFlyersAndWaterDinos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CanOrder
// ()
// Parameters:
// class APrimalCharacter*        FromCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBuildingStructures            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CanOrder(class APrimalCharacter* FromCharacter, bool bBuildingStructures)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CanOrder");

	APrimalDinoCharacter_CanOrder_Params params;
	params.FromCharacter = FromCharacter;
	params.bBuildingStructures = bBuildingStructures;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CanFly
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CanFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CanFly");

	APrimalDinoCharacter_CanFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CanCryo
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CanCryo(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CanCryo");

	APrimalDinoCharacter_CanCryo_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CanClearRider
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CanClearRider()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CanClearRider");

	APrimalDinoCharacter_CanClearRider_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CancelCurrentAttack
// ()
// Parameters:
// bool                           bStopCurrentAttackAnim         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AttackAnimBlendOutTime         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CancelCurrentAttack(bool bStopCurrentAttackAnim, float AttackAnimBlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CancelCurrentAttack");

	APrimalDinoCharacter_CancelCurrentAttack_Params params;
	params.bStopCurrentAttackAnim = bStopCurrentAttackAnim;
	params.AttackAnimBlendOutTime = AttackAnimBlendOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CanCarryCharacter
// ()
// Parameters:
// class APrimalCharacter*        CanCarryPawn                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CanCarryCharacter(class APrimalCharacter* CanCarryPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CanCarryCharacter");

	APrimalDinoCharacter_CanCarryCharacter_Params params;
	params.CanCarryPawn = CanCarryPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.CanAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::CanAttack(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.CanAttack");

	APrimalDinoCharacter_CanAttack_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BSetupDinoTameable
// ()

void APrimalDinoCharacter::BSetupDinoTameable()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BSetupDinoTameable");

	APrimalDinoCharacter_BSetupDinoTameable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BrakeDinoBP
// ()
// Parameters:
// float                          val                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BrakeDinoBP(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BrakeDinoBP");

	APrimalDinoCharacter_BrakeDinoBP_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPUntamedConsumeFoodItem
// ()
// Parameters:
// class UPrimalItem*             foodItem                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPUntamedConsumeFoodItem(class UPrimalItem* foodItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPUntamedConsumeFoodItem");

	APrimalDinoCharacter_BPUntamedConsumeFoodItem_Params params;
	params.foodItem = foodItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPUnstasisConsumeFood
// ()
// Parameters:
// float                          FoodNeeded                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BPUnstasisConsumeFood(float FoodNeeded)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPUnstasisConsumeFood");

	APrimalDinoCharacter_BPUnstasisConsumeFood_Params params;
	params.FoodNeeded = FoodNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPUnstasis
// ()

void APrimalDinoCharacter::BPUnstasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPUnstasis");

	APrimalDinoCharacter_BPUnstasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPUnsetupDinoTameable
// ()

void APrimalDinoCharacter::BPUnsetupDinoTameable()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPUnsetupDinoTameable");

	APrimalDinoCharacter_BPUnsetupDinoTameable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPTamedConsumeFoodItem
// ()
// Parameters:
// class UPrimalItem*             foodItem                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPTamedConsumeFoodItem(class UPrimalItem* foodItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPTamedConsumeFoodItem");

	APrimalDinoCharacter_BPTamedConsumeFoodItem_Params params;
	params.foodItem = foodItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPStaticCreateBabyDinoNoAncestors
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  EggDinoClassToSpawn            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 theGroundLoc                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          actorRotationYaw               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<unsigned char>          EggColorSetIndices             (Parm, ZeroConstructor)
// TArray<unsigned char>          EggNumberOfLevelUpPointsApplied (Parm, ZeroConstructor)
// float                          EggTamedIneffectivenessModifier (Parm, ZeroConstructor, IsPlainOldData)
// int                            NotifyTeamOverride             (Parm, ZeroConstructor, IsPlainOldData)
// int                            EggRandomMutationsFemale       (Parm, ZeroConstructor, IsPlainOldData)
// int                            EggRandomMutationsMale         (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* APrimalDinoCharacter::BPStaticCreateBabyDinoNoAncestors(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& theGroundLoc, float actorRotationYaw, TArray<unsigned char> EggColorSetIndices, TArray<unsigned char> EggNumberOfLevelUpPointsApplied, float EggTamedIneffectivenessModifier, int NotifyTeamOverride, int EggRandomMutationsFemale, int EggRandomMutationsMale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPStaticCreateBabyDinoNoAncestors");

	APrimalDinoCharacter_BPStaticCreateBabyDinoNoAncestors_Params params;
	params.TheWorld = TheWorld;
	params.EggDinoClassToSpawn = EggDinoClassToSpawn;
	params.theGroundLoc = theGroundLoc;
	params.actorRotationYaw = actorRotationYaw;
	params.EggColorSetIndices = EggColorSetIndices;
	params.EggNumberOfLevelUpPointsApplied = EggNumberOfLevelUpPointsApplied;
	params.EggTamedIneffectivenessModifier = EggTamedIneffectivenessModifier;
	params.NotifyTeamOverride = NotifyTeamOverride;
	params.EggRandomMutationsFemale = EggRandomMutationsFemale;
	params.EggRandomMutationsMale = EggRandomMutationsMale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPStaticCreateBabyDino
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  EggDinoClassToSpawn            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 theGroundLoc                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          actorRotationYaw               (Parm, ZeroConstructor, IsPlainOldData)
// TArray<unsigned char>          EggColorSetIndices             (Parm, ZeroConstructor)
// TArray<unsigned char>          EggNumberOfLevelUpPointsApplied (Parm, ZeroConstructor)
// float                          EggTamedIneffectivenessModifier (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FDinoAncestorsEntry> EggDinoAncestors               (Parm, ZeroConstructor)
// TArray<struct FDinoAncestorsEntry> EggDinoAncestorsMale           (Parm, ZeroConstructor)
// int                            NotifyTeamOverride             (Parm, ZeroConstructor, IsPlainOldData)
// int                            EggRandomMutationsFemale       (Parm, ZeroConstructor, IsPlainOldData)
// int                            EggRandomMutationsMale         (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* APrimalDinoCharacter::BPStaticCreateBabyDino(class UWorld* TheWorld, class UClass* EggDinoClassToSpawn, const struct FVector& theGroundLoc, float actorRotationYaw, TArray<unsigned char> EggColorSetIndices, TArray<unsigned char> EggNumberOfLevelUpPointsApplied, float EggTamedIneffectivenessModifier, TArray<struct FDinoAncestorsEntry> EggDinoAncestors, TArray<struct FDinoAncestorsEntry> EggDinoAncestorsMale, int NotifyTeamOverride, int EggRandomMutationsFemale, int EggRandomMutationsMale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPStaticCreateBabyDino");

	APrimalDinoCharacter_BPStaticCreateBabyDino_Params params;
	params.TheWorld = TheWorld;
	params.EggDinoClassToSpawn = EggDinoClassToSpawn;
	params.theGroundLoc = theGroundLoc;
	params.actorRotationYaw = actorRotationYaw;
	params.EggColorSetIndices = EggColorSetIndices;
	params.EggNumberOfLevelUpPointsApplied = EggNumberOfLevelUpPointsApplied;
	params.EggTamedIneffectivenessModifier = EggTamedIneffectivenessModifier;
	params.EggDinoAncestors = EggDinoAncestors;
	params.EggDinoAncestorsMale = EggDinoAncestorsMale;
	params.NotifyTeamOverride = NotifyTeamOverride;
	params.EggRandomMutationsFemale = EggRandomMutationsFemale;
	params.EggRandomMutationsMale = EggRandomMutationsMale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPShouldForceFlee
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPShouldForceFlee()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPShouldForceFlee");

	APrimalDinoCharacter_BPShouldForceFlee_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPShouldCancelDoAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPShouldCancelDoAttack(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPShouldCancelDoAttack");

	APrimalDinoCharacter_BPShouldCancelDoAttack_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPSetupTamed
// ()
// Parameters:
// bool                           bWasJustTamed                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPSetupTamed(bool bWasJustTamed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPSetupTamed");

	APrimalDinoCharacter_BPSetupTamed_Params params;
	params.bWasJustTamed = bWasJustTamed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPSentKilledNotification
// ()
// Parameters:
// class AShooterPlayerController* ToPC                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPSentKilledNotification(class AShooterPlayerController* ToPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPSentKilledNotification");

	APrimalDinoCharacter_BPSentKilledNotification_Params params;
	params.ToPC = ToPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPResetClone
// ()

void APrimalDinoCharacter::BPResetClone()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPResetClone");

	APrimalDinoCharacter_BPResetClone_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPPreventRiding
// ()
// Parameters:
// class AShooterCharacter*       ByPawn                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontCheckDistance             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPPreventRiding(class AShooterCharacter* ByPawn, bool bDontCheckDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPPreventRiding");

	APrimalDinoCharacter_BPPreventRiding_Params params;
	params.ByPawn = ByPawn;
	params.bDontCheckDistance = bDontCheckDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPPreventOrderAllowed
// ()
// Parameters:
// class APrimalCharacter*        FromCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EDinoTamedOrder>   OrderType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  enemyTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           orderNotExecuted               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPPreventOrderAllowed(class APrimalCharacter* FromCharacter, TEnumAsByte<EDinoTamedOrder> OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPPreventOrderAllowed");

	APrimalDinoCharacter_BPPreventOrderAllowed_Params params;
	params.FromCharacter = FromCharacter;
	params.OrderType = OrderType;
	params.bForce = bForce;
	params.enemyTarget = enemyTarget;
	params.orderNotExecuted = orderNotExecuted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPOverrideStencilAllianceForTarget
// ()
// Parameters:
// class APrimalCharacter*        TargetDino                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TEnumAsByte<EStencilAlliance>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EStencilAlliance> APrimalDinoCharacter::BPOverrideStencilAllianceForTarget(class APrimalCharacter* TargetDino, class UPrimitiveComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOverrideStencilAllianceForTarget");

	APrimalDinoCharacter_BPOverrideStencilAllianceForTarget_Params params;
	params.TargetDino = TargetDino;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPOverrideMoveToOrder
// ()
// Parameters:
// struct FVector                 MoveToLocation                 (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       OrderingPlayer                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPOverrideMoveToOrder(const struct FVector& MoveToLocation, class AShooterCharacter* OrderingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOverrideMoveToOrder");

	APrimalDinoCharacter_BPOverrideMoveToOrder_Params params;
	params.MoveToLocation = MoveToLocation;
	params.OrderingPlayer = OrderingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPOverrideHealthBarOffset
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BPOverrideHealthBarOffset(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOverrideHealthBarOffset");

	APrimalDinoCharacter_BPOverrideHealthBarOffset_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPOverrideGetAttackAnimationIndex
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UAnimMontage*>    AnimationArray                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoCharacter::BPOverrideGetAttackAnimationIndex(int AttackIndex, TArray<class UAnimMontage*> AnimationArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOverrideGetAttackAnimationIndex");

	APrimalDinoCharacter_BPOverrideGetAttackAnimationIndex_Params params;
	params.AttackIndex = AttackIndex;
	params.AnimationArray = AnimationArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPOverrideCameraViewTarget
// ()
// Parameters:
// struct FName                   CurrentCameraMode              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DesiredCameraLocation          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                DesiredCameraRotation          (Parm, ZeroConstructor, IsPlainOldData)
// float                          DesiredFOV                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideCameraLocation        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CameraLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideCameraRotation        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                CameraRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideCameraFOV             (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          CameraFOV                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPOverrideCameraViewTarget(const struct FName& CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool* bOverrideCameraLocation, struct FVector* CameraLocation, bool* bOverrideCameraRotation, struct FRotator* CameraRotation, bool* bOverrideCameraFOV, float* CameraFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOverrideCameraViewTarget");

	APrimalDinoCharacter_BPOverrideCameraViewTarget_Params params;
	params.CurrentCameraMode = CurrentCameraMode;
	params.DesiredCameraLocation = DesiredCameraLocation;
	params.DesiredCameraRotation = DesiredCameraRotation;
	params.DesiredFOV = DesiredFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bOverrideCameraLocation != nullptr)
		*bOverrideCameraLocation = params.bOverrideCameraLocation;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (bOverrideCameraRotation != nullptr)
		*bOverrideCameraRotation = params.bOverrideCameraRotation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
	if (bOverrideCameraFOV != nullptr)
		*bOverrideCameraFOV = params.bOverrideCameraFOV;
	if (CameraFOV != nullptr)
		*CameraFOV = params.CameraFOV;
}


// Function ShooterGame.PrimalDinoCharacter.BPOrderedMoveToLoc
// ()
// Parameters:
// struct FVector                 DestLoc                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void APrimalDinoCharacter::BPOrderedMoveToLoc(const struct FVector& DestLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOrderedMoveToLoc");

	APrimalDinoCharacter_BPOrderedMoveToLoc_Params params;
	params.DestLoc = DestLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnTamedProcessOrder
// ()
// Parameters:
// class APrimalCharacter*        FromCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EDinoTamedOrder>   OrderType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  enemyTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           orderNotExecuted               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPOnTamedProcessOrder(class APrimalCharacter* FromCharacter, TEnumAsByte<EDinoTamedOrder> OrderType, bool bForce, class AActor* enemyTarget, bool orderNotExecuted)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnTamedProcessOrder");

	APrimalDinoCharacter_BPOnTamedProcessOrder_Params params;
	params.FromCharacter = FromCharacter;
	params.OrderType = OrderType;
	params.bForce = bForce;
	params.enemyTarget = enemyTarget;
	params.orderNotExecuted = orderNotExecuted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnStartJump
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPOnStartJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnStartJump");

	APrimalDinoCharacter_BPOnStartJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnSetMountedDino
// ()

void APrimalDinoCharacter::BPOnSetMountedDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnSetMountedDino");

	APrimalDinoCharacter_BPOnSetMountedDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnSetFlight
// ()
// Parameters:
// bool                           bFly                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPOnSetFlight(bool bFly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnSetFlight");

	APrimalDinoCharacter_BPOnSetFlight_Params params;
	params.bFly = bFly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnRepIsCharging
// ()

void APrimalDinoCharacter::BPOnRepIsCharging()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnRepIsCharging");

	APrimalDinoCharacter_BPOnRepIsCharging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnRefreshColorization
// ()
// Parameters:
// TArray<struct FLinearColor>    Colors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void APrimalDinoCharacter::BPOnRefreshColorization(TArray<struct FLinearColor> Colors)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnRefreshColorization");

	APrimalDinoCharacter_BPOnRefreshColorization_Params params;
	params.Colors = Colors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnEndCharging
// ()

void APrimalDinoCharacter::BPOnEndCharging()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnEndCharging");

	APrimalDinoCharacter_BPOnEndCharging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnDinoStartled
// ()
// Parameters:
// class UAnimMontage*            StartledAnimPlayed             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromAIController              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPOnDinoStartled(class UAnimMontage* StartledAnimPlayed, bool bFromAIController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnDinoStartled");

	APrimalDinoCharacter_BPOnDinoStartled_Params params;
	params.StartledAnimPlayed = StartledAnimPlayed;
	params.bFromAIController = bFromAIController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnDinoCheat
// ()
// Parameters:
// struct FName                   CheatName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetValue                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPOnDinoCheat(const struct FName& CheatName, bool bSetValue, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnDinoCheat");

	APrimalDinoCharacter_BPOnDinoCheat_Params params;
	params.CheatName = CheatName;
	params.bSetValue = bSetValue;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPOnClearMountedDino
// ()

void APrimalDinoCharacter::BPOnClearMountedDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPOnClearMountedDino");

	APrimalDinoCharacter_BPOnClearMountedDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyWildHarvestAttack
// ()
// Parameters:
// int                            harvestIndex                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyWildHarvestAttack(int harvestIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyWildHarvestAttack");

	APrimalDinoCharacter_BPNotifyWildHarvestAttack_Params params;
	params.harvestIndex = harvestIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyStructurePlacedNearby
// ()
// Parameters:
// class APrimalStructure*        NewStructure                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyStructurePlacedNearby(class APrimalStructure* NewStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyStructurePlacedNearby");

	APrimalDinoCharacter_BPNotifyStructurePlacedNearby_Params params;
	params.NewStructure = NewStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifySetRider
// ()
// Parameters:
// class AShooterCharacter*       RiderSetting                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifySetRider(class AShooterCharacter* RiderSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifySetRider");

	APrimalDinoCharacter_BPNotifySetRider_Params params;
	params.RiderSetting = RiderSetting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyNameEditText
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyNameEditText(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyNameEditText");

	APrimalDinoCharacter_BPNotifyNameEditText_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyMateBoostChanged
// ()

void APrimalDinoCharacter::BPNotifyMateBoostChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyMateBoostChanged");

	APrimalDinoCharacter_BPNotifyMateBoostChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyIfPassengerLaunchShoulderMount
// ()
// Parameters:
// class APrimalCharacter*        launchedCharacter              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyIfPassengerLaunchShoulderMount(class APrimalCharacter* launchedCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyIfPassengerLaunchShoulderMount");

	APrimalDinoCharacter_BPNotifyIfPassengerLaunchShoulderMount_Params params;
	params.launchedCharacter = launchedCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyClearRider
// ()
// Parameters:
// class AShooterCharacter*       RiderClearing                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyClearRider(class AShooterCharacter* RiderClearing)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyClearRider");

	APrimalDinoCharacter_BPNotifyClearRider_Params params;
	params.RiderClearing = RiderClearing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyClearPassenger
// ()
// Parameters:
// class APrimalCharacter*        PassengerChar                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            SeatIndex                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyClearPassenger(class APrimalCharacter* PassengerChar, int SeatIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyClearPassenger");

	APrimalDinoCharacter_BPNotifyClearPassenger_Params params;
	params.PassengerChar = PassengerChar;
	params.SeatIndex = SeatIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyClaimed
// ()

void APrimalDinoCharacter::BPNotifyClaimed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyClaimed");

	APrimalDinoCharacter_BPNotifyClaimed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyCarriedDinoBabyAgeIncrement
// ()
// Parameters:
// class APrimalDinoCharacter*    AgingCarriedDino               (Parm, ZeroConstructor, IsPlainOldData)
// float                          PreviousAge                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewAge                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyCarriedDinoBabyAgeIncrement(class APrimalDinoCharacter* AgingCarriedDino, float PreviousAge, float NewAge)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyCarriedDinoBabyAgeIncrement");

	APrimalDinoCharacter_BPNotifyCarriedDinoBabyAgeIncrement_Params params;
	params.AgingCarriedDino = AgingCarriedDino;
	params.PreviousAge = PreviousAge;
	params.NewAge = NewAge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyBabyAgeIncrement
// ()
// Parameters:
// float                          PreviousAge                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewAge                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyBabyAgeIncrement(float PreviousAge, float NewAge)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyBabyAgeIncrement");

	APrimalDinoCharacter_BPNotifyBabyAgeIncrement_Params params;
	params.PreviousAge = PreviousAge;
	params.NewAge = NewAge;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPNotifyAddPassenger
// ()
// Parameters:
// class APrimalCharacter*        PassengerChar                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            SeatIndex                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPNotifyAddPassenger(class APrimalCharacter* PassengerChar, int SeatIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPNotifyAddPassenger");

	APrimalDinoCharacter_BPNotifyAddPassenger_Params params;
	params.PassengerChar = PassengerChar;
	params.SeatIndex = SeatIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPModifyHarvestingWeightsArray
// ()
// Parameters:
// TArray<float>                  resourceWeightsIn              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class UPrimalItem*>     resourceItems                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<float>                  resourceWeightsOut             (Parm, OutParm, ZeroConstructor)

void APrimalDinoCharacter::BPModifyHarvestingWeightsArray(TArray<float> resourceWeightsIn, TArray<class UPrimalItem*> resourceItems, TArray<float>* resourceWeightsOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPModifyHarvestingWeightsArray");

	APrimalDinoCharacter_BPModifyHarvestingWeightsArray_Params params;
	params.resourceWeightsIn = resourceWeightsIn;
	params.resourceItems = resourceItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (resourceWeightsOut != nullptr)
		*resourceWeightsOut = params.resourceWeightsOut;
}


// Function ShooterGame.PrimalDinoCharacter.BPModifyHarvestingQuantity
// ()
// Parameters:
// float                          originalQuantity               (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  resourceSelected               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BPModifyHarvestingQuantity(float originalQuantity, class UClass* resourceSelected)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPModifyHarvestingQuantity");

	APrimalDinoCharacter_BPModifyHarvestingQuantity_Params params;
	params.originalQuantity = originalQuantity;
	params.resourceSelected = resourceSelected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPModifyHarvestDamage
// ()
// Parameters:
// class UPrimalHarvestingComponent* harvestComponent               (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          inDamage                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BPModifyHarvestDamage(class UPrimalHarvestingComponent* harvestComponent, float inDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPModifyHarvestDamage");

	APrimalDinoCharacter_BPModifyHarvestDamage_Params params;
	params.harvestComponent = harvestComponent;
	params.inDamage = inDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPModifyDesiredRotation
// ()
// Parameters:
// struct FRotator                InDesiredRotation              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                OutDesiredRotation             (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPModifyDesiredRotation(const struct FRotator& InDesiredRotation, struct FRotator* OutDesiredRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPModifyDesiredRotation");

	APrimalDinoCharacter_BPModifyDesiredRotation_Params params;
	params.InDesiredRotation = InDesiredRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDesiredRotation != nullptr)
		*OutDesiredRotation = params.OutDesiredRotation;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPModifyAimOffsetTargetLocation
// ()
// Parameters:
// struct FVector                 AimTargetLocation              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::BPModifyAimOffsetTargetLocation(const struct FVector& AimTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPModifyAimOffsetTargetLocation");

	APrimalDinoCharacter_BPModifyAimOffsetTargetLocation_Params params;
	params.AimTargetLocation = AimTargetLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPModifyAimOffsetNoTarget
// ()
// Parameters:
// struct FRotator                Aim                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalDinoCharacter::BPModifyAimOffsetNoTarget(const struct FRotator& Aim)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPModifyAimOffsetNoTarget");

	APrimalDinoCharacter_BPModifyAimOffsetNoTarget_Params params;
	params.Aim = Aim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPKilledSomethingEvent
// ()
// Parameters:
// class APrimalCharacter*        killedTarget                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPKilledSomethingEvent(class APrimalCharacter* killedTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPKilledSomethingEvent");

	APrimalDinoCharacter_BPKilledSomethingEvent_Params params;
	params.killedTarget = killedTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPIsValidUnStasisCaster
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPIsValidUnStasisCaster()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPIsValidUnStasisCaster");

	APrimalDinoCharacter_BPIsValidUnStasisCaster_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPIsTamed
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPIsTamed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPIsTamed");

	APrimalDinoCharacter_BPIsTamed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPIsHidden
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPIsHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPIsHidden");

	APrimalDinoCharacter_BPIsHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPHasCurrentAttack
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPHasCurrentAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPHasCurrentAttack");

	APrimalDinoCharacter_BPHasCurrentAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPHandleUseButtonPress
// ()
// Parameters:
// class AShooterPlayerController* RiderController                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPHandleUseButtonPress(class AShooterPlayerController* RiderController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPHandleUseButtonPress");

	APrimalDinoCharacter_BPHandleUseButtonPress_Params params;
	params.RiderController = RiderController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPHandleOnStopTargeting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPHandleOnStopTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPHandleOnStopTargeting");

	APrimalDinoCharacter_BPHandleOnStopTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPHandleOnStopFire
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPHandleOnStopFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPHandleOnStopFire");

	APrimalDinoCharacter_BPHandleOnStopFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPHandleControllerInitiatedAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPHandleControllerInitiatedAttack(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPHandleControllerInitiatedAttack");

	APrimalDinoCharacter_BPHandleControllerInitiatedAttack_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetRiderUnboardLocation
// ()
// Parameters:
// class APrimalCharacter*        RidingCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::BPGetRiderUnboardLocation(class APrimalCharacter* RidingCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetRiderUnboardLocation");

	APrimalDinoCharacter_BPGetRiderUnboardLocation_Params params;
	params.RidingCharacter = RidingCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetHealthBarColor
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::BPGetHealthBarColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetHealthBarColor");

	APrimalDinoCharacter_BPGetHealthBarColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetDragSocketDinoName
// ()
// Parameters:
// class APrimalDinoCharacter*    aGrabbedDino                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName APrimalDinoCharacter::BPGetDragSocketDinoName(class APrimalDinoCharacter* aGrabbedDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetDragSocketDinoName");

	APrimalDinoCharacter_BPGetDragSocketDinoName_Params params;
	params.aGrabbedDino = aGrabbedDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetCurrentAttackIndex
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoCharacter::BPGetCurrentAttackIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetCurrentAttackIndex");

	APrimalDinoCharacter_BPGetCurrentAttackIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetCrosshairLocation
// ()
// Parameters:
// float                          CanvasClipX                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          CanvasClipY                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutX                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutY                           (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPGetCrosshairLocation(float CanvasClipX, float CanvasClipY, float* OutX, float* OutY)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetCrosshairLocation");

	APrimalDinoCharacter_BPGetCrosshairLocation_Params params;
	params.CanvasClipX = CanvasClipX;
	params.CanvasClipY = CanvasClipY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutX != nullptr)
		*OutX = params.OutX;
	if (OutY != nullptr)
		*OutY = params.OutY;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetCrosshairColor
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor APrimalDinoCharacter::BPGetCrosshairColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetCrosshairColor");

	APrimalDinoCharacter_BPGetCrosshairColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetCrosshairAlpha
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BPGetCrosshairAlpha()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetCrosshairAlpha");

	APrimalDinoCharacter_BPGetCrosshairAlpha_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPGetAttackOfPlayedAnimation
// ()
// Parameters:
// struct FDinoAttackInfo         AttackInfo                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPGetAttackOfPlayedAnimation(struct FDinoAttackInfo* AttackInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPGetAttackOfPlayedAnimation");

	APrimalDinoCharacter_BPGetAttackOfPlayedAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AttackInfo != nullptr)
		*AttackInfo = params.AttackInfo;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPForceTurretFastTargeting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPForceTurretFastTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPForceTurretFastTargeting");

	APrimalDinoCharacter_BPForceTurretFastTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPForceReachedDestination
// ()

void APrimalDinoCharacter::BPForceReachedDestination()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPForceReachedDestination");

	APrimalDinoCharacter_BPForceReachedDestination_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPFedWakingTameEvent
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPFedWakingTameEvent(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPFedWakingTameEvent");

	APrimalDinoCharacter_BPFedWakingTameEvent_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDrawToRiderHUD
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPDrawToRiderHUD(class AShooterHUD* HUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDrawToRiderHUD");

	APrimalDinoCharacter_BPDrawToRiderHUD_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDoHarvestAttack
// ()
// Parameters:
// int                            harvestIndex                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPDoHarvestAttack(int harvestIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDoHarvestAttack");

	APrimalDinoCharacter_BPDoHarvestAttack_Params params;
	params.harvestIndex = harvestIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDoAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPDoAttack(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDoAttack");

	APrimalDinoCharacter_BPDoAttack_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDinoPrepareForARKUploading
// ()

void APrimalDinoCharacter::BPDinoPrepareForARKUploading()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDinoPrepareForARKUploading");

	APrimalDinoCharacter_BPDinoPrepareForARKUploading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDinoPostBeginPlay
// ()

void APrimalDinoCharacter::BPDinoPostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDinoPostBeginPlay");

	APrimalDinoCharacter_BPDinoPostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDinoARKDownloadedEnd
// ()

void APrimalDinoCharacter::BPDinoARKDownloadedEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDinoARKDownloadedEnd");

	APrimalDinoCharacter_BPDinoARKDownloadedEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDinoARKDownloadedBegin
// ()

void APrimalDinoCharacter::BPDinoARKDownloadedBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDinoARKDownloadedBegin");

	APrimalDinoCharacter_BPDinoARKDownloadedBegin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDidSetCarriedCharacter
// ()
// Parameters:
// class APrimalCharacter*        PreviousCarriedCharacter       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPDidSetCarriedCharacter(class APrimalCharacter* PreviousCarriedCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDidSetCarriedCharacter");

	APrimalDinoCharacter_BPDidSetCarriedCharacter_Params params;
	params.PreviousCarriedCharacter = PreviousCarriedCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDidClearCarriedCharacter
// ()
// Parameters:
// class APrimalCharacter*        PreviousCarriedCharacter       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BPDidClearCarriedCharacter(class APrimalCharacter* PreviousCarriedCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDidClearCarriedCharacter");

	APrimalDinoCharacter_BPDidClearCarriedCharacter_Params params;
	params.PreviousCarriedCharacter = PreviousCarriedCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPDesiredRotationIsLocalSpace
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPDesiredRotationIsLocalSpace()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPDesiredRotationIsLocalSpace");

	APrimalDinoCharacter_BPDesiredRotationIsLocalSpace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPConsumeInventoryFoodItem
// ()
// Parameters:
// class UPrimalItem*             foodItem                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bConsumeEntireStack            (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* APrimalDinoCharacter::BPConsumeInventoryFoodItem(class UPrimalItem* foodItem, bool bConsumeEntireStack)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPConsumeInventoryFoodItem");

	APrimalDinoCharacter_BPConsumeInventoryFoodItem_Params params;
	params.foodItem = foodItem;
	params.bConsumeEntireStack = bConsumeEntireStack;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPCheckCanSpawnFromLocation
// ()
// Parameters:
// struct FVector                 CheckLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::BPCheckCanSpawnFromLocation(const struct FVector& CheckLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPCheckCanSpawnFromLocation");

	APrimalDinoCharacter_BPCheckCanSpawnFromLocation_Params params;
	params.CheckLocation = CheckLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPChargingModifyInputAcceleration
// ()
// Parameters:
// struct FVector                 inputAcceleration              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoCharacter::BPChargingModifyInputAcceleration(const struct FVector& inputAcceleration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPChargingModifyInputAcceleration");

	APrimalDinoCharacter_BPChargingModifyInputAcceleration_Params params;
	params.inputAcceleration = inputAcceleration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPCanTargetCorpse
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPCanTargetCorpse()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPCanTargetCorpse");

	APrimalDinoCharacter_BPCanTargetCorpse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPCanTakePassenger
// ()
// Parameters:
// class APrimalCharacter*        Character                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            PassengerSeatIndex             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForcePassenger                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowFlyersAndWaterDinos      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPCanTakePassenger(class APrimalCharacter* Character, int PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPCanTakePassenger");

	APrimalDinoCharacter_BPCanTakePassenger_Params params;
	params.Character = Character;
	params.PassengerSeatIndex = PassengerSeatIndex;
	params.bForcePassenger = bForcePassenger;
	params.bAllowFlyersAndWaterDinos = bAllowFlyersAndWaterDinos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPCanIgnoreImmobilizationTrap
// ()
// Parameters:
// class UClass*                  TrapClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTrigger                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPCanIgnoreImmobilizationTrap(class UClass* TrapClass, bool bForceTrigger)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPCanIgnoreImmobilizationTrap");

	APrimalDinoCharacter_BPCanIgnoreImmobilizationTrap_Params params;
	params.TrapClass = TrapClass;
	params.bForceTrigger = bForceTrigger;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPCanDragCharacter
// ()
// Parameters:
// class APrimalCharacter*        Character                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPCanDragCharacter(class APrimalCharacter* Character)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPCanDragCharacter");

	APrimalDinoCharacter_BPCanDragCharacter_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPCanCryo
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPCanCryo(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPCanCryo");

	APrimalDinoCharacter_BPCanCryo_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPCanAutodrag
// ()
// Parameters:
// class APrimalCharacter*        characterToDrag                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPCanAutodrag(class APrimalCharacter* characterToDrag)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPCanAutodrag");

	APrimalDinoCharacter_BPCanAutodrag_Params params;
	params.characterToDrag = characterToDrag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPBecomeBaby
// ()

void APrimalDinoCharacter::BPBecomeBaby()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPBecomeBaby");

	APrimalDinoCharacter_BPBecomeBaby_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPBecomeAdult
// ()

void APrimalDinoCharacter::BPBecomeAdult()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPBecomeAdult");

	APrimalDinoCharacter_BPBecomeAdult_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BPAllowEquippingItemType
// ()
// Parameters:
// TEnumAsByte<EPrimalEquipmentType> equipmentType                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPAllowEquippingItemType(TEnumAsByte<EPrimalEquipmentType> equipmentType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPAllowEquippingItemType");

	APrimalDinoCharacter_BPAllowEquippingItemType_Params params;
	params.equipmentType = equipmentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPAllowClaiming
// ()
// Parameters:
// class AShooterPlayerController* ForPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPAllowClaiming(class AShooterPlayerController* ForPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPAllowClaiming");

	APrimalDinoCharacter_BPAllowClaiming_Params params;
	params.ForPlayer = ForPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPAllowCarryCharacter
// ()
// Parameters:
// class APrimalCharacter*        checkCharacter                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BPAllowCarryCharacter(class APrimalCharacter* checkCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPAllowCarryCharacter");

	APrimalDinoCharacter_BPAllowCarryCharacter_Params params;
	params.checkCharacter = checkCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BPAdjustAttackIndex
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoCharacter::BPAdjustAttackIndex(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BPAdjustAttackIndex");

	APrimalDinoCharacter_BPAdjustAttackIndex_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BP_PreventCarrying
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BP_PreventCarrying()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_PreventCarrying");

	APrimalDinoCharacter_BP_PreventCarrying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BP_OnTargetedByTamedOrder
// ()
// Parameters:
// class APrimalCharacter*        OrderingCharacter              (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    AttackingDino                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForced                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BP_OnTargetedByTamedOrder(class APrimalCharacter* OrderingCharacter, class APrimalDinoCharacter* AttackingDino, bool bForced)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_OnTargetedByTamedOrder");

	APrimalDinoCharacter_BP_OnTargetedByTamedOrder_Params params;
	params.OrderingCharacter = OrderingCharacter;
	params.AttackingDino = AttackingDino;
	params.bForced = bForced;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BP_OnStartLandingNotify
// ()

void APrimalDinoCharacter::BP_OnStartLandingNotify()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_OnStartLandingNotify");

	APrimalDinoCharacter_BP_OnStartLandingNotify_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BP_OnRiderChangeWeapons
// ()
// Parameters:
// class AShooterCharacter*       theRider                       (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             newWeapon                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BP_OnRiderChangeWeapons(class AShooterCharacter* theRider, class UPrimalItem* newWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_OnRiderChangeWeapons");

	APrimalDinoCharacter_BP_OnRiderChangeWeapons_Params params;
	params.theRider = theRider;
	params.newWeapon = newWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BP_OnPostNetReplication
// ()
// Parameters:
// struct FVector                 ReplicatedLoc                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReplicatedRot                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BP_OnPostNetReplication(const struct FVector& ReplicatedLoc, const struct FRotator& ReplicatedRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_OnPostNetReplication");

	APrimalDinoCharacter_BP_OnPostNetReplication_Params params;
	params.ReplicatedLoc = ReplicatedLoc;
	params.ReplicatedRot = ReplicatedRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BP_InterceptTurnInput
// ()
// Parameters:
// float                          AxisValue                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BP_InterceptTurnInput(float AxisValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_InterceptTurnInput");

	APrimalDinoCharacter_BP_InterceptTurnInput_Params params;
	params.AxisValue = AxisValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BP_InterceptMoveRight
// ()
// Parameters:
// float                          AxisValue                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BP_InterceptMoveRight(float AxisValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_InterceptMoveRight");

	APrimalDinoCharacter_BP_InterceptMoveRight_Params params;
	params.AxisValue = AxisValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BP_InterceptMoveForward
// ()
// Parameters:
// float                          AxisValue                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BP_InterceptMoveForward(float AxisValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_InterceptMoveForward");

	APrimalDinoCharacter_BP_InterceptMoveForward_Params params;
	params.AxisValue = AxisValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BP_GetCustomModifier_RotationRate
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BP_GetCustomModifier_RotationRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_GetCustomModifier_RotationRate");

	APrimalDinoCharacter_BP_GetCustomModifier_RotationRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BP_GetCustomModifier_MaxSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BP_GetCustomModifier_MaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_GetCustomModifier_MaxSpeed");

	APrimalDinoCharacter_BP_GetCustomModifier_MaxSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BP_ForceAllowMountedWeapon
// ()
// Parameters:
// class UClass*                  WeaponTemplate                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BP_ForceAllowMountedWeapon(class UClass* WeaponTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BP_ForceAllowMountedWeapon");

	APrimalDinoCharacter_BP_ForceAllowMountedWeapon_Params params;
	params.WeaponTemplate = WeaponTemplate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintTamedTick
// ()

void APrimalDinoCharacter::BlueprintTamedTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintTamedTick");

	APrimalDinoCharacter_BlueprintTamedTick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintPlayDying
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BlueprintPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintPlayDying");

	APrimalDinoCharacter_BlueprintPlayDying_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintOverrideWantsToRun
// ()
// Parameters:
// bool                           bInputWantsToRun               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BlueprintOverrideWantsToRun(bool bInputWantsToRun)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintOverrideWantsToRun");

	APrimalDinoCharacter_BlueprintOverrideWantsToRun_Params params;
	params.bInputWantsToRun = bInputWantsToRun;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintOverrideHarvestDamageType
// ()
// Parameters:
// float                          OutHarvestDamageMultiplier     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* APrimalDinoCharacter::BlueprintOverrideHarvestDamageType(float* OutHarvestDamageMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintOverrideHarvestDamageType");

	APrimalDinoCharacter_BlueprintOverrideHarvestDamageType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHarvestDamageMultiplier != nullptr)
		*OutHarvestDamageMultiplier = params.OutHarvestDamageMultiplier;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintGetAttackWeight
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          inputWeight                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          attackRangeOffset              (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BlueprintGetAttackWeight(int AttackIndex, float inputWeight, float Distance, float attackRangeOffset, class AActor* OtherTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintGetAttackWeight");

	APrimalDinoCharacter_BlueprintGetAttackWeight_Params params;
	params.AttackIndex = AttackIndex;
	params.inputWeight = inputWeight;
	params.Distance = Distance;
	params.attackRangeOffset = attackRangeOffset;
	params.OtherTarget = OtherTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintExtraBabyScaling
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BlueprintExtraBabyScaling()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintExtraBabyScaling");

	APrimalDinoCharacter_BlueprintExtraBabyScaling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintDrawFloatingHUD
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DrawScale                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::BlueprintDrawFloatingHUD(class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintDrawFloatingHUD");

	APrimalDinoCharacter_BlueprintDrawFloatingHUD_Params params;
	params.HUD = HUD;
	params.CenterX = CenterX;
	params.CenterY = CenterY;
	params.DrawScale = DrawScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintCanRiderAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BlueprintCanRiderAttack(int AttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintCanRiderAttack");

	APrimalDinoCharacter_BlueprintCanRiderAttack_Params params;
	params.AttackIndex = AttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintCanAttack
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          attackRangeOffset              (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherTarget                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::BlueprintCanAttack(int AttackIndex, float Distance, float attackRangeOffset, class AActor* OtherTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintCanAttack");

	APrimalDinoCharacter_BlueprintCanAttack_Params params;
	params.AttackIndex = AttackIndex;
	params.Distance = Distance;
	params.attackRangeOffset = attackRangeOffset;
	params.OtherTarget = OtherTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.BlueprintAdjustOutputDamage
// ()
// Parameters:
// int                            AttackIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          OriginalDamageAmount           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  OutDamageType                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutDamageImpulse               (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoCharacter::BlueprintAdjustOutputDamage(int AttackIndex, float OriginalDamageAmount, class AActor* HitActor, class UClass** OutDamageType, float* OutDamageImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.BlueprintAdjustOutputDamage");

	APrimalDinoCharacter_BlueprintAdjustOutputDamage_Params params;
	params.AttackIndex = AttackIndex;
	params.OriginalDamageAmount = OriginalDamageAmount;
	params.HitActor = HitActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDamageType != nullptr)
		*OutDamageType = params.OutDamageType;
	if (OutDamageImpulse != nullptr)
		*OutDamageImpulse = params.OutDamageImpulse;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.AssertColorNames
// ()

void APrimalDinoCharacter::AssertColorNames()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AssertColorNames");

	APrimalDinoCharacter_AssertColorNames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.AreSpawnerSublevelsLoaded
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::AreSpawnerSublevelsLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AreSpawnerSublevelsLoaded");

	APrimalDinoCharacter_AreSpawnerSublevelsLoaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.ApplyRidingAttackExtraVelocity
// ()

void APrimalDinoCharacter::ApplyRidingAttackExtraVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.ApplyRidingAttackExtraVelocity");

	APrimalDinoCharacter_ApplyRidingAttackExtraVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.AnimNotifyMountedDino
// ()

void APrimalDinoCharacter::AnimNotifyMountedDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AnimNotifyMountedDino");

	APrimalDinoCharacter_AnimNotifyMountedDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.AllowWakingTame
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::AllowWakingTame(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AllowWakingTame");

	APrimalDinoCharacter_AllowWakingTame_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.AllowMountedWeaponry
// ()
// Parameters:
// bool                           bIgnoreCurrentWeapon           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bWeaponForcesMountedWeaponry   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::AllowMountedWeaponry(bool bIgnoreCurrentWeapon, bool bWeaponForcesMountedWeaponry)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AllowMountedWeaponry");

	APrimalDinoCharacter_AllowMountedWeaponry_Params params;
	params.bIgnoreCurrentWeapon = bIgnoreCurrentWeapon;
	params.bWeaponForcesMountedWeaponry = bWeaponForcesMountedWeaponry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.AllowCarryCharacter
// ()
// Parameters:
// class APrimalCharacter*        CanCarryPawn                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::AllowCarryCharacter(class APrimalCharacter* CanCarryPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AllowCarryCharacter");

	APrimalDinoCharacter_AllowCarryCharacter_Params params;
	params.CanCarryPawn = CanCarryPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.AddToMeleeSwingHurtList
// ()
// Parameters:
// class AActor*                  AnActor                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::AddToMeleeSwingHurtList(class AActor* AnActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AddToMeleeSwingHurtList");

	APrimalDinoCharacter_AddToMeleeSwingHurtList_Params params;
	params.AnActor = AnActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.AddPassenger
// ()
// Parameters:
// class APrimalCharacter*        ACharacter                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            PassengerSeatIndex             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForcePassenger                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowFlyersAndWaterDinos      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoCharacter::AddPassenger(class APrimalCharacter* ACharacter, int PassengerSeatIndex, bool bForcePassenger, bool bAllowFlyersAndWaterDinos)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AddPassenger");

	APrimalDinoCharacter_AddPassenger_Params params;
	params.ACharacter = ACharacter;
	params.PassengerSeatIndex = PassengerSeatIndex;
	params.bForcePassenger = bForcePassenger;
	params.bAllowFlyersAndWaterDinos = bAllowFlyersAndWaterDinos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoCharacter.AddedImprintingQuality
// ()
// Parameters:
// float                          amount                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::AddedImprintingQuality(float amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AddedImprintingQuality");

	APrimalDinoCharacter_AddedImprintingQuality_Params params;
	params.amount = amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoCharacter.AddDinoReferenceInLatchingStructure
// ()
// Parameters:
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoCharacter::AddDinoReferenceInLatchingStructure(class APrimalStructure* Structure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoCharacter.AddDinoReferenceInLatchingStructure");

	APrimalDinoCharacter_AddDinoReferenceInLatchingStructure_Params params;
	params.Structure = Structure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalRaft.TempDisableForcedVelcoityDirection
// ()

void APrimalRaft::TempDisableForcedVelcoityDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalRaft.TempDisableForcedVelcoityDirection");

	APrimalRaft_TempDisableForcedVelcoityDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalRaft.BPAllowMovementSound
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalRaft::BPAllowMovementSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalRaft.BPAllowMovementSound");

	APrimalRaft_BPAllowMovementSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalWheeledVehicleCharacter.StopHonk
// ()

void APrimalWheeledVehicleCharacter::StopHonk()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWheeledVehicleCharacter.StopHonk");

	APrimalWheeledVehicleCharacter_StopHonk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWheeledVehicleCharacter.StartHonk
// ()

void APrimalWheeledVehicleCharacter::StartHonk()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWheeledVehicleCharacter.StartHonk");

	APrimalWheeledVehicleCharacter_StartHonk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWheeledVehicleCharacter.ServerHonk
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalWheeledVehicleCharacter::ServerHonk(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWheeledVehicleCharacter.ServerHonk");

	APrimalWheeledVehicleCharacter_ServerHonk_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWheeledVehicleCharacter.NetHonk
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalWheeledVehicleCharacter::NetHonk(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWheeledVehicleCharacter.NetHonk");

	APrimalWheeledVehicleCharacter_NetHonk_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWheeledVehicleCharacter.GetVehicleMovementComponent
// ()
// Parameters:
// class UWheeledVehicleMovementComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWheeledVehicleMovementComponent* APrimalWheeledVehicleCharacter::GetVehicleMovementComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWheeledVehicleCharacter.GetVehicleMovementComponent");

	APrimalWheeledVehicleCharacter_GetVehicleMovementComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.UseAlternateStandingAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::UseAlternateStandingAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.UseAlternateStandingAnim");

	AShooterCharacter_UseAlternateStandingAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.UseAltAimOffsetAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::UseAltAimOffsetAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.UseAltAimOffsetAnim");

	AShooterCharacter_UseAltAimOffsetAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.UseAdditiveStandingAnim
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::UseAdditiveStandingAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.UseAdditiveStandingAnim");

	AShooterCharacter_UseAdditiveStandingAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.TryCutEnemyGrapplingCable
// ()

void AShooterCharacter::TryCutEnemyGrapplingCable()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.TryCutEnemyGrapplingCable");

	AShooterCharacter_TryCutEnemyGrapplingCable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.SyncGrapHookDistance
// ()
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::SyncGrapHookDistance(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.SyncGrapHookDistance");

	AShooterCharacter_SyncGrapHookDistance_Params params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.StructurePlacementUseAlternateOriginActor
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AShooterCharacter::StructurePlacementUseAlternateOriginActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.StructurePlacementUseAlternateOriginActor");

	AShooterCharacter_StructurePlacementUseAlternateOriginActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.StartWeaponSwitch
// ()
// Parameters:
// class UPrimalItem*             aPrimalItem                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontClearLastWeapon           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::StartWeaponSwitch(class UPrimalItem* aPrimalItem, bool bDontClearLastWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.StartWeaponSwitch");

	AShooterCharacter_StartWeaponSwitch_Params params;
	params.aPrimalItem = aPrimalItem;
	params.bDontClearLastWeapon = bDontClearLastWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.StartCameraTransition
// ()
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::StartCameraTransition(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.StartCameraTransition");

	AShooterCharacter_StartCameraTransition_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ShowWeapon
// ()

void AShooterCharacter::ShowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ShowWeapon");

	AShooterCharacter_ShowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.SetCarriedPitchYaw
// ()
// Parameters:
// float                          NewCarriedPitch                (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewCarriedYaw                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::SetCarriedPitchYaw(float NewCarriedPitch, float NewCarriedYaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.SetCarriedPitchYaw");

	AShooterCharacter_SetCarriedPitchYaw_Params params;
	params.NewCarriedPitch = NewCarriedPitch;
	params.NewCarriedYaw = NewCarriedYaw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.SetCameraMode
// ()
// Parameters:
// bool                           bFirstperson                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreSettingFirstPersonRiding (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::SetCameraMode(bool bFirstperson, bool bIgnoreSettingFirstPersonRiding)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.SetCameraMode");

	AShooterCharacter_SetCameraMode_Params params;
	params.bFirstperson = bFirstperson;
	params.bIgnoreSettingFirstPersonRiding = bIgnoreSettingFirstPersonRiding;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerToClientsPlayFireBallistaAnimation
// ()

void AShooterCharacter::ServerToClientsPlayFireBallistaAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerToClientsPlayFireBallistaAnimation");

	AShooterCharacter_ServerToClientsPlayFireBallistaAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerSwitchMap
// ()

void AShooterCharacter::ServerSwitchMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerSwitchMap");

	AShooterCharacter_ServerSwitchMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerStopFireBallista
// ()

void AShooterCharacter::ServerStopFireBallista()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerStopFireBallista");

	AShooterCharacter_ServerStopFireBallista_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerStartSurfaceCameraForPassenger
// ()
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldInvertInput             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerStartSurfaceCameraForPassenger(float Yaw, float Pitch, float Roll, bool bShouldInvertInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerStartSurfaceCameraForPassenger");

	AShooterCharacter_ServerStartSurfaceCameraForPassenger_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Roll = Roll;
	params.bShouldInvertInput = bShouldInvertInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerSetViewingInventory
// ()
// Parameters:
// bool                           bIsViewing                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerSetViewingInventory(bool bIsViewing)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerSetViewingInventory");

	AShooterCharacter_ServerSetViewingInventory_Params params;
	params.bIsViewing = bIsViewing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerSetTargeting
// ()
// Parameters:
// bool                           bNewTargeting                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerSetTargeting(bool bNewTargeting)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerSetTargeting");

	AShooterCharacter_ServerSetTargeting_Params params;
	params.bNewTargeting = bNewTargeting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerSetBallistaNewRotation
// ()
// Parameters:
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerSetBallistaNewRotation(float Pitch, float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerSetBallistaNewRotation");

	AShooterCharacter_ServerSetBallistaNewRotation_Params params;
	params.Pitch = Pitch;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerSeatingStructureAction
// ()
// Parameters:
// unsigned char                  ActionNumber                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerSeatingStructureAction(unsigned char ActionNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerSeatingStructureAction");

	AShooterCharacter_ServerSeatingStructureAction_Params params;
	params.ActionNumber = ActionNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerReleaseGrapHookCable
// ()
// Parameters:
// bool                           bReleasing                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerReleaseGrapHookCable(bool bReleasing)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerReleaseGrapHookCable");

	AShooterCharacter_ServerReleaseGrapHookCable_Params params;
	params.bReleasing = bReleasing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerPlayFireBallistaAnimation
// ()

void AShooterCharacter::ServerPlayFireBallistaAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerPlayFireBallistaAnimation");

	AShooterCharacter_ServerPlayFireBallistaAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerNotifyBallistaShot
// ()
// Parameters:
// struct FHitResult              Impact                         (Parm)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)

void AShooterCharacter::ServerNotifyBallistaShot(const struct FHitResult& Impact, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerNotifyBallistaShot");

	AShooterCharacter_ServerNotifyBallistaShot_Params params;
	params.Impact = Impact;
	params.ShootDir = ShootDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerNetEndClimbingLadder
// ()
// Parameters:
// bool                           bIsClimbOver                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ClimbOverLoc                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          RightDir                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerNetEndClimbingLadder(bool bIsClimbOver, const struct FVector& ClimbOverLoc, float RightDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerNetEndClimbingLadder");

	AShooterCharacter_ServerNetEndClimbingLadder_Params params;
	params.bIsClimbOver = bIsClimbOver;
	params.ClimbOverLoc = ClimbOverLoc;
	params.RightDir = RightDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerLaunchMountedDino
// ()

void AShooterCharacter::ServerLaunchMountedDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerLaunchMountedDino");

	AShooterCharacter_ServerLaunchMountedDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerForceUpdatedAimedActors
// ()
// Parameters:
// float                          OverrideMaxDistance            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToSimulatedClients   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerForceUpdatedAimedActors(float OverrideMaxDistance, bool bReplicateToSimulatedClients)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerForceUpdatedAimedActors");

	AShooterCharacter_ServerForceUpdatedAimedActors_Params params;
	params.OverrideMaxDistance = OverrideMaxDistance;
	params.bReplicateToSimulatedClients = bReplicateToSimulatedClients;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerFireBallistaProjectile
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)

void AShooterCharacter::ServerFireBallistaProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerFireBallistaProjectile");

	AShooterCharacter_ServerFireBallistaProjectile_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerDetachGrapHookCable
// ()
// Parameters:
// bool                           bDoUpwardsJump                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          UpwardsJumpYaw                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerDetachGrapHookCable(bool bDoUpwardsJump, float UpwardsJumpYaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerDetachGrapHookCable");

	AShooterCharacter_ServerDetachGrapHookCable_Params params;
	params.bDoUpwardsJump = bDoUpwardsJump;
	params.UpwardsJumpYaw = UpwardsJumpYaw;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerClearSwitchingWeapon
// ()
// Parameters:
// bool                           bOnlyIfDefaultWeapon           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClientRequestNextWeaponID     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ServerClearSwitchingWeapon(bool bOnlyIfDefaultWeapon, bool bClientRequestNextWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerClearSwitchingWeapon");

	AShooterCharacter_ServerClearSwitchingWeapon_Params params;
	params.bOnlyIfDefaultWeapon = bOnlyIfDefaultWeapon;
	params.bClientRequestNextWeaponID = bClientRequestNextWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ServerCheckDrinkingWater
// ()

void AShooterCharacter::ServerCheckDrinkingWater()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ServerCheckDrinkingWater");

	AShooterCharacter_ServerCheckDrinkingWater_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.RenamePlayer
// ()
// Parameters:
// class FString                  NewName                        (Parm, ZeroConstructor)

void AShooterCharacter::RenamePlayer(const class FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.RenamePlayer");

	AShooterCharacter_RenamePlayer_Params params;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.PlayEmoteAnimation
// ()
// Parameters:
// unsigned char                  EmoteIndex                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::PlayEmoteAnimation(unsigned char EmoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.PlayEmoteAnimation");

	AShooterCharacter_PlayEmoteAnimation_Params params;
	params.EmoteIndex = EmoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.PlayDrinkingAnimation
// ()

void AShooterCharacter::PlayDrinkingAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.PlayDrinkingAnimation");

	AShooterCharacter_PlayDrinkingAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.OnRep_RawBoneModifiers
// ()

void AShooterCharacter::OnRep_RawBoneModifiers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.OnRep_RawBoneModifiers");

	AShooterCharacter_OnRep_RawBoneModifiers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.OnRep_HatHidden
// ()

void AShooterCharacter::OnRep_HatHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.OnRep_HatHidden");

	AShooterCharacter_OnRep_HatHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.OnRep_CurrentWeapon
// ()
// Parameters:
// class AShooterWeapon*          LastWeapon                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::OnRep_CurrentWeapon(class AShooterWeapon* LastWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.OnRep_CurrentWeapon");

	AShooterCharacter_OnRep_CurrentWeapon_Params params;
	params.LastWeapon = LastWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.NetSimulatedForceUpdateAimedActors
// ()
// Parameters:
// float                          OverrideMaxDistance            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::NetSimulatedForceUpdateAimedActors(float OverrideMaxDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.NetSimulatedForceUpdateAimedActors");

	AShooterCharacter_NetSimulatedForceUpdateAimedActors_Params params;
	params.OverrideMaxDistance = OverrideMaxDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.NetSetOverrideHeadHairColor
// ()
// Parameters:
// struct FLinearColor            HairColor                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::NetSetOverrideHeadHairColor(const struct FLinearColor& HairColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.NetSetOverrideHeadHairColor");

	AShooterCharacter_NetSetOverrideHeadHairColor_Params params;
	params.HairColor = HairColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.NetSetOverrideFacialHairColor
// ()
// Parameters:
// struct FLinearColor            HairColor                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::NetSetOverrideFacialHairColor(const struct FLinearColor& HairColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.NetSetOverrideFacialHairColor");

	AShooterCharacter_NetSetOverrideFacialHairColor_Params params;
	params.HairColor = HairColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.NetSetHeadHairPercent
// ()
// Parameters:
// float                          thePercent                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            newHeadHairIndex               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::NetSetHeadHairPercent(float thePercent, int newHeadHairIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.NetSetHeadHairPercent");

	AShooterCharacter_NetSetHeadHairPercent_Params params;
	params.thePercent = thePercent;
	params.newHeadHairIndex = newHeadHairIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.NetSetFacialHairPercent
// ()
// Parameters:
// float                          thePercent                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            newFacialHairIndex             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::NetSetFacialHairPercent(float thePercent, int newFacialHairIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.NetSetFacialHairPercent");

	AShooterCharacter_NetSetFacialHairPercent_Params params;
	params.thePercent = thePercent;
	params.newFacialHairIndex = newFacialHairIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.LinkedPlayerIDString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterCharacter::LinkedPlayerIDString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.LinkedPlayerIDString");

	AShooterCharacter_LinkedPlayerIDString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.LaunchMountedDino
// ()

void AShooterCharacter::LaunchMountedDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.LaunchMountedDino");

	AShooterCharacter_LaunchMountedDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.IsWatchingExplorerNote
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsWatchingExplorerNote()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsWatchingExplorerNote");

	AShooterCharacter_IsWatchingExplorerNote_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsUsingShield
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsUsingShield()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsUsingShield");

	AShooterCharacter_IsUsingShield_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsUsingClimbingPick
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsUsingClimbingPick()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsUsingClimbingPick");

	AShooterCharacter_IsUsingClimbingPick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsTargeting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsTargeting");

	AShooterCharacter_IsTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsPlayingUpperBodyCallAnimation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsPlayingUpperBodyCallAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsPlayingUpperBodyCallAnimation");

	AShooterCharacter_IsPlayingUpperBodyCallAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsOutside
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsOutside()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsOutside");

	AShooterCharacter_IsOutside_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsNearTopOfLadder
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsNearTopOfLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsNearTopOfLadder");

	AShooterCharacter_IsNearTopOfLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsIndoorsAtLoc
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 actorLoc                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsIndoorsAtLoc(class UWorld* TheWorld, const struct FVector& actorLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsIndoorsAtLoc");

	AShooterCharacter_IsIndoorsAtLoc_Params params;
	params.TheWorld = TheWorld;
	params.actorLoc = actorLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsGrapplingHardAttached
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsGrapplingHardAttached()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsGrapplingHardAttached");

	AShooterCharacter_IsGrapplingHardAttached_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsFiring
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsFiring");

	AShooterCharacter_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsCurrentPassengerLimitCameraYaw
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsCurrentPassengerLimitCameraYaw()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsCurrentPassengerLimitCameraYaw");

	AShooterCharacter_IsCurrentPassengerLimitCameraYaw_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsCarriedAsPassenger
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsCarriedAsPassenger()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsCarriedAsPassenger");

	AShooterCharacter_IsCarriedAsPassenger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.IsBlockingWithShield
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::IsBlockingWithShield()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.IsBlockingWithShield");

	AShooterCharacter_IsBlockingWithShield_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.HideWeapon
// ()

void AShooterCharacter::HideWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.HideWeapon");

	AShooterCharacter_HideWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.GivePrimalItemWeapon
// ()
// Parameters:
// class UPrimalItem*             aPrimalItem                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::GivePrimalItemWeapon(class UPrimalItem* aPrimalItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GivePrimalItemWeapon");

	AShooterCharacter_GivePrimalItemWeapon_Params params;
	params.aPrimalItem = aPrimalItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.GiveDefaultWeaponTimer
// ()

void AShooterCharacter::GiveDefaultWeaponTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GiveDefaultWeaponTimer");

	AShooterCharacter_GiveDefaultWeaponTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.GiveDefaultWeapon
// ()
// Parameters:
// bool                           bForceGiveDefaultWeapon        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::GiveDefaultWeapon(bool bForceGiveDefaultWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GiveDefaultWeapon");

	AShooterCharacter_GiveDefaultWeapon_Params params;
	params.bForceGiveDefaultWeapon = bForceGiveDefaultWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.GetWeapon
// ()
// Parameters:
// class AShooterWeapon*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterWeapon* AShooterCharacter::GetWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetWeapon");

	AShooterCharacter_GetWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetTargetingSpeedModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterCharacter::GetTargetingSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetTargetingSpeedModifier");

	AShooterCharacter_GetTargetingSpeedModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetSpawnedForController
// ()
// Parameters:
// class AShooterPlayerController* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterPlayerController* AShooterCharacter::GetSpawnedForController()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetSpawnedForController");

	AShooterCharacter_GetSpawnedForController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetSeatingAnimation
// ()
// Parameters:
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* AShooterCharacter::GetSeatingAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetSeatingAnimation");

	AShooterCharacter_GetSeatingAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetRidingDinoAnimSpeedRatio
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterCharacter::GetRidingDinoAnimSpeedRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetRidingDinoAnimSpeedRatio");

	AShooterCharacter_GetRidingDinoAnimSpeedRatio_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetRidingDino
// ()
// Parameters:
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* AShooterCharacter::GetRidingDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetRidingDino");

	AShooterCharacter_GetRidingDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetPlayerData
// ()
// Parameters:
// class UPrimalPlayerData*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalPlayerData* AShooterCharacter::GetPlayerData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetPlayerData");

	AShooterCharacter_GetPlayerData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetPercentageOfHeadHairGrowth
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterCharacter::GetPercentageOfHeadHairGrowth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetPercentageOfHeadHairGrowth");

	AShooterCharacter_GetPercentageOfHeadHairGrowth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetPercentageOfFacialHairGrowth
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterCharacter::GetPercentageOfFacialHairGrowth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetPercentageOfFacialHairGrowth");

	AShooterCharacter_GetPercentageOfFacialHairGrowth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetLastAttackTime
// ()
// Parameters:
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double AShooterCharacter::GetLastAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetLastAttackTime");

	AShooterCharacter_GetLastAttackTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetHeadHairIndex
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterCharacter::GetHeadHairIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetHeadHairIndex");

	AShooterCharacter_GetHeadHairIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetHeadHairColor
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor AShooterCharacter::GetHeadHairColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetHeadHairColor");

	AShooterCharacter_GetHeadHairColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetFacialHairIndex
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterCharacter::GetFacialHairIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetFacialHairIndex");

	AShooterCharacter_GetFacialHairIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetFacialHairColor
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor AShooterCharacter::GetFacialHairColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetFacialHairColor");

	AShooterCharacter_GetFacialHairColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetDinoRidingMoveAnimation
// ()
// Parameters:
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* AShooterCharacter::GetDinoRidingMoveAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetDinoRidingMoveAnimation");

	AShooterCharacter_GetDinoRidingMoveAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetDinoRidingAnimation
// ()
// Parameters:
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* AShooterCharacter::GetDinoRidingAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetDinoRidingAnimation");

	AShooterCharacter_GetDinoRidingAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetBlockingShieldOffsets
// ()
// Parameters:
// struct FVector                 OutBlockingShieldFPVTranslation (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutBlockingShieldFPVRotation   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::GetBlockingShieldOffsets(struct FVector* OutBlockingShieldFPVTranslation, struct FRotator* OutBlockingShieldFPVRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetBlockingShieldOffsets");

	AShooterCharacter_GetBlockingShieldOffsets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutBlockingShieldFPVTranslation != nullptr)
		*OutBlockingShieldFPVTranslation = params.OutBlockingShieldFPVTranslation;
	if (OutBlockingShieldFPVRotation != nullptr)
		*OutBlockingShieldFPVRotation = params.OutBlockingShieldFPVRotation;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetAlternateStandingAnim
// ()
// Parameters:
// float                          OutBlendInTime                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutBlendOutTime                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* AShooterCharacter::GetAlternateStandingAnim(float* OutBlendInTime, float* OutBlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetAlternateStandingAnim");

	AShooterCharacter_GetAlternateStandingAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutBlendInTime != nullptr)
		*OutBlendInTime = params.OutBlendInTime;
	if (OutBlendOutTime != nullptr)
		*OutBlendOutTime = params.OutBlendOutTime;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetAdditiveStandingAnimNonAdditive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::GetAdditiveStandingAnimNonAdditive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetAdditiveStandingAnimNonAdditive");

	AShooterCharacter_GetAdditiveStandingAnimNonAdditive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetAdditiveStandingAnim
// ()
// Parameters:
// float                          OutBlendInTime                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutBlendOutTime                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* AShooterCharacter::GetAdditiveStandingAnim(float* OutBlendInTime, float* OutBlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetAdditiveStandingAnim");

	AShooterCharacter_GetAdditiveStandingAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutBlendInTime != nullptr)
		*OutBlendInTime = params.OutBlendInTime;
	if (OutBlendOutTime != nullptr)
		*OutBlendOutTime = params.OutBlendOutTime;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GetActualTargetingFOV
// ()
// Parameters:
// float                          DefaultTargetingFOV            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterCharacter::GetActualTargetingFOV(float DefaultTargetingFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GetActualTargetingFOV");

	AShooterCharacter_GetActualTargetingFOV_Params params;
	params.DefaultTargetingFOV = DefaultTargetingFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.GameStateHandleEvent
// ()
// Parameters:
// struct FName                   NameParam                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 VecParam                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::GameStateHandleEvent(const struct FName& NameParam, const struct FVector& VecParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.GameStateHandleEvent");

	AShooterCharacter_GameStateHandleEvent_Params params;
	params.NameParam = NameParam;
	params.VecParam = VecParam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.FinishWeaponSwitch
// ()

void AShooterCharacter::FinishWeaponSwitch()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.FinishWeaponSwitch");

	AShooterCharacter_FinishWeaponSwitch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.FindForPlayerController
// ()
// Parameters:
// class AShooterPlayerController* aPC                            (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* AShooterCharacter::FindForPlayerController(class AShooterPlayerController* aPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.FindForPlayerController");

	AShooterCharacter_FindForPlayerController_Params params;
	params.aPC = aPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.DetachGrapHookCable
// ()

void AShooterCharacter::DetachGrapHookCable()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.DetachGrapHookCable");

	AShooterCharacter_DetachGrapHookCable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.DetachFromLadder
// ()

void AShooterCharacter::DetachFromLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.DetachFromLadder");

	AShooterCharacter_DetachFromLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientUpdateTranspondersInfo
// ()
// Parameters:
// TArray<struct FTransponderInfo> TranspondersInfo               (ConstParm, Parm, ZeroConstructor)
// bool                           bNewData                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ClientUpdateTranspondersInfo(TArray<struct FTransponderInfo> TranspondersInfo, bool bNewData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientUpdateTranspondersInfo");

	AShooterCharacter_ClientUpdateTranspondersInfo_Params params;
	params.TranspondersInfo = TranspondersInfo;
	params.bNewData = bNewData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientReceiveNextWeaponID
// ()
// Parameters:
// struct FItemNetID              theItemID                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ClientReceiveNextWeaponID(const struct FItemNetID& theItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientReceiveNextWeaponID");

	AShooterCharacter_ClientReceiveNextWeaponID_Params params;
	params.theItemID = theItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientPlayHarvestAnim
// ()

void AShooterCharacter::ClientPlayHarvestAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientPlayHarvestAnim");

	AShooterCharacter_ClientPlayHarvestAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientOrderedMoveTo
// ()
// Parameters:
// struct FVector                 MoveToLoc                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ClientOrderedMoveTo(const struct FVector& MoveToLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientOrderedMoveTo");

	AShooterCharacter_ClientOrderedMoveTo_Params params;
	params.MoveToLoc = MoveToLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientOrderedAttackTarget
// ()
// Parameters:
// class AActor*                  AttackTarget                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ClientOrderedAttackTarget(class AActor* AttackTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientOrderedAttackTarget");

	AShooterCharacter_ClientOrderedAttackTarget_Params params;
	params.AttackTarget = AttackTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientNotifyTribeRequest
// ()
// Parameters:
// class FString                  RequestTribeName               (Parm, ZeroConstructor)
// class AShooterCharacter*       PlayerCharacter                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ClientNotifyTribeRequest(const class FString& RequestTribeName, class AShooterCharacter* PlayerCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientNotifyTribeRequest");

	AShooterCharacter_ClientNotifyTribeRequest_Params params;
	params.RequestTribeName = RequestTribeName;
	params.PlayerCharacter = PlayerCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientNetEndClimbingLadder
// ()

void AShooterCharacter::ClientNetEndClimbingLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientNetEndClimbingLadder");

	AShooterCharacter_ClientNetEndClimbingLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientInviteToAlliance
// ()
// Parameters:
// int                            RequestingTeam                 (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       AllianceID                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  AllianceName                   (Parm, ZeroConstructor)
// class FString                  InviteeName                    (Parm, ZeroConstructor)

void AShooterCharacter::ClientInviteToAlliance(int RequestingTeam, uint32_t AllianceID, const class FString& AllianceName, const class FString& InviteeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientInviteToAlliance");

	AShooterCharacter_ClientInviteToAlliance_Params params;
	params.RequestingTeam = RequestingTeam;
	params.AllianceID = AllianceID;
	params.AllianceName = AllianceName;
	params.InviteeName = InviteeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClientClearTribeRequest
// ()

void AShooterCharacter::ClientClearTribeRequest()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClientClearTribeRequest");

	AShooterCharacter_ClientClearTribeRequest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClearSpawnAnim
// ()

void AShooterCharacter::ClearSpawnAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClearSpawnAnim");

	AShooterCharacter_ClearSpawnAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ClearRidingDino
// ()
// Parameters:
// bool                           bFromDino                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            OverrideUnboardDirection       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceEvenIfBuffPreventsClear  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::ClearRidingDino(bool bFromDino, int OverrideUnboardDirection, bool bForceEvenIfBuffPreventsClear)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ClearRidingDino");

	AShooterCharacter_ClearRidingDino_Params params;
	params.bFromDino = bFromDino;
	params.OverrideUnboardDirection = OverrideUnboardDirection;
	params.bForceEvenIfBuffPreventsClear = bForceEvenIfBuffPreventsClear;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.CallGameStateHandleEvent
// ()
// Parameters:
// struct FName                   NameParam                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 VecParam                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterCharacter::CallGameStateHandleEvent(const struct FName& NameParam, const struct FVector& VecParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.CallGameStateHandleEvent");

	AShooterCharacter_CallGameStateHandleEvent_Params params;
	params.NameParam = NameParam;
	params.VecParam = VecParam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.BuffsPreventFirstPerson
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::BuffsPreventFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.BuffsPreventFirstPerson");

	AShooterCharacter_BuffsPreventFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacter.BPUnstasis
// ()

void AShooterCharacter::BPUnstasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.BPUnstasis");

	AShooterCharacter_BPUnstasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.BPSetFirstPersonMasterPoseComponent
// ()
// Parameters:
// class USkeletalMeshComponent*  firstPersonMasterPosecomponent (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterCharacter::BPSetFirstPersonMasterPoseComponent(class USkeletalMeshComponent* firstPersonMasterPosecomponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.BPSetFirstPersonMasterPoseComponent");

	AShooterCharacter_BPSetFirstPersonMasterPoseComponent_Params params;
	params.firstPersonMasterPosecomponent = firstPersonMasterPosecomponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.BPNonDedicatedPostAnimUpdate
// ()

void AShooterCharacter::BPNonDedicatedPostAnimUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.BPNonDedicatedPostAnimUpdate");

	AShooterCharacter_BPNonDedicatedPostAnimUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.AuthPostSpawnInit
// ()

void AShooterCharacter::AuthPostSpawnInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.AuthPostSpawnInit");

	AShooterCharacter_AuthPostSpawnInit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.AttachToLadder
// ()
// Parameters:
// class USceneComponent*         Parent                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterCharacter::AttachToLadder(class USceneComponent* Parent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.AttachToLadder");

	AShooterCharacter_AttachToLadder_Params params;
	params.Parent = Parent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ApplyBoneModifiers
// ()

void AShooterCharacter::ApplyBoneModifiers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ApplyBoneModifiers");

	AShooterCharacter_ApplyBoneModifiers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.ApplyBodyColors
// ()
// Parameters:
// class USkeletalMeshComponent*  toMesh                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void AShooterCharacter::ApplyBodyColors(class USkeletalMeshComponent* toMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.ApplyBodyColors");

	AShooterCharacter_ApplyBodyColors_Params params;
	params.toMesh = toMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacter.AnimUseAimOffset
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterCharacter::AnimUseAimOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacter.AnimUseAimOffset");

	AShooterCharacter_AnimUseAimOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.SetInputMode
// ()

void UPrimalUI::SetInputMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.SetInputMode");

	UPrimalUI_SetInputMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.RemovedFromViewport
// ()

void UPrimalUI::RemovedFromViewport()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.RemovedFromViewport");

	UPrimalUI_RemovedFromViewport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.OnMouseButtonDownEvent
// ()
// Parameters:
// struct FGeometry               MyGeometry                     (Parm, IsPlainOldData)
// struct FPointerEvent           MouseEvent                     (ConstParm, Parm, OutParm, ReferenceParm)
// struct FEventReply             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FEventReply UPrimalUI::OnMouseButtonDownEvent(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.OnMouseButtonDownEvent");

	UPrimalUI_OnMouseButtonDownEvent_Params params;
	params.MyGeometry = MyGeometry;
	params.MouseEvent = MouseEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.OnKeyUpEvent
// ()
// Parameters:
// struct FGeometry               MyGeometry                     (Parm, IsPlainOldData)
// struct FKeyboardEvent          InKeyboardEvent                (Parm)
// struct FEventReply             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FEventReply UPrimalUI::OnKeyUpEvent(const struct FGeometry& MyGeometry, const struct FKeyboardEvent& InKeyboardEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.OnKeyUpEvent");

	UPrimalUI_OnKeyUpEvent_Params params;
	params.MyGeometry = MyGeometry;
	params.InKeyboardEvent = InKeyboardEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.OnKeyDownEvent
// ()
// Parameters:
// struct FGeometry               MyGeometry                     (Parm, IsPlainOldData)
// struct FKeyboardEvent          InKeyboardEvent                (Parm)
// struct FEventReply             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FEventReply UPrimalUI::OnKeyDownEvent(const struct FGeometry& MyGeometry, const struct FKeyboardEvent& InKeyboardEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.OnKeyDownEvent");

	UPrimalUI_OnKeyDownEvent_Params params;
	params.MyGeometry = MyGeometry;
	params.InKeyboardEvent = InKeyboardEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.OnHTTPGetResponse__DelegateSignature
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  StringResult                   (Parm, ZeroConstructor)

void UPrimalUI::OnHTTPGetResponse__DelegateSignature(bool bSuccess, const class FString& StringResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.OnHTTPGetResponse__DelegateSignature");

	UPrimalUI_OnHTTPGetResponse__DelegateSignature_Params params;
	params.bSuccess = bSuccess;
	params.StringResult = StringResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.OnConfirmationDialogClosed
// ()
// Parameters:
// bool                           bAccept                        (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalUI::OnConfirmationDialogClosed(bool bAccept)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.OnConfirmationDialogClosed");

	UPrimalUI_OnConfirmationDialogClosed_Params params;
	params.bAccept = bAccept;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.HTTPGetString
// ()
// Parameters:
// class FString                  InURL                          (Parm, ZeroConstructor)

void UPrimalUI::HTTPGetString(const class FString& InURL)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.HTTPGetString");

	UPrimalUI_HTTPGetString_Params params;
	params.InURL = InURL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.GetShooterHUD
// ()
// Parameters:
// class AShooterHUD*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterHUD* UPrimalUI::GetShooterHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.GetShooterHUD");

	UPrimalUI_GetShooterHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.GetPlayerState
// ()
// Parameters:
// class AShooterPlayerState*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterPlayerState* UPrimalUI::GetPlayerState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.GetPlayerState");

	UPrimalUI_GetPlayerState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.GetPC
// ()
// Parameters:
// class AShooterPlayerController* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterPlayerController* UPrimalUI::GetPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.GetPC");

	UPrimalUI_GetPC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.GetPawn
// ()
// Parameters:
// class APrimalCharacter*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalCharacter* UPrimalUI::GetPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.GetPawn");

	UPrimalUI_GetPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalUI.CloseWithAnimation
// ()

void UPrimalUI::CloseWithAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.CloseWithAnimation");

	UPrimalUI_CloseWithAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.ClickedSecondaryButton
// ()
// Parameters:
// class UWidget*                 clickedWidget                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalUI::ClickedSecondaryButton(class UWidget* clickedWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.ClickedSecondaryButton");

	UPrimalUI_ClickedSecondaryButton_Params params;
	params.clickedWidget = clickedWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.ClickedButton
// ()
// Parameters:
// class UWidget*                 clickedWidget                  (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalUI::ClickedButton(class UWidget* clickedWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.ClickedButton");

	UPrimalUI_ClickedButton_Params params;
	params.clickedWidget = clickedWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.BPProcessSplitscreenAndAddToViewport
// ()
// Parameters:
// bool                           ScaleX                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalUI::BPProcessSplitscreenAndAddToViewport(bool ScaleX)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.BPProcessSplitscreenAndAddToViewport");

	UPrimalUI_BPProcessSplitscreenAndAddToViewport_Params params;
	params.ScaleX = ScaleX;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalUI.AddedToViewport
// ()

void UPrimalUI::AddedToViewport()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalUI.AddedToViewport");

	UPrimalUI_AddedToViewport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Spawn.SlotButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Spawn::SlotButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Spawn.SlotButtonSelected");

	UUI_Spawn_SlotButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Spawn.SavedPresetListButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Spawn::SavedPresetListButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Spawn.SavedPresetListButtonSelected");

	UUI_Spawn_SavedPresetListButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Spawn.RespawnSlotButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Spawn::RespawnSlotButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Spawn.RespawnSlotButtonSelected");

	UUI_Spawn_RespawnSlotButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Spawn.OnSaveToFileEditableCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Spawn::OnSaveToFileEditableCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Spawn.OnSaveToFileEditableCommitted");

	UUI_Spawn_OnSaveToFileEditableCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Spawn.OnBedFilterChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_Spawn::OnBedFilterChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Spawn.OnBedFilterChanged");

	UUI_Spawn_OnBedFilterChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Spawn.MultiSelectSpawnPointButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Spawn::MultiSelectSpawnPointButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Spawn.MultiSelectSpawnPointButtonSelected");

	UUI_Spawn_MultiSelectSpawnPointButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.UpdateWeightStat
// ()
// Parameters:
// bool                           bForceSetValue                 (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::UpdateWeightStat(bool bForceSetValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.UpdateWeightStat");

	UPrimalCharacterStatusComponent_UpdateWeightStat_Params params;
	params.bForceSetValue = bForceSetValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.UpdatedCurrentStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          amount                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bManualModification            (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDamageDontKill                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontAdjustOtherStats          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::UpdatedCurrentStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float amount, bool bManualModification, class UClass* DamageTypeClass, bool bDamageDontKill, bool bDontAdjustOtherStats)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.UpdatedCurrentStatusValue");

	UPrimalCharacterStatusComponent_UpdatedCurrentStatusValue_Params params;
	params.ValueType = ValueType;
	params.amount = amount;
	params.bManualModification = bManualModification;
	params.DamageTypeClass = DamageTypeClass;
	params.bDamageDontKill = bDamageDontKill;
	params.bDontAdjustOtherStats = bDontAdjustOtherStats;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.TickStatus
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceStatusUpdate             (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::TickStatus(float DeltaTime, bool bForceStatusUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.TickStatus");

	UPrimalCharacterStatusComponent_TickStatus_Params params;
	params.DeltaTime = DeltaTime;
	params.bForceStatusUpdate = bForceStatusUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.SetMaxStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> statType                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          newValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::SetMaxStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> statType, float newValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.SetMaxStatusValue");

	UPrimalCharacterStatusComponent_SetMaxStatusValue_Params params;
	params.statType = statType;
	params.newValue = newValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.SetLevelUpPoints
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTamedPoints                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            newPoints                      (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::SetLevelUpPoints(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, bool bTamedPoints, int newPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.SetLevelUpPoints");

	UPrimalCharacterStatusComponent_SetLevelUpPoints_Params params;
	params.ValueType = ValueType;
	params.bTamedPoints = bTamedPoints;
	params.newPoints = newPoints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.SetExtraCharacterLevel
// ()
// Parameters:
// int                            NewExtraCharacterLevel         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::SetExtraCharacterLevel(int NewExtraCharacterLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.SetExtraCharacterLevel");

	UPrimalCharacterStatusComponent_SetExtraCharacterLevel_Params params;
	params.NewExtraCharacterLevel = NewExtraCharacterLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.SetBaseLevelNoStatChange
// ()
// Parameters:
// int                            Level                          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::SetBaseLevelNoStatChange(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.SetBaseLevelNoStatChange");

	UPrimalCharacterStatusComponent_SetBaseLevelNoStatChange_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.SetBaseLevelCustomized
// ()
// Parameters:
// int                            Level                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FStatValuePair>  CustomBaseStats                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<TEnumAsByte<EPrimalCharacterStatusValue>> PrioritizeStats                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bDontCurrentSetToMax           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::SetBaseLevelCustomized(int Level, TArray<struct FStatValuePair> CustomBaseStats, TArray<TEnumAsByte<EPrimalCharacterStatusValue>> PrioritizeStats, bool bDontCurrentSetToMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.SetBaseLevelCustomized");

	UPrimalCharacterStatusComponent_SetBaseLevelCustomized_Params params;
	params.Level = Level;
	params.CustomBaseStats = CustomBaseStats;
	params.PrioritizeStats = PrioritizeStats;
	params.bDontCurrentSetToMax = bDontCurrentSetToMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.SetBaseLevel
// ()
// Parameters:
// int                            Level                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontCurrentSetToMax           (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::SetBaseLevel(int Level, bool bDontCurrentSetToMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.SetBaseLevel");

	UPrimalCharacterStatusComponent_SetBaseLevel_Params params;
	params.Level = Level;
	params.bDontCurrentSetToMax = bDontCurrentSetToMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.SetAllStatsToMaximum
// ()

void UPrimalCharacterStatusComponent::SetAllStatsToMaximum()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.SetAllStatsToMaximum");

	UPrimalCharacterStatusComponent_SetAllStatsToMaximum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.ServerSyncReplicatedValues
// ()

void UPrimalCharacterStatusComponent::ServerSyncReplicatedValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.ServerSyncReplicatedValues");

	UPrimalCharacterStatusComponent_ServerSyncReplicatedValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.RescaleMaxStat
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> LevelUpValueType               (Parm, ZeroConstructor, IsPlainOldData)
// float                          TargetValue                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPercentOfTrueValue          (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::RescaleMaxStat(TEnumAsByte<EPrimalCharacterStatusValue> LevelUpValueType, float TargetValue, bool bIsPercentOfTrueValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.RescaleMaxStat");

	UPrimalCharacterStatusComponent_RescaleMaxStat_Params params;
	params.LevelUpValueType = LevelUpValueType;
	params.TargetValue = TargetValue;
	params.bIsPercentOfTrueValue = bIsPercentOfTrueValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.RescaleAllStats
// ()

void UPrimalCharacterStatusComponent::RescaleAllStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.RescaleAllStats");

	UPrimalCharacterStatusComponent_RescaleAllStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.OnRep_ReplicatedExperiencePoints
// ()

void UPrimalCharacterStatusComponent::OnRep_ReplicatedExperiencePoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.OnRep_ReplicatedExperiencePoints");

	UPrimalCharacterStatusComponent_OnRep_ReplicatedExperiencePoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.OnRep_GlobalMaxStatusValues
// ()

void UPrimalCharacterStatusComponent::OnRep_GlobalMaxStatusValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.OnRep_GlobalMaxStatusValues");

	UPrimalCharacterStatusComponent_OnRep_GlobalMaxStatusValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.OnRep_GlobalCurrentStatusValues
// ()

void UPrimalCharacterStatusComponent::OnRep_GlobalCurrentStatusValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.OnRep_GlobalCurrentStatusValues");

	UPrimalCharacterStatusComponent_OnRep_GlobalCurrentStatusValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.OnRep_GlobalBaseLevelMaxStatusValues
// ()

void UPrimalCharacterStatusComponent::OnRep_GlobalBaseLevelMaxStatusValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.OnRep_GlobalBaseLevelMaxStatusValues");

	UPrimalCharacterStatusComponent_OnRep_GlobalBaseLevelMaxStatusValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.OnRep_CurrentStatusValues
// ()

void UPrimalCharacterStatusComponent::OnRep_CurrentStatusValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.OnRep_CurrentStatusValues");

	UPrimalCharacterStatusComponent_OnRep_CurrentStatusValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.NetSyncMaxStatusValues
// ()
// Parameters:
// TArray<float>                  NetMaxStatusValues             (ConstParm, Parm, ZeroConstructor)
// TArray<float>                  NetBaseMaxStatusValues         (ConstParm, Parm, ZeroConstructor)

void UPrimalCharacterStatusComponent::NetSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.NetSyncMaxStatusValues");

	UPrimalCharacterStatusComponent_NetSyncMaxStatusValues_Params params;
	params.NetMaxStatusValues = NetMaxStatusValues;
	params.NetBaseMaxStatusValues = NetBaseMaxStatusValues;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.ModifyCurrentStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          amount                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPercentOfMax                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPercentOfCurrent              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bManualModification            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetValue                      (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDamageDontKill                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSetValue                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::ModifyCurrentStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float amount, bool bPercentOfMax, bool bPercentOfCurrent, bool bManualModification, bool bSetValue, class UClass* DamageTypeClass, bool bDamageDontKill, bool bForceSetValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.ModifyCurrentStatusValue");

	UPrimalCharacterStatusComponent_ModifyCurrentStatusValue_Params params;
	params.ValueType = ValueType;
	params.amount = amount;
	params.bPercentOfMax = bPercentOfMax;
	params.bPercentOfCurrent = bPercentOfCurrent;
	params.bManualModification = bManualModification;
	params.bSetValue = bSetValue;
	params.DamageTypeClass = DamageTypeClass;
	params.bDamageDontKill = bDamageDontKill;
	params.bForceSetValue = bForceSetValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.IsInStatusState
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusState> StateType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalCharacterStatusComponent::IsInStatusState(TEnumAsByte<EPrimalCharacterStatusState> StateType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.IsInStatusState");

	UPrimalCharacterStatusComponent_IsInStatusState_Params params;
	params.StateType = StateType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.IsAtMaxLevel
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalCharacterStatusComponent::IsAtMaxLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.IsAtMaxLevel");

	UPrimalCharacterStatusComponent_IsAtMaxLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.HasExperienceForLevelUp
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalCharacterStatusComponent::HasExperienceForLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.HasExperienceForLevelUp");

	UPrimalCharacterStatusComponent_HasExperienceForLevelUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetStatusValueString
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bValueOnly                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalCharacterStatusComponent::GetStatusValueString(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, bool bValueOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetStatusValueString");

	UPrimalCharacterStatusComponent_GetStatusValueString_Params params;
	params.ValueType = ValueType;
	params.bValueOnly = bValueOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetStatusValueRecoveryRate
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::GetStatusValueRecoveryRate(TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetStatusValueRecoveryRate");

	UPrimalCharacterStatusComponent_GetStatusValueRecoveryRate_Params params;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetStatusNameString
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalCharacterStatusComponent::GetStatusNameString(TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetStatusNameString");

	UPrimalCharacterStatusComponent_GetStatusNameString_Params params;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetStatusMaxValueString
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bValueOnly                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UPrimalCharacterStatusComponent::GetStatusMaxValueString(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, bool bValueOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetStatusMaxValueString");

	UPrimalCharacterStatusComponent_GetStatusMaxValueString_Params params;
	params.ValueType = ValueType;
	params.bValueOnly = bValueOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetRawStatusValueRecoveryRate
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::GetRawStatusValueRecoveryRate(TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetRawStatusValueRecoveryRate");

	UPrimalCharacterStatusComponent_GetRawStatusValueRecoveryRate_Params params;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetMovementSpeedModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::GetMovementSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetMovementSpeedModifier");

	UPrimalCharacterStatusComponent_GetMovementSpeedModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetMeleeDamageModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::GetMeleeDamageModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetMeleeDamageModifier");

	UPrimalCharacterStatusComponent_GetMeleeDamageModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetLevelUpPoints
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTamedPoints                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalCharacterStatusComponent::GetLevelUpPoints(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, bool bTamedPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetLevelUpPoints");

	UPrimalCharacterStatusComponent_GetLevelUpPoints_Params params;
	params.ValueType = ValueType;
	params.bTamedPoints = bTamedPoints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetExtraCharacterLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalCharacterStatusComponent::GetExtraCharacterLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetExtraCharacterLevel");

	UPrimalCharacterStatusComponent_GetExtraCharacterLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetExperienceRequiredForPreviousLevelUp
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::GetExperienceRequiredForPreviousLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetExperienceRequiredForPreviousLevelUp");

	UPrimalCharacterStatusComponent_GetExperienceRequiredForPreviousLevelUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetExperienceRequiredForNextLevelUp
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::GetExperienceRequiredForNextLevelUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetExperienceRequiredForNextLevelUp");

	UPrimalCharacterStatusComponent_GetExperienceRequiredForNextLevelUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetDinoFoodConsumptionRateMultiplier
// ()
// Parameters:
// float                          amount                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::GetDinoFoodConsumptionRateMultiplier(float* amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetDinoFoodConsumptionRateMultiplier");

	UPrimalCharacterStatusComponent_GetDinoFoodConsumptionRateMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (amount != nullptr)
		*amount = params.amount;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetCraftingSpeedModifier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::GetCraftingSpeedModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetCraftingSpeedModifier");

	UPrimalCharacterStatusComponent_GetCraftingSpeedModifier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetCharacterLevel
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalCharacterStatusComponent::GetCharacterLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetCharacterLevel");

	UPrimalCharacterStatusComponent_GetCharacterLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.GetBaseLevelFromLevelUpPoints
// ()
// Parameters:
// bool                           bIncludePlayerAddedLevels      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalCharacterStatusComponent::GetBaseLevelFromLevelUpPoints(bool bIncludePlayerAddedLevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.GetBaseLevelFromLevelUpPoints");

	UPrimalCharacterStatusComponent_GetBaseLevelFromLevelUpPoints_Params params;
	params.bIncludePlayerAddedLevels = bIncludePlayerAddedLevels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.ConvertIntToCharacterStatusEnum
// ()
// Parameters:
// int                            InInteger                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalCharacterStatusValue> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

TEnumAsByte<EPrimalCharacterStatusValue> UPrimalCharacterStatusComponent::ConvertIntToCharacterStatusEnum(int InInteger)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.ConvertIntToCharacterStatusEnum");

	UPrimalCharacterStatusComponent_ConvertIntToCharacterStatusEnum_Params params;
	params.InInteger = InInteger;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.ClientSyncMaxStatusValues
// ()
// Parameters:
// TArray<float>                  NetMaxStatusValues             (ConstParm, Parm, ZeroConstructor)
// TArray<float>                  NetBaseMaxStatusValues         (ConstParm, Parm, ZeroConstructor)

void UPrimalCharacterStatusComponent::ClientSyncMaxStatusValues(TArray<float> NetMaxStatusValues, TArray<float> NetBaseMaxStatusValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.ClientSyncMaxStatusValues");

	UPrimalCharacterStatusComponent_ClientSyncMaxStatusValues_Params params;
	params.NetMaxStatusValues = NetMaxStatusValues;
	params.NetBaseMaxStatusValues = NetBaseMaxStatusValues;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.ClearAllLevelUpPoints
// ()
// Parameters:
// bool                           bTamedPoints                   (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::ClearAllLevelUpPoints(bool bTamedPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.ClearAllLevelUpPoints");

	UPrimalCharacterStatusComponent_ClearAllLevelUpPoints_Params params;
	params.bTamedPoints = bTamedPoints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.CanLevelUp
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> LevelUpValueType               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckExperience               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPrimalCharacterStatusComponent::CanLevelUp(TEnumAsByte<EPrimalCharacterStatusValue> LevelUpValueType, bool bCheckExperience)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.CanLevelUp");

	UPrimalCharacterStatusComponent_CanLevelUp_Params params;
	params.LevelUpValueType = LevelUpValueType;
	params.bCheckExperience = bCheckExperience;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPSetRecoveryRateStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          newValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::BPSetRecoveryRateStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float newValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPSetRecoveryRateStatusValue");

	UPrimalCharacterStatusComponent_BPSetRecoveryRateStatusValue_Params params;
	params.ValueType = ValueType;
	params.newValue = newValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPModifyMaxLevel
// ()
// Parameters:
// int                            InMaxLevel                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalCharacterStatusComponent::BPModifyMaxLevel(int InMaxLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPModifyMaxLevel");

	UPrimalCharacterStatusComponent_BPModifyMaxLevel_Params params;
	params.InMaxLevel = InMaxLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPModifyMaxExperiencePoints
// ()
// Parameters:
// float                          InMaxExperiencePoints          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::BPModifyMaxExperiencePoints(float InMaxExperiencePoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPModifyMaxExperiencePoints");

	UPrimalCharacterStatusComponent_BPModifyMaxExperiencePoints_Params params;
	params.InMaxExperiencePoints = InMaxExperiencePoints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPGetPercentStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::BPGetPercentStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPGetPercentStatusValue");

	UPrimalCharacterStatusComponent_BPGetPercentStatusValue_Params params;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPGetMaxStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::BPGetMaxStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPGetMaxStatusValue");

	UPrimalCharacterStatusComponent_BPGetMaxStatusValue_Params params;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPGetCurrentStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::BPGetCurrentStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPGetCurrentStatusValue");

	UPrimalCharacterStatusComponent_BPGetCurrentStatusValue_Params params;
	params.ValueType = ValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPDirectSetMaxStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          newValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::BPDirectSetMaxStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float newValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPDirectSetMaxStatusValue");

	UPrimalCharacterStatusComponent_BPDirectSetMaxStatusValue_Params params;
	params.ValueType = ValueType;
	params.newValue = newValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPDirectSetCurrentStatusValue
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          newValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::BPDirectSetCurrentStatusValue(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float newValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPDirectSetCurrentStatusValue");

	UPrimalCharacterStatusComponent_BPDirectSetCurrentStatusValue_Params params;
	params.ValueType = ValueType;
	params.newValue = newValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.BPAdjustStatusValueModification
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          amount                         (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bManualModification            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UPrimalCharacterStatusComponent::BPAdjustStatusValueModification(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float amount, class UClass* DamageTypeClass, bool bManualModification)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.BPAdjustStatusValueModification");

	UPrimalCharacterStatusComponent_BPAdjustStatusValueModification_Params params;
	params.ValueType = ValueType;
	params.amount = amount;
	params.DamageTypeClass = DamageTypeClass;
	params.bManualModification = bManualModification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalCharacterStatusComponent.AddStatusValueModifier
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          amount                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bContinueOnUnchangedValue      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetValue                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            StatusValueModifierDescriptionIndex (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bResetExistingModifierDescriptionIndex (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitExistingModifierDescriptionToMaxAmount (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetAdditionalValue            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalCharacterStatusValue> StopAtValueNearMax             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMakeUntameable                (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ScaleValueByCharacterDamageType (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::AddStatusValueModifier(TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float amount, float Speed, bool bContinueOnUnchangedValue, bool bSetValue, int StatusValueModifierDescriptionIndex, bool bResetExistingModifierDescriptionIndex, float LimitExistingModifierDescriptionToMaxAmount, bool bSetAdditionalValue, TEnumAsByte<EPrimalCharacterStatusValue> StopAtValueNearMax, bool bMakeUntameable, class UClass* ScaleValueByCharacterDamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.AddStatusValueModifier");

	UPrimalCharacterStatusComponent_AddStatusValueModifier_Params params;
	params.ValueType = ValueType;
	params.amount = amount;
	params.Speed = Speed;
	params.bContinueOnUnchangedValue = bContinueOnUnchangedValue;
	params.bSetValue = bSetValue;
	params.StatusValueModifierDescriptionIndex = StatusValueModifierDescriptionIndex;
	params.bResetExistingModifierDescriptionIndex = bResetExistingModifierDescriptionIndex;
	params.LimitExistingModifierDescriptionToMaxAmount = LimitExistingModifierDescriptionToMaxAmount;
	params.bSetAdditionalValue = bSetAdditionalValue;
	params.StopAtValueNearMax = StopAtValueNearMax;
	params.bMakeUntameable = bMakeUntameable;
	params.ScaleValueByCharacterDamageType = ScaleValueByCharacterDamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalCharacterStatusComponent.AddExperience
// ()
// Parameters:
// float                          HowMuch                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShareWithTribe                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EXPType>           XPType                         (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalCharacterStatusComponent::AddExperience(float HowMuch, bool bShareWithTribe, TEnumAsByte<EXPType> XPType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalCharacterStatusComponent.AddExperience");

	UPrimalCharacterStatusComponent_AddExperience_Params params;
	params.HowMuch = HowMuch;
	params.bShareWithTribe = bShareWithTribe;
	params.XPType = XPType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.UpdateAggro
// ()

void APrimalDinoAIController::UpdateAggro()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.UpdateAggro");

	APrimalDinoAIController_UpdateAggro_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.StopBrainComponent
// ()
// Parameters:
// class FString                  reason                         (Parm, ZeroConstructor)

void APrimalDinoAIController::StopBrainComponent(const class FString& reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.StopBrainComponent");

	APrimalDinoAIController_StopBrainComponent_Params params;
	params.reason = reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.StaticGetRandomWanderDestination
// ()
// Parameters:
// class APrimalDinoCharacter*    TargetCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoAIController* TargetAIController             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 locOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          randomOffsetMultiplier         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseRandomNegativeXDir         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOrientRandOffsetByRotation    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                orientRandOffsetByRotation     (Parm, ZeroConstructor, IsPlainOldData)
// float                          GroundCheckSpreadOverride      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoAIController::StaticGetRandomWanderDestination(class APrimalDinoCharacter* TargetCharacter, class APrimalDinoAIController* TargetAIController, const struct FVector& locOverride, float randomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& orientRandOffsetByRotation, float GroundCheckSpreadOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.StaticGetRandomWanderDestination");

	APrimalDinoAIController_StaticGetRandomWanderDestination_Params params;
	params.TargetCharacter = TargetCharacter;
	params.TargetAIController = TargetAIController;
	params.locOverride = locOverride;
	params.randomOffsetMultiplier = randomOffsetMultiplier;
	params.bUseRandomNegativeXDir = bUseRandomNegativeXDir;
	params.bOrientRandOffsetByRotation = bOrientRandOffsetByRotation;
	params.orientRandOffsetByRotation = orientRandOffsetByRotation;
	params.GroundCheckSpreadOverride = GroundCheckSpreadOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.ShouldForceRunWhenAttacking
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::ShouldForceRunWhenAttacking()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ShouldForceRunWhenAttacking");

	APrimalDinoAIController_ShouldForceRunWhenAttacking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.SetTarget
// ()
// Parameters:
// class AActor*                  InTarget                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDontAddAggro                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverlapFoundTarget            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoAIController::SetTarget(class AActor* InTarget, bool bDontAddAggro, bool bOverlapFoundTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.SetTarget");

	APrimalDinoAIController_SetTarget_Params params;
	params.InTarget = InTarget;
	params.bDontAddAggro = bDontAddAggro;
	params.bOverlapFoundTarget = bOverlapFoundTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.SetAttackRotationRate
// ()

void APrimalDinoAIController::SetAttackRotationRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.SetAttackRotationRate");

	APrimalDinoAIController_SetAttackRotationRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.SetAttackGroundSpeed
// ()

void APrimalDinoAIController::SetAttackGroundSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.SetAttackGroundSpeed");

	APrimalDinoAIController_SetAttackGroundSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.ResumeBrainComponent
// ()
// Parameters:
// class FString                  reason                         (Parm, ZeroConstructor)

void APrimalDinoAIController::ResumeBrainComponent(const class FString& reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ResumeBrainComponent");

	APrimalDinoAIController_ResumeBrainComponent_Params params;
	params.reason = reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.RestartBrainComponent
// ()

void APrimalDinoAIController::RestartBrainComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.RestartBrainComponent");

	APrimalDinoAIController_RestartBrainComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.ResetRotationUseAcceleration
// ()

void APrimalDinoAIController::ResetRotationUseAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ResetRotationUseAcceleration");

	APrimalDinoAIController_ResetRotationUseAcceleration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.ResetRotationRate
// ()

void APrimalDinoAIController::ResetRotationRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ResetRotationRate");

	APrimalDinoAIController_ResetRotationRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.ResetGroundSpeed
// ()

void APrimalDinoAIController::ResetGroundSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ResetGroundSpeed");

	APrimalDinoAIController_ResetGroundSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.ResetAccelerationFollowsRotation
// ()

void APrimalDinoAIController::ResetAccelerationFollowsRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ResetAccelerationFollowsRotation");

	APrimalDinoAIController_ResetAccelerationFollowsRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.RecoverMovement
// ()

void APrimalDinoAIController::RecoverMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.RecoverMovement");

	APrimalDinoAIController_RecoverMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.PlayStartledAnim
// ()

void APrimalDinoAIController::PlayStartledAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.PlayStartledAnim");

	APrimalDinoAIController_PlayStartledAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.PauseBrainComponent
// ()
// Parameters:
// class FString                  reason                         (Parm, ZeroConstructor)

void APrimalDinoAIController::PauseBrainComponent(const class FString& reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.PauseBrainComponent");

	APrimalDinoAIController_PauseBrainComponent_Params params;
	params.reason = reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.OnLosingTargetEvent
// ()

void APrimalDinoAIController::OnLosingTargetEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.OnLosingTargetEvent");

	APrimalDinoAIController_OnLosingTargetEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.IsWithinAttackRangeAndCalculateBestAttack
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAttackChanged                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::IsWithinAttackRangeAndCalculateBestAttack(class AActor* Other, bool* bAttackChanged)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.IsWithinAttackRangeAndCalculateBestAttack");

	APrimalDinoAIController_IsWithinAttackRangeAndCalculateBestAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bAttackChanged != nullptr)
		*bAttackChanged = params.bAttackChanged;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.IsWithinAttackRange
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUseLastAttackIndex       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::IsWithinAttackRange(class AActor* Other, bool bForceUseLastAttackIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.IsWithinAttackRange");

	APrimalDinoAIController_IsWithinAttackRange_Params params;
	params.Other = Other;
	params.bForceUseLastAttackIndex = bForceUseLastAttackIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.IsLogicPaused
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::IsLogicPaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.IsLogicPaused");

	APrimalDinoAIController_IsLogicPaused_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.IsForceTargetDinoRider
// ()
// Parameters:
// class AShooterCharacter*       playerTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::IsForceTargetDinoRider(class AShooterCharacter* playerTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.IsForceTargetDinoRider");

	APrimalDinoAIController_IsForceTargetDinoRider_Params params;
	params.playerTarget = playerTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetWanderAroundActorDestination
// ()
// Parameters:
// class APrimalDinoCharacter*    DinoCharacter                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 originalDestination            (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoAIController::GetWanderAroundActorDestination(class APrimalDinoCharacter* DinoCharacter, const struct FVector& originalDestination)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetWanderAroundActorDestination");

	APrimalDinoAIController_GetWanderAroundActorDestination_Params params;
	params.DinoCharacter = DinoCharacter;
	params.originalDestination = originalDestination;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetTarget
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APrimalDinoAIController::GetTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetTarget");

	APrimalDinoAIController_GetTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetRandomWanderDestination
// ()
// Parameters:
// struct FVector                 locOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          randomOffsetMultiplier         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseRandomNegativeXDir         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOrientRandOffsetByRotation    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                orientRandOffsetByRotation     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoAIController::GetRandomWanderDestination(const struct FVector& locOverride, float randomOffsetMultiplier, bool bUseRandomNegativeXDir, bool bOrientRandOffsetByRotation, const struct FRotator& orientRandOffsetByRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetRandomWanderDestination");

	APrimalDinoAIController_GetRandomWanderDestination_Params params;
	params.locOverride = locOverride;
	params.randomOffsetMultiplier = randomOffsetMultiplier;
	params.bUseRandomNegativeXDir = bUseRandomNegativeXDir;
	params.bOrientRandOffsetByRotation = bOrientRandOffsetByRotation;
	params.orientRandOffsetByRotation = orientRandOffsetByRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetMinAttackRange
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::GetMinAttackRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetMinAttackRange");

	APrimalDinoAIController_GetMinAttackRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetLandingLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalDinoAIController::GetLandingLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetLandingLocation");

	APrimalDinoAIController_GetLandingLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetCurrentAttackIndex
// ()
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char APrimalDinoAIController::GetCurrentAttackIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetCurrentAttackIndex");

	APrimalDinoAIController_GetCurrentAttackIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetControllerPawn
// ()
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APawn* APrimalDinoAIController::GetControllerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetControllerPawn");

	APrimalDinoAIController_GetControllerPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetClosestTree
// ()
// Parameters:
// struct FOverlapResult          OutHit                         (Parm, OutParm)
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* APrimalDinoAIController::GetClosestTree(struct FOverlapResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetClosestTree");

	APrimalDinoAIController_GetClosestTree_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAttackRotationRate
// ()
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalDinoAIController::GetAttackRotationRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAttackRotationRate");

	APrimalDinoAIController_GetAttackRotationRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAttackRotationRangeDegrees
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::GetAttackRotationRangeDegrees()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAttackRotationRangeDegrees");

	APrimalDinoAIController_GetAttackRotationRangeDegrees_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAttackRotationGroundSpeedMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::GetAttackRotationGroundSpeedMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAttackRotationGroundSpeedMultiplier");

	APrimalDinoAIController_GetAttackRotationGroundSpeedMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAttackRange
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::GetAttackRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAttackRange");

	APrimalDinoAIController_GetAttackRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAttackInterval
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::GetAttackInterval()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAttackInterval");

	APrimalDinoAIController_GetAttackInterval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAggroNotifyNeighborsRange
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::GetAggroNotifyNeighborsRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAggroNotifyNeighborsRange");

	APrimalDinoAIController_GetAggroNotifyNeighborsRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAggroEntry
// ()
// Parameters:
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OutAttacker                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutAggroFactor                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// double                         OutLastAggroHitTime            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::GetAggroEntry(int index, class AActor** OutAttacker, float* OutAggroFactor, double* OutLastAggroHitTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAggroEntry");

	APrimalDinoAIController_GetAggroEntry_Params params;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAttacker != nullptr)
		*OutAttacker = params.OutAttacker;
	if (OutAggroFactor != nullptr)
		*OutAggroFactor = params.OutAggroFactor;
	if (OutLastAggroHitTime != nullptr)
		*OutLastAggroHitTime = params.OutLastAggroHitTime;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAggroEntriesCount
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalDinoAIController::GetAggroEntriesCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAggroEntriesCount");

	APrimalDinoAIController_GetAggroEntriesCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAggroEntriesAttackerAtIndex
// ()
// Parameters:
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APrimalDinoAIController::GetAggroEntriesAttackerAtIndex(int index)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAggroEntriesAttackerAtIndex");

	APrimalDinoAIController_GetAggroEntriesAttackerAtIndex_Params params;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.GetAggroDesirability
// ()
// Parameters:
// class AActor*                  InTarget                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::GetAggroDesirability(class AActor* InTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.GetAggroDesirability");

	APrimalDinoAIController_GetAggroDesirability_Params params;
	params.InTarget = InTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.FindTarget
// ()
// Parameters:
// bool                           bDontSet                       (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APrimalDinoAIController::FindTarget(bool bDontSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.FindTarget");

	APrimalDinoAIController_FindTarget_Params params;
	params.bDontSet = bDontSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.FindNewTarget
// ()
// Parameters:
// bool                           bDontSet                       (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APrimalDinoAIController::FindNewTarget(bool bDontSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.FindNewTarget");

	APrimalDinoAIController_FindNewTarget_Params params;
	params.bDontSet = bDontSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.ClearAggroEntries
// ()

void APrimalDinoAIController::ClearAggroEntries()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ClearAggroEntries");

	APrimalDinoAIController_ClearAggroEntries_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.ChangedAITarget
// ()

void APrimalDinoAIController::ChangedAITarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.ChangedAITarget");

	APrimalDinoAIController_ChangedAITarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.CanLand
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::CanLand()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.CanLand");

	APrimalDinoAIController_CanLand_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.CalculateAndSetWonderingAIStateEvent
// ()
// Parameters:
// bool                           StateChanged                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::CalculateAndSetWonderingAIStateEvent(bool StateChanged)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.CalculateAndSetWonderingAIStateEvent");

	APrimalDinoAIController_CalculateAndSetWonderingAIStateEvent_Params params;
	params.StateChanged = StateChanged;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.CalculateAndSetWonderingAIState
// ()
// Parameters:
// bool                           StateChanged                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::CalculateAndSetWonderingAIState(bool* StateChanged)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.CalculateAndSetWonderingAIState");

	APrimalDinoAIController_CalculateAndSetWonderingAIState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StateChanged != nullptr)
		*StateChanged = params.StateChanged;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.BPUpdateBestTarget
// ()
// Parameters:
// class AActor*                  bestTarget                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           dontSetIn                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           dontSetOut                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* APrimalDinoAIController::BPUpdateBestTarget(class AActor* bestTarget, bool dontSetIn, bool* dontSetOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPUpdateBestTarget");

	APrimalDinoAIController_BPUpdateBestTarget_Params params;
	params.bestTarget = bestTarget;
	params.dontSetIn = dontSetIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (dontSetOut != nullptr)
		*dontSetOut = params.dontSetOut;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.BPShouldNotifyNeighbor
// ()
// Parameters:
// class APrimalDinoCharacter*    neighbor                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::BPShouldNotifyNeighbor(class APrimalDinoCharacter* neighbor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPShouldNotifyNeighbor");

	APrimalDinoAIController_BPShouldNotifyNeighbor_Params params;
	params.neighbor = neighbor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.BPSetupFindTarget
// ()

void APrimalDinoAIController::BPSetupFindTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPSetupFindTarget");

	APrimalDinoAIController_BPSetupFindTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.BPOverrideIgnoredByWildDino
// ()
// Parameters:
// class AActor*                  wildDinoToIgnore               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::BPOverrideIgnoredByWildDino(class AActor* wildDinoToIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPOverrideIgnoredByWildDino");

	APrimalDinoAIController_BPOverrideIgnoredByWildDino_Params params;
	params.wildDinoToIgnore = wildDinoToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.BPOnFleeEvent
// ()

void APrimalDinoAIController::BPOnFleeEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPOnFleeEvent");

	APrimalDinoAIController_BPOnFleeEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.BPNotifyTargetSet
// ()

void APrimalDinoAIController::BPNotifyTargetSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPNotifyTargetSet");

	APrimalDinoAIController_BPNotifyTargetSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.BPGetTargetingDesire
// ()
// Parameters:
// class AActor*                  forTarget                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ForTargetingDesireValue        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalDinoAIController::BPGetTargetingDesire(class AActor* forTarget, float ForTargetingDesireValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPGetTargetingDesire");

	APrimalDinoAIController_BPGetTargetingDesire_Params params;
	params.forTarget = forTarget;
	params.ForTargetingDesireValue = ForTargetingDesireValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.BPForceTargetDinoRider
// ()
// Parameters:
// class AShooterCharacter*       playerTarget                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalDinoAIController::BPForceTargetDinoRider(class AShooterCharacter* playerTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BPForceTargetDinoRider");

	APrimalDinoAIController_BPForceTargetDinoRider_Params params;
	params.playerTarget = playerTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.BP_TamedOverrideHorizontalLandingRange
// ()
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D APrimalDinoAIController::BP_TamedOverrideHorizontalLandingRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.BP_TamedOverrideHorizontalLandingRange");

	APrimalDinoAIController_BP_TamedOverrideHorizontalLandingRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalDinoAIController.AvoidOutOfWater
// ()

void APrimalDinoAIController::AvoidOutOfWater()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.AvoidOutOfWater");

	APrimalDinoAIController_AvoidOutOfWater_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalDinoAIController.AddToAggro
// ()
// Parameters:
// class AActor*                  Attacker                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          DamagePercent                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNotifyNeighbors               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           SetValue                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFromDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           skipTeamCheck                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalDinoAIController::AddToAggro(class AActor* Attacker, float DamagePercent, bool bNotifyNeighbors, bool SetValue, bool bIsFromDamage, bool skipTeamCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalDinoAIController.AddToAggro");

	APrimalDinoAIController_AddToAggro_Params params;
	params.Attacker = Attacker;
	params.DamagePercent = DamagePercent;
	params.bNotifyNeighbors = bNotifyNeighbors;
	params.SetValue = SetValue;
	params.bIsFromDamage = bIsFromDamage;
	params.skipTeamCheck = skipTeamCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.UpdateStaticPathingDestination
// ()
// Parameters:
// struct FVector                 locOverride                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          randomOffsetMultiplier         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           useRandomNegativeXDir          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           orientRandOffsetByRotation     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                randOffsetByRotation           (Parm, ZeroConstructor, IsPlainOldData)
// float                          GroundCheckSpreadOverride      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalBuff::UpdateStaticPathingDestination(const struct FVector& locOverride, float randomOffsetMultiplier, bool useRandomNegativeXDir, bool orientRandOffsetByRotation, const struct FRotator& randOffsetByRotation, float GroundCheckSpreadOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.UpdateStaticPathingDestination");

	APrimalBuff_UpdateStaticPathingDestination_Params params;
	params.locOverride = locOverride;
	params.randomOffsetMultiplier = randomOffsetMultiplier;
	params.useRandomNegativeXDir = useRandomNegativeXDir;
	params.orientRandOffsetByRotation = orientRandOffsetByRotation;
	params.randOffsetByRotation = randOffsetByRotation;
	params.GroundCheckSpreadOverride = GroundCheckSpreadOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.UpdateBuffPersistentData
// ()

void APrimalBuff::UpdateBuffPersistentData()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.UpdateBuffPersistentData");

	APrimalBuff_UpdateBuffPersistentData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.StaticAddBuff
// ()
// Parameters:
// class UClass*                  BuffClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             AssociatedItem                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceOnClient                 (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalBuff*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalBuff* APrimalBuff::StaticAddBuff(class UClass* BuffClass, class APrimalCharacter* forCharacter, class UPrimalItem* AssociatedItem, class AActor* DamageCauser, bool bForceOnClient)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.StaticAddBuff");

	APrimalBuff_StaticAddBuff_Params params;
	params.BuffClass = BuffClass;
	params.forCharacter = forCharacter;
	params.AssociatedItem = AssociatedItem;
	params.DamageCauser = DamageCauser;
	params.bForceOnClient = bForceOnClient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.SetValueToAddPerSecond
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> StatusValueType                (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::SetValueToAddPerSecond(TEnumAsByte<EPrimalCharacterStatusValue> StatusValueType, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.SetValueToAddPerSecond");

	APrimalBuff_SetValueToAddPerSecond_Params params;
	params.StatusValueType = StatusValueType;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.SetupForInstigator
// ()

void APrimalBuff::SetupForInstigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.SetupForInstigator");

	APrimalBuff_SetupForInstigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.SetBuffCauser
// ()
// Parameters:
// class AActor*                  CausedBy                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::SetBuffCauser(class AActor* CausedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.SetBuffCauser");

	APrimalBuff_SetBuffCauser_Params params;
	params.CausedBy = CausedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.ResetBuffStart
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::ResetBuffStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.ResetBuffStart");

	APrimalBuff_ResetBuffStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.ReduceBuffTime
// ()
// Parameters:
// float                          AmountOfTimeToReduce           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::ReduceBuffTime(float AmountOfTimeToReduce)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.ReduceBuffTime");

	APrimalBuff_ReduceBuffTime_Params params;
	params.AmountOfTimeToReduce = AmountOfTimeToReduce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.PreventJump
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::PreventJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.PreventJump");

	APrimalBuff_PreventJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.PreventBlockingWithShield
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::PreventBlockingWithShield()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.PreventBlockingWithShield");

	APrimalBuff_PreventBlockingWithShield_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.PreventActorTargeting
// ()
// Parameters:
// class AActor*                  ByActor                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::PreventActorTargeting(class AActor* ByActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.PreventActorTargeting");

	APrimalBuff_PreventActorTargeting_Params params;
	params.ByActor = ByActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.OnCapsuleHitCallback
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalBuff::OnCapsuleHitCallback(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.OnCapsuleHitCallback");

	APrimalBuff_OnCapsuleHitCallback_Params params;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.NotifyDamage
// ()
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageClass                    (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TheDamageCauser                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::NotifyDamage(float DamageAmount, class UClass* DamageClass, class AController* EventInstigator, class AActor* TheDamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.NotifyDamage");

	APrimalBuff_NotifyDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageClass = DamageClass;
	params.EventInstigator = EventInstigator;
	params.TheDamageCauser = TheDamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.NotifyBumpedPawn
// ()
// Parameters:
// class APrimalCharacter*        BumpedPawn                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::NotifyBumpedPawn(class APrimalCharacter* BumpedPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.NotifyBumpedPawn");

	APrimalBuff_NotifyBumpedPawn_Params params;
	params.BumpedPawn = BumpedPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.NotifyBumpedByPawn
// ()
// Parameters:
// class APrimalCharacter*        BumpedBy                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::NotifyBumpedByPawn(class APrimalCharacter* BumpedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.NotifyBumpedByPawn");

	APrimalBuff_NotifyBumpedByPawn_Params params;
	params.BumpedBy = BumpedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.NetResetBuffStart
// ()

void APrimalBuff::NetResetBuffStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.NetResetBuffStart");

	APrimalBuff_NetResetBuffStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.NetDeactivate
// ()

void APrimalBuff::NetDeactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.NetDeactivate");

	APrimalBuff_NetDeactivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.HideBuffFromHUD
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::HideBuffFromHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.HideBuffFromHUD");

	APrimalBuff_HideBuffFromHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.HandleBuffAnimNotify
// ()
// Parameters:
// struct FName                   AnimNotifyName                 (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  AnimNotifyStringData           (Parm, ZeroConstructor)

void APrimalBuff::HandleBuffAnimNotify(const struct FName& AnimNotifyName, const class FString& AnimNotifyStringData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.HandleBuffAnimNotify");

	APrimalBuff_HandleBuffAnimNotify_Params params;
	params.AnimNotifyName = AnimNotifyName;
	params.AnimNotifyStringData = AnimNotifyStringData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.GetValueToAddPerSecond
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterStatusValue> StatusValueType                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalBuff::GetValueToAddPerSecond(TEnumAsByte<EPrimalCharacterStatusValue> StatusValueType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetValueToAddPerSecond");

	APrimalBuff_GetValueToAddPerSecond_Params params;
	params.StatusValueType = StatusValueType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.GetHUDProgressBarPercent
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalBuff::GetHUDProgressBarPercent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetHUDProgressBarPercent");

	APrimalBuff_GetHUDProgressBarPercent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.GetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalBuff::GetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetDebugInfoString");

	APrimalBuff_GetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.GetDeactivationTime
// ()
// Parameters:
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double APrimalBuff::GetDeactivationTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetDeactivationTime");

	APrimalBuff_GetDeactivationTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.GetBuffType
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalBuff::GetBuffType()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetBuffType");

	APrimalBuff_GetBuffType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.GetBuffPostprocessMaterial
// ()
// Parameters:
// class UMaterialInstanceDynamic* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UMaterialInstanceDynamic* APrimalBuff::GetBuffPostprocessMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetBuffPostprocessMaterial");

	APrimalBuff_GetBuffPostprocessMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.GetBuffPostprocessIntensity
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalBuff::GetBuffPostprocessIntensity()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetBuffPostprocessIntensity");

	APrimalBuff_GetBuffPostprocessIntensity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.GetBuffDescription
// ()
// Parameters:
// struct FStatusValueModifierDescription ReturnValue                    (Parm, OutParm, ReturnParm)

struct FStatusValueModifierDescription APrimalBuff::GetBuffDescription()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.GetBuffDescription");

	APrimalBuff_GetBuffDescription_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.ExtendBuffTime
// ()
// Parameters:
// float                          AmountOfAdditionalTime         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::ExtendBuffTime(float AmountOfAdditionalTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.ExtendBuffTime");

	APrimalBuff_ExtendBuffTime_Params params;
	params.AmountOfAdditionalTime = AmountOfAdditionalTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.DrawBuffFloatingHUD
// ()
// Parameters:
// int                            BuffIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterY                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DrawScale                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::DrawBuffFloatingHUD(int BuffIndex, class AShooterHUD* HUD, float CenterX, float CenterY, float DrawScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.DrawBuffFloatingHUD");

	APrimalBuff_DrawBuffFloatingHUD_Params params;
	params.BuffIndex = BuffIndex;
	params.HUD = HUD;
	params.CenterX = CenterX;
	params.CenterY = CenterY;
	params.DrawScale = DrawScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BuffTickServer
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BuffTickServer(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BuffTickServer");

	APrimalBuff_BuffTickServer_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BuffTickClient
// ()
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BuffTickClient(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BuffTickClient");

	APrimalBuff_BuffTickClient_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BuffPostAdjustDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  TheDamgeType                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BuffPostAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* TheDamgeType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BuffPostAdjustDamage");

	APrimalBuff_BuffPostAdjustDamage_Params params;
	params.Damage = Damage;
	params.HitInfo = HitInfo;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.TheDamgeType = TheDamgeType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BuffAdjustDamage
// ()
// Parameters:
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitInfo                        (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  TheDamgeType                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalBuff::BuffAdjustDamage(float Damage, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* TheDamgeType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BuffAdjustDamage");

	APrimalBuff_BuffAdjustDamage_Params params;
	params.Damage = Damage;
	params.HitInfo = HitInfo;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.TheDamgeType = TheDamgeType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPSetupForInstigator
// ()
// Parameters:
// class AActor*                  ForInstigator                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPSetupForInstigator(class AActor* ForInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPSetupForInstigator");

	APrimalBuff_BPSetupForInstigator_Params params;
	params.ForInstigator = ForInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPResetBuffStart
// ()

void APrimalBuff::BPResetBuffStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPResetBuffStart");

	APrimalBuff_BPResetBuffStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPPreventThrowingItem
// ()
// Parameters:
// class UPrimalItem*             forItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPPreventThrowingItem(class UPrimalItem* forItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreventThrowingItem");

	APrimalBuff_BPPreventThrowingItem_Params params;
	params.forItem = forItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPPreventRunning
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPPreventRunning()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreventRunning");

	APrimalBuff_BPPreventRunning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPPreventInstigatorMovementMode
// ()
// Parameters:
// TEnumAsByte<EMovementMode>     newMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  newCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPPreventInstigatorMovementMode(TEnumAsByte<EMovementMode> newMovementMode, unsigned char newCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreventInstigatorMovementMode");

	APrimalBuff_BPPreventInstigatorMovementMode_Params params;
	params.newMovementMode = newMovementMode;
	params.newCustomMode = newCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPPreventflight
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPPreventflight()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreventflight");

	APrimalBuff_BPPreventflight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPPreventFirstPerson
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPPreventFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreventFirstPerson");

	APrimalBuff_BPPreventFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPPreventCharacterStatusValueModifiers
// ()
// Parameters:
// class APrimalCharacter*        ForInstigator                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPPreventCharacterStatusValueModifiers(class APrimalCharacter* ForInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreventCharacterStatusValueModifiers");

	APrimalBuff_BPPreventCharacterStatusValueModifiers_Params params;
	params.ForInstigator = ForInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPPreventAddingOtherBuff
// ()
// Parameters:
// class UClass*                  anotherBuffClass               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPPreventAddingOtherBuff(class UClass* anotherBuffClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreventAddingOtherBuff");

	APrimalBuff_BPPreventAddingOtherBuff_Params params;
	params.anotherBuffClass = anotherBuffClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPPreSetupForInstigator
// ()
// Parameters:
// class AActor*                  ForInstigator                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPPreSetupForInstigator(class AActor* ForInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPPreSetupForInstigator");

	APrimalBuff_BPPreSetupForInstigator_Params params;
	params.ForInstigator = ForInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPOverrideWeaponBob
// ()
// Parameters:
// struct FVector                 InWeaponBob                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalBuff::BPOverrideWeaponBob(const struct FVector& InWeaponBob)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOverrideWeaponBob");

	APrimalBuff_BPOverrideWeaponBob_Params params;
	params.InWeaponBob = InWeaponBob;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPOverrideTalkerCharacter
// ()
// Parameters:
// class APrimalCharacter*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalCharacter* APrimalBuff::BPOverrideTalkerCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOverrideTalkerCharacter");

	APrimalBuff_BPOverrideTalkerCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPOverrideIsNetRelevantFor
// ()
// Parameters:
// class APlayerController*       RealViewer                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Viewer                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SrcLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPOverrideIsNetRelevantFor(class APlayerController* RealViewer, class AActor* Viewer, const struct FVector& SrcLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOverrideIsNetRelevantFor");

	APrimalBuff_BPOverrideIsNetRelevantFor_Params params;
	params.RealViewer = RealViewer;
	params.Viewer = Viewer;
	params.SrcLocation = SrcLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPOverrideCharacterNewFallVelocity
// ()
// Parameters:
// struct FVector                 InitialVelocity                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 Gravity                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalBuff::BPOverrideCharacterNewFallVelocity(const struct FVector& InitialVelocity, const struct FVector& Gravity, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOverrideCharacterNewFallVelocity");

	APrimalBuff_BPOverrideCharacterNewFallVelocity_Params params;
	params.InitialVelocity = InitialVelocity;
	params.Gravity = Gravity;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPOverrideCameraViewTarget
// ()
// Parameters:
// struct FName                   CurrentCameraMode              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DesiredCameraLocation          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                DesiredCameraRotation          (Parm, ZeroConstructor, IsPlainOldData)
// float                          DesiredFOV                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideCameraLocation        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CameraLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideCameraRotation        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                CameraRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideCameraFOV             (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          CameraFOV                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPOverrideCameraViewTarget(const struct FName& CurrentCameraMode, const struct FVector& DesiredCameraLocation, const struct FRotator& DesiredCameraRotation, float DesiredFOV, bool* bOverrideCameraLocation, struct FVector* CameraLocation, bool* bOverrideCameraRotation, struct FRotator* CameraRotation, bool* bOverrideCameraFOV, float* CameraFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOverrideCameraViewTarget");

	APrimalBuff_BPOverrideCameraViewTarget_Params params;
	params.CurrentCameraMode = CurrentCameraMode;
	params.DesiredCameraLocation = DesiredCameraLocation;
	params.DesiredCameraRotation = DesiredCameraRotation;
	params.DesiredFOV = DesiredFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bOverrideCameraLocation != nullptr)
		*bOverrideCameraLocation = params.bOverrideCameraLocation;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (bOverrideCameraRotation != nullptr)
		*bOverrideCameraRotation = params.bOverrideCameraRotation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
	if (bOverrideCameraFOV != nullptr)
		*bOverrideCameraFOV = params.bOverrideCameraFOV;
	if (CameraFOV != nullptr)
		*CameraFOV = params.CameraFOV;
}


// Function ShooterGame.PrimalBuff.BPOverrideBuffToGiveOnDeactivation
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* APrimalBuff::BPOverrideBuffToGiveOnDeactivation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOverrideBuffToGiveOnDeactivation");

	APrimalBuff_BPOverrideBuffToGiveOnDeactivation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPOnInstigatorMovementModeChangedNotify
// ()
// Parameters:
// TEnumAsByte<EMovementMode>     PrevMovementMode               (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  PreviousCustomMode             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EMovementMode>     newMovementMode                (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  newCustomMode                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPOnInstigatorMovementModeChangedNotify(TEnumAsByte<EMovementMode> PrevMovementMode, unsigned char PreviousCustomMode, TEnumAsByte<EMovementMode> newMovementMode, unsigned char newCustomMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOnInstigatorMovementModeChangedNotify");

	APrimalBuff_BPOnInstigatorMovementModeChangedNotify_Params params;
	params.PrevMovementMode = PrevMovementMode;
	params.PreviousCustomMode = PreviousCustomMode;
	params.newMovementMode = newMovementMode;
	params.newCustomMode = newCustomMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPOnInstigatorCapsuleComponentHit
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalBuff::BPOnInstigatorCapsuleComponentHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPOnInstigatorCapsuleComponentHit");

	APrimalBuff_BPOnInstigatorCapsuleComponentHit_Params params;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPNotifyOtherBuffDeactivated
// ()
// Parameters:
// class APrimalBuff*             OtherBuff                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPNotifyOtherBuffDeactivated(class APrimalBuff* OtherBuff)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPNotifyOtherBuffDeactivated");

	APrimalBuff_BPNotifyOtherBuffDeactivated_Params params;
	params.OtherBuff = OtherBuff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPNotifyOtherBuffActivated
// ()
// Parameters:
// class APrimalBuff*             OtherBuff                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPNotifyOtherBuffActivated(class APrimalBuff* OtherBuff)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPNotifyOtherBuffActivated");

	APrimalBuff_BPNotifyOtherBuffActivated_Params params;
	params.OtherBuff = OtherBuff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPNotifyExperienceGained
// ()
// Parameters:
// float                          ActualExpGained                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ExpectedExpGain                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EXPType>           ExpTypeGained                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPNotifyExperienceGained(float ActualExpGained, float ExpectedExpGain, TEnumAsByte<EXPType> ExpTypeGained)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPNotifyExperienceGained");

	APrimalBuff_BPNotifyExperienceGained_Params params;
	params.ActualExpGained = ActualExpGained;
	params.ExpectedExpGain = ExpectedExpGain;
	params.ExpTypeGained = ExpTypeGained;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPNonDedicatedPlayerPostAnimUpdate
// ()

void APrimalBuff::BPNonDedicatedPlayerPostAnimUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPNonDedicatedPlayerPostAnimUpdate");

	APrimalBuff_BPNonDedicatedPlayerPostAnimUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPModifyPlayerBoneModifiers
// ()
// Parameters:
// TArray<struct FBoneModifier>   InBoneModifiers                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FBoneModifier>   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FBoneModifier> APrimalBuff::BPModifyPlayerBoneModifiers(TArray<struct FBoneModifier> InBoneModifiers)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPModifyPlayerBoneModifiers");

	APrimalBuff_BPModifyPlayerBoneModifiers_Params params;
	params.InBoneModifiers = InBoneModifiers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPIsValidUnStasisCaster
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPIsValidUnStasisCaster()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPIsValidUnStasisCaster");

	APrimalBuff_BPIsValidUnStasisCaster_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPIsCharacterHardAttached
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPIsCharacterHardAttached()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPIsCharacterHardAttached");

	APrimalBuff_BPIsCharacterHardAttached_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPInstigatorUnpossessed
// ()

void APrimalBuff::BPInstigatorUnpossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPInstigatorUnpossessed");

	APrimalBuff_BPInstigatorUnpossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPInstigatorSleeped
// ()
// Parameters:
// bool                           bIsSleeped                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPInstigatorSleeped(bool bIsSleeped)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPInstigatorSleeped");

	APrimalBuff_BPInstigatorSleeped_Params params;
	params.bIsSleeped = bIsSleeped;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPInstigatorPossessed
// ()
// Parameters:
// class AController*             ByController                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPInstigatorPossessed(class AController* ByController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPInstigatorPossessed");

	APrimalBuff_BPInstigatorPossessed_Params params;
	params.ByController = ByController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPInstigatorLocalPossessed
// ()
// Parameters:
// class AShooterPlayerController* ByController                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPInstigatorLocalPossessed(class AShooterPlayerController* ByController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPInstigatorLocalPossessed");

	APrimalBuff_BPInstigatorLocalPossessed_Params params;
	params.ByController = ByController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPInstigatorDied
// ()

void APrimalBuff::BPInstigatorDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPInstigatorDied");

	APrimalBuff_BPInstigatorDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPInitializedCharacterAnimScriptInstance
// ()

void APrimalBuff::BPInitializedCharacterAnimScriptInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPInitializedCharacterAnimScriptInstance");

	APrimalBuff_BPInitializedCharacterAnimScriptInstance_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPHandleOnStartFire
// ()

void APrimalBuff::BPHandleOnStartFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPHandleOnStartFire");

	APrimalBuff_BPHandleOnStartFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPGetHUDElements
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHUDElement>     OutElements                    (Parm, OutParm, ZeroConstructor)

void APrimalBuff::BPGetHUDElements(class APlayerController* ForPC, TArray<struct FHUDElement>* OutElements)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPGetHUDElements");

	APrimalBuff_BPGetHUDElements_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutElements != nullptr)
		*OutElements = params.OutElements;
}


// Function ShooterGame.PrimalBuff.BPGetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalBuff::BPGetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPGetDebugInfoString");

	APrimalBuff_BPGetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPGetBabyImprintingSpeedMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalBuff::BPGetBabyImprintingSpeedMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPGetBabyImprintingSpeedMultiplier");

	APrimalBuff_BPGetBabyImprintingSpeedMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPExcludeAoEActor
// ()
// Parameters:
// class AActor*                  ActorToConsider                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPExcludeAoEActor(class AActor* ActorToConsider)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPExcludeAoEActor");

	APrimalBuff_BPExcludeAoEActor_Params params;
	params.ActorToConsider = ActorToConsider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPDrawBuffStatusHUD
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          XPos                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          YPos                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleMult                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPDrawBuffStatusHUD(class AShooterHUD* HUD, float XPos, float YPos, float ScaleMult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPDrawBuffStatusHUD");

	APrimalBuff_BPDrawBuffStatusHUD_Params params;
	params.HUD = HUD;
	params.XPos = XPos;
	params.YPos = YPos;
	params.ScaleMult = ScaleMult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPDinoRefreshColorization
// ()
// Parameters:
// TArray<struct FLinearColor>    DinoColors                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FLinearColor>    OverrideColors                 (Parm, OutParm, ZeroConstructor)

void APrimalBuff::BPDinoRefreshColorization(TArray<struct FLinearColor> DinoColors, TArray<struct FLinearColor>* OverrideColors)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPDinoRefreshColorization");

	APrimalBuff_BPDinoRefreshColorization_Params params;
	params.DinoColors = DinoColors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverrideColors != nullptr)
		*OverrideColors = params.OverrideColors;
}


// Function ShooterGame.PrimalBuff.BPDeactivated
// ()
// Parameters:
// class AActor*                  ForInstigator                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPDeactivated(class AActor* ForInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPDeactivated");

	APrimalBuff_BPDeactivated_Params params;
	params.ForInstigator = ForInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPDeactivate
// ()

void APrimalBuff::BPDeactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPDeactivate");

	APrimalBuff_BPDeactivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPCustomAllowAddBuff
// ()
// Parameters:
// class APrimalCharacter*        forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPCustomAllowAddBuff(class APrimalCharacter* forCharacter, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPCustomAllowAddBuff");

	APrimalBuff_BPCustomAllowAddBuff_Params params;
	params.forCharacter = forCharacter;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPCheckPreventInput
// ()
// Parameters:
// TEnumAsByte<EPrimalCharacterInputType> inputType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPCheckPreventInput(TEnumAsByte<EPrimalCharacterInputType> inputType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPCheckPreventInput");

	APrimalBuff_BPCheckPreventInput_Params params;
	params.inputType = inputType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPCharacterDetach
// ()

void APrimalBuff::BPCharacterDetach()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPCharacterDetach");

	APrimalBuff_BPCharacterDetach_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BPCanBeCarried
// ()
// Parameters:
// class APrimalCharacter*        ByCarrier                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::BPCanBeCarried(class APrimalCharacter* ByCarrier)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPCanBeCarried");

	APrimalBuff_BPCanBeCarried_Params params;
	params.ByCarrier = ByCarrier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPAdjustStatusValueModification
// ()
// Parameters:
// class UPrimalCharacterStatusComponent* ForComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          InAmount                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bManualModification            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalBuff::BPAdjustStatusValueModification(class UPrimalCharacterStatusComponent* ForComponent, TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float InAmount, class UClass* DamageTypeClass, bool bManualModification)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPAdjustStatusValueModification");

	APrimalBuff_BPAdjustStatusValueModification_Params params;
	params.ForComponent = ForComponent;
	params.ValueType = ValueType;
	params.InAmount = InAmount;
	params.DamageTypeClass = DamageTypeClass;
	params.bManualModification = bManualModification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPAdjustImpulseFromDamage
// ()
// Parameters:
// struct FVector                 DesiredImpulse                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPointDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              PointHitInfo                   (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalBuff::BPAdjustImpulseFromDamage(const struct FVector& DesiredImpulse, float DamageTaken, const struct FDamageEvent& TheDamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPAdjustImpulseFromDamage");

	APrimalBuff_BPAdjustImpulseFromDamage_Params params;
	params.DesiredImpulse = DesiredImpulse;
	params.DamageTaken = DamageTaken;
	params.TheDamageEvent = TheDamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;
	params.bIsPointDamage = bIsPointDamage;
	params.PointHitInfo = PointHitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPAdjustCharacterMovementImpulse
// ()
// Parameters:
// struct FVector                 Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bVelocityChange                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MassScaleImpulseExponent       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideMaxImpulseZ           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalBuff::BPAdjustCharacterMovementImpulse(const struct FVector& Impulse, bool bVelocityChange, float MassScaleImpulseExponent, bool bOverrideMaxImpulseZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPAdjustCharacterMovementImpulse");

	APrimalBuff_BPAdjustCharacterMovementImpulse_Params params;
	params.Impulse = Impulse;
	params.bVelocityChange = bVelocityChange;
	params.MassScaleImpulseExponent = MassScaleImpulseExponent;
	params.bOverrideMaxImpulseZ = bOverrideMaxImpulseZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.BPActivated
// ()
// Parameters:
// class AActor*                  ForInstigator                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::BPActivated(class AActor* ForInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BPActivated");

	APrimalBuff_BPActivated_Params params;
	params.ForInstigator = ForInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalBuff.BP_ModifyCharacterFOV
// ()
// Parameters:
// float                          inFOV                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalBuff::BP_ModifyCharacterFOV(float inFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.BP_ModifyCharacterFOV");

	APrimalBuff_BP_ModifyCharacterFOV_Params params;
	params.inFOV = inFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.AllowPostProcessEffect
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalBuff::AllowPostProcessEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.AllowPostProcessEffect");

	APrimalBuff_AllowPostProcessEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalBuff.AddDamageStatusValueModifier
// ()
// Parameters:
// class APrimalCharacter*        addToCharacter                 (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSpeedToAddInSeconds           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bContinueOnUnchangedValue      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bResetExistingModifierDescriptionIndex (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetValue                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSetAdditionalValue            (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitExistingModifierDescriptionToMaxAmount (Parm, ZeroConstructor, IsPlainOldData)
// float                          DamageMultiplierAmountToAdd    (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedToAdd                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            StatusValueModifierDescriptionIndex (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUsePercentualDamage           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMakeUntameable                (Parm, ZeroConstructor, IsPlainOldData)
// float                          PercentualDamage               (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ScaleValueByCharacterDamageType (Parm, ZeroConstructor, IsPlainOldData)

void APrimalBuff::AddDamageStatusValueModifier(class APrimalCharacter* addToCharacter, TEnumAsByte<EPrimalCharacterStatusValue> ValueType, bool bSpeedToAddInSeconds, bool bContinueOnUnchangedValue, bool bResetExistingModifierDescriptionIndex, bool bSetValue, bool bSetAdditionalValue, float LimitExistingModifierDescriptionToMaxAmount, float DamageMultiplierAmountToAdd, float SpeedToAdd, int StatusValueModifierDescriptionIndex, bool bUsePercentualDamage, bool bMakeUntameable, float PercentualDamage, class UClass* ScaleValueByCharacterDamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalBuff.AddDamageStatusValueModifier");

	APrimalBuff_AddDamageStatusValueModifier_Params params;
	params.addToCharacter = addToCharacter;
	params.ValueType = ValueType;
	params.bSpeedToAddInSeconds = bSpeedToAddInSeconds;
	params.bContinueOnUnchangedValue = bContinueOnUnchangedValue;
	params.bResetExistingModifierDescriptionIndex = bResetExistingModifierDescriptionIndex;
	params.bSetValue = bSetValue;
	params.bSetAdditionalValue = bSetAdditionalValue;
	params.LimitExistingModifierDescriptionToMaxAmount = LimitExistingModifierDescriptionToMaxAmount;
	params.DamageMultiplierAmountToAdd = DamageMultiplierAmountToAdd;
	params.SpeedToAdd = SpeedToAdd;
	params.StatusValueModifierDescriptionIndex = StatusValueModifierDescriptionIndex;
	params.bUsePercentualDamage = bUsePercentualDamage;
	params.bMakeUntameable = bMakeUntameable;
	params.PercentualDamage = PercentualDamage;
	params.ScaleValueByCharacterDamageType = ScaleValueByCharacterDamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalHarvestingComponent.BPCustomHarvestResource
// ()
// Parameters:
// class UPrimalInventoryComponent* invComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            NumToGive                      (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageTypeClass                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ToActor                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPrimalHarvestingComponent::BPCustomHarvestResource(class UPrimalInventoryComponent* invComp, int NumToGive, class UClass* DamageTypeClass, class AActor* ToActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalHarvestingComponent.BPCustomHarvestResource");

	UPrimalHarvestingComponent_BPCustomHarvestResource_Params params;
	params.invComp = invComp;
	params.NumToGive = NumToGive;
	params.DamageTypeClass = DamageTypeClass;
	params.ToActor = ToActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalRichTextBlock.SetText
// ()
// Parameters:
// struct FText                   InText                         (Parm)
// bool                           bDoParse                       (Parm, ZeroConstructor, IsPlainOldData)

void UPrimalRichTextBlock::SetText(const struct FText& InText, bool bDoParse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalRichTextBlock.SetText");

	UPrimalRichTextBlock_SetText_Params params;
	params.InText = InText;
	params.bDoParse = bDoParse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalRichTextBlock.SetString
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)

void UPrimalRichTextBlock::SetString(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalRichTextBlock.SetString");

	UPrimalRichTextBlock_SetString_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalRichTextBlock.GetText
// ()
// Parameters:
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText UPrimalRichTextBlock::GetText()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalRichTextBlock.GetText");

	UPrimalRichTextBlock_GetText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructurePlacer.IsPlacingActive
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructurePlacer::IsPlacingActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructurePlacer.IsPlacingActive");

	APrimalStructurePlacer_IsPlacingActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalTargetableActor.PlayHitEffectRadial
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRadialDamageEvent      DamageEvent                    (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::PlayHitEffectRadial(float DamageTaken, const struct FRadialDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.PlayHitEffectRadial");

	APrimalTargetableActor_PlayHitEffectRadial_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.PlayHitEffectPoint
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FPointDamageEvent       DamageEvent                    (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::PlayHitEffectPoint(float DamageTaken, const struct FPointDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.PlayHitEffectPoint");

	APrimalTargetableActor_PlayHitEffectPoint_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.PlayHitEffectGeneric
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (Parm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::PlayHitEffectGeneric(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.PlayHitEffectGeneric");

	APrimalTargetableActor_PlayHitEffectGeneric_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.PlayDyingRadial
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FRadialDamageEvent      DamageEvent                    (Parm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::PlayDyingRadial(float KillingDamage, const struct FRadialDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.PlayDyingRadial");

	APrimalTargetableActor_PlayDyingRadial_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.PlayDyingPoint
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FPointDamageEvent       DamageEvent                    (Parm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::PlayDyingPoint(float KillingDamage, const struct FPointDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.PlayDyingPoint");

	APrimalTargetableActor_PlayDyingPoint_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.PlayDyingGeneric
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (Parm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::PlayDyingGeneric(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.PlayDyingGeneric");

	APrimalTargetableActor_PlayDyingGeneric_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.OverrideDestroyedMeshTextures
// ()
// Parameters:
// class UMeshComponent*          MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APrimalTargetableActor::OverrideDestroyedMeshTextures(class UMeshComponent* MeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.OverrideDestroyedMeshTextures");

	APrimalTargetableActor_OverrideDestroyedMeshTextures_Params params;
	params.MeshComp = MeshComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.OnRep_ReplicatedHealth
// ()

void APrimalTargetableActor::OnRep_ReplicatedHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.OnRep_ReplicatedHealth");

	APrimalTargetableActor_OnRep_ReplicatedHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.NetUpdatedHealth
// ()
// Parameters:
// int                            NewHealth                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::NetUpdatedHealth(int NewHealth)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.NetUpdatedHealth");

	APrimalTargetableActor_NetUpdatedHealth_Params params;
	params.NewHealth = NewHealth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.IsInvincible
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalTargetableActor::IsInvincible()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.IsInvincible");

	APrimalTargetableActor_IsInvincible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalTargetableActor.HarvestingDepleted
// ()
// Parameters:
// class UPrimalHarvestingComponent* fromComponent                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APrimalTargetableActor::HarvestingDepleted(class UPrimalHarvestingComponent* fromComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.HarvestingDepleted");

	APrimalTargetableActor_HarvestingDepleted_Params params;
	params.fromComponent = fromComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.GetMaxHealth
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalTargetableActor::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.GetMaxHealth");

	APrimalTargetableActor_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalTargetableActor.GetDescriptiveName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalTargetableActor::GetDescriptiveName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.GetDescriptiveName");

	APrimalTargetableActor_GetDescriptiveName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalTargetableActor.BPSupressImpactEffects
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLocalPath                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalTargetableActor::BPSupressImpactEffects(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.BPSupressImpactEffects");

	APrimalTargetableActor_BPSupressImpactEffects_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;
	params.bIsLocalPath = bIsLocalPath;
	params.HitComponent = HitComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalTargetableActor.BPHitEffect
// ()
// Parameters:
// float                          DamageTaken                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class APawn*                   PawnInstigator                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLocalPath                   (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 DamageLoc                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                HitNormal                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::BPHitEffect(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator, class AActor* DamageCauser, bool bIsLocalPath, class UPrimitiveComponent* HitComponent, const struct FVector& DamageLoc, const struct FRotator& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.BPHitEffect");

	APrimalTargetableActor_BPHitEffect_Params params;
	params.DamageTaken = DamageTaken;
	params.DamageEvent = DamageEvent;
	params.PawnInstigator = PawnInstigator;
	params.DamageCauser = DamageCauser;
	params.bIsLocalPath = bIsLocalPath;
	params.HitComponent = HitComponent;
	params.DamageLoc = DamageLoc;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.BPDied
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             Killer                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalTargetableActor::BPDied(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.BPDied");

	APrimalTargetableActor_BPDied_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.Killer = Killer;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalTargetableActor.BPAdjustDamage
// ()
// Parameters:
// float                          IncomingDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPointDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              PointHitInfo                   (Parm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalTargetableActor::BPAdjustDamage(float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser, bool bIsPointDamage, const struct FHitResult& PointHitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalTargetableActor.BPAdjustDamage");

	APrimalTargetableActor_BPAdjustDamage_Params params;
	params.IncomingDamage = IncomingDamage;
	params.TheDamageEvent = TheDamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;
	params.bIsPointDamage = bIsPointDamage;
	params.PointHitInfo = PointHitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.UpdateTribeGroupStructureRank
// ()
// Parameters:
// unsigned char                  NewRank                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::UpdateTribeGroupStructureRank(unsigned char NewRank)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.UpdateTribeGroupStructureRank");

	APrimalStructure_UpdateTribeGroupStructureRank_Params params;
	params.NewRank = NewRank;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.UpdateStencilValuesWithStenilDepth
// ()
// Parameters:
// TEnumAsByte<EStencilAlliance>  InAlliance                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::UpdateStencilValuesWithStenilDepth(TEnumAsByte<EStencilAlliance> InAlliance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.UpdateStencilValuesWithStenilDepth");

	APrimalStructure_UpdateStencilValuesWithStenilDepth_Params params;
	params.InAlliance = InAlliance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.UpdateStencilValues
// ()

void APrimalStructure::UpdateStencilValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.UpdateStencilValues");

	APrimalStructure_UpdateStencilValues_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.UpdatedHealth
// ()
// Parameters:
// bool                           bDoReplication                 (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::UpdatedHealth(bool bDoReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.UpdatedHealth");

	APrimalStructure_UpdatedHealth_Params params;
	params.bDoReplication = bDoReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetVariant
// ()
// Parameters:
// int                            VariantIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceSet                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::SetVariant(int VariantIndex, bool bForceSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetVariant");

	APrimalStructure_SetVariant_Params params;
	params.VariantIndex = VariantIndex;
	params.bForceSet = bForceSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.SetupDynamicMeshMaterials
// ()
// Parameters:
// class UMeshComponent*          MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APrimalStructure::SetupDynamicMeshMaterials(class UMeshComponent* MeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetupDynamicMeshMaterials");

	APrimalStructure_SetupDynamicMeshMaterials_Params params;
	params.MeshComp = MeshComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetStructureColorValue
// ()
// Parameters:
// int                            ColorRegionIndex               (Parm, ZeroConstructor, IsPlainOldData)
// int                            SetVal                         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::SetStructureColorValue(int ColorRegionIndex, int SetVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetStructureColorValue");

	APrimalStructure_SetStructureColorValue_Params params;
	params.ColorRegionIndex = ColorRegionIndex;
	params.SetVal = SetVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetStaticMobility
// ()

void APrimalStructure::SetStaticMobility()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetStaticMobility");

	APrimalStructure_SetStaticMobility_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetHarvestingActive
// ()
// Parameters:
// bool                           bActive                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOverrideBaseHealth            (Parm, ZeroConstructor, IsPlainOldData)
// float                          BaseHarvestHealthMult          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAssignToTribe                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            AssignedToTribeID              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::SetHarvestingActive(bool bActive, bool bOverrideBaseHealth, float BaseHarvestHealthMult, bool bAssignToTribe, int AssignedToTribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetHarvestingActive");

	APrimalStructure_SetHarvestingActive_Params params;
	params.bActive = bActive;
	params.bOverrideBaseHealth = bOverrideBaseHealth;
	params.BaseHarvestHealthMult = BaseHarvestHealthMult;
	params.bAssignToTribe = bAssignToTribe;
	params.AssignedToTribeID = AssignedToTribeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetEnabledPrimarySnappedStructureParent
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::SetEnabledPrimarySnappedStructureParent(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetEnabledPrimarySnappedStructureParent");

	APrimalStructure_SetEnabledPrimarySnappedStructureParent_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::SetEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetEnabled");

	APrimalStructure_SetEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetContainerActive
// ()
// Parameters:
// bool                           bNewActive                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::SetContainerActive(bool bNewActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetContainerActive");

	APrimalStructure_SetContainerActive_Params params;
	params.bNewActive = bNewActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.SetBoundsScale
// ()
// Parameters:
// float                          NewScale                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::SetBoundsScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.SetBoundsScale");

	APrimalStructure_SetBoundsScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.OnRep_StructureColors
// ()

void APrimalStructure::OnRep_StructureColors()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.OnRep_StructureColors");

	APrimalStructure_OnRep_StructureColors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.OnRep_CurrentVariant
// ()

void APrimalStructure::OnRep_CurrentVariant()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.OnRep_CurrentVariant");

	APrimalStructure_OnRep_CurrentVariant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.NetUpdateTeamAndOwnerName
// ()
// Parameters:
// int                            NewTeam                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewOwnerName                   (Parm, ZeroConstructor)

void APrimalStructure::NetUpdateTeamAndOwnerName(int NewTeam, const class FString& NewOwnerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.NetUpdateTeamAndOwnerName");

	APrimalStructure_NetUpdateTeamAndOwnerName_Params params;
	params.NewTeam = NewTeam;
	params.NewOwnerName = NewOwnerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.NetUpdateOriginalOwnerNameAndID
// ()
// Parameters:
// int                            NewOriginalOwnerID             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewOriginalOwnerName           (Parm, ZeroConstructor)

void APrimalStructure::NetUpdateOriginalOwnerNameAndID(int NewOriginalOwnerID, const class FString& NewOriginalOwnerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.NetUpdateOriginalOwnerNameAndID");

	APrimalStructure_NetUpdateOriginalOwnerNameAndID_Params params;
	params.NewOriginalOwnerID = NewOriginalOwnerID;
	params.NewOriginalOwnerName = NewOriginalOwnerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.NetSpawnCoreStructureDeathActor
// ()

void APrimalStructure::NetSpawnCoreStructureDeathActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.NetSpawnCoreStructureDeathActor");

	APrimalStructure_NetSpawnCoreStructureDeathActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.NetDoSpawnEffects
// ()

void APrimalStructure::NetDoSpawnEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.NetDoSpawnEffects");

	APrimalStructure_NetDoSpawnEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.MultiSetPickupAllowedBeforeNetworkTime
// ()
// Parameters:
// double                         NewTime                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::MultiSetPickupAllowedBeforeNetworkTime(double NewTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.MultiSetPickupAllowedBeforeNetworkTime");

	APrimalStructure_MultiSetPickupAllowedBeforeNetworkTime_Params params;
	params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.MultiRefreshVariantSettings
// ()
// Parameters:
// int                            NewVariantIndex                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::MultiRefreshVariantSettings(int NewVariantIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.MultiRefreshVariantSettings");

	APrimalStructure_MultiRefreshVariantSettings_Params params;
	params.NewVariantIndex = NewVariantIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.MultiAddStructuresPlacedOnFloor
// ()
// Parameters:
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::MultiAddStructuresPlacedOnFloor(class APrimalStructure* Structure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.MultiAddStructuresPlacedOnFloor");

	APrimalStructure_MultiAddStructuresPlacedOnFloor_Params params;
	params.Structure = Structure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.LinkStructure
// ()
// Parameters:
// class APrimalStructure*        NewLinkedStructure             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::LinkStructure(class APrimalStructure* NewLinkedStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.LinkStructure");

	APrimalStructure_LinkStructure_Params params;
	params.NewLinkedStructure = NewLinkedStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.IsValidSnapPointTo
// ()
// Parameters:
// class APrimalStructure*        childStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            MySnapPointToIndex             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsValidSnapPointTo(class APrimalStructure* childStructure, int MySnapPointToIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsValidSnapPointTo");

	APrimalStructure_IsValidSnapPointTo_Params params;
	params.childStructure = childStructure;
	params.MySnapPointToIndex = MySnapPointToIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.IsValidSnapPointFrom
// ()
// Parameters:
// class APrimalStructure*        ParentStructure                (Parm, ZeroConstructor, IsPlainOldData)
// int                            MySnapPointFromIndex           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsValidSnapPointFrom(class APrimalStructure* ParentStructure, int MySnapPointFromIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsValidSnapPointFrom");

	APrimalStructure_IsValidSnapPointFrom_Params params;
	params.ParentStructure = ParentStructure;
	params.MySnapPointFromIndex = MySnapPointFromIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.IsValidForSnappingFrom
// ()
// Parameters:
// class APrimalStructure*        OtherStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsValidForSnappingFrom(class APrimalStructure* OtherStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsValidForSnappingFrom");

	APrimalStructure_IsValidForSnappingFrom_Params params;
	params.OtherStructure = OtherStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.IsPointObstructedByWorldGeometry
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ThePoint                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreTerrain                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyCheckTerrain              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreFoliage                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          OBSTRUCTION_CHECK_DIST         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsPointObstructedByWorldGeometry(class UWorld* ForWorld, const struct FVector& ThePoint, bool bIgnoreTerrain, bool bOnlyCheckTerrain, bool bIgnoreFoliage, float OBSTRUCTION_CHECK_DIST)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsPointObstructedByWorldGeometry");

	APrimalStructure_IsPointObstructedByWorldGeometry_Params params;
	params.ForWorld = ForWorld;
	params.ThePoint = ThePoint;
	params.bIgnoreTerrain = bIgnoreTerrain;
	params.bOnlyCheckTerrain = bOnlyCheckTerrain;
	params.bIgnoreFoliage = bIgnoreFoliage;
	params.OBSTRUCTION_CHECK_DIST = OBSTRUCTION_CHECK_DIST;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.IsPointNearSupplyCrateSpawn
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtPoint                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsPointNearSupplyCrateSpawn(class UWorld* TheWorld, const struct FVector& AtPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsPointNearSupplyCrateSpawn");

	APrimalStructure_IsPointNearSupplyCrateSpawn_Params params;
	params.TheWorld = TheWorld;
	params.AtPoint = AtPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.IsOnlyLinkedToFastDecayStructures
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsOnlyLinkedToFastDecayStructures()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsOnlyLinkedToFastDecayStructures");

	APrimalStructure_IsOnlyLinkedToFastDecayStructures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.IsLinkedToWaterOrPowerSource
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsLinkedToWaterOrPowerSource()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsLinkedToWaterOrPowerSource");

	APrimalStructure_IsLinkedToWaterOrPowerSource_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.IsActiveEventStructure
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::IsActiveEventStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.IsActiveEventStructure");

	APrimalStructure_IsActiveEventStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetStructuresInRange
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          WithinRange                    (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  StructureClass                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalStructure*> StructuresOut                  (Parm, OutParm, ZeroConstructor)
// bool                           bUseInternalOctree             (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        IgnoreStructure                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::GetStructuresInRange(class UWorld* TheWorld, const struct FVector& AtLocation, float WithinRange, class UClass* StructureClass, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure, TArray<class APrimalStructure*>* StructuresOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetStructuresInRange");

	APrimalStructure_GetStructuresInRange_Params params;
	params.TheWorld = TheWorld;
	params.AtLocation = AtLocation;
	params.WithinRange = WithinRange;
	params.StructureClass = StructureClass;
	params.bUseInternalOctree = bUseInternalOctree;
	params.IgnoreStructure = IgnoreStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StructuresOut != nullptr)
		*StructuresOut = params.StructuresOut;
}


// Function ShooterGame.PrimalStructure.GetStructureColorValue
// ()
// Parameters:
// int                            ColorRegionIndex               (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructure::GetStructureColorValue(int ColorRegionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetStructureColorValue");

	APrimalStructure_GetStructureColorValue_Params params;
	params.ColorRegionIndex = ColorRegionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetStructureColor
// ()
// Parameters:
// int                            ColorRegionIndex               (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor APrimalStructure::GetStructureColor(int ColorRegionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetStructureColor");

	APrimalStructure_GetStructureColor_Params params;
	params.ColorRegionIndex = ColorRegionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetSnapPointName
// ()
// Parameters:
// int                            SnapPointIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName APrimalStructure::GetSnapPointName(int SnapPointIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetSnapPointName");

	APrimalStructure_GetSnapPointName_Params params;
	params.SnapPointIndex = SnapPointIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetNumStructuresInRangeStructureTypeFlag
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            TypeFlag                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          WithinRange                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckBPCountStructureInRange  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseInternalOctree             (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        IgnoreStructure                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckWithAltCollisionChannel  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructure::GetNumStructuresInRangeStructureTypeFlag(class UWorld* TheWorld, const struct FVector& AtLocation, int TypeFlag, float WithinRange, bool bCheckBPCountStructureInRange, bool bUseInternalOctree, class APrimalStructure* IgnoreStructure, bool bCheckWithAltCollisionChannel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetNumStructuresInRangeStructureTypeFlag");

	APrimalStructure_GetNumStructuresInRangeStructureTypeFlag_Params params;
	params.TheWorld = TheWorld;
	params.AtLocation = AtLocation;
	params.TypeFlag = TypeFlag;
	params.WithinRange = WithinRange;
	params.bCheckBPCountStructureInRange = bCheckBPCountStructureInRange;
	params.bUseInternalOctree = bUseInternalOctree;
	params.IgnoreStructure = IgnoreStructure;
	params.bCheckWithAltCollisionChannel = bCheckWithAltCollisionChannel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetNearbyStructuresOfClass
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  StructureClass                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Range                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalStructure*> Structures                     (Parm, OutParm, ZeroConstructor)

void APrimalStructure::GetNearbyStructuresOfClass(class UWorld* World, class UClass* StructureClass, const struct FVector& Location, float Range, TArray<class APrimalStructure*>* Structures)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetNearbyStructuresOfClass");

	APrimalStructure_GetNearbyStructuresOfClass_Params params;
	params.World = World;
	params.StructureClass = StructureClass;
	params.Location = Location;
	params.Range = Range;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Structures != nullptr)
		*Structures = params.Structures;
}


// Function ShooterGame.PrimalStructure.GetDefaultVariant
// ()
// Parameters:
// struct FStructureVariant       ReturnValue                    (Parm, OutParm, ReturnParm)

struct FStructureVariant APrimalStructure::GetDefaultVariant()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetDefaultVariant");

	APrimalStructure_GetDefaultVariant_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetDayCycleManager
// ()
// Parameters:
// class ADayCycleManager*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ADayCycleManager* APrimalStructure::GetDayCycleManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetDayCycleManager");

	APrimalStructure_GetDayCycleManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetClosestStructureToPoint
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtPoint                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          OverlapRadius                  (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalStructure* APrimalStructure::GetClosestStructureToPoint(class UWorld* ForWorld, const struct FVector& AtPoint, float OverlapRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetClosestStructureToPoint");

	APrimalStructure_GetClosestStructureToPoint_Params params;
	params.ForWorld = ForWorld;
	params.AtPoint = AtPoint;
	params.OverlapRadius = OverlapRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.GetBedFilterClass
// ()
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* APrimalStructure::GetBedFilterClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.GetBedFilterClass");

	APrimalStructure_GetBedFilterClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.ForceReplicateLinkedStructures
// ()

void APrimalStructure::ForceReplicateLinkedStructures()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.ForceReplicateLinkedStructures");

	APrimalStructure_ForceReplicateLinkedStructures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.DisableStructurePickup
// ()

void APrimalStructure::DisableStructurePickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.DisableStructurePickup");

	APrimalStructure_DisableStructurePickup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.DestroyStructuresPlacedOnFloor
// ()

void APrimalStructure::DestroyStructuresPlacedOnFloor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.DestroyStructuresPlacedOnFloor");

	APrimalStructure_DestroyStructuresPlacedOnFloor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.Demolish
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::Demolish(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.Demolish");

	APrimalStructure_Demolish_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.DelayedDisableSnapParent
// ()

void APrimalStructure::DelayedDisableSnapParent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.DelayedDisableSnapParent");

	APrimalStructure_DelayedDisableSnapParent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.CreateDynamicMaterials
// ()
// Parameters:
// class UMeshComponent*          ForceCreateForComponent        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APrimalStructure::CreateDynamicMaterials(class UMeshComponent* ForceCreateForComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.CreateDynamicMaterials");

	APrimalStructure_CreateDynamicMaterials_Params params;
	params.ForceCreateForComponent = ForceCreateForComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.ClientUpdateLinkedStructures
// ()
// Parameters:
// TArray<uint32_t>               NewLinkedStructures            (ConstParm, Parm, ZeroConstructor)

void APrimalStructure::ClientUpdateLinkedStructures(TArray<uint32_t> NewLinkedStructures)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.ClientUpdateLinkedStructures");

	APrimalStructure_ClientUpdateLinkedStructures_Params params;
	params.NewLinkedStructures = NewLinkedStructures;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.ClearCustomColors
// ()

void APrimalStructure::ClearCustomColors()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.ClearCustomColors");

	APrimalStructure_ClearCustomColors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.CanPickupStructureFromRecentPlacement
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::CanPickupStructureFromRecentPlacement()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.CanPickupStructureFromRecentPlacement");

	APrimalStructure_CanPickupStructureFromRecentPlacement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPUseCountStructureInRange
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPUseCountStructureInRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPUseCountStructureInRange");

	APrimalStructure_BPUseCountStructureInRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPUnstasis
// ()

void APrimalStructure::BPUnstasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPUnstasis");

	APrimalStructure_BPUnstasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPTriggerStasisEvent
// ()

void APrimalStructure::BPTriggerStasisEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPTriggerStasisEvent");

	APrimalStructure_BPTriggerStasisEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPTreatAsFoundationForSnappedStructure
// ()
// Parameters:
// class APrimalStructure*        OtherStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FPlacementData          WithPlacementData              (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPTreatAsFoundationForSnappedStructure(class APrimalStructure* OtherStructure, const struct FPlacementData& WithPlacementData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPTreatAsFoundationForSnappedStructure");

	APrimalStructure_BPTreatAsFoundationForSnappedStructure_Params params;
	params.OtherStructure = OtherStructure;
	params.WithPlacementData = WithPlacementData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPStructurePreGetMultiUseEntries
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPStructurePreGetMultiUseEntries(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPStructurePreGetMultiUseEntries");

	APrimalStructure_BPStructurePreGetMultiUseEntries_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPRefreshedStructureColors
// ()

void APrimalStructure::BPRefreshedStructureColors()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPRefreshedStructureColors");

	APrimalStructure_BPRefreshedStructureColors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPPreventUsingAsFloorForStructure
// ()
// Parameters:
// struct FPlacementData          theOutPlacementData            (ConstParm, Parm, OutParm, ReferenceParm)
// class APrimalStructure*        StructureToPlaceOnMe           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPPreventUsingAsFloorForStructure(const struct FPlacementData& theOutPlacementData, class APrimalStructure* StructureToPlaceOnMe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPreventUsingAsFloorForStructure");

	APrimalStructure_BPPreventUsingAsFloorForStructure_Params params;
	params.theOutPlacementData = theOutPlacementData;
	params.StructureToPlaceOnMe = StructureToPlaceOnMe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPPreventStasis
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPPreventStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPreventStasis");

	APrimalStructure_BPPreventStasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPPreventSpawnForPlayer
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCheckCooldownTime             (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        FromStructure                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPPreventSpawnForPlayer(class AShooterPlayerController* PC, bool bCheckCooldownTime, class APrimalStructure* FromStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPreventSpawnForPlayer");

	APrimalStructure_BPPreventSpawnForPlayer_Params params;
	params.PC = PC;
	params.bCheckCooldownTime = bCheckCooldownTime;
	params.FromStructure = FromStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPPreventPlacingStructureOntoMe
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        ForNewStructure                (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              ForHitResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPPreventPlacingStructureOntoMe(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FHitResult& ForHitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPreventPlacingStructureOntoMe");

	APrimalStructure_BPPreventPlacingStructureOntoMe_Params params;
	params.PC = PC;
	params.ForNewStructure = ForNewStructure;
	params.ForHitResult = ForHitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPPreventPlacingOnFloorStructure
// ()
// Parameters:
// struct FPlacementData          theOutPlacementData            (ConstParm, Parm, OutParm, ReferenceParm)
// class APrimalStructure*        FloorStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPPreventPlacingOnFloorStructure(const struct FPlacementData& theOutPlacementData, class APrimalStructure* FloorStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPreventPlacingOnFloorStructure");

	APrimalStructure_BPPreventPlacingOnFloorStructure_Params params;
	params.theOutPlacementData = theOutPlacementData;
	params.FloorStructure = FloorStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPPreventPlacementOnPawn
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ForBone                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPPreventPlacementOnPawn(class APlayerController* PC, class APrimalCharacter* forCharacter, const struct FName& ForBone)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPreventPlacementOnPawn");

	APrimalStructure_BPPreventPlacementOnPawn_Params params;
	params.PC = PC;
	params.forCharacter = forCharacter;
	params.ForBone = ForBone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPPostSetStructureCollisionChannels
// ()

void APrimalStructure::BPPostSetStructureCollisionChannels()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPostSetStructureCollisionChannels");

	APrimalStructure_BPPostSetStructureCollisionChannels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPPostLoadedFromSaveGame
// ()

void APrimalStructure::BPPostLoadedFromSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPostLoadedFromSaveGame");

	APrimalStructure_BPPostLoadedFromSaveGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPPlayDying
// ()
// Parameters:
// float                          KillingDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPPlayDying(float KillingDamage, const struct FDamageEvent& DamageEvent, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPlayDying");

	APrimalStructure_BPPlayDying_Params params;
	params.KillingDamage = KillingDamage;
	params.DamageEvent = DamageEvent;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPPlacedStructure
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPPlacedStructure(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPPlacedStructure");

	APrimalStructure_BPPlacedStructure_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPOverrideTargetLocation
// ()
// Parameters:
// struct FVector                 attackPos                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalStructure::BPOverrideTargetLocation(const struct FVector& attackPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOverrideTargetLocation");

	APrimalStructure_BPOverrideTargetLocation_Params params;
	params.attackPos = attackPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPOverrideSnappedToTransform
// ()
// Parameters:
// class APrimalStructure*        childStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ChildSnapFromIndex             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ChildSnapFromName              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 UnsnappedPlacementPos          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UnsnappedPlacementRot          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SnappedPlacementPos            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                SnappedPlacementRot            (Parm, ZeroConstructor, IsPlainOldData)
// int                            SnapToIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SnapToName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            bForceInvalidateSnap           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPOverrideSnappedToTransform(class APrimalStructure* childStructure, int ChildSnapFromIndex, const struct FName& ChildSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int SnapToIndex, const struct FName& SnapToName, struct FVector* OutLocation, struct FRotator* OutRotation, int* bForceInvalidateSnap)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOverrideSnappedToTransform");

	APrimalStructure_BPOverrideSnappedToTransform_Params params;
	params.childStructure = childStructure;
	params.ChildSnapFromIndex = ChildSnapFromIndex;
	params.ChildSnapFromName = ChildSnapFromName;
	params.UnsnappedPlacementPos = UnsnappedPlacementPos;
	params.UnsnappedPlacementRot = UnsnappedPlacementRot;
	params.SnappedPlacementPos = SnappedPlacementPos;
	params.SnappedPlacementRot = SnappedPlacementRot;
	params.SnapToIndex = SnapToIndex;
	params.SnapToName = SnapToName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
	if (bForceInvalidateSnap != nullptr)
		*bForceInvalidateSnap = params.bForceInvalidateSnap;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPOverrideSnappedFromTransform
// ()
// Parameters:
// class APrimalStructure*        ParentStructure                (Parm, ZeroConstructor, IsPlainOldData)
// int                            ParentSnapFromIndex            (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ParentSnapFromName             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 UnsnappedPlacementPos          (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                UnsnappedPlacementRot          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SnappedPlacementPos            (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                SnappedPlacementRot            (Parm, ZeroConstructor, IsPlainOldData)
// int                            SnapToIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SnapToName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OutRotation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            bForceInvalidateSnap           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPOverrideSnappedFromTransform(class APrimalStructure* ParentStructure, int ParentSnapFromIndex, const struct FName& ParentSnapFromName, const struct FVector& UnsnappedPlacementPos, const struct FRotator& UnsnappedPlacementRot, const struct FVector& SnappedPlacementPos, const struct FRotator& SnappedPlacementRot, int SnapToIndex, const struct FName& SnapToName, struct FVector* OutLocation, struct FRotator* OutRotation, int* bForceInvalidateSnap)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOverrideSnappedFromTransform");

	APrimalStructure_BPOverrideSnappedFromTransform_Params params;
	params.ParentStructure = ParentStructure;
	params.ParentSnapFromIndex = ParentSnapFromIndex;
	params.ParentSnapFromName = ParentSnapFromName;
	params.UnsnappedPlacementPos = UnsnappedPlacementPos;
	params.UnsnappedPlacementRot = UnsnappedPlacementRot;
	params.SnappedPlacementPos = SnappedPlacementPos;
	params.SnappedPlacementRot = SnappedPlacementRot;
	params.SnapToIndex = SnapToIndex;
	params.SnapToName = SnapToName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
	if (bForceInvalidateSnap != nullptr)
		*bForceInvalidateSnap = params.bForceInvalidateSnap;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPOverridePlacementRotation
// ()
// Parameters:
// struct FVector                 ViewPos                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ViewRot                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator APrimalStructure::BPOverridePlacementRotation(const struct FVector& ViewPos, const struct FRotator& ViewRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOverridePlacementRotation");

	APrimalStructure_BPOverridePlacementRotation_Params params;
	params.ViewPos = ViewPos;
	params.ViewRot = ViewRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPOverrideDemolish
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPOverrideDemolish(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOverrideDemolish");

	APrimalStructure_BPOverrideDemolish_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPOverrideCantBuildReasonString
// ()
// Parameters:
// int                            CantBuildReason                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString APrimalStructure::BPOverrideCantBuildReasonString(int CantBuildReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOverrideCantBuildReasonString");

	APrimalStructure_BPOverrideCantBuildReasonString_Params params;
	params.CantBuildReason = CantBuildReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPOverrideAllowStructureAccess
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsAccessAllowed               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPOverrideAllowStructureAccess(class AShooterPlayerController* ForPC, bool bIsAccessAllowed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOverrideAllowStructureAccess");

	APrimalStructure_BPOverrideAllowStructureAccess_Params params;
	params.ForPC = ForPC;
	params.bIsAccessAllowed = bIsAccessAllowed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPOnVariantSwitch
// ()
// Parameters:
// int                            NewVariantIndex                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPOnVariantSwitch(int NewVariantIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOnVariantSwitch");

	APrimalStructure_BPOnVariantSwitch_Params params;
	params.NewVariantIndex = NewVariantIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPOnStructurePickup
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ItemType                       (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             NewlyPickedUpItem              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsQuickPickup                 (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPOnStructurePickup(class APlayerController* PlayerController, class UClass* ItemType, class UPrimalItem* NewlyPickedUpItem, bool bIsQuickPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOnStructurePickup");

	APrimalStructure_BPOnStructurePickup_Params params;
	params.PlayerController = PlayerController;
	params.ItemType = ItemType;
	params.NewlyPickedUpItem = NewlyPickedUpItem;
	params.bIsQuickPickup = bIsQuickPickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPOnLinkedStructureDestroyed
// ()
// Parameters:
// class APrimalStructure*        DestroyedStructure             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPOnLinkedStructureDestroyed(class APrimalStructure* DestroyedStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOnLinkedStructureDestroyed");

	APrimalStructure_BPOnLinkedStructureDestroyed_Params params;
	params.DestroyedStructure = DestroyedStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPOnDemolish
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPOnDemolish(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPOnDemolish");

	APrimalStructure_BPOnDemolish_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPIsAllowedToBuildEx
// ()
// Parameters:
// struct FPlacementData          OutPlacementData               (ConstParm, Parm, OutParm, ReferenceParm)
// int                            CurrentAllowedReason           (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFinalPlacement                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bChoosingRotation              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructure::BPIsAllowedToBuildEx(const struct FPlacementData& OutPlacementData, int CurrentAllowedReason, class APlayerController* PC, bool bFinalPlacement, bool bChoosingRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPIsAllowedToBuildEx");

	APrimalStructure_BPIsAllowedToBuildEx_Params params;
	params.OutPlacementData = OutPlacementData;
	params.CurrentAllowedReason = CurrentAllowedReason;
	params.PC = PC;
	params.bFinalPlacement = bFinalPlacement;
	params.bChoosingRotation = bChoosingRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPIsAllowedToBuild
// ()
// Parameters:
// struct FPlacementData          OutPlacementData               (ConstParm, Parm, OutParm, ReferenceParm)
// int                            CurrentAllowedReason           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructure::BPIsAllowedToBuild(const struct FPlacementData& OutPlacementData, int CurrentAllowedReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPIsAllowedToBuild");

	APrimalStructure_BPIsAllowedToBuild_Params params;
	params.OutPlacementData = OutPlacementData;
	params.CurrentAllowedReason = CurrentAllowedReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPImpactEffect
// ()
// Parameters:
// struct FHitResult              HitRes                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ShootDirection                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPImpactEffect(const struct FHitResult& HitRes, const struct FVector& ShootDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPImpactEffect");

	APrimalStructure_BPImpactEffect_Params params;
	params.HitRes = HitRes;
	params.ShootDirection = ShootDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPHandleStructureEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPHandleStructureEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPHandleStructureEnabled");

	APrimalStructure_BPHandleStructureEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPHandleBedFastTravel
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        ToBed                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPHandleBedFastTravel(class AShooterPlayerController* ForPC, class APrimalStructure* ToBed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPHandleBedFastTravel");

	APrimalStructure_BPHandleBedFastTravel_Params params;
	params.ForPC = ForPC;
	params.ToBed = ToBed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPGetStructureID
// ()
// Parameters:
// class APrimalStructure*        PrimalStructure                (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructure::BPGetStructureID(class APrimalStructure* PrimalStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPGetStructureID");

	APrimalStructure_BPGetStructureID_Params params;
	params.PrimalStructure = PrimalStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPGetInfoFromConsumedItemForPlacedStructure
// ()
// Parameters:
// class UPrimalItem*             ItemToConsumed                 (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPGetInfoFromConsumedItemForPlacedStructure(class UPrimalItem* ItemToConsumed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPGetInfoFromConsumedItemForPlacedStructure");

	APrimalStructure_BPGetInfoFromConsumedItemForPlacedStructure_Params params;
	params.ItemToConsumed = ItemToConsumed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPGetFromID
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            TheStructureID                 (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalStructure* APrimalStructure::BPGetFromID(class UWorld* World, int TheStructureID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPGetFromID");

	APrimalStructure_BPGetFromID_Params params;
	params.World = World;
	params.TheStructureID = TheStructureID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPGetAllLinkedStructures
// ()
// Parameters:
// TArray<class APrimalStructure*> OutLinkedStructures            (Parm, OutParm, ZeroConstructor)

void APrimalStructure::BPGetAllLinkedStructures(TArray<class APrimalStructure*>* OutLinkedStructures)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPGetAllLinkedStructures");

	APrimalStructure_BPGetAllLinkedStructures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLinkedStructures != nullptr)
		*OutLinkedStructures = params.OutLinkedStructures;
}


// Function ShooterGame.PrimalStructure.BPForceConsideredEnemyFoundation
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        ForNewStructure                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TestAtLocation                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPForceConsideredEnemyFoundation(class APlayerController* PC, class APrimalStructure* ForNewStructure, const struct FVector& TestAtLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPForceConsideredEnemyFoundation");

	APrimalStructure_BPForceConsideredEnemyFoundation_Params params;
	params.PC = PC;
	params.ForNewStructure = ForNewStructure;
	params.TestAtLocation = TestAtLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPBeginPreview
// ()

void APrimalStructure::BPBeginPreview()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPBeginPreview");

	APrimalStructure_BPBeginPreview_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPApplyCustomDurabilityOnPickup
// ()
// Parameters:
// class UPrimalItem*             pickedup                       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BPApplyCustomDurabilityOnPickup(class UPrimalItem* pickedup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPApplyCustomDurabilityOnPickup");

	APrimalStructure_BPApplyCustomDurabilityOnPickup_Params params;
	params.pickedup = pickedup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BPAllowSwitchToVariant
// ()
// Parameters:
// int                            VariantIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPAllowSwitchToVariant(int VariantIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPAllowSwitchToVariant");

	APrimalStructure_BPAllowSwitchToVariant_Params params;
	params.VariantIndex = VariantIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPAllowSnapRotationForStructure
// ()
// Parameters:
// int                            ThisSnapPointIndex             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ThisSnapPointName              (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        OtherStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            OtherStructureSnapPointIndex   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   OtherStructureSnapPointName    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPAllowSnapRotationForStructure(int ThisSnapPointIndex, const struct FName& ThisSnapPointName, class APrimalStructure* OtherStructure, int OtherStructureSnapPointIndex, const struct FName& OtherStructureSnapPointName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPAllowSnapRotationForStructure");

	APrimalStructure_BPAllowSnapRotationForStructure_Params params;
	params.ThisSnapPointIndex = ThisSnapPointIndex;
	params.ThisSnapPointName = ThisSnapPointName;
	params.OtherStructure = OtherStructure;
	params.OtherStructureSnapPointIndex = OtherStructureSnapPointIndex;
	params.OtherStructureSnapPointName = OtherStructureSnapPointName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPAllowSnappingWith
// ()
// Parameters:
// class APrimalStructure*        OtherStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPAllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPAllowSnappingWith");

	APrimalStructure_BPAllowSnappingWith_Params params;
	params.OtherStructure = OtherStructure;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BPAllowPickupGiveItem
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::BPAllowPickupGiveItem(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BPAllowPickupGiveItem");

	APrimalStructure_BPAllowPickupGiveItem_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.BlueprintDrawPreviewHUD
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterY                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BlueprintDrawPreviewHUD(class AShooterHUD* HUD, float CenterX, float CenterY)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BlueprintDrawPreviewHUD");

	APrimalStructure_BlueprintDrawPreviewHUD_Params params;
	params.HUD = HUD;
	params.CenterX = CenterX;
	params.CenterY = CenterY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.BlueprintDrawHUD
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterX                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          CenterY                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::BlueprintDrawHUD(class AShooterHUD* HUD, float CenterX, float CenterY)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.BlueprintDrawHUD");

	APrimalStructure_BlueprintDrawHUD_Params params;
	params.HUD = HUD;
	params.CenterX = CenterX;
	params.CenterY = CenterY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.ApplyPrimalItemSettingsToStructure
// ()
// Parameters:
// class UMeshComponent*          meshToColorize                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UPrimalItem*             AssociatedPrimalItem           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructure::ApplyPrimalItemSettingsToStructure(class UMeshComponent* meshToColorize, class UPrimalItem* AssociatedPrimalItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.ApplyPrimalItemSettingsToStructure");

	APrimalStructure_ApplyPrimalItemSettingsToStructure_Params params;
	params.meshToColorize = meshToColorize;
	params.AssociatedPrimalItem = AssociatedPrimalItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructure.AllowStructureAccess
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::AllowStructureAccess(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.AllowStructureAccess");

	APrimalStructure_AllowStructureAccess_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructure.AllowSnappingWith
// ()
// Parameters:
// class APrimalStructure*        OtherStructure                 (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructure::AllowSnappingWith(class APrimalStructure* OtherStructure, class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructure.AllowSnappingWith");

	APrimalStructure_AllowSnappingWith_Params params;
	params.OtherStructure = OtherStructure;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureBearTrap.TriggerTouched
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalStructureBearTrap::TriggerTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.TriggerTouched");

	APrimalStructureBearTrap_TriggerTouched_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureBearTrap.PeriodicalTrapDamageTimer
// ()

void APrimalStructureBearTrap::PeriodicalTrapDamageTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.PeriodicalTrapDamageTimer");

	APrimalStructureBearTrap_PeriodicalTrapDamageTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureBearTrap.OnRep_CurrentTrapState
// ()

void APrimalStructureBearTrap::OnRep_CurrentTrapState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.OnRep_CurrentTrapState");

	APrimalStructureBearTrap_OnRep_CurrentTrapState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureBearTrap.NetGotoTrapState
// ()
// Parameters:
// int8_t                         TrapState                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureBearTrap::NetGotoTrapState(int8_t TrapState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.NetGotoTrapState");

	APrimalStructureBearTrap_NetGotoTrapState_Params params;
	params.TrapState = TrapState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureBearTrap.IsTrapPrepared
// ()
// Parameters:
// float                          AnimSetupTime                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureBearTrap::IsTrapPrepared(float AnimSetupTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.IsTrapPrepared");

	APrimalStructureBearTrap_IsTrapPrepared_Params params;
	params.AnimSetupTime = AnimSetupTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureBearTrap.HideAnimatedSK
// ()

void APrimalStructureBearTrap::HideAnimatedSK()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.HideAnimatedSK");

	APrimalStructureBearTrap_HideAnimatedSK_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureBearTrap.DecreaseDamageTimer
// ()

void APrimalStructureBearTrap::DecreaseDamageTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.DecreaseDamageTimer");

	APrimalStructureBearTrap_DecreaseDamageTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureBearTrap.BPNotifyImmobilizedCharacterIsDeadOrInConscious
// ()
// Parameters:
// bool                           IsDead                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsConscious                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureBearTrap::BPNotifyImmobilizedCharacterIsDeadOrInConscious(bool IsDead, bool IsConscious)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBearTrap.BPNotifyImmobilizedCharacterIsDeadOrInConscious");

	APrimalStructureBearTrap_BPNotifyImmobilizedCharacterIsDeadOrInConscious_Params params;
	params.IsDead = IsDead;
	params.IsConscious = IsConscious;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureDoor.OnRep_DoorOpenState
// ()
// Parameters:
// int8_t                         PrevDoorOpenState              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureDoor::OnRep_DoorOpenState(int8_t PrevDoorOpenState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureDoor.OnRep_DoorOpenState");

	APrimalStructureDoor_OnRep_DoorOpenState_Params params;
	params.PrevDoorOpenState = PrevDoorOpenState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureDoor.NetGotoDoorState
// ()
// Parameters:
// int8_t                         DoorState                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureDoor::NetGotoDoorState(int8_t DoorState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureDoor.NetGotoDoorState");

	APrimalStructureDoor_NetGotoDoorState_Params params;
	params.DoorState = DoorState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureDoor.GetDoorState
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructureDoor::GetDoorState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureDoor.GetDoorState");

	APrimalStructureDoor_GetDoorState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureDoor.DelayedGotoDoorStateTimer
// ()

void APrimalStructureDoor::DelayedGotoDoorStateTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureDoor.DelayedGotoDoorStateTimer");

	APrimalStructureDoor_DelayedGotoDoorStateTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureDoor.CanOpen
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureDoor::CanOpen(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureDoor.CanOpen");

	APrimalStructureDoor_CanOpen_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureDoor.BPSetDoorState
// ()
// Parameters:
// int                            DoorState                      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureDoor::BPSetDoorState(int DoorState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureDoor.BPSetDoorState");

	APrimalStructureDoor_BPSetDoorState_Params params;
	params.DoorState = DoorState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureDoor.BPGotoDoorState
// ()
// Parameters:
// int                            NewDoorState                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureDoor::BPGotoDoorState(int NewDoorState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureDoor.BPGotoDoorState");

	APrimalStructureDoor_BPGotoDoorState_Params params;
	params.NewDoorState = NewDoorState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSkeletalDoor.OnEndOverlap
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureSkeletalDoor::OnEndOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSkeletalDoor.OnEndOverlap");

	APrimalStructureSkeletalDoor_OnEndOverlap_Params params;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSkeletalDoor.OnBeginOverlap
// ()
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalStructureSkeletalDoor::OnBeginOverlap(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSkeletalDoor.OnBeginOverlap");

	APrimalStructureSkeletalDoor_OnBeginOverlap_Params params;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSkeletalDoor.GetDoorOpenState
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructureSkeletalDoor::GetDoorOpenState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSkeletalDoor.GetDoorOpenState");

	APrimalStructureSkeletalDoor_GetDoorOpenState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.ServerActivate
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceDirection                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalStructureElevatorState> Dir                            (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureElevatorPlatform::ServerActivate(class APlayerController* ForPC, bool bForceDirection, TEnumAsByte<EPrimalStructureElevatorState> Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.ServerActivate");

	APrimalStructureElevatorPlatform_ServerActivate_Params params;
	params.ForPC = ForPC;
	params.bForceDirection = bForceDirection;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.PlatformIsActive
// ()
// Parameters:
// TEnumAsByte<EPrimalStructureElevatorState> Direction                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureElevatorPlatform::PlatformIsActive(TEnumAsByte<EPrimalStructureElevatorState>* Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.PlatformIsActive");

	APrimalStructureElevatorPlatform_PlatformIsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Direction != nullptr)
		*Direction = params.Direction;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.OnRep_bIsActivated
// ()

void APrimalStructureElevatorPlatform::OnRep_bIsActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.OnRep_bIsActivated");

	APrimalStructureElevatorPlatform_OnRep_bIsActivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.HasReachedMaxWeight
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureElevatorPlatform::HasReachedMaxWeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.HasReachedMaxWeight");

	APrimalStructureElevatorPlatform_HasReachedMaxWeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.GetTrackHeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalStructureElevatorPlatform::GetTrackHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.GetTrackHeight");

	APrimalStructureElevatorPlatform_GetTrackHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.GetCurrentLiftedWeight
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalStructureElevatorPlatform::GetCurrentLiftedWeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.GetCurrentLiftedWeight");

	APrimalStructureElevatorPlatform_GetCurrentLiftedWeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.GetAllTrackStructures
// ()
// Parameters:
// TArray<class AActor*>          Tracks                         (Parm, OutParm, ZeroConstructor)

void APrimalStructureElevatorPlatform::GetAllTrackStructures(TArray<class AActor*>* Tracks)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.GetAllTrackStructures");

	APrimalStructureElevatorPlatform_GetAllTrackStructures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Tracks != nullptr)
		*Tracks = params.Tracks;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.Deactivate
// ()
// Parameters:
// bool                           bSwitchDirection               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureElevatorPlatform::Deactivate(bool bSwitchDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.Deactivate");

	APrimalStructureElevatorPlatform_Deactivate_Params params;
	params.bSwitchDirection = bSwitchDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.BPElevatorStopped
// ()
// Parameters:
// bool                           bSwitchedDirection             (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalStructureElevatorState> NewDirection                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureElevatorPlatform::BPElevatorStopped(bool bSwitchedDirection, TEnumAsByte<EPrimalStructureElevatorState> NewDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.BPElevatorStopped");

	APrimalStructureElevatorPlatform_BPElevatorStopped_Params params;
	params.bSwitchedDirection = bSwitchedDirection;
	params.NewDirection = NewDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureElevatorPlatform.Activate
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceDirection                (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EPrimalStructureElevatorState> Dir                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          DistanceToTravelOverride       (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureElevatorPlatform::Activate(class APlayerController* ForPC, bool bForceDirection, TEnumAsByte<EPrimalStructureElevatorState> Dir, float DistanceToTravelOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorPlatform.Activate");

	APrimalStructureElevatorPlatform_Activate_Params params;
	params.ForPC = ForPC;
	params.bForceDirection = bForceDirection;
	params.Dir = Dir;
	params.DistanceToTravelOverride = DistanceToTravelOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureExplosive.ApplyPlacementPreview
// ()

void APrimalStructureExplosive::ApplyPlacementPreview()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureExplosive.ApplyPlacementPreview");

	APrimalStructureExplosive_ApplyPlacementPreview_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureExplosiveTransGPS.NetSetLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureExplosiveTransGPS::NetSetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureExplosiveTransGPS.NetSetLocation");

	APrimalStructureExplosiveTransGPS_NetSetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTripwire.WireCheck
// ()

void APrimalStructureTripwire::WireCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTripwire.WireCheck");

	APrimalStructureTripwire_WireCheck_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTripwire.TriggerTouched
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalStructureTripwire::TriggerTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTripwire.TriggerTouched");

	APrimalStructureTripwire_TriggerTouched_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTripwire.OnRep_UnwiredTrap
// ()

void APrimalStructureTripwire::OnRep_UnwiredTrap()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTripwire.OnRep_UnwiredTrap");

	APrimalStructureTripwire_OnRep_UnwiredTrap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTripwire.OnRep_ConnectedTo
// ()

void APrimalStructureTripwire::OnRep_ConnectedTo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTripwire.OnRep_ConnectedTo");

	APrimalStructureTripwire_OnRep_ConnectedTo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTripwire.NetUpdateBoxName
// ()
// Parameters:
// class FString                  NewName                        (Parm, ZeroConstructor)

void APrimalStructureTripwire::NetUpdateBoxName(const class FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTripwire.NetUpdateBoxName");

	APrimalStructureTripwire_NetUpdateBoxName_Params params;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTripwire.DisconnectMe
// ()

void APrimalStructureTripwire::DisconnectMe()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTripwire.DisconnectMe");

	APrimalStructureTripwire_DisconnectMe_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.UpdateSolarPower
// ()

void APrimalStructureItemContainer::UpdateSolarPower()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.UpdateSolarPower");

	APrimalStructureItemContainer_UpdateSolarPower_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.UpdateContainerActiveHealthDecrease
// ()

void APrimalStructureItemContainer::UpdateContainerActiveHealthDecrease()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.UpdateContainerActiveHealthDecrease");

	APrimalStructureItemContainer_UpdateContainerActiveHealthDecrease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.TryActivation
// ()

void APrimalStructureItemContainer::TryActivation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.TryActivation");

	APrimalStructureItemContainer_TryActivation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.SetPoweredOverrideCounter
// ()
// Parameters:
// int                            NewPoweredOverrideCounter      (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer::SetPoweredOverrideCounter(int NewPoweredOverrideCounter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.SetPoweredOverrideCounter");

	APrimalStructureItemContainer_SetPoweredOverrideCounter_Params params;
	params.NewPoweredOverrideCounter = NewPoweredOverrideCounter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.RefreshPowerJunctionLink
// ()

void APrimalStructureItemContainer::RefreshPowerJunctionLink()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.RefreshPowerJunctionLink");

	APrimalStructureItemContainer_RefreshPowerJunctionLink_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.RefreshInventoryItemCounts
// ()

void APrimalStructureItemContainer::RefreshInventoryItemCounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.RefreshInventoryItemCounts");

	APrimalStructureItemContainer_RefreshInventoryItemCounts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.PowerGeneratorBuiltNearbyPoweredStructure
// ()
// Parameters:
// class APrimalStructureItemContainer* PoweredStructure               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer::PowerGeneratorBuiltNearbyPoweredStructure(class APrimalStructureItemContainer* PoweredStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.PowerGeneratorBuiltNearbyPoweredStructure");

	APrimalStructureItemContainer_PowerGeneratorBuiltNearbyPoweredStructure_Params params;
	params.PoweredStructure = PoweredStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.NetUpdateLocation
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer::NetUpdateLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.NetUpdateLocation");

	APrimalStructureItemContainer_NetUpdateLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.NetUpdateBoxName
// ()
// Parameters:
// class FString                  NewName                        (Parm, ZeroConstructor)

void APrimalStructureItemContainer::NetUpdateBoxName(const class FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.NetUpdateBoxName");

	APrimalStructureItemContainer_NetUpdateBoxName_Params params;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.NetSetContainerActive
// ()
// Parameters:
// bool                           bSetActive                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  NetReplicatedFuelItemClass     (Parm, ZeroConstructor, IsPlainOldData)
// int16_t                        NetReplicatedFuelItemColorIndex (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer::NetSetContainerActive(bool bSetActive, class UClass* NetReplicatedFuelItemClass, int16_t NetReplicatedFuelItemColorIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.NetSetContainerActive");

	APrimalStructureItemContainer_NetSetContainerActive_Params params;
	params.bSetActive = bSetActive;
	params.NetReplicatedFuelItemClass = NetReplicatedFuelItemClass;
	params.NetReplicatedFuelItemColorIndex = NetReplicatedFuelItemColorIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.MovePowerJunctionLink
// ()

void APrimalStructureItemContainer::MovePowerJunctionLink()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.MovePowerJunctionLink");

	APrimalStructureItemContainer_MovePowerJunctionLink_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.IsValidForDinoFeedingContainer
// ()
// Parameters:
// class APrimalDinoCharacter*    ForDino                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureItemContainer::IsValidForDinoFeedingContainer(class APrimalDinoCharacter* ForDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.IsValidForDinoFeedingContainer");

	APrimalStructureItemContainer_IsValidForDinoFeedingContainer_Params params;
	params.ForDino = ForDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer.IsPlayerControllerInPinCodeValidationList
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureItemContainer::IsPlayerControllerInPinCodeValidationList(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.IsPlayerControllerInPinCodeValidationList");

	APrimalStructureItemContainer_IsPlayerControllerInPinCodeValidationList_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer.EnableActive
// ()

void APrimalStructureItemContainer::EnableActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.EnableActive");

	APrimalStructureItemContainer_EnableActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.CanBeActivated
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureItemContainer::CanBeActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.CanBeActivated");

	APrimalStructureItemContainer_CanBeActivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer.BPSetPlayerConstructor
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer::BPSetPlayerConstructor(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPSetPlayerConstructor");

	APrimalStructureItemContainer_BPSetPlayerConstructor_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.BPPreGetMultiUseEntries
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer::BPPreGetMultiUseEntries(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPPreGetMultiUseEntries");

	APrimalStructureItemContainer_BPPreGetMultiUseEntries_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.BPOnContainerActiveHealthDecrease
// ()

void APrimalStructureItemContainer::BPOnContainerActiveHealthDecrease()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPOnContainerActiveHealthDecrease");

	APrimalStructureItemContainer_BPOnContainerActiveHealthDecrease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.BPNotifyInventoryItemChange
// ()
// Parameters:
// bool                           bIsItemAdd                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             theItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEquipItem                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer::BPNotifyInventoryItemChange(bool bIsItemAdd, class UPrimalItem* theItem, bool bEquipItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPNotifyInventoryItemChange");

	APrimalStructureItemContainer_BPNotifyInventoryItemChange_Params params;
	params.bIsItemAdd = bIsItemAdd;
	params.theItem = theItem;
	params.bEquipItem = bEquipItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.BPIsValidWaterSourceForPipe
// ()
// Parameters:
// class APrimalStructureWaterPipe* ForWaterPipe                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureItemContainer::BPIsValidWaterSourceForPipe(class APrimalStructureWaterPipe* ForWaterPipe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPIsValidWaterSourceForPipe");

	APrimalStructureItemContainer_BPIsValidWaterSourceForPipe_Params params;
	params.ForWaterPipe = ForWaterPipe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer.BPGetFuelConsumptionMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalStructureItemContainer::BPGetFuelConsumptionMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPGetFuelConsumptionMultiplier");

	APrimalStructureItemContainer_BPGetFuelConsumptionMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer.BPContainerDeactivated
// ()

void APrimalStructureItemContainer::BPContainerDeactivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPContainerDeactivated");

	APrimalStructureItemContainer_BPContainerDeactivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.BPContainerActivated
// ()

void APrimalStructureItemContainer::BPContainerActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPContainerActivated");

	APrimalStructureItemContainer_BPContainerActivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer.BPCanBeActivatedByPlayer
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureItemContainer::BPCanBeActivatedByPlayer(class AShooterPlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPCanBeActivatedByPlayer");

	APrimalStructureItemContainer_BPCanBeActivatedByPlayer_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer.BPCanBeActivated
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureItemContainer::BPCanBeActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.BPCanBeActivated");

	APrimalStructureItemContainer_BPCanBeActivated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer.AllowToggleActivation
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureItemContainer::AllowToggleActivation(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer.AllowToggleActivation");

	APrimalStructureItemContainer_AllowToggleActivation_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureElevatorTrack.HasPlatformAttachedToTheTrack
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureElevatorTrack::HasPlatformAttachedToTheTrack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorTrack.HasPlatformAttachedToTheTrack");

	APrimalStructureElevatorTrack_HasPlatformAttachedToTheTrack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureElevatorTrack.ClientHasPlatform
// ()

void APrimalStructureElevatorTrack::ClientHasPlatform()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorTrack.ClientHasPlatform");

	APrimalStructureElevatorTrack_ClientHasPlatform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureElevatorTrack.BPGetElevatorPlatform
// ()
// Parameters:
// class APrimalStructureElevatorPlatform* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalStructureElevatorPlatform* APrimalStructureElevatorTrack::BPGetElevatorPlatform()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureElevatorTrack.BPGetElevatorPlatform");

	APrimalStructureElevatorTrack_BPGetElevatorPlatform_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer_CropPlot.OnRep_PlantedCrop
// ()
// Parameters:
// class UClass*                  PrevPlantedCrop                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer_CropPlot::OnRep_PlantedCrop(class UClass* PrevPlantedCrop)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_CropPlot.OnRep_PlantedCrop");

	APrimalStructureItemContainer_CropPlot_OnRep_PlantedCrop_Params params;
	params.PrevPlantedCrop = PrevPlantedCrop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_CropPlot.OnRep_HasFruitItems
// ()
// Parameters:
// bool                           bPreviousHasFruitItems         (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer_CropPlot::OnRep_HasFruitItems(bool bPreviousHasFruitItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_CropPlot.OnRep_HasFruitItems");

	APrimalStructureItemContainer_CropPlot_OnRep_HasFruitItems_Params params;
	params.bPreviousHasFruitItems = bPreviousHasFruitItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_CropPlot.OnRep_CurrentCropPhase
// ()
// Parameters:
// TEnumAsByte<ESeedCropPhase>    PrevCropPhase                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer_CropPlot::OnRep_CurrentCropPhase(TEnumAsByte<ESeedCropPhase> PrevCropPhase)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_CropPlot.OnRep_CurrentCropPhase");

	APrimalStructureItemContainer_CropPlot_OnRep_CurrentCropPhase_Params params;
	params.PrevCropPhase = PrevCropPhase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_CropPlot.AutoWaterRefreshCrop
// ()

void APrimalStructureItemContainer_CropPlot::AutoWaterRefreshCrop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_CropPlot.AutoWaterRefreshCrop");

	APrimalStructureItemContainer_CropPlot_AutoWaterRefreshCrop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_CropPlot.AddWater
// ()
// Parameters:
// float                          amount                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowNetworking               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalStructureItemContainer_CropPlot::AddWater(float amount, bool bAllowNetworking)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_CropPlot.AddWater");

	APrimalStructureItemContainer_CropPlot_AddWater_Params params;
	params.amount = amount;
	params.bAllowNetworking = bAllowNetworking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems.OnRep_HasItems
// ()

void APrimalStructureItemContainer_CropPlot_VisualItems::OnRep_HasItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems.OnRep_HasItems");

	APrimalStructureItemContainer_CropPlot_VisualItems_OnRep_HasItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems.BPUpdateItemVisuals
// ()

void APrimalStructureItemContainer_CropPlot_VisualItems::BPUpdateItemVisuals()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_CropPlot_VisualItems.BPUpdateItemVisuals");

	APrimalStructureItemContainer_CropPlot_VisualItems_BPUpdateItemVisuals_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_SupplyCrate.StartLosingHealth
// ()

void APrimalStructureItemContainer_SupplyCrate::StartLosingHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_SupplyCrate.StartLosingHealth");

	APrimalStructureItemContainer_SupplyCrate_StartLosingHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_SupplyCrate.SetAppliedBuff
// ()
// Parameters:
// bool                           bSet                           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureItemContainer_SupplyCrate::SetAppliedBuff(bool bSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_SupplyCrate.SetAppliedBuff");

	APrimalStructureItemContainer_SupplyCrate_SetAppliedBuff_Params params;
	params.bSet = bSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_SupplyCrate.LoseHealth
// ()

void APrimalStructureItemContainer_SupplyCrate::LoseHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_SupplyCrate.LoseHealth");

	APrimalStructureItemContainer_SupplyCrate_LoseHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_HordeCrate.SpawnElementNodePostProcess
// ()

void APrimalStructureItemContainer_HordeCrate::SpawnElementNodePostProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_HordeCrate.SpawnElementNodePostProcess");

	APrimalStructureItemContainer_HordeCrate_SpawnElementNodePostProcess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_VisualItems.UpdateVisuals
// ()

void APrimalStructureItemContainer_VisualItems::UpdateVisuals()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_VisualItems.UpdateVisuals");

	APrimalStructureItemContainer_VisualItems_UpdateVisuals_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_VisualItems.OnRep_HasItems
// ()

void APrimalStructureItemContainer_VisualItems::OnRep_HasItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_VisualItems.OnRep_HasItems");

	APrimalStructureItemContainer_VisualItems_OnRep_HasItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureItemContainer_VisualItems.BPUpdateItemVisuals
// ()

void APrimalStructureItemContainer_VisualItems::BPUpdateItemVisuals()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureItemContainer_VisualItems.BPUpdateItemVisuals");

	APrimalStructureItemContainer_VisualItems_BPUpdateItemVisuals_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeating.Release
// ()
// Parameters:
// class AShooterCharacter*       ShooterCharacter               (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureSeating::Release(class AShooterCharacter* ShooterCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.Release");

	APrimalStructureSeating_Release_Params params;
	params.ShooterCharacter = ShooterCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeating.OnRep_SeatedCharacter
// ()

void APrimalStructureSeating::OnRep_SeatedCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.OnRep_SeatedCharacter");

	APrimalStructureSeating_OnRep_SeatedCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeating.OnRep_CharacterPerSeat
// ()

void APrimalStructureSeating::OnRep_CharacterPerSeat()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.OnRep_CharacterPerSeat");

	APrimalStructureSeating_OnRep_CharacterPerSeat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeating.GetNearestFreeSpot
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CharacterLocation              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructureSeating::GetNearestFreeSpot(class AShooterPlayerController* ForPC, const struct FVector& CharacterLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.GetNearestFreeSpot");

	APrimalStructureSeating_GetNearestFreeSpot_Params params;
	params.ForPC = ForPC;
	params.CharacterLocation = CharacterLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureSeating.Control
// ()
// Parameters:
// class AShooterCharacter*       ShooterCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// int                            SeatNumber                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLockedToSeat                  (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureSeating::Control(class AShooterCharacter* ShooterCharacter, int SeatNumber, bool bLockedToSeat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.Control");

	APrimalStructureSeating_Control_Params params;
	params.ShooterCharacter = ShooterCharacter;
	params.SeatNumber = SeatNumber;
	params.bLockedToSeat = bLockedToSeat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeating.CanSeat
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForce                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureSeating::CanSeat(class AShooterPlayerController* ForPC, class AShooterCharacter* forCharacter, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.CanSeat");

	APrimalStructureSeating_CanSeat_Params params;
	params.ForPC = ForPC;
	params.forCharacter = forCharacter;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureSeating.BPSeatedPlayer
// ()
// Parameters:
// class AShooterCharacter*       SeatedChar                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            AtSeatNumber                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureSeating::BPSeatedPlayer(class AShooterCharacter* SeatedChar, int AtSeatNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.BPSeatedPlayer");

	APrimalStructureSeating_BPSeatedPlayer_Params params;
	params.SeatedChar = SeatedChar;
	params.AtSeatNumber = AtSeatNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeating.BPReleasedPlayer
// ()
// Parameters:
// class AShooterCharacter*       ReleasedChar                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            AtSeatNumber                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureSeating::BPReleasedPlayer(class AShooterCharacter* ReleasedChar, int AtSeatNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.BPReleasedPlayer");

	APrimalStructureSeating_BPReleasedPlayer_Params params;
	params.ReleasedChar = ReleasedChar;
	params.AtSeatNumber = AtSeatNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeating.BPHandleSitterPoop
// ()
// Parameters:
// class AShooterCharacter*       ForSitter                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureSeating::BPHandleSitterPoop(class AShooterCharacter* ForSitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.BPHandleSitterPoop");

	APrimalStructureSeating_BPHandleSitterPoop_Params params;
	params.ForSitter = ForSitter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureSeating.BPGetBestSeatNumber
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            InBestSeatNumber               (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APrimalStructureSeating::BPGetBestSeatNumber(class AShooterPlayerController* ForPC, int InBestSeatNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.BPGetBestSeatNumber");

	APrimalStructureSeating_BPGetBestSeatNumber_Params params;
	params.ForPC = ForPC;
	params.InBestSeatNumber = InBestSeatNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureSeating.BPAllowSeating
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureSeating::BPAllowSeating(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeating.BPAllowSeating");

	APrimalStructureSeating_BPAllowSeating_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureBed.SpawnedPlayerFor
// ()
// Parameters:
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   ForPawn                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureBed::SpawnedPlayerFor(class AShooterPlayerController* PC, class APawn* ForPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureBed.SpawnedPlayerFor");

	APrimalStructureBed_SpawnedPlayerFor_Params params;
	params.PC = PC;
	params.ForPawn = ForPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTurretBallista.ClientsPlayFireAnim
// ()

void APrimalStructureTurretBallista::ClientsPlayFireAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurretBallista.ClientsPlayFireAnim");

	APrimalStructureTurretBallista_ClientsPlayFireAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTurretBallista.ClientsFireProjectile
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)

void APrimalStructureTurretBallista::ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurretBallista.ClientsFireProjectile");

	APrimalStructureTurretBallista_ClientsFireProjectile_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTurretBallista.BPCanFire
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureTurretBallista::BPCanFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurretBallista.BPCanFire");

	APrimalStructureTurretBallista_BPCanFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureTurret.UpdatedTargeting
// ()

void APrimalStructureTurret::UpdatedTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurret.UpdatedTargeting");

	APrimalStructureTurret_UpdatedTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTurret.StartWarning
// ()

void APrimalStructureTurret::StartWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurret.StartWarning");

	APrimalStructureTurret_StartWarning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTurret.ClientsFireProjectile
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)

void APrimalStructureTurret::ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurret.ClientsFireProjectile");

	APrimalStructureTurret_ClientsFireProjectile_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureTurret.BPTurretPreventsTargeting
// ()
// Parameters:
// class APrimalCharacter*        PotentialTarget                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalStructureTurret::BPTurretPreventsTargeting(class APrimalCharacter* PotentialTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurret.BPTurretPreventsTargeting");

	APrimalStructureTurret_BPTurretPreventsTargeting_Params params;
	params.PotentialTarget = PotentialTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalStructureTurretPlant.RecoverHealthTimer
// ()

void APrimalStructureTurretPlant::RecoverHealthTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureTurretPlant.RecoverHealthTimer");

	APrimalStructureTurretPlant_RecoverHealthTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureUnderwaterBase.UpdateCurrentPinCodes
// ()
// Parameters:
// TArray<uint32_t>               NewPinCodes                    (ConstParm, Parm, ZeroConstructor)

void APrimalStructureUnderwaterBase::UpdateCurrentPinCodes(TArray<uint32_t> NewPinCodes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureUnderwaterBase.UpdateCurrentPinCodes");

	APrimalStructureUnderwaterBase_UpdateCurrentPinCodes_Params params;
	params.NewPinCodes = NewPinCodes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureUnderwaterBase.SetPortholeState
// ()
// Parameters:
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOpen                          (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureUnderwaterBase::SetPortholeState(int index, bool bOpen)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureUnderwaterBase.SetPortholeState");

	APrimalStructureUnderwaterBase_SetPortholeState_Params params;
	params.index = index;
	params.bOpen = bOpen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureUnderwaterBase.SetPortholeLocked
// ()
// Parameters:
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bLocked                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureUnderwaterBase::SetPortholeLocked(int index, bool bLocked)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureUnderwaterBase.SetPortholeLocked");

	APrimalStructureUnderwaterBase_SetPortholeLocked_Params params;
	params.index = index;
	params.bLocked = bLocked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureUnderwaterBase.OnRep_IsFlooded
// ()

void APrimalStructureUnderwaterBase::OnRep_IsFlooded()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureUnderwaterBase.OnRep_IsFlooded");

	APrimalStructureUnderwaterBase_OnRep_IsFlooded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureUnderwaterBase.MultiSetPortholeStates
// ()
// Parameters:
// TArray<bool>                   portholes                      (ConstParm, Parm, ZeroConstructor)

void APrimalStructureUnderwaterBase::MultiSetPortholeStates(TArray<bool> portholes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureUnderwaterBase.MultiSetPortholeStates");

	APrimalStructureUnderwaterBase_MultiSetPortholeStates_Params params;
	params.portholes = portholes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureUnderwaterBase.ChangedCompartmentFloodState
// ()

void APrimalStructureUnderwaterBase::ChangedCompartmentFloodState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureUnderwaterBase.ChangedCompartmentFloodState");

	APrimalStructureUnderwaterBase_ChangedCompartmentFloodState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureLadder.UpdateRetraction
// ()

void APrimalStructureLadder::UpdateRetraction()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureLadder.UpdateRetraction");

	APrimalStructureLadder_UpdateRetraction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureLadder.EndClimbingLadder
// ()
// Parameters:
// class AShooterCharacter*       theCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bServerClimbOver               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ServerClimbOverLoc             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void APrimalStructureLadder::EndClimbingLadder(class AShooterCharacter* theCharacter, bool bServerClimbOver, const struct FVector& ServerClimbOverLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureLadder.EndClimbingLadder");

	APrimalStructureLadder_EndClimbingLadder_Params params;
	params.theCharacter = theCharacter;
	params.bServerClimbOver = bServerClimbOver;
	params.ServerClimbOverLoc = ServerClimbOverLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructurePortableLadder.UpdateBoxCollisionForRetraction
// ()
// Parameters:
// bool                           bRetracted                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructurePortableLadder::UpdateBoxCollisionForRetraction(bool bRetracted)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructurePortableLadder.UpdateBoxCollisionForRetraction");

	APrimalStructurePortableLadder_UpdateBoxCollisionForRetraction_Params params;
	params.bRetracted = bRetracted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructurePortableLadder.PlaySetupAnimation
// ()

void APrimalStructurePortableLadder::PlaySetupAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructurePortableLadder.PlaySetupAnimation");

	APrimalStructurePortableLadder_PlaySetupAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructurePortableLadder.BuildLadder
// ()

void APrimalStructurePortableLadder::BuildLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructurePortableLadder.BuildLadder");

	APrimalStructurePortableLadder_BuildLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeaMine.RefreshSeaMineTarget
// ()

void APrimalStructureSeaMine::RefreshSeaMineTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeaMine.RefreshSeaMineTarget");

	APrimalStructureSeaMine_RefreshSeaMineTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeaMine.OnTriggerEndOverlap
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureSeaMine::OnTriggerEndOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeaMine.OnTriggerEndOverlap");

	APrimalStructureSeaMine_OnTriggerEndOverlap_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeaMine.OnTriggerBeginOverlap
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalStructureSeaMine::OnTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeaMine.OnTriggerBeginOverlap");

	APrimalStructureSeaMine_OnTriggerBeginOverlap_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeaMine.OnRep_SeaMineTarget
// ()

void APrimalStructureSeaMine::OnRep_SeaMineTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeaMine.OnRep_SeaMineTarget");

	APrimalStructureSeaMine_OnRep_SeaMineTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeaMine.OnHit
// ()
// Parameters:
// class AActor*                  SelfActor                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalStructureSeaMine::OnHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeaMine.OnHit");

	APrimalStructureSeaMine_OnHit_Params params;
	params.SelfActor = SelfActor;
	params.OtherActor = OtherActor;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeaMine.OnExplodingTriggerBeginOverlap
// ()
// Parameters:
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SweepResult                    (ConstParm, Parm, OutParm, ReferenceParm)

void APrimalStructureSeaMine::OnExplodingTriggerBeginOverlap(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeaMine.OnExplodingTriggerBeginOverlap");

	APrimalStructureSeaMine_OnExplodingTriggerBeginOverlap_Params params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.SweepResult = SweepResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSeaMine.Explode
// ()

void APrimalStructureSeaMine::Explode()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSeaMine.Explode");

	APrimalStructureSeaMine_Explode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureSign.OnRep_SignText
// ()
// Parameters:
// class FString                  PreviousSignText               (Parm, ZeroConstructor)

void APrimalStructureSign::OnRep_SignText(const class FString& PreviousSignText)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureSign.OnRep_SignText");

	APrimalStructureSign_OnRep_SignText_Params params;
	params.PreviousSignText = PreviousSignText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureWaterPipe.SetHasWater
// ()
// Parameters:
// bool                           bNewHasWater                   (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureWaterPipe::SetHasWater(bool bNewHasWater)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureWaterPipe.SetHasWater");

	APrimalStructureWaterPipe_SetHasWater_Params params;
	params.bNewHasWater = bNewHasWater;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureWaterPipe.RefreshWaterState
// ()

void APrimalStructureWaterPipe::RefreshWaterState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureWaterPipe.RefreshWaterState");

	APrimalStructureWaterPipe_RefreshWaterState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureWaterPipe.RefreshHasSourceMaterials
// ()

void APrimalStructureWaterPipe::RefreshHasSourceMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureWaterPipe.RefreshHasSourceMaterials");

	APrimalStructureWaterPipe_RefreshHasSourceMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureWaterPipe.OnRep_HasWater
// ()
// Parameters:
// bool                           bPreviousHasWater              (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureWaterPipe::OnRep_HasWater(bool bPreviousHasWater)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureWaterPipe.OnRep_HasWater");

	APrimalStructureWaterPipe_OnRep_HasWater_Params params;
	params.bPreviousHasWater = bPreviousHasWater;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureWaterPipe.BPOnWaterStateChange
// ()
// Parameters:
// bool                           bPipeHasWaterOrPower           (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureWaterPipe::BPOnWaterStateChange(bool bPipeHasWaterOrPower)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureWaterPipe.BPOnWaterStateChange");

	APrimalStructureWaterPipe_BPOnWaterStateChange_Params params;
	params.bPipeHasWaterOrPower = bPipeHasWaterOrPower;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalStructureWaterPipe.BPOnRefreshPipeMaterials
// ()
// Parameters:
// bool                           bPipeHasWaterOrPower           (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      NewMaterial                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalStructureWaterPipe::BPOnRefreshPipeMaterials(bool bPipeHasWaterOrPower, class UMaterialInterface* NewMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalStructureWaterPipe.BPOnRefreshPipeMaterials");

	APrimalStructureWaterPipe_BPOnRefreshPipeMaterials_Params params;
	params.bPipeHasWaterOrPower = bPipeHasWaterOrPower;
	params.NewMaterial = NewMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.DinoListButtonWidget.OnGetContextMenuContent
// ()
// Parameters:
// class UWidget*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWidget* UDinoListButtonWidget::OnGetContextMenuContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.DinoListButtonWidget.OnGetContextMenuContent");

	UDinoListButtonWidget_OnGetContextMenuContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementVisibility
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// bool                           bIsVisible                     (Parm, ZeroConstructor, IsPlainOldData)

void UHUDCustomStatusWidget::SetHUDElementVisibility(bool bIsVisible, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementVisibility");

	UHUDCustomStatusWidget_SetHUDElementVisibility_Params params;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementTitle
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// class FString                  NewTitle                       (Parm, ZeroConstructor)

void UHUDCustomStatusWidget::SetHUDElementTitle(const class FString& NewTitle, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementTitle");

	UHUDCustomStatusWidget_SetHUDElementTitle_Params params;
	params.NewTitle = NewTitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementTextColor
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// struct FLinearColor            NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UHUDCustomStatusWidget::SetHUDElementTextColor(const struct FLinearColor& NewColor, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementTextColor");

	UHUDCustomStatusWidget_SetHUDElementTextColor_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementProgressColor
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// struct FLinearColor            NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UHUDCustomStatusWidget::SetHUDElementProgressColor(const struct FLinearColor& NewColor, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementProgressColor");

	UHUDCustomStatusWidget_SetHUDElementProgressColor_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementProgress
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// float                          NewProgress                    (Parm, ZeroConstructor, IsPlainOldData)

void UHUDCustomStatusWidget::SetHUDElementProgress(float NewProgress, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementProgress");

	UHUDCustomStatusWidget_SetHUDElementProgress_Params params;
	params.NewProgress = NewProgress;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementLocation
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// struct FVector2D               NewLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UHUDCustomStatusWidget::SetHUDElementLocation(const struct FVector2D& NewLocation, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementLocation");

	UHUDCustomStatusWidget_SetHUDElementLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementLabelNumeric
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// float                          LabelValue                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ERoundingMode>     RoundingMode                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseGrouping                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinIntDigits                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxIntDigits                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            MinFractionalDigits            (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxFractionalDigits            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddPercentSymbol              (Parm, ZeroConstructor, IsPlainOldData)

void UHUDCustomStatusWidget::SetHUDElementLabelNumeric(float LabelValue, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinIntDigits, int MaxIntDigits, int MinFractionalDigits, int MaxFractionalDigits, bool bAddPercentSymbol, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementLabelNumeric");

	UHUDCustomStatusWidget_SetHUDElementLabelNumeric_Params params;
	params.LabelValue = LabelValue;
	params.RoundingMode = RoundingMode;
	params.bUseGrouping = bUseGrouping;
	params.MinIntDigits = MinIntDigits;
	params.MaxIntDigits = MaxIntDigits;
	params.MinFractionalDigits = MinFractionalDigits;
	params.MaxFractionalDigits = MaxFractionalDigits;
	params.bAddPercentSymbol = bAddPercentSymbol;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementLabel
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// class FString                  NewLabel                       (Parm, ZeroConstructor)

void UHUDCustomStatusWidget::SetHUDElementLabel(const class FString& NewLabel, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementLabel");

	UHUDCustomStatusWidget_SetHUDElementLabel_Params params;
	params.NewLabel = NewLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.SetHUDElementIconColor
// ()
// Parameters:
// struct FHUDElement             ElementInfo                    (Parm, OutParm, ReferenceParm)
// struct FLinearColor            NewColor                       (Parm, ZeroConstructor, IsPlainOldData)

void UHUDCustomStatusWidget::SetHUDElementIconColor(const struct FLinearColor& NewColor, struct FHUDElement* ElementInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.SetHUDElementIconColor");

	UHUDCustomStatusWidget_SetHUDElementIconColor_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ElementInfo != nullptr)
		*ElementInfo = params.ElementInfo;
}


// Function ShooterGame.HUDCustomStatusWidget.IsHUDElementVisible
// ()
// Parameters:
// class AActor*                  WidgetOwner                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FHUDElement             WidgetInfo                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UHUDCustomStatusWidget::IsHUDElementVisible(class AActor* WidgetOwner, const struct FHUDElement& WidgetInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.IsHUDElementVisible");

	UHUDCustomStatusWidget_IsHUDElementVisible_Params params;
	params.WidgetOwner = WidgetOwner;
	params.WidgetInfo = WidgetInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.HUDCustomStatusWidget.GetHUDElementRootWidget
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)
// class UHUDCustomStatusWidget*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UHUDCustomStatusWidget* UHUDCustomStatusWidget::GetHUDElementRootWidget(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.HUDCustomStatusWidget.GetHUDElementRootWidget");

	UHUDCustomStatusWidget_GetHUDElementRootWidget_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.InventoryArkCreaturesPanel.UploadedDinoSlotButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UInventoryArkCreaturesPanel::UploadedDinoSlotButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.InventoryArkCreaturesPanel.UploadedDinoSlotButtonSelected");

	UInventoryArkCreaturesPanel_UploadedDinoSlotButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.InventoryArkCreaturesPanel.LocalDinoSlotButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UInventoryArkCreaturesPanel::LocalDinoSlotButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.InventoryArkCreaturesPanel.LocalDinoSlotButtonSelected");

	UInventoryArkCreaturesPanel_LocalDinoSlotButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Inventory.SetInventoryVisibility
// ()
// Parameters:
// bool                           bVisible                       (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Inventory::SetInventoryVisibility(bool bVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Inventory.SetInventoryVisibility");

	UUI_Inventory_SetInventoryVisibility_Params params;
	params.bVisible = bVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.InventoryPanelWidget.SearchTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UInventoryPanelWidget::SearchTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.InventoryPanelWidget.SearchTextChanged");

	UInventoryPanelWidget_SearchTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.InventoryPanelWidget.OnGetSortContextMenuContent
// ()
// Parameters:
// class UWidget*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWidget* UInventoryPanelWidget::OnGetSortContextMenuContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.InventoryPanelWidget.OnGetSortContextMenuContent");

	UInventoryPanelWidget_OnGetSortContextMenuContent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.InventoryPanelWidget.OnGamepadPressSortIcon
// ()

void UInventoryPanelWidget::OnGamepadPressSortIcon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.InventoryPanelWidget.OnGamepadPressSortIcon");

	UInventoryPanelWidget_OnGamepadPressSortIcon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_DinoOrderGroups.DinoOrderGroupSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_DinoOrderGroups::DinoOrderGroupSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_DinoOrderGroups.DinoOrderGroupSelected");

	UUI_DinoOrderGroups_DinoOrderGroupSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_DinoOrderGroups.DinoClassSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_DinoOrderGroups::DinoClassSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_DinoOrderGroups.DinoClassSelected");

	UUI_DinoOrderGroups_DinoClassSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_DinoOrderGroups.DinoCharSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_DinoOrderGroups::DinoCharSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_DinoOrderGroups.DinoCharSelected");

	UUI_DinoOrderGroups_DinoCharSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_EngramsMenu.OnEngramsFilterChanged
// ()
// Parameters:
// bool                           bIsChecked                     (Parm, ZeroConstructor, IsPlainOldData)

void UUI_EngramsMenu::OnEngramsFilterChanged(bool bIsChecked)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_EngramsMenu.OnEngramsFilterChanged");

	UUI_EngramsMenu_OnEngramsFilterChanged_Params params;
	params.bIsChecked = bIsChecked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_EngramsMenu.OnEngramFilterChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_EngramsMenu::OnEngramFilterChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_EngramsMenu.OnEngramFilterChanged");

	UUI_EngramsMenu_OnEngramFilterChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_EngramsMenu.EngramSelected
// ()
// Parameters:
// class UDataListEntryButton*    theButton                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_EngramsMenu::EngramSelected(class UDataListEntryButton* theButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_EngramsMenu.EngramSelected");

	UUI_EngramsMenu_EngramSelected_Params params;
	params.theButton = theButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_EngramsMenu.EngramDoubleClicked
// ()
// Parameters:
// class UDataListEntryButton*    theButton                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_EngramsMenu::EngramDoubleClicked(class UDataListEntryButton* theButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_EngramsMenu.EngramDoubleClicked");

	UUI_EngramsMenu_EngramDoubleClicked_Params params;
	params.theButton = theButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_OptionsMenu.OptionsGraphTick
// ()
// Parameters:
// struct FGeometry               MyGeometry                     (Parm, IsPlainOldData)
// float                          InDeltaTime                    (Parm, ZeroConstructor, IsPlainOldData)

void UUI_OptionsMenu::OptionsGraphTick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_OptionsMenu.OptionsGraphTick");

	UUI_OptionsMenu_OptionsGraphTick_Params params;
	params.MyGeometry = MyGeometry;
	params.InDeltaTime = InDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_OptionsMenu.OnWidthChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_OptionsMenu::OnWidthChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_OptionsMenu.OnWidthChanged");

	UUI_OptionsMenu_OnWidthChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_OptionsMenu.OnViewDistanceComboBoxSelectionChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_OptionsMenu::OnViewDistanceComboBoxSelectionChanged(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_OptionsMenu.OnViewDistanceComboBoxSelectionChanged");

	UUI_OptionsMenu_OnViewDistanceComboBoxSelectionChanged_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_OptionsMenu.OnResolutionsComboBoxSelectionChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_OptionsMenu::OnResolutionsComboBoxSelectionChanged(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_OptionsMenu.OnResolutionsComboBoxSelectionChanged");

	UUI_OptionsMenu_OnResolutionsComboBoxSelectionChanged_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_OptionsMenu.OnHeightChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_OptionsMenu::OnHeightChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_OptionsMenu.OnHeightChanged");

	UUI_OptionsMenu_OnHeightChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_OptionsMenu.OnGraphicsQualityComboBoxChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)

void UUI_OptionsMenu::OnGraphicsQualityComboBoxChanged(const class FString& SelectedItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_OptionsMenu.OnGraphicsQualityComboBoxChanged");

	UUI_OptionsMenu_OnGraphicsQualityComboBoxChanged_Params params;
	params.SelectedItem = SelectedItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_OptionsMenu.OnGraphicsPresetValueChanged
// ()

void UUI_OptionsMenu::OnGraphicsPresetValueChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_OptionsMenu.OnGraphicsPresetValueChanged");

	UUI_OptionsMenu_OnGraphicsPresetValueChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_SurvivorProfile.OnSubtitlesCheckboxChanged
// ()
// Parameters:
// bool                           InNewState                     (Parm, ZeroConstructor, IsPlainOldData)

void UUI_SurvivorProfile::OnSubtitlesCheckboxChanged(bool InNewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_SurvivorProfile.OnSubtitlesCheckboxChanged");

	UUI_SurvivorProfile_OnSubtitlesCheckboxChanged_Params params;
	params.InNewState = InNewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_SurvivorProfile.OnNoteNameFilterChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_SurvivorProfile::OnNoteNameFilterChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_SurvivorProfile.OnNoteNameFilterChanged");

	UUI_SurvivorProfile_OnNoteNameFilterChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_SurvivorProfile.HideDossier
// ()

void UUI_SurvivorProfile::HideDossier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_SurvivorProfile.HideDossier");

	UUI_SurvivorProfile_HideDossier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeManager.TribeWarEntryButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TribeManager::TribeWarEntryButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeManager.TribeWarEntryButtonSelected");

	UUI_TribeManager_TribeWarEntryButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeManager.TribeAllianceMemberButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TribeManager::TribeAllianceMemberButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeManager.TribeAllianceMemberButtonSelected");

	UUI_TribeManager_TribeAllianceMemberButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeManager.TribeAllianceEntryButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TribeManager::TribeAllianceEntryButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeManager.TribeAllianceEntryButtonSelected");

	UUI_TribeManager_TribeAllianceEntryButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeManager.RankGroupButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TribeManager::RankGroupButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeManager.RankGroupButtonSelected");

	UUI_TribeManager_RankGroupButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeManager.PlayerEntryButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TribeManager::PlayerEntryButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeManager.PlayerEntryButtonSelected");

	UUI_TribeManager_PlayerEntryButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeManager.OnGroupRankSelected
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TribeManager::OnGroupRankSelected(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeManager.OnGroupRankSelected");

	UUI_TribeManager_OnGroupRankSelected_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextCommittedWhiteListed
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_AdminMangment::OnTextCommittedWhiteListed(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextCommittedWhiteListed");

	UUI_AdminMangment_OnTextCommittedWhiteListed_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextCommittedMessageOfTheDay
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_AdminMangment::OnTextCommittedMessageOfTheDay(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextCommittedMessageOfTheDay");

	UUI_AdminMangment_OnTextCommittedMessageOfTheDay_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextCommittedManualBan
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_AdminMangment::OnTextCommittedManualBan(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextCommittedManualBan");

	UUI_AdminMangment_OnTextCommittedManualBan_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_AdminMangment::OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextCommitted");

	UUI_AdminMangment_OnTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextChangedMessageOfTheDay
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_AdminMangment::OnTextChangedMessageOfTheDay(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextChangedMessageOfTheDay");

	UUI_AdminMangment_OnTextChangedMessageOfTheDay_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextChangedManulaBan
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_AdminMangment::OnTextChangedManulaBan(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextChangedManulaBan");

	UUI_AdminMangment_OnTextChangedManulaBan_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextChangedManualWhiteLised
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_AdminMangment::OnTextChangedManualWhiteLised(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextChangedManualWhiteLised");

	UUI_AdminMangment_OnTextChangedManualWhiteLised_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AdminMangment.OnTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_AdminMangment::OnTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AdminMangment.OnTextChanged");

	UUI_AdminMangment_OnTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AllPlayersList.OnTribeNameFilterChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_AllPlayersList::OnTribeNameFilterChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AllPlayersList.OnTribeNameFilterChanged");

	UUI_AllPlayersList_OnTribeNameFilterChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_AllPlayersList.OnPlayerNameFilterChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_AllPlayersList::OnPlayerNameFilterChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_AllPlayersList.OnPlayerNameFilterChanged");

	UUI_AllPlayersList_OnPlayerNameFilterChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ChangeTransponderFreqencyEntry.HandleFilterStringTextChanged
// ()
// Parameters:
// struct FText                   NewText                        (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_ChangeTransponderFreqencyEntry::HandleFilterStringTextChanged(const struct FText& NewText)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ChangeTransponderFreqencyEntry.HandleFilterStringTextChanged");

	UUI_ChangeTransponderFreqencyEntry_HandleFilterStringTextChanged_Params params;
	params.NewText = NewText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ChatBox.HandleChatTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ChatBox::HandleChatTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ChatBox.HandleChatTextCommitted");

	UUI_ChatBox_HandleChatTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ChatBox.HandleChatTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_ChatBox::HandleChatTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ChatBox.HandleChatTextChanged");

	UUI_ChatBox_HandleChatTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Cooking.RefreshItemLists
// ()

void UUI_Cooking::RefreshItemLists()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Cooking.RefreshItemLists");

	UUI_Cooking_RefreshItemLists_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Cooking.OnRedSliderValueChanged
// ()
// Parameters:
// float                          SliderValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Cooking::OnRedSliderValueChanged(float SliderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Cooking.OnRedSliderValueChanged");

	UUI_Cooking_OnRedSliderValueChanged_Params params;
	params.SliderValue = SliderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Cooking.OnItemNameChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_Cooking::OnItemNameChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Cooking.OnItemNameChanged");

	UUI_Cooking_OnItemNameChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Cooking.OnItemDescriptionChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_Cooking::OnItemDescriptionChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Cooking.OnItemDescriptionChanged");

	UUI_Cooking_OnItemDescriptionChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Cooking.OnGreenSliderValueChanged
// ()
// Parameters:
// float                          SliderValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Cooking::OnGreenSliderValueChanged(float SliderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Cooking.OnGreenSliderValueChanged");

	UUI_Cooking_OnGreenSliderValueChanged_Params params;
	params.SliderValue = SliderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Cooking.OnBlueSliderValueChanged
// ()
// Parameters:
// float                          SliderValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Cooking::OnBlueSliderValueChanged(float SliderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Cooking.OnBlueSliderValueChanged");

	UUI_Cooking_OnBlueSliderValueChanged_Params params;
	params.SliderValue = SliderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Cooking.MyInventoryItemDoubleClicked
// ()
// Parameters:
// class UDataListEntryButton*    theButton                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Cooking::MyInventoryItemDoubleClicked(class UDataListEntryButton* theButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Cooking.MyInventoryItemDoubleClicked");

	UUI_Cooking_MyInventoryItemDoubleClicked_Params params;
	params.theButton = theButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_DepthOfFieldMenu.OnSliderValueChanged
// ()
// Parameters:
// float                          SliderValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UUI_DepthOfFieldMenu::OnSliderValueChanged(float SliderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_DepthOfFieldMenu.OnSliderValueChanged");

	UUI_DepthOfFieldMenu_OnSliderValueChanged_Params params;
	params.SliderValue = SliderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_DepthOfFieldMenu.OnNumericValueCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_DepthOfFieldMenu::OnNumericValueCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_DepthOfFieldMenu.OnNumericValueCommitted");

	UUI_DepthOfFieldMenu_OnNumericValueCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_DepthOfFieldMenu.OnCheckBoxChanged
// ()
// Parameters:
// bool                           IsChecked                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_DepthOfFieldMenu::OnCheckBoxChanged(bool IsChecked)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_DepthOfFieldMenu.OnCheckBoxChanged");

	UUI_DepthOfFieldMenu_OnCheckBoxChanged_Params params;
	params.IsChecked = IsChecked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_DyeItem.DyeItemDoubleClicked
// ()
// Parameters:
// class UDataListEntryButton*    theButton                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_DyeItem::DyeItemDoubleClicked(class UDataListEntryButton* theButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_DyeItem.DyeItemDoubleClicked");

	UUI_DyeItem_DyeItemDoubleClicked_Params params;
	params.theButton = theButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_GenericConfirmationDialog.OnConfirmationDialogClosedEvent__DelegateSignature
// ()
// Parameters:
// bool                           bAccept                        (Parm, ZeroConstructor, IsPlainOldData)

void UUI_GenericConfirmationDialog::OnConfirmationDialogClosedEvent__DelegateSignature(bool bAccept)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_GenericConfirmationDialog.OnConfirmationDialogClosedEvent__DelegateSignature");

	UUI_GenericConfirmationDialog_OnConfirmationDialogClosedEvent__DelegateSignature_Params params;
	params.bAccept = bAccept;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Hairstyle.OnHeadHairStyleButtonClicked
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Hairstyle::OnHeadHairStyleButtonClicked(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Hairstyle.OnHeadHairStyleButtonClicked");

	UUI_Hairstyle_OnHeadHairStyleButtonClicked_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Hairstyle.OnHairStyleAccepted__DelegateSignature
// ()
// Parameters:
// int                            newHeadHairIndex               (Parm, ZeroConstructor, IsPlainOldData)
// int                            newFacialHairIndex             (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewHeadHairPercent             (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewFacialHairPercent           (Parm, ZeroConstructor, IsPlainOldData)
// int                            HeadHairDyeID1                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            HeadHairDyeID2                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            FacialHairDyeID1               (Parm, ZeroConstructor, IsPlainOldData)
// int                            FacialHairDyeID2               (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Hairstyle::OnHairStyleAccepted__DelegateSignature(int newHeadHairIndex, int newFacialHairIndex, float NewHeadHairPercent, float NewFacialHairPercent, int HeadHairDyeID1, int HeadHairDyeID2, int FacialHairDyeID1, int FacialHairDyeID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Hairstyle.OnHairStyleAccepted__DelegateSignature");

	UUI_Hairstyle_OnHairStyleAccepted__DelegateSignature_Params params;
	params.newHeadHairIndex = newHeadHairIndex;
	params.newFacialHairIndex = newFacialHairIndex;
	params.NewHeadHairPercent = NewHeadHairPercent;
	params.NewFacialHairPercent = NewFacialHairPercent;
	params.HeadHairDyeID1 = HeadHairDyeID1;
	params.HeadHairDyeID2 = HeadHairDyeID2;
	params.FacialHairDyeID1 = FacialHairDyeID1;
	params.FacialHairDyeID2 = FacialHairDyeID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Hairstyle.OnFacialHairStyleButtonClicked
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Hairstyle::OnFacialHairStyleButtonClicked(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Hairstyle.OnFacialHairStyleButtonClicked");

	UUI_Hairstyle_OnFacialHairStyleButtonClicked_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Hairstyle.ClearHairButtonClicked__DelegateSignature
// ()

void UUI_Hairstyle::ClearHairButtonClicked__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Hairstyle.ClearHairButtonClicked__DelegateSignature");

	UUI_Hairstyle_ClearHairButtonClicked__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.SlotButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::SlotButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.SlotButtonSelected");

	UUI_HostSession_SlotButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnSliderValueChanged
// ()
// Parameters:
// float                          SliderValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::OnSliderValueChanged(float SliderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnSliderValueChanged");

	UUI_HostSession_OnSliderValueChanged_Params params;
	params.SliderValue = SliderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnSessionPasswordTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::OnSessionPasswordTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnSessionPasswordTextCommitted");

	UUI_HostSession_OnSessionPasswordTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnSessionPasswordTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_HostSession::OnSessionPasswordTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnSessionPasswordTextChanged");

	UUI_HostSession_OnSessionPasswordTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnSessionNameTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::OnSessionNameTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnSessionNameTextCommitted");

	UUI_HostSession_OnSessionNameTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnSessionNameTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_HostSession::OnSessionNameTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnSessionNameTextChanged");

	UUI_HostSession_OnSessionNameTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnNumericValueCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::OnNumericValueCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnNumericValueCommitted");

	UUI_HostSession_OnNumericValueCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnDeleteMapServerDataButtonClicked
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::OnDeleteMapServerDataButtonClicked(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnDeleteMapServerDataButtonClicked");

	UUI_HostSession_OnDeleteMapServerDataButtonClicked_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnDeleteMapSaveDataButtonClicked
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::OnDeleteMapSaveDataButtonClicked(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnDeleteMapSaveDataButtonClicked");

	UUI_HostSession_OnDeleteMapSaveDataButtonClicked_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnAdminPasswordTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::OnAdminPasswordTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnAdminPasswordTextCommitted");

	UUI_HostSession_OnAdminPasswordTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.OnAdminPasswordTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_HostSession::OnAdminPasswordTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.OnAdminPasswordTextChanged");

	UUI_HostSession_OnAdminPasswordTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.ModSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::ModSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.ModSelected");

	UUI_HostSession_ModSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.EngramDoubleClicked
// ()
// Parameters:
// class UDataListEntryButton*    theButton                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::EngramDoubleClicked(class UDataListEntryButton* theButton)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.EngramDoubleClicked");

	UUI_HostSession_EngramDoubleClicked_Params params;
	params.theButton = theButton;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_HostSession.ActiveModSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_HostSession::ActiveModSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_HostSession.ActiveModSelected");

	UUI_HostSession_ActiveModSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Hub.RecenterHub
// ()

void UUI_Hub::RecenterHub()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Hub.RecenterHub");

	UUI_Hub_RecenterHub_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListCharacterData.OnArkCharacterPlayerDataChosen__DelegateSignature
// ()
// Parameters:
// TArray<unsigned char>          ChoosenPlayerDataBytes         (Parm, ZeroConstructor)

void UUI_ListCharacterData::OnArkCharacterPlayerDataChosen__DelegateSignature(TArray<unsigned char> ChoosenPlayerDataBytes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListCharacterData.OnArkCharacterPlayerDataChosen__DelegateSignature");

	UUI_ListCharacterData_OnArkCharacterPlayerDataChosen__DelegateSignature_Params params;
	params.ChoosenPlayerDataBytes = ChoosenPlayerDataBytes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListCharacterData.CharacterSlotButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListCharacterData::CharacterSlotButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListCharacterData.CharacterSlotButtonSelected");

	UUI_ListCharacterData_CharacterSlotButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.SlotButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::SlotButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.SlotButtonSelected");

	UUI_ListSessions_SlotButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.RefreshSlotButtons
// ()

void UUI_ListSessions::RefreshSlotButtons()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.RefreshSlotButtons");

	UUI_ListSessions_RefreshSlotButtons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnTextCommitted");

	UUI_ListSessions_OnTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_ListSessions::OnTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnTextChanged");

	UUI_ListSessions_OnTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnSortComboBoxSelectionChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::OnSortComboBoxSelectionChanged(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnSortComboBoxSelectionChanged");

	UUI_ListSessions_OnSortComboBoxSelectionChanged_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnServersFilterComboBoxSelectionChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::OnServersFilterComboBoxSelectionChanged(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnServersFilterComboBoxSelectionChanged");

	UUI_ListSessions_OnServersFilterComboBoxSelectionChanged_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnMapComboBoxSelectionChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::OnMapComboBoxSelectionChanged(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnMapComboBoxSelectionChanged");

	UUI_ListSessions_OnMapComboBoxSelectionChanged_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnGameModeComboBoxSelectionChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::OnGameModeComboBoxSelectionChanged(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnGameModeComboBoxSelectionChanged");

	UUI_ListSessions_OnGameModeComboBoxSelectionChanged_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnCheckBoxChecked
// ()
// Parameters:
// bool                           InNewState                     (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::OnCheckBoxChecked(bool InNewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnCheckBoxChecked");

	UUI_ListSessions_OnCheckBoxChecked_Params params;
	params.InNewState = InNewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ListSessions.OnAutoFavoriteChecked
// ()
// Parameters:
// bool                           InNewState                     (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ListSessions::OnAutoFavoriteChecked(bool InNewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ListSessions.OnAutoFavoriteChecked");

	UUI_ListSessions_OnAutoFavoriteChecked_Params params;
	params.InNewState = InNewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_MainMenu.TotalConversionSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_MainMenu::TotalConversionSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_MainMenu.TotalConversionSelected");

	UUI_MainMenu_TotalConversionSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_MapMarkersEntry.OnTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_MapMarkersEntry::OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_MapMarkersEntry.OnTextCommitted");

	UUI_MapMarkersEntry_OnTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_MapMarkersEntry.OnTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_MapMarkersEntry::OnTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_MapMarkersEntry.OnTextChanged");

	UUI_MapMarkersEntry_OnTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_MapMarkersEntry.OnColorSliderValueChanged
// ()
// Parameters:
// float                          SliderValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UUI_MapMarkersEntry::OnColorSliderValueChanged(float SliderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_MapMarkersEntry.OnColorSliderValueChanged");

	UUI_MapMarkersEntry_OnColorSliderValueChanged_Params params;
	params.SliderValue = SliderValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_MapMarkersEntry.MarkerButtonSelected
// ()
// Parameters:
// class UWidget*                 theWidget                      (Parm, ZeroConstructor, IsPlainOldData)

void UUI_MapMarkersEntry::MarkerButtonSelected(class UWidget* theWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_MapMarkersEntry.MarkerButtonSelected");

	UUI_MapMarkersEntry_MarkerButtonSelected_Params params;
	params.theWidget = theWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_MultiUse.ClickedEntry
// ()
// Parameters:
// class UWidget*                 clickedWidget                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_MultiUse::ClickedEntry(class UWidget* clickedWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_MultiUse.ClickedEntry");

	UUI_MultiUse_ClickedEntry_Params params;
	params.clickedWidget = clickedWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ProceduralSettings.OnTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ProceduralSettings::OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ProceduralSettings.OnTextCommitted");

	UUI_ProceduralSettings_OnTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_ProceduralSettings.OnPresetSelectionChanged
// ()
// Parameters:
// class FString                  SelectedItem                   (Parm, ZeroConstructor)
// TEnumAsByte<ESelectInfo>       SelectionType                  (Parm, ZeroConstructor, IsPlainOldData)

void UUI_ProceduralSettings::OnPresetSelectionChanged(const class FString& SelectedItem, TEnumAsByte<ESelectInfo> SelectionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_ProceduralSettings.OnPresetSelectionChanged");

	UUI_ProceduralSettings_OnPresetSelectionChanged_Params params;
	params.SelectedItem = SelectedItem;
	params.SelectionType = SelectionType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_SavePainting.HandleFilterStringTextCommitted
// ()
// Parameters:
// struct FText                   NewText                        (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_SavePainting::HandleFilterStringTextCommitted(const struct FText& NewText, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_SavePainting.HandleFilterStringTextCommitted");

	UUI_SavePainting_HandleFilterStringTextCommitted_Params params;
	params.NewText = NewText;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_SavePainting.HandleFilterStringTextChanged
// ()
// Parameters:
// struct FText                   NewText                        (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_SavePainting::HandleFilterStringTextChanged(const struct FText& NewText)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_SavePainting.HandleFilterStringTextChanged");

	UUI_SavePainting_HandleFilterStringTextChanged_Params params;
	params.NewText = NewText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Subtitles.SetSubtitleFromText
// ()
// Parameters:
// struct FText                   SubtitleTextLine               (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_Subtitles::SetSubtitleFromText(const struct FText& SubtitleTextLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Subtitles.SetSubtitleFromText");

	UUI_Subtitles_SetSubtitleFromText_Params params;
	params.SubtitleTextLine = SubtitleTextLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Subtitles.SetSubtitleFromString
// ()
// Parameters:
// class FString                  SubtitleTextLine               (Parm, ZeroConstructor)

void UUI_Subtitles::SetSubtitleFromString(const class FString& SubtitleTextLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Subtitles.SetSubtitleFromString");

	UUI_Subtitles_SetSubtitleFromString_Params params;
	params.SubtitleTextLine = SubtitleTextLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Subtitles.SetSubtitleFromSoundCue
// ()
// Parameters:
// class USoundCue*               SoundCueWithSubtitles          (Parm, ZeroConstructor, IsPlainOldData)
// float                          AutoHideAfterSeconds           (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInterface*      DialogueIcon                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Subtitles::SetSubtitleFromSoundCue(class USoundCue* SoundCueWithSubtitles, float AutoHideAfterSeconds, class UMaterialInterface* DialogueIcon)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Subtitles.SetSubtitleFromSoundCue");

	UUI_Subtitles_SetSubtitleFromSoundCue_Params params;
	params.SoundCueWithSubtitles = SoundCueWithSubtitles;
	params.AutoHideAfterSeconds = AutoHideAfterSeconds;
	params.DialogueIcon = DialogueIcon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Subtitles.ProcessDynamicMaterialForDialogueIconDelegate__DelegateSignature
// ()
// Parameters:
// struct FName                   MaterialFName                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* LoadedMaterial                 (Parm, ZeroConstructor, IsPlainOldData)

void UUI_Subtitles::ProcessDynamicMaterialForDialogueIconDelegate__DelegateSignature(const struct FName& MaterialFName, class UMaterialInstanceDynamic* LoadedMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Subtitles.ProcessDynamicMaterialForDialogueIconDelegate__DelegateSignature");

	UUI_Subtitles_ProcessDynamicMaterialForDialogueIconDelegate__DelegateSignature_Params params;
	params.MaterialFName = MaterialFName;
	params.LoadedMaterial = LoadedMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Subtitles.OnShowSubtitles
// ()

void UUI_Subtitles::OnShowSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Subtitles.OnShowSubtitles");

	UUI_Subtitles_OnShowSubtitles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Subtitles.OnHideSubtitles
// ()

void UUI_Subtitles::OnHideSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Subtitles.OnHideSubtitles");

	UUI_Subtitles_OnHideSubtitles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_Subtitles.HideSubtitles
// ()

void UUI_Subtitles::HideSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_Subtitles.HideSubtitles");

	UUI_Subtitles_HideSubtitles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TextEntry.OnTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TextEntry::OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TextEntry.OnTextCommitted");

	UUI_TextEntry_OnTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TextEntry.OnTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_TextEntry::OnTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TextEntry.OnTextChanged");

	UUI_TextEntry_OnTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeWarEntry.OnTextCommitted
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<ETextCommit>       CommitMethod                   (Parm, ZeroConstructor, IsPlainOldData)

void UUI_TribeWarEntry::OnTextCommitted(const struct FText& Text, TEnumAsByte<ETextCommit> CommitMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeWarEntry.OnTextCommitted");

	UUI_TribeWarEntry_OnTextCommitted_Params params;
	params.Text = Text;
	params.CommitMethod = CommitMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.UI_TribeWarEntry.OnTextChanged
// ()
// Parameters:
// struct FText                   Text                           (ConstParm, Parm, OutParm, ReferenceParm)

void UUI_TribeWarEntry::OnTextChanged(const struct FText& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.UI_TribeWarEntry.OnTextChanged");

	UUI_TribeWarEntry_OnTextChanged_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.TrySublevelSwaps
// ()

void APrimalWorldModifier::TrySublevelSwaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.TrySublevelSwaps");

	APrimalWorldModifier_TrySublevelSwaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.TryStaticMeshActorReskin
// ()
// Parameters:
// class AStaticMeshActor*        ForStaticMeshActor             (Parm, ZeroConstructor, IsPlainOldData)
// struct FSublevelOverrideGroup  CurrentSublevelOverrideGroup   (Parm, OutParm, ReferenceParm)

void APrimalWorldModifier::TryStaticMeshActorReskin(class AStaticMeshActor* ForStaticMeshActor, struct FSublevelOverrideGroup* CurrentSublevelOverrideGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.TryStaticMeshActorReskin");

	APrimalWorldModifier_TryStaticMeshActorReskin_Params params;
	params.ForStaticMeshActor = ForStaticMeshActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentSublevelOverrideGroup != nullptr)
		*CurrentSublevelOverrideGroup = params.CurrentSublevelOverrideGroup;
}


// Function ShooterGame.PrimalWorldModifier.TryFoliageReskin
// ()
// Parameters:
// class AInstancedFoliageActor*  ForFoliageActor                (Parm, ZeroConstructor, IsPlainOldData)

void APrimalWorldModifier::TryFoliageReskin(class AInstancedFoliageActor* ForFoliageActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.TryFoliageReskin");

	APrimalWorldModifier_TryFoliageReskin_Params params;
	params.ForFoliageActor = ForFoliageActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.RescanForMapStaticMeshes
// ()

void APrimalWorldModifier::RescanForMapStaticMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.RescanForMapStaticMeshes");

	APrimalWorldModifier_RescanForMapStaticMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.RescanForFoliage
// ()

void APrimalWorldModifier::RescanForFoliage()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.RescanForFoliage");

	APrimalWorldModifier_RescanForFoliage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.NotifyOnFoliageSkinned__DelegateSignature
// ()
// Parameters:
// class UHierarchicalInstancedStaticMeshComponent* FoliageInstance                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APrimalWorldModifier::NotifyOnFoliageSkinned__DelegateSignature(class UHierarchicalInstancedStaticMeshComponent* FoliageInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.NotifyOnFoliageSkinned__DelegateSignature");

	APrimalWorldModifier_NotifyOnFoliageSkinned__DelegateSignature_Params params;
	params.FoliageInstance = FoliageInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.IsAllowedOnCurrentMap
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalWorldModifier::IsAllowedOnCurrentMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.IsAllowedOnCurrentMap");

	APrimalWorldModifier_IsAllowedOnCurrentMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalWorldModifier.HasPriority
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalWorldModifier::HasPriority()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.HasPriority");

	APrimalWorldModifier_HasPriority_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalWorldModifier.GetCurrentSublevelOverrideGroup
// ()
// Parameters:
// struct FSublevelOverrideGroup  outSublevelOverrideGroup       (Parm, OutParm)

void APrimalWorldModifier::GetCurrentSublevelOverrideGroup(struct FSublevelOverrideGroup* outSublevelOverrideGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.GetCurrentSublevelOverrideGroup");

	APrimalWorldModifier_GetCurrentSublevelOverrideGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outSublevelOverrideGroup != nullptr)
		*outSublevelOverrideGroup = params.outSublevelOverrideGroup;
}


// Function ShooterGame.PrimalWorldModifier.DoRescanForSublevelLoaded
// ()

void APrimalWorldModifier::DoRescanForSublevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.DoRescanForSublevelLoaded");

	APrimalWorldModifier_DoRescanForSublevelLoaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.BPSkinFoliage
// ()
// Parameters:
// class UHierarchicalInstancedStaticMeshComponent* FoliageInstance                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APrimalWorldModifier::BPSkinFoliage(class UHierarchicalInstancedStaticMeshComponent* FoliageInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.BPSkinFoliage");

	APrimalWorldModifier_BPSkinFoliage_Params params;
	params.FoliageInstance = FoliageInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.BPPreFoliageScan
// ()

void APrimalWorldModifier::BPPreFoliageScan()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.BPPreFoliageScan");

	APrimalWorldModifier_BPPreFoliageScan_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.BPPostInitializationHasPriority
// ()

void APrimalWorldModifier::BPPostInitializationHasPriority()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.BPPostInitializationHasPriority");

	APrimalWorldModifier_BPPostInitializationHasPriority_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldModifier.BPPostFoliageScan
// ()

void APrimalWorldModifier::BPPostFoliageScan()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldModifier.BPPostFoliageScan");

	APrimalWorldModifier_BPPostFoliageScan_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWorldSettings.IsAllowedInLevelBounds
// ()
// Parameters:
// struct FVector                 AtLocat                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APrimalWorldSettings::IsAllowedInLevelBounds(const struct FVector& AtLocat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWorldSettings.IsAllowedInLevelBounds");

	APrimalWorldSettings_IsAllowedInLevelBounds_Params params;
	params.AtLocat = AtLocat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCharacterMovement.SetClimbingTarget
// ()
// Parameters:
// struct FVector                 TargetPosition                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                TargetRotation                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UShooterCharacterMovement::SetClimbingTarget(const struct FVector& TargetPosition, const struct FRotator& TargetRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacterMovement.SetClimbingTarget");

	UShooterCharacterMovement_SetClimbingTarget_Params params;
	params.TargetPosition = TargetPosition;
	params.TargetRotation = TargetRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCharacterMovement.IsWaterWalking
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UShooterCharacterMovement::IsWaterWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCharacterMovement.IsWaterWalking");

	UShooterCharacterMovement_IsWaterWalking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterCheatManager.WhatIsMyTarget
// ()

void UShooterCheatManager::WhatIsMyTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.WhatIsMyTarget");

	UShooterCheatManager_WhatIsMyTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.VisualizeWorldGeo
// ()

void UShooterCheatManager::VisualizeWorldGeo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.VisualizeWorldGeo");

	UShooterCheatManager_VisualizeWorldGeo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.VisualizeWorld
// ()

void UShooterCheatManager::VisualizeWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.VisualizeWorld");

	UShooterCheatManager_VisualizeWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.VisualizeClass
// ()
// Parameters:
// class FString                  ClassIn                        (Parm, ZeroConstructor)
// int                            MaxTotal                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::VisualizeClass(const class FString& ClassIn, int MaxTotal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.VisualizeClass");

	UShooterCheatManager_VisualizeClass_Params params;
	params.ClassIn = ClassIn;
	params.MaxTotal = MaxTotal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.VerifyTransferInventory
// ()

void UShooterCheatManager::VerifyTransferInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.VerifyTransferInventory");

	UShooterCheatManager_VerifyTransferInventory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.UnlockEngram
// ()
// Parameters:
// class FString                  ItemClassName                  (Parm, ZeroConstructor)

void UShooterCheatManager::UnlockEngram(const class FString& ItemClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.UnlockEngram");

	UShooterCheatManager_UnlockEngram_Params params;
	params.ItemClassName = ItemClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.UnlockAchievement
// ()
// Parameters:
// class FString                  AchievementID                  (Parm, ZeroConstructor)

void UShooterCheatManager::UnlockAchievement(const class FString& AchievementID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.UnlockAchievement");

	UShooterCheatManager_UnlockAchievement_Params params;
	params.AchievementID = AchievementID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.UnbanPlayer
// ()
// Parameters:
// class FString                  PlayerSteamName                (Parm, ZeroConstructor)

void UShooterCheatManager::UnbanPlayer(const class FString& PlayerSteamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.UnbanPlayer");

	UShooterCheatManager_UnbanPlayer_Params params;
	params.PlayerSteamName = PlayerSteamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TribeStructureAudit
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::TribeStructureAudit(int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TribeStructureAudit");

	UShooterCheatManager_TribeStructureAudit_Params params;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TribeMessage
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)

void UShooterCheatManager::TribeMessage(int TribeTeamID, const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TribeMessage");

	UShooterCheatManager_TribeMessage_Params params;
	params.TribeTeamID = TribeTeamID;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TribeDinoAudit
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::TribeDinoAudit(int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TribeDinoAudit");

	UShooterCheatManager_TribeDinoAudit_Params params;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TransferImprints
// ()
// Parameters:
// int                            oldPlayerId                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            newPlayerId                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewImprinterName               (Parm, ZeroConstructor)

void UShooterCheatManager::TransferImprints(int oldPlayerId, int newPlayerId, const class FString& NewImprinterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TransferImprints");

	UShooterCheatManager_TransferImprints_Params params;
	params.oldPlayerId = oldPlayerId;
	params.newPlayerId = newPlayerId;
	params.NewImprinterName = NewImprinterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TPName
// ()
// Parameters:
// class FString                  PlayerName                     (Parm, ZeroConstructor)

void UShooterCheatManager::TPName(const class FString& PlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TPName");

	UShooterCheatManager_TPName_Params params;
	params.PlayerName = PlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TPCoords
// ()
// Parameters:
// float                          lat                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          lon                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::TPCoords(float lat, float lon, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TPCoords");

	UShooterCheatManager_TPCoords_Params params;
	params.lat = lat;
	params.lon = lon;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TP
// ()
// Parameters:
// class FString                  LocationName                   (Parm, ZeroConstructor)

void UShooterCheatManager::TP(const class FString& LocationName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TP");

	UShooterCheatManager_TP_Params params;
	params.LocationName = LocationName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ToggleLocation
// ()

void UShooterCheatManager::ToggleLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ToggleLocation");

	UShooterCheatManager_ToggleLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ToggleHud
// ()

void UShooterCheatManager::ToggleHud()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ToggleHud");

	UShooterCheatManager_ToggleHud_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ToggleGun
// ()

void UShooterCheatManager::ToggleGun()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ToggleGun");

	UShooterCheatManager_ToggleGun_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ToggleDamageNumbers
// ()

void UShooterCheatManager::ToggleDamageNumbers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ToggleDamageNumbers");

	UShooterCheatManager_ToggleDamageNumbers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ToggleDamageLogging
// ()

void UShooterCheatManager::ToggleDamageLogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ToggleDamageLogging");

	UShooterCheatManager_ToggleDamageLogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TestSteamRefreshItems
// ()

void UShooterCheatManager::TestSteamRefreshItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TestSteamRefreshItems");

	UShooterCheatManager_TestSteamRefreshItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TeleportToTimedEventActor
// ()

void UShooterCheatManager::TeleportToTimedEventActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TeleportToTimedEventActor");

	UShooterCheatManager_TeleportToTimedEventActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TeleportToPlayerName
// ()
// Parameters:
// class FString                  PlayerName                     (Parm, ZeroConstructor)

void UShooterCheatManager::TeleportToPlayerName(const class FString& PlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TeleportToPlayerName");

	UShooterCheatManager_TeleportToPlayerName_Params params;
	params.PlayerName = PlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TeleportToPlayer
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::TeleportToPlayer(int64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TeleportToPlayer");

	UShooterCheatManager_TeleportToPlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TeleportToActorLocation
// ()
// Parameters:
// class FString                  ActorName                      (Parm, ZeroConstructor)

void UShooterCheatManager::TeleportToActorLocation(const class FString& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TeleportToActorLocation");

	UShooterCheatManager_TeleportToActorLocation_Params params;
	params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TeleportToActiveHorde
// ()
// Parameters:
// int                            EventIndex                     (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::TeleportToActiveHorde(int EventIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TeleportToActiveHorde");

	UShooterCheatManager_TeleportToActiveHorde_Params params;
	params.EventIndex = EventIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TeleportPlayerNameToMe
// ()
// Parameters:
// class FString                  PlayerName                     (Parm, ZeroConstructor)

void UShooterCheatManager::TeleportPlayerNameToMe(const class FString& PlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TeleportPlayerNameToMe");

	UShooterCheatManager_TeleportPlayerNameToMe_Params params;
	params.PlayerName = PlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TeleportPlayerIDToMe
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::TeleportPlayerIDToMe(int64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TeleportPlayerIDToMe");

	UShooterCheatManager_TeleportPlayerIDToMe_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TakeTribe
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::TakeTribe(int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TakeTribe");

	UShooterCheatManager_TakeTribe_Params params;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TakeAllStructure
// ()

void UShooterCheatManager::TakeAllStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TakeAllStructure");

	UShooterCheatManager_TakeAllStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.TakeAllDino
// ()

void UShooterCheatManager::TakeAllDino()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.TakeAllDino");

	UShooterCheatManager_TakeAllDino_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SummonTamed
// ()
// Parameters:
// class FString                  ClassName                      (Parm, ZeroConstructor)

void UShooterCheatManager::SummonTamed(const class FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SummonTamed");

	UShooterCheatManager_SummonTamed_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.Suicide
// ()

void UShooterCheatManager::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.Suicide");

	UShooterCheatManager_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.StartSaveBackup
// ()

void UShooterCheatManager::StartSaveBackup()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.StartSaveBackup");

	UShooterCheatManager_StartSaveBackup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.StartNearestHorde
// ()
// Parameters:
// struct FName                   HordeType                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            DifficultyLevel                (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::StartNearestHorde(const struct FName& HordeType, int DifficultyLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.StartNearestHorde");

	UShooterCheatManager_StartNearestHorde_Params params;
	params.HordeType = HordeType;
	params.DifficultyLevel = DifficultyLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SPI
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SPI(float X, float Y, float Z, float Yaw, float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SPI");

	UShooterCheatManager_SPI_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Yaw = Yaw;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SpawnSetupDino
// ()
// Parameters:
// class FString                  DinoBlueprintPath              (Parm, ZeroConstructor)
// class FString                  SaddleBlueprintPath            (Parm, ZeroConstructor)
// float                          SaddleQuality                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            DinoLevel                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  DinoStats                      (Parm, ZeroConstructor)
// float                          spawnDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          YOffset                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SpawnSetupDino(const class FString& DinoBlueprintPath, const class FString& SaddleBlueprintPath, float SaddleQuality, int DinoLevel, const class FString& DinoStats, float spawnDistance, float YOffset, float ZOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SpawnSetupDino");

	UShooterCheatManager_SpawnSetupDino_Params params;
	params.DinoBlueprintPath = DinoBlueprintPath;
	params.SaddleBlueprintPath = SaddleBlueprintPath;
	params.SaddleQuality = SaddleQuality;
	params.DinoLevel = DinoLevel;
	params.DinoStats = DinoStats;
	params.spawnDistance = spawnDistance;
	params.YOffset = YOffset;
	params.ZOffset = ZOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SpawnExactDino
// ()
// Parameters:
// class FString                  DinoBlueprintPath              (Parm, ZeroConstructor)
// class FString                  SaddleBlueprintPath            (Parm, ZeroConstructor)
// float                          SaddleQuality                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            BaseLevel                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ExtraLevels                    (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  BaseStats                      (Parm, ZeroConstructor)
// class FString                  AddedStats                     (Parm, ZeroConstructor)
// class FString                  DinoName                       (Parm, ZeroConstructor)
// int8_t                         Cloned                         (Parm, ZeroConstructor, IsPlainOldData)
// int8_t                         Neutered                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  TamedOn                        (Parm, ZeroConstructor)
// class FString                  UploadedFrom                   (Parm, ZeroConstructor)
// class FString                  ImprinterName                  (Parm, ZeroConstructor)
// int                            ImprinterPlayerID              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ImprintQuality                 (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Colors                         (Parm, ZeroConstructor)
// int64_t                        DinoID                         (Parm, ZeroConstructor, IsPlainOldData)
// int64_t                        Exp                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          spawnDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          YOffset                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SpawnExactDino(const class FString& DinoBlueprintPath, const class FString& SaddleBlueprintPath, float SaddleQuality, int BaseLevel, int ExtraLevels, const class FString& BaseStats, const class FString& AddedStats, const class FString& DinoName, int8_t Cloned, int8_t Neutered, const class FString& TamedOn, const class FString& UploadedFrom, const class FString& ImprinterName, int ImprinterPlayerID, float ImprintQuality, const class FString& Colors, int64_t DinoID, int64_t Exp, float spawnDistance, float YOffset, float ZOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SpawnExactDino");

	UShooterCheatManager_SpawnExactDino_Params params;
	params.DinoBlueprintPath = DinoBlueprintPath;
	params.SaddleBlueprintPath = SaddleBlueprintPath;
	params.SaddleQuality = SaddleQuality;
	params.BaseLevel = BaseLevel;
	params.ExtraLevels = ExtraLevels;
	params.BaseStats = BaseStats;
	params.AddedStats = AddedStats;
	params.DinoName = DinoName;
	params.Cloned = Cloned;
	params.Neutered = Neutered;
	params.TamedOn = TamedOn;
	params.UploadedFrom = UploadedFrom;
	params.ImprinterName = ImprinterName;
	params.ImprinterPlayerID = ImprinterPlayerID;
	params.ImprintQuality = ImprintQuality;
	params.Colors = Colors;
	params.DinoID = DinoID;
	params.Exp = Exp;
	params.spawnDistance = spawnDistance;
	params.YOffset = YOffset;
	params.ZOffset = ZOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SpawnDino
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// float                          spawnDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          spawnYOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            DinoLevel                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SpawnDino(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int DinoLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SpawnDino");

	UShooterCheatManager_SpawnDino_Params params;
	params.blueprintPath = blueprintPath;
	params.spawnDistance = spawnDistance;
	params.spawnYOffset = spawnYOffset;
	params.ZOffset = ZOffset;
	params.DinoLevel = DinoLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SpawnActorTamed
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// float                          spawnDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          spawnYOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SpawnActorTamed(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SpawnActorTamed");

	UShooterCheatManager_SpawnActorTamed_Params params;
	params.blueprintPath = blueprintPath;
	params.spawnDistance = spawnDistance;
	params.spawnYOffset = spawnYOffset;
	params.ZOffset = ZOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SpawnActorSpreadTamed
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// float                          spawnDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          spawnYOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumberActors                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpreadAmount                   (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SpawnActorSpreadTamed(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int NumberActors, float SpreadAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SpawnActorSpreadTamed");

	UShooterCheatManager_SpawnActorSpreadTamed_Params params;
	params.blueprintPath = blueprintPath;
	params.spawnDistance = spawnDistance;
	params.spawnYOffset = spawnYOffset;
	params.ZOffset = ZOffset;
	params.NumberActors = NumberActors;
	params.SpreadAmount = SpreadAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SpawnActorSpread
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// float                          spawnDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          spawnYOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumberActors                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpreadAmount                   (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SpawnActorSpread(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset, int NumberActors, float SpreadAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SpawnActorSpread");

	UShooterCheatManager_SpawnActorSpread_Params params;
	params.blueprintPath = blueprintPath;
	params.spawnDistance = spawnDistance;
	params.spawnYOffset = spawnYOffset;
	params.ZOffset = ZOffset;
	params.NumberActors = NumberActors;
	params.SpreadAmount = SpreadAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SpawnActor
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// float                          spawnDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          spawnYOffset                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SpawnActor(const class FString& blueprintPath, float spawnDistance, float spawnYOffset, float ZOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SpawnActor");

	UShooterCheatManager_SpawnActor_Params params;
	params.blueprintPath = blueprintPath;
	params.spawnDistance = spawnDistance;
	params.spawnYOffset = spawnYOffset;
	params.ZOffset = ZOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ShowTutorial
// ()
// Parameters:
// int                            TutorialIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceDisplay                  (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::ShowTutorial(int TutorialIndex, bool bForceDisplay)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ShowTutorial");

	UShooterCheatManager_ShowTutorial_Params params;
	params.TutorialIndex = TutorialIndex;
	params.bForceDisplay = bForceDisplay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ShowMessageOfTheDay
// ()

void UShooterCheatManager::ShowMessageOfTheDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ShowMessageOfTheDay");

	UShooterCheatManager_ShowMessageOfTheDay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ShowInGameMenu
// ()

void UShooterCheatManager::ShowInGameMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ShowInGameMenu");

	UShooterCheatManager_ShowInGameMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetTimeOfDay
// ()
// Parameters:
// class FString                  timeString                     (Parm, ZeroConstructor)

void UShooterCheatManager::SetTimeOfDay(const class FString& timeString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetTimeOfDay");

	UShooterCheatManager_SetTimeOfDay_Params params;
	params.timeString = timeString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetTargetPlayerColorVal
// ()
// Parameters:
// int                            ColorValIndex                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          ColorVal                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetTargetPlayerColorVal(int ColorValIndex, float ColorVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetTargetPlayerColorVal");

	UShooterCheatManager_SetTargetPlayerColorVal_Params params;
	params.ColorValIndex = ColorValIndex;
	params.ColorVal = ColorVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetTargetPlayerBodyVal
// ()
// Parameters:
// int                            BodyValIndex                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BodyVal                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetTargetPlayerBodyVal(int BodyValIndex, float BodyVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetTargetPlayerBodyVal");

	UShooterCheatManager_SetTargetPlayerBodyVal_Params params;
	params.BodyValIndex = BodyValIndex;
	params.BodyVal = BodyVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetTargetDinoColor
// ()
// Parameters:
// int                            ColorRegion                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ColorID                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetTargetDinoColor(int ColorRegion, int ColorID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetTargetDinoColor");

	UShooterCheatManager_SetTargetDinoColor_Params params;
	params.ColorRegion = ColorRegion;
	params.ColorID = ColorID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetShowAllPlayers
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetShowAllPlayers(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetShowAllPlayers");

	UShooterCheatManager_SetShowAllPlayers_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetPlayerPos
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetPlayerPos(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetPlayerPos");

	UShooterCheatManager_SetPlayerPos_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetPlayerLevel
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// int16_t                        Level                          (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetPlayerLevel(int64_t PlayerId, int16_t Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetPlayerLevel");

	UShooterCheatManager_SetPlayerLevel_Params params;
	params.PlayerId = PlayerId;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetNetworkTime
// ()
// Parameters:
// float                          NewTime                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetNetworkTime(float NewTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetNetworkTime");

	UShooterCheatManager_SetNetworkTime_Params params;
	params.NewTime = NewTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetMyTargetSleeping
// ()
// Parameters:
// bool                           bIsSleeping                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetMyTargetSleeping(bool bIsSleeping)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetMyTargetSleeping");

	UShooterCheatManager_SetMyTargetSleeping_Params params;
	params.bIsSleeping = bIsSleeping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetMessageOfTheDay
// ()
// Parameters:
// class FString                  Message                        (Parm, ZeroConstructor)

void UShooterCheatManager::SetMessageOfTheDay(const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetMessageOfTheDay");

	UShooterCheatManager_SetMessageOfTheDay_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetImprintQuality
// ()
// Parameters:
// float                          ImprintQuality                 (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetImprintQuality(float ImprintQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetImprintQuality");

	UShooterCheatManager_SetImprintQuality_Params params;
	params.ImprintQuality = ImprintQuality;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetImprintedPlayer
// ()
// Parameters:
// class FString                  NewImprinterName               (Parm, ZeroConstructor)
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetImprintedPlayer(const class FString& NewImprinterName, int PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetImprintedPlayer");

	UShooterCheatManager_SetImprintedPlayer_Params params;
	params.NewImprinterName = NewImprinterName;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetHeadHairstyle
// ()
// Parameters:
// int                            hairStyleIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetHeadHairstyle(int hairStyleIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetHeadHairstyle");

	UShooterCheatManager_SetHeadHairstyle_Params params;
	params.hairStyleIndex = hairStyleIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetHeadHairPercent
// ()
// Parameters:
// float                          thePercent                     (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetHeadHairPercent(float thePercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetHeadHairPercent");

	UShooterCheatManager_SetHeadHairPercent_Params params;
	params.thePercent = thePercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetGraphicsQuality
// ()
// Parameters:
// int                            val                            (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetGraphicsQuality(int val)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetGraphicsQuality");

	UShooterCheatManager_SetGraphicsQuality_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetGodMode
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetGodMode(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetGodMode");

	UShooterCheatManager_SetGodMode_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetGlobalPause
// ()
// Parameters:
// bool                           bIsPaused                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetGlobalPause(bool bIsPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetGlobalPause");

	UShooterCheatManager_SetGlobalPause_Params params;
	params.bIsPaused = bIsPaused;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetFacialHairstyle
// ()
// Parameters:
// int                            hairStyleIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetFacialHairstyle(int hairStyleIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetFacialHairstyle");

	UShooterCheatManager_SetFacialHairstyle_Params params;
	params.hairStyleIndex = hairStyleIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetFacialHairPercent
// ()
// Parameters:
// float                          thePercent                     (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetFacialHairPercent(float thePercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetFacialHairPercent");

	UShooterCheatManager_SetFacialHairPercent_Params params;
	params.thePercent = thePercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetDebugMeleeAttacks
// ()
// Parameters:
// bool                           bDebugMelee                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetDebugMeleeAttacks(bool bDebugMelee)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetDebugMeleeAttacks");

	UShooterCheatManager_SetDebugMeleeAttacks_Params params;
	params.bDebugMelee = bDebugMelee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetChatLogMaxAgeInDays
// ()
// Parameters:
// int                            NumDays                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetChatLogMaxAgeInDays(int NumDays)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetChatLogMaxAgeInDays");

	UShooterCheatManager_SetChatLogMaxAgeInDays_Params params;
	params.NumDays = NumDays;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SetBabyAge
// ()
// Parameters:
// float                          AgeValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SetBabyAge(float AgeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SetBabyAge");

	UShooterCheatManager_SetBabyAge_Params params;
	params.AgeValue = AgeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ServerChatToPlayer
// ()
// Parameters:
// class FString                  PlayerName                     (Parm, ZeroConstructor)
// class FString                  MessageText                    (Parm, ZeroConstructor)

void UShooterCheatManager::ServerChatToPlayer(const class FString& PlayerName, const class FString& MessageText)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ServerChatToPlayer");

	UShooterCheatManager_ServerChatToPlayer_Params params;
	params.PlayerName = PlayerName;
	params.MessageText = MessageText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ServerChatTo
// ()
// Parameters:
// class FString                  SteamID                        (Parm, ZeroConstructor)
// class FString                  MessageText                    (Parm, ZeroConstructor)

void UShooterCheatManager::ServerChatTo(const class FString& SteamID, const class FString& MessageText)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ServerChatTo");

	UShooterCheatManager_ServerChatTo_Params params;
	params.SteamID = SteamID;
	params.MessageText = MessageText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ServerChat
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)

void UShooterCheatManager::ServerChat(const class FString& MessageText)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ServerChat");

	UShooterCheatManager_ServerChat_Params params;
	params.MessageText = MessageText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SDF
// ()
// Parameters:
// struct FName                   DinoBlueprintPath              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bIsTamed                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::SDF(const struct FName& DinoBlueprintPath, bool bIsTamed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SDF");

	UShooterCheatManager_SDF_Params params;
	params.DinoBlueprintPath = DinoBlueprintPath;
	params.bIsTamed = bIsTamed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ScriptCommand
// ()
// Parameters:
// class FString                  commandString                  (Parm, ZeroConstructor)

void UShooterCheatManager::ScriptCommand(const class FString& commandString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ScriptCommand");

	UShooterCheatManager_ScriptCommand_Params params;
	params.commandString = commandString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SaveWorld
// ()

void UShooterCheatManager::SaveWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SaveWorld");

	UShooterCheatManager_SaveWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.SAP
// ()

void UShooterCheatManager::SAP()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.SAP");

	UShooterCheatManager_SAP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ReportSpawnManagers
// ()

void UShooterCheatManager::ReportSpawnManagers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ReportSpawnManagers");

	UShooterCheatManager_ReportSpawnManagers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ReportLeastSpawnManagers
// ()

void UShooterCheatManager::ReportLeastSpawnManagers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ReportLeastSpawnManagers");

	UShooterCheatManager_ReportLeastSpawnManagers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RenameTribeID
// ()
// Parameters:
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewName                        (Parm, ZeroConstructor)

void UShooterCheatManager::RenameTribeID(int TribeID, const class FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RenameTribeID");

	UShooterCheatManager_RenameTribeID_Params params;
	params.TribeID = TribeID;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RenameTribe
// ()
// Parameters:
// class FString                  TribeName                      (Parm, ZeroConstructor)
// class FString                  NewName                        (Parm, ZeroConstructor)

void UShooterCheatManager::RenameTribe(const class FString& TribeName, const class FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RenameTribe");

	UShooterCheatManager_RenameTribe_Params params;
	params.TribeName = TribeName;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RenamePlayerId
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewName                        (Parm, ZeroConstructor)

void UShooterCheatManager::RenamePlayerId(int PlayerId, const class FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RenamePlayerId");

	UShooterCheatManager_RenamePlayerId_Params params;
	params.PlayerId = PlayerId;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RenamePlayer
// ()
// Parameters:
// class FString                  PlayerName                     (Parm, ZeroConstructor)
// class FString                  NewName                        (Parm, ZeroConstructor)

void UShooterCheatManager::RenamePlayer(const class FString& PlayerName, const class FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RenamePlayer");

	UShooterCheatManager_RenamePlayer_Params params;
	params.PlayerName = PlayerName;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RemoveTribeAdmin
// ()

void UShooterCheatManager::RemoveTribeAdmin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RemoveTribeAdmin");

	UShooterCheatManager_RemoveTribeAdmin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RefillStats
// ()

void UShooterCheatManager::RefillStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RefillStats");

	UShooterCheatManager_RefillStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ReassertColorization
// ()

void UShooterCheatManager::ReassertColorization()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ReassertColorization");

	UShooterCheatManager_ReassertColorization_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RainDinos
// ()
// Parameters:
// int                            NumberActors                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpreadAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::RainDinos(int NumberActors, float SpreadAmount, float ZOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RainDinos");

	UShooterCheatManager_RainDinos_Params params;
	params.NumberActors = NumberActors;
	params.SpreadAmount = SpreadAmount;
	params.ZOffset = ZOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RainDanger
// ()
// Parameters:
// int                            NumberActors                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpreadAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::RainDanger(int NumberActors, float SpreadAmount, float ZOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RainDanger");

	UShooterCheatManager_RainDanger_Params params;
	params.NumberActors = NumberActors;
	params.SpreadAmount = SpreadAmount;
	params.ZOffset = ZOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.RainCritters
// ()
// Parameters:
// int                            NumberActors                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpreadAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ZOffset                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::RainCritters(int NumberActors, float SpreadAmount, float ZOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.RainCritters");

	UShooterCheatManager_RainCritters_Params params;
	params.NumberActors = NumberActors;
	params.SpreadAmount = SpreadAmount;
	params.ZOffset = ZOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.psc
// ()
// Parameters:
// class FString                  Command                        (Parm, ZeroConstructor)

void UShooterCheatManager::psc(const class FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.psc");

	UShooterCheatManager_psc_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.PrintActorLocation
// ()
// Parameters:
// class FString                  ActorName                      (Parm, ZeroConstructor)

void UShooterCheatManager::PrintActorLocation(const class FString& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.PrintActorLocation");

	UShooterCheatManager_PrintActorLocation_Params params;
	params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.PlayerCommand
// ()
// Parameters:
// class FString                  TheCommand                     (Parm, ZeroConstructor)

void UShooterCheatManager::PlayerCommand(const class FString& TheCommand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.PlayerCommand");

	UShooterCheatManager_PlayerCommand_Params params;
	params.TheCommand = TheCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.OpenMap
// ()
// Parameters:
// class FString                  Mapname                        (Parm, ZeroConstructor)

void UShooterCheatManager::OpenMap(const class FString& Mapname)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.OpenMap");

	UShooterCheatManager_OpenMap_Params params;
	params.Mapname = Mapname;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.OnToggleInGameMenu
// ()

void UShooterCheatManager::OnToggleInGameMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.OnToggleInGameMenu");

	UShooterCheatManager_OnToggleInGameMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.MoveTargetTo
// ()
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::MoveTargetTo(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.MoveTargetTo");

	UShooterCheatManager_MoveTargetTo_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.MaxAscend
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::MaxAscend(int PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.MaxAscend");

	UShooterCheatManager_MaxAscend_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.MakeTribeFounder
// ()

void UShooterCheatManager::MakeTribeFounder()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.MakeTribeFounder");

	UShooterCheatManager_MakeTribeFounder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.MakeTribeAdmin
// ()

void UShooterCheatManager::MakeTribeAdmin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.MakeTribeAdmin");

	UShooterCheatManager_MakeTribeAdmin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.LvlUp
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// int16_t                        Level                          (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::LvlUp(int64_t PlayerId, int16_t Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.LvlUp");

	UShooterCheatManager_LvlUp_Params params;
	params.PlayerId = PlayerId;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ListPlayers
// ()

void UShooterCheatManager::ListPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ListPlayers");

	UShooterCheatManager_ListPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ListActiveHordeEvents
// ()

void UShooterCheatManager::ListActiveHordeEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ListActiveHordeEvents");

	UShooterCheatManager_ListActiveHordeEvents_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.LevelUpTarget
// ()
// Parameters:
// struct FName                   StatName                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumLevels                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::LevelUpTarget(const struct FName& StatName, int NumLevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.LevelUpTarget");

	UShooterCheatManager_LevelUpTarget_Params params;
	params.StatName = StatName;
	params.NumLevels = NumLevels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.LevelUpAOE
// ()
// Parameters:
// struct FName                   StatName                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumLevels                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::LevelUpAOE(const struct FName& StatName, float Radius, int NumLevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.LevelUpAOE");

	UShooterCheatManager_LevelUpAOE_Params params;
	params.StatName = StatName;
	params.Radius = Radius;
	params.NumLevels = NumLevels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.LevelUp
// ()
// Parameters:
// struct FName                   StatName                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumLevels                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::LevelUp(const struct FName& StatName, int NumLevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.LevelUp");

	UShooterCheatManager_LevelUp_Params params;
	params.StatName = StatName;
	params.NumLevels = NumLevels;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.LessThan
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            Connections                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::LessThan(int TribeTeamID, int Connections)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.LessThan");

	UShooterCheatManager_LessThan_Params params;
	params.TribeTeamID = TribeTeamID;
	params.Connections = Connections;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.LeaveMeAlone
// ()

void UShooterCheatManager::LeaveMeAlone()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.LeaveMeAlone");

	UShooterCheatManager_LeaveMeAlone_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.KillPlayer
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::KillPlayer(int64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.KillPlayer");

	UShooterCheatManager_KillPlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.KillAOETribe
// ()
// Parameters:
// struct FName                   Category                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::KillAOETribe(const struct FName& Category, float Radius, int TribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.KillAOETribe");

	UShooterCheatManager_KillAOETribe_Params params;
	params.Category = Category;
	params.Radius = Radius;
	params.TribeID = TribeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.KillAOE
// ()
// Parameters:
// struct FName                   Category                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::KillAOE(const struct FName& Category, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.KillAOE");

	UShooterCheatManager_KillAOE_Params params;
	params.Category = Category;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.Kill
// ()

void UShooterCheatManager::Kill()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.Kill");

	UShooterCheatManager_Kill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.KickPlayer
// ()
// Parameters:
// class FString                  PlayerSteamName                (Parm, ZeroConstructor)

void UShooterCheatManager::KickPlayer(const class FString& PlayerSteamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.KickPlayer");

	UShooterCheatManager_KickPlayer_Params params;
	params.PlayerSteamName = PlayerSteamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.JoinTribe
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::JoinTribe(int64_t PlayerId, int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.JoinTribe");

	UShooterCheatManager_JoinTribe_Params params;
	params.PlayerId = PlayerId;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.InfiniteStats
// ()

void UShooterCheatManager::InfiniteStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.InfiniteStats");

	UShooterCheatManager_InfiniteStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.HiWarp
// ()
// Parameters:
// class FString                  ClassName                      (Parm, ZeroConstructor)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::HiWarp(const class FString& ClassName, int index)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.HiWarp");

	UShooterCheatManager_HiWarp_Params params;
	params.ClassName = ClassName;
	params.index = index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.HideTutorial
// ()
// Parameters:
// int                            TutorialIndex                  (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::HideTutorial(int TutorialIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.HideTutorial");

	UShooterCheatManager_HideTutorial_Params params;
	params.TutorialIndex = TutorialIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.HibernationReport
// ()
// Parameters:
// class FString                  ClassName                      (Parm, ZeroConstructor)

void UShooterCheatManager::HibernationReport(const class FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.HibernationReport");

	UShooterCheatManager_HibernationReport_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.HatchEgg
// ()

void UShooterCheatManager::HatchEgg()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.HatchEgg");

	UShooterCheatManager_HatchEgg_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GMSummon
// ()
// Parameters:
// class FString                  ClassName                      (Parm, ZeroConstructor)
// int                            Level                          (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GMSummon(const class FString& ClassName, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GMSummon");

	UShooterCheatManager_GMSummon_Params params;
	params.ClassName = ClassName;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GMComp
// ()
// Parameters:
// int                            Level                          (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GMComp(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GMComp");

	UShooterCheatManager_GMComp_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GMBuff
// ()

void UShooterCheatManager::GMBuff()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GMBuff");

	UShooterCheatManager_GMBuff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveWeaponSet
// ()
// Parameters:
// struct FName                   Tier                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Quality                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveWeaponSet(const struct FName& Tier, const struct FName& Quality)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveWeaponSet");

	UShooterCheatManager_GiveWeaponSet_Params params;
	params.Tier = Tier;
	params.Quality = Quality;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveToMeAOE
// ()
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveToMeAOE(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveToMeAOE");

	UShooterCheatManager_GiveToMeAOE_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveToMe
// ()

void UShooterCheatManager::GiveToMe()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveToMe");

	UShooterCheatManager_GiveToMe_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveTekEngramsTo
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   blueprintPath                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UShooterCheatManager::GiveTekEngramsTo(int64_t PlayerId, const struct FName& blueprintPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveTekEngramsTo");

	UShooterCheatManager_GiveTekEngramsTo_Params params;
	params.PlayerId = PlayerId;
	params.blueprintPath = blueprintPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveResources
// ()

void UShooterCheatManager::GiveResources()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveResources");

	UShooterCheatManager_GiveResources_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveItemToPlayer
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// float                          qualityOverride                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceBlueprint                (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveItemToPlayer(int PlayerId, const class FString& blueprintPath, int quantityOverride, float qualityOverride, bool bForceBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveItemToPlayer");

	UShooterCheatManager_GiveItemToPlayer_Params params;
	params.PlayerId = PlayerId;
	params.blueprintPath = blueprintPath;
	params.quantityOverride = quantityOverride;
	params.qualityOverride = qualityOverride;
	params.bForceBlueprint = bForceBlueprint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveItemSet
// ()
// Parameters:
// struct FName                   Tier                           (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveItemSet(const struct FName& Tier)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveItemSet");

	UShooterCheatManager_GiveItemSet_Params params;
	params.Tier = Tier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveItemNumToPlayer
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            MasterIndexNum                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// float                          qualityOverride                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceBlueprint                (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveItemNumToPlayer(int PlayerId, int MasterIndexNum, int quantityOverride, float qualityOverride, bool bForceBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveItemNumToPlayer");

	UShooterCheatManager_GiveItemNumToPlayer_Params params;
	params.PlayerId = PlayerId;
	params.MasterIndexNum = MasterIndexNum;
	params.quantityOverride = quantityOverride;
	params.qualityOverride = qualityOverride;
	params.bForceBlueprint = bForceBlueprint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveItemNum
// ()
// Parameters:
// int                            MasterIndexNum                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// float                          qualityOverride                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceBlueprint                (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveItemNum(int MasterIndexNum, int quantityOverride, float qualityOverride, bool bForceBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveItemNum");

	UShooterCheatManager_GiveItemNum_Params params;
	params.MasterIndexNum = MasterIndexNum;
	params.quantityOverride = quantityOverride;
	params.qualityOverride = qualityOverride;
	params.bForceBlueprint = bForceBlueprint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveItem
// ()
// Parameters:
// class FString                  blueprintPath                  (Parm, ZeroConstructor)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// float                          qualityOverride                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceBlueprint                (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveItem(const class FString& blueprintPath, int quantityOverride, float qualityOverride, bool bForceBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveItem");

	UShooterCheatManager_GiveItem_Params params;
	params.blueprintPath = blueprintPath;
	params.quantityOverride = quantityOverride;
	params.qualityOverride = qualityOverride;
	params.bForceBlueprint = bForceBlueprint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveInfiniteStatsToTarget
// ()

void UShooterCheatManager::GiveInfiniteStatsToTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveInfiniteStatsToTarget");

	UShooterCheatManager_GiveInfiniteStatsToTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveExpToTarget
// ()
// Parameters:
// float                          HowMuch                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           fromTribeShare                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreventSharingWithTribe       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveExpToTarget(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveExpToTarget");

	UShooterCheatManager_GiveExpToTarget_Params params;
	params.HowMuch = HowMuch;
	params.fromTribeShare = fromTribeShare;
	params.bPreventSharingWithTribe = bPreventSharingWithTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveExpToPlayer
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          HowMuch                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           fromTribeShare                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreventSharingWithTribe       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveExpToPlayer(int64_t PlayerId, float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveExpToPlayer");

	UShooterCheatManager_GiveExpToPlayer_Params params;
	params.PlayerId = PlayerId;
	params.HowMuch = HowMuch;
	params.fromTribeShare = fromTribeShare;
	params.bPreventSharingWithTribe = bPreventSharingWithTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveExplorerNote
// ()
// Parameters:
// int                            NoteIndex                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveExplorerNote(int NoteIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveExplorerNote");

	UShooterCheatManager_GiveExplorerNote_Params params;
	params.NoteIndex = NoteIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveEngramsTekOnly
// ()

void UShooterCheatManager::GiveEngramsTekOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveEngramsTekOnly");

	UShooterCheatManager_GiveEngramsTekOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveEngrams
// ()

void UShooterCheatManager::GiveEngrams()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveEngrams");

	UShooterCheatManager_GiveEngrams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveDinoSet
// ()
// Parameters:
// struct FName                   Tier                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            NumDinos                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveDinoSet(const struct FName& Tier, int NumDinos)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveDinoSet");

	UShooterCheatManager_GiveDinoSet_Params params;
	params.Tier = Tier;
	params.NumDinos = NumDinos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveCreativeModeToTarget
// ()

void UShooterCheatManager::GiveCreativeModeToTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveCreativeModeToTarget");

	UShooterCheatManager_GiveCreativeModeToTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveCreativeModeToPlayer
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveCreativeModeToPlayer(int64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveCreativeModeToPlayer");

	UShooterCheatManager_GiveCreativeModeToPlayer_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveCreativeMode
// ()

void UShooterCheatManager::GiveCreativeMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveCreativeMode");

	UShooterCheatManager_GiveCreativeMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveArmorSet
// ()
// Parameters:
// struct FName                   Tier                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Quality                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GiveArmorSet(const struct FName& Tier, const struct FName& Quality)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveArmorSet");

	UShooterCheatManager_GiveArmorSet_Params params;
	params.Tier = Tier;
	params.Quality = Quality;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveAllStructure
// ()

void UShooterCheatManager::GiveAllStructure()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveAllStructure");

	UShooterCheatManager_GiveAllStructure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GiveAllExplorerNotes
// ()

void UShooterCheatManager::GiveAllExplorerNotes()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GiveAllExplorerNotes");

	UShooterCheatManager_GiveAllExplorerNotes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GFI
// ()
// Parameters:
// struct FName                   blueprintPath                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            quantityOverride               (Parm, ZeroConstructor, IsPlainOldData)
// float                          qualityOverride                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceBlueprint                (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GFI(const struct FName& blueprintPath, int quantityOverride, float qualityOverride, bool bForceBlueprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GFI");

	UShooterCheatManager_GFI_Params params;
	params.blueprintPath = blueprintPath;
	params.quantityOverride = quantityOverride;
	params.qualityOverride = qualityOverride;
	params.bForceBlueprint = bForceBlueprint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GetTribeIdPlayerList
// ()
// Parameters:
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GetTribeIdPlayerList(int TribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GetTribeIdPlayerList");

	UShooterCheatManager_GetTribeIdPlayerList_Params params;
	params.TribeID = TribeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GetSteamIDForPlayerID
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GetSteamIDForPlayerID(int PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GetSteamIDForPlayerID");

	UShooterCheatManager_GetSteamIDForPlayerID_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GetPlayerIDForSteamID
// ()
// Parameters:
// int                            SteamID                        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GetPlayerIDForSteamID(int SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GetPlayerIDForSteamID");

	UShooterCheatManager_GetPlayerIDForSteamID_Params params;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GetGameLog
// ()

void UShooterCheatManager::GetGameLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GetGameLog");

	UShooterCheatManager_GetGameLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GetChat
// ()

void UShooterCheatManager::GetChat()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GetChat");

	UShooterCheatManager_GetChat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GCMT
// ()

void UShooterCheatManager::GCMT()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GCMT");

	UShooterCheatManager_GCMT_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GCMP
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::GCMP(int64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GCMP");

	UShooterCheatManager_GCMP_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GCM
// ()

void UShooterCheatManager::GCM()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GCM");

	UShooterCheatManager_GCM_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.GameCommand
// ()
// Parameters:
// class FString                  TheCommand                     (Parm, ZeroConstructor)

void UShooterCheatManager::GameCommand(const class FString& TheCommand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.GameCommand");

	UShooterCheatManager_GameCommand_Params params;
	params.TheCommand = TheCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForceTribes
// ()
// Parameters:
// class FString                  PlayerName1                    (Parm, ZeroConstructor)
// class FString                  PlayerName2                    (Parm, ZeroConstructor)
// class FString                  NewTribeName                   (Parm, ZeroConstructor)

void UShooterCheatManager::ForceTribes(const class FString& PlayerName1, const class FString& PlayerName2, const class FString& NewTribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForceTribes");

	UShooterCheatManager_ForceTribes_Params params;
	params.PlayerName1 = PlayerName1;
	params.PlayerName2 = PlayerName2;
	params.NewTribeName = NewTribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForceTameAOE
// ()
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::ForceTameAOE(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForceTameAOE");

	UShooterCheatManager_ForceTameAOE_Params params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForceTame
// ()

void UShooterCheatManager::ForceTame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForceTame");

	UShooterCheatManager_ForceTame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForcePoop
// ()

void UShooterCheatManager::ForcePoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForcePoop");

	UShooterCheatManager_ForcePoop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForcePlayerToJoinTribeId
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::ForcePlayerToJoinTribeId(int64_t PlayerId, int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForcePlayerToJoinTribeId");

	UShooterCheatManager_ForcePlayerToJoinTribeId_Params params;
	params.PlayerId = PlayerId;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForcePlayerToJoinTribe
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  TribeName                      (Parm, ZeroConstructor)

void UShooterCheatManager::ForcePlayerToJoinTribe(int64_t PlayerId, const class FString& TribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForcePlayerToJoinTribe");

	UShooterCheatManager_ForcePlayerToJoinTribe_Params params;
	params.PlayerId = PlayerId;
	params.TribeName = TribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForcePlayerToJoinTargetTribe
// ()
// Parameters:
// int64_t                        PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::ForcePlayerToJoinTargetTribe(int64_t PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForcePlayerToJoinTargetTribe");

	UShooterCheatManager_ForcePlayerToJoinTargetTribe_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForceJoinTribe
// ()

void UShooterCheatManager::ForceJoinTribe()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForceJoinTribe");

	UShooterCheatManager_ForceJoinTribe_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForceEnableMeshCheckingOnMe
// ()
// Parameters:
// bool                           bEnableChecking                (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::ForceEnableMeshCheckingOnMe(bool bEnableChecking)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForceEnableMeshCheckingOnMe");

	UShooterCheatManager_ForceEnableMeshCheckingOnMe_Params params;
	params.bEnableChecking = bEnableChecking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ForceCheckInMesh
// ()

void UShooterCheatManager::ForceCheckInMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ForceCheckInMesh");

	UShooterCheatManager_ForceCheckInMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.EnemyInVisible
// ()
// Parameters:
// bool                           Invisible                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::EnemyInVisible(bool Invisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.EnemyInVisible");

	UShooterCheatManager_EnemyInVisible_Params params;
	params.Invisible = Invisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.EnableSpectator
// ()

void UShooterCheatManager::EnableSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.EnableSpectator");

	UShooterCheatManager_EnableSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.EnableCheats
// ()
// Parameters:
// class FString                  pass                           (ConstParm, Parm, ZeroConstructor)

void UShooterCheatManager::EnableCheats(const class FString& pass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.EnableCheats");

	UShooterCheatManager_EnableCheats_Params params;
	params.pass = pass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DumpDinoStats
// ()

void UShooterCheatManager::DumpDinoStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DumpDinoStats");

	UShooterCheatManager_DumpDinoStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DoTame
// ()

void UShooterCheatManager::DoTame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DoTame");

	UShooterCheatManager_DoTame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DoRestartLevel
// ()

void UShooterCheatManager::DoRestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DoRestartLevel");

	UShooterCheatManager_DoRestartLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DoExit
// ()

void UShooterCheatManager::DoExit()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DoExit");

	UShooterCheatManager_DoExit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DisallowPlayerToJoinNoCheck
// ()
// Parameters:
// class FString                  SteamID                        (Parm, ZeroConstructor)

void UShooterCheatManager::DisallowPlayerToJoinNoCheck(const class FString& SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DisallowPlayerToJoinNoCheck");

	UShooterCheatManager_DisallowPlayerToJoinNoCheck_Params params;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DisableSpectator
// ()

void UShooterCheatManager::DisableSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DisableSpectator");

	UShooterCheatManager_DisableSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DinoSet
// ()
// Parameters:
// struct FName                   CheatName                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DinoSet(const struct FName& CheatName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DinoSet");

	UShooterCheatManager_DinoSet_Params params;
	params.CheatName = CheatName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.Dino
// ()
// Parameters:
// struct FName                   CheatName                      (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::Dino(const struct FName& CheatName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.Dino");

	UShooterCheatManager_Dino_Params params;
	params.CheatName = CheatName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DetachChar
// ()

void UShooterCheatManager::DetachChar()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DetachChar");

	UShooterCheatManager_DetachChar_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyWildDinos
// ()

void UShooterCheatManager::DestroyWildDinos()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyWildDinos");

	UShooterCheatManager_DestroyWildDinos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribeStructuresLessThan
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            Connections                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DestroyTribeStructuresLessThan(int TribeTeamID, int Connections)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribeStructuresLessThan");

	UShooterCheatManager_DestroyTribeStructuresLessThan_Params params;
	params.TribeTeamID = TribeTeamID;
	params.Connections = Connections;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribeStructures
// ()

void UShooterCheatManager::DestroyTribeStructures()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribeStructures");

	UShooterCheatManager_DestroyTribeStructures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribePlayers
// ()

void UShooterCheatManager::DestroyTribePlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribePlayers");

	UShooterCheatManager_DestroyTribePlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribeIdStructures
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DestroyTribeIdStructures(int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribeIdStructures");

	UShooterCheatManager_DestroyTribeIdStructures_Params params;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribeIdPlayers
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DestroyTribeIdPlayers(int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribeIdPlayers");

	UShooterCheatManager_DestroyTribeIdPlayers_Params params;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribeIdDinos
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DestroyTribeIdDinos(int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribeIdDinos");

	UShooterCheatManager_DestroyTribeIdDinos_Params params;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribeId
// ()
// Parameters:
// int                            TribeTeamID                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DestroyTribeId(int TribeTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribeId");

	UShooterCheatManager_DestroyTribeId_Params params;
	params.TribeTeamID = TribeTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyTribeDinos
// ()

void UShooterCheatManager::DestroyTribeDinos()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyTribeDinos");

	UShooterCheatManager_DestroyTribeDinos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyStructures
// ()

void UShooterCheatManager::DestroyStructures()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyStructures");

	UShooterCheatManager_DestroyStructures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyMyTarget
// ()

void UShooterCheatManager::DestroyMyTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyMyTarget");

	UShooterCheatManager_DestroyMyTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyAllTames
// ()

void UShooterCheatManager::DestroyAllTames()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyAllTames");

	UShooterCheatManager_DestroyAllTames_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyAllEnemies
// ()

void UShooterCheatManager::DestroyAllEnemies()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyAllEnemies");

	UShooterCheatManager_DestroyAllEnemies_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DestroyActors
// ()
// Parameters:
// class FString                  ClassName                      (Parm, ZeroConstructor)

void UShooterCheatManager::DestroyActors(const class FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DestroyActors");

	UShooterCheatManager_DestroyActors_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DefeatBoss
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   BossName                       (Parm, ZeroConstructor, IsPlainOldData)
// int8_t                         difficulty                     (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DefeatBoss(int PlayerId, const struct FName& BossName, int8_t difficulty)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DefeatBoss");

	UShooterCheatManager_DefeatBoss_Params params;
	params.PlayerId = PlayerId;
	params.BossName = BossName;
	params.difficulty = difficulty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DefeatAllBosses
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::DefeatAllBosses(int PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DefeatAllBosses");

	UShooterCheatManager_DefeatAllBosses_Params params;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.DebugMyTarget
// ()

void UShooterCheatManager::DebugMyTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.DebugMyTarget");

	UShooterCheatManager_DebugMyTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ClearTutorials
// ()

void UShooterCheatManager::ClearTutorials()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ClearTutorials");

	UShooterCheatManager_ClearTutorials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ClearPlayerInventory
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearInventory                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearSlotItems                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClearEquippedItems            (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::ClearPlayerInventory(int PlayerId, bool bClearInventory, bool bClearSlotItems, bool bClearEquippedItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ClearPlayerInventory");

	UShooterCheatManager_ClearPlayerInventory_Params params;
	params.PlayerId = PlayerId;
	params.bClearInventory = bClearInventory;
	params.bClearSlotItems = bClearSlotItems;
	params.bClearEquippedItems = bClearEquippedItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ClearMyBuffs
// ()

void UShooterCheatManager::ClearMyBuffs()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ClearMyBuffs");

	UShooterCheatManager_ClearMyBuffs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.ClearCryoSickness
// ()

void UShooterCheatManager::ClearCryoSickness()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.ClearCryoSickness");

	UShooterCheatManager_ClearCryoSickness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.CamZoomOut
// ()

void UShooterCheatManager::CamZoomOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.CamZoomOut");

	UShooterCheatManager_CamZoomOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.CamZoomIn
// ()

void UShooterCheatManager::CamZoomIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.CamZoomIn");

	UShooterCheatManager_CamZoomIn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.Broadcast
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)

void UShooterCheatManager::Broadcast(const class FString& MessageText)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.Broadcast");

	UShooterCheatManager_Broadcast_Params params;
	params.MessageText = MessageText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.BanPlayer
// ()
// Parameters:
// class FString                  PlayerSteamName                (Parm, ZeroConstructor)

void UShooterCheatManager::BanPlayer(const class FString& PlayerSteamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.BanPlayer");

	UShooterCheatManager_BanPlayer_Params params;
	params.PlayerSteamName = PlayerSteamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.AllowPlayerToJoinNoCheck
// ()
// Parameters:
// class FString                  SteamID                        (Parm, ZeroConstructor)

void UShooterCheatManager::AllowPlayerToJoinNoCheck(const class FString& SteamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.AllowPlayerToJoinNoCheck");

	UShooterCheatManager_AllowPlayerToJoinNoCheck_Params params;
	params.SteamID = SteamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.AddItemToAllClustersInventory
// ()
// Parameters:
// class FString                  UserId                         (Parm, ZeroConstructor)
// int                            MasterIndexNum                 (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::AddItemToAllClustersInventory(const class FString& UserId, int MasterIndexNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.AddItemToAllClustersInventory");

	UShooterCheatManager_AddItemToAllClustersInventory_Params params;
	params.UserId = UserId;
	params.MasterIndexNum = MasterIndexNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterCheatManager.AddExperience
// ()
// Parameters:
// float                          HowMuch                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           fromTribeShare                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPreventSharingWithTribe       (Parm, ZeroConstructor, IsPlainOldData)

void UShooterCheatManager::AddExperience(float HowMuch, bool fromTribeShare, bool bPreventSharingWithTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterCheatManager.AddExperience");

	UShooterCheatManager_AddExperience_Params params;
	params.HowMuch = HowMuch;
	params.fromTribeShare = fromTribeShare;
	params.bPreventSharingWithTribe = bPreventSharingWithTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterDamageType.OverrideBuffToGiveVictimCharacter
// ()
// Parameters:
// class APrimalCharacter*        Victim                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          IncomingDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UShooterDamageType::OverrideBuffToGiveVictimCharacter(class APrimalCharacter* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterDamageType.OverrideBuffToGiveVictimCharacter");

	UShooterDamageType_OverrideBuffToGiveVictimCharacter_Params params;
	params.Victim = Victim;
	params.IncomingDamage = IncomingDamage;
	params.TheDamageEvent = TheDamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterDamageType.BPAdjustHarvestingDamage
// ()
// Parameters:
// class AActor*                  Victim                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          IncomingDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UShooterDamageType::BPAdjustHarvestingDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterDamageType.BPAdjustHarvestingDamage");

	UShooterDamageType_BPAdjustHarvestingDamage_Params params;
	params.Victim = Victim;
	params.IncomingDamage = IncomingDamage;
	params.TheDamageEvent = TheDamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterDamageType.BPAdjustDamage
// ()
// Parameters:
// class AActor*                  Victim                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          IncomingDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UShooterDamageType::BPAdjustDamage(class AActor* Victim, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterDamageType.BPAdjustDamage");

	UShooterDamageType_BPAdjustDamage_Params params;
	params.Victim = Victim;
	params.IncomingDamage = IncomingDamage;
	params.TheDamageEvent = TheDamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterDamageType.BPAdjustAggro
// ()
// Parameters:
// class APrimalDinoAIController* DamagedCharacterController     (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        DamagedCharacter               (Parm, ZeroConstructor, IsPlainOldData)
// float                          DesiredAggroValue              (Parm, ZeroConstructor, IsPlainOldData)
// float                          IncomingDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            TheDamageEvent                 (Parm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UShooterDamageType::BPAdjustAggro(class APrimalDinoAIController* DamagedCharacterController, class APrimalCharacter* DamagedCharacter, float DesiredAggroValue, float IncomingDamage, const struct FDamageEvent& TheDamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterDamageType.BPAdjustAggro");

	UShooterDamageType_BPAdjustAggro_Params params;
	params.DamagedCharacterController = DamagedCharacterController;
	params.DamagedCharacter = DamagedCharacter;
	params.DesiredAggroValue = DesiredAggroValue;
	params.IncomingDamage = IncomingDamage;
	params.TheDamageEvent = TheDamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGame_Menu.PlayMusic
// ()

void AShooterGame_Menu::PlayMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGame_Menu.PlayMusic");

	AShooterGame_Menu_PlayMusic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGame_Menu.GetMainMenuOverrideData
// ()
// Parameters:
// struct FActiveEventMainMenuOverride OverrideData                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGame_Menu::GetMainMenuOverrideData(struct FActiveEventMainMenuOverride* OverrideData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGame_Menu.GetMainMenuOverrideData");

	AShooterGame_Menu_GetMainMenuOverrideData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverrideData != nullptr)
		*OverrideData = params.OverrideData;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGame_Menu.GetMainMenuBackgroundTexture
// ()
// Parameters:
// class UTexture2D*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture2D* AShooterGame_Menu::GetMainMenuBackgroundTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGame_Menu.GetMainMenuBackgroundTexture");

	AShooterGame_Menu_GetMainMenuBackgroundTexture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameInstance.LoadTheGameMedia
// ()

void UShooterGameInstance::LoadTheGameMedia()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameInstance.LoadTheGameMedia");

	UShooterGameInstance_LoadTheGameMedia_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameInstance.DisplayGlobalMainMenuNotification
// ()

void UShooterGameInstance::DisplayGlobalMainMenuNotification()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameInstance.DisplayGlobalMainMenuNotification");

	UShooterGameInstance_DisplayGlobalMainMenuNotification_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameInstance.AsyncUnloadAssetFromPath
// ()
// Parameters:
// class FString                  AssetPathToUnload              (Parm, ZeroConstructor)
// bool                           bForceGarbageCollection        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterGameInstance::AsyncUnloadAssetFromPath(const class FString& AssetPathToUnload, bool bForceGarbageCollection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameInstance.AsyncUnloadAssetFromPath");

	UShooterGameInstance_AsyncUnloadAssetFromPath_Params params;
	params.AssetPathToUnload = AssetPathToUnload;
	params.bForceGarbageCollection = bForceGarbageCollection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameInstance.AsyncUnloadAssetFromObject
// ()
// Parameters:
// class UObject*                 AssetObjectToUnload            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceGarbageCollection        (Parm, ZeroConstructor, IsPlainOldData)

void UShooterGameInstance::AsyncUnloadAssetFromObject(class UObject* AssetObjectToUnload, bool bForceGarbageCollection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameInstance.AsyncUnloadAssetFromObject");

	UShooterGameInstance_AsyncUnloadAssetFromObject_Params params;
	params.AssetObjectToUnload = AssetObjectToUnload;
	params.bForceGarbageCollection = bForceGarbageCollection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameInstance.AsyncLoadAssetFromPath
// ()
// Parameters:
// class FString                  AssetPath                      (Parm, ZeroConstructor)

void UShooterGameInstance::AsyncLoadAssetFromPath(const class FString& AssetPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameInstance.AsyncLoadAssetFromPath");

	UShooterGameInstance_AsyncLoadAssetFromPath_Params params;
	params.AssetPath = AssetPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameInstance.AsyncAssetLoadedDelegate__DelegateSignature
// ()
// Parameters:
// class FString                  AssetPath                      (Parm, ZeroConstructor)
// class UObject*                 LoadedAsset                    (Parm, ZeroConstructor, IsPlainOldData)

void UShooterGameInstance::AsyncAssetLoadedDelegate__DelegateSignature(const class FString& AssetPath, class UObject* LoadedAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameInstance.AsyncAssetLoadedDelegate__DelegateSignature");

	UShooterGameInstance_AsyncAssetLoadedDelegate__DelegateSignature_Params params;
	params.AssetPath = AssetPath;
	params.LoadedAsset = LoadedAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainActor.GenerateTerrain
// ()

void ATerrainActor::GenerateTerrain()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainActor.GenerateTerrain");

	ATerrainActor_GenerateTerrain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainComponent.OnRep_TerrainInfo
// ()

void UTerrainComponent::OnRep_TerrainInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainComponent.OnRep_TerrainInfo");

	UTerrainComponent_OnRep_TerrainInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainComponent.OnConstruct
// ()

void UTerrainComponent::OnConstruct()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainComponent.OnConstruct");

	UTerrainComponent_OnConstruct_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TerrainComponent.ApplyToTexture
// ()
// Parameters:
// class UFloatMap*               FloatMap                       (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              Texture                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          Minimum                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Maximum                        (Parm, ZeroConstructor, IsPlainOldData)

void UTerrainComponent::ApplyToTexture(class UFloatMap* FloatMap, float Minimum, float Maximum, class UTexture2D** Texture)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TerrainComponent.ApplyToTexture");

	UTerrainComponent_ApplyToTexture_Params params;
	params.FloatMap = FloatMap;
	params.Minimum = Minimum;
	params.Maximum = Maximum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Texture != nullptr)
		*Texture = params.Texture;
}


// Function ShooterGame.ShooterGameMode.TriggerLevelCustomEvents
// ()
// Parameters:
// class UWorld*                  inWorld                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  EventName                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::TriggerLevelCustomEvents(class UWorld* inWorld, const class FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.TriggerLevelCustomEvents");

	AShooterGameMode_TriggerLevelCustomEvents_Params params;
	params.inWorld = inWorld;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.ShooterCharacterSpawned__DelegateSignature
// ()
// Parameters:
// class AShooterCharacter*       TheShooterCharacter            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::ShooterCharacterSpawned__DelegateSignature(class AShooterCharacter* TheShooterCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.ShooterCharacterSpawned__DelegateSignature");

	AShooterGameMode_ShooterCharacterSpawned__DelegateSignature_Params params;
	params.TheShooterCharacter = TheShooterCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.ShooterCharacterDied__DelegateSignature
// ()
// Parameters:
// class AShooterCharacter*       TheShooterCharacter            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::ShooterCharacterDied__DelegateSignature(class AShooterCharacter* TheShooterCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.ShooterCharacterDied__DelegateSignature");

	AShooterGameMode_ShooterCharacterDied__DelegateSignature_Params params;
	params.TheShooterCharacter = TheShooterCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.SetTimeOfDay
// ()
// Parameters:
// class FString                  timeString                     (Parm, ZeroConstructor)

void AShooterGameMode::SetTimeOfDay(const class FString& timeString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.SetTimeOfDay");

	AShooterGameMode_SetTimeOfDay_Params params;
	params.timeString = timeString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.SendServerNotification
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayScale                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          DisplayTime                    (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              MessageIcon                    (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              SoundToPlay                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReceiverTeamId                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReceiverPlayerID               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoBillboard                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::SendServerNotification(const class FString& MessageText, const struct FLinearColor& MessageColor, float DisplayScale, float DisplayTime, class UTexture2D* MessageIcon, class USoundBase* SoundToPlay, int ReceiverTeamId, int ReceiverPlayerID, bool bDoBillboard)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.SendServerNotification");

	AShooterGameMode_SendServerNotification_Params params;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.DisplayScale = DisplayScale;
	params.DisplayTime = DisplayTime;
	params.MessageIcon = MessageIcon;
	params.SoundToPlay = SoundToPlay;
	params.ReceiverTeamId = ReceiverTeamId;
	params.ReceiverPlayerID = ReceiverPlayerID;
	params.bDoBillboard = bDoBillboard;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.SendServerDirectMessage
// ()
// Parameters:
// class FString                  PlayerSteamIDconst             (Parm, ZeroConstructor)
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBold                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReceiverTeamId                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReceiverPlayerID               (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  PlayerName                     (Parm, ZeroConstructor)

void AShooterGameMode::SendServerDirectMessage(const class FString& PlayerSteamIDconst, const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int ReceiverTeamId, int ReceiverPlayerID, const class FString& PlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.SendServerDirectMessage");

	AShooterGameMode_SendServerDirectMessage_Params params;
	params.PlayerSteamIDconst = PlayerSteamIDconst;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.bIsBold = bIsBold;
	params.ReceiverTeamId = ReceiverTeamId;
	params.ReceiverPlayerID = ReceiverPlayerID;
	params.PlayerName = PlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.SendServerChatMessage
// ()
// Parameters:
// class FString                  MessageText                    (Parm, ZeroConstructor)
// struct FLinearColor            MessageColor                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBold                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReceiverTeamId                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReceiverPlayerID               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::SendServerChatMessage(const class FString& MessageText, const struct FLinearColor& MessageColor, bool bIsBold, int ReceiverTeamId, int ReceiverPlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.SendServerChatMessage");

	AShooterGameMode_SendServerChatMessage_Params params;
	params.MessageText = MessageText;
	params.MessageColor = MessageColor;
	params.bIsBold = bIsBold;
	params.ReceiverTeamId = ReceiverTeamId;
	params.ReceiverPlayerID = ReceiverPlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.RestartServer
// ()

void AShooterGameMode::RestartServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.RestartServer");

	AShooterGameMode_RestartServer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.RemovePlayerData
// ()
// Parameters:
// class AShooterPlayerState*     PlayerState                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::RemovePlayerData(class AShooterPlayerState* PlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.RemovePlayerData");

	AShooterGameMode_RemovePlayerData_Params params;
	params.PlayerState = PlayerState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.RemoveInactivePlayersAndTribes
// ()

void AShooterGameMode::RemoveInactivePlayersAndTribes()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.RemoveInactivePlayersAndTribes");

	AShooterGameMode_RemoveInactivePlayersAndTribes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.ReassertColorization
// ()

void AShooterGameMode::ReassertColorization()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.ReassertColorization");

	AShooterGameMode_ReassertColorization_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.PrintToServerGameLog
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)
// bool                           bSendChatToAllAdmins           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::PrintToServerGameLog(const class FString& InString, bool bSendChatToAllAdmins)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.PrintToServerGameLog");

	AShooterGameMode_PrintToServerGameLog_Params params;
	params.InString = InString;
	params.bSendChatToAllAdmins = bSendChatToAllAdmins;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.PrintToGameplayLog
// ()
// Parameters:
// class FString                  InString                       (Parm, ZeroConstructor)

void AShooterGameMode::PrintToGameplayLog(const class FString& InString)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.PrintToGameplayLog");

	AShooterGameMode_PrintToGameplayLog_Params params;
	params.InString = InString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.PostAlarmNotificationTribe
// ()
// Parameters:
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Title                          (Parm, ZeroConstructor)
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterGameMode::PostAlarmNotificationTribe(int TribeID, const class FString& Title, const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.PostAlarmNotificationTribe");

	AShooterGameMode_PostAlarmNotificationTribe_Params params;
	params.TribeID = TribeID;
	params.Title = Title;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.PostAlarmNotificationPlayerID
// ()
// Parameters:
// int                            PlayerId                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Title                          (Parm, ZeroConstructor)
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterGameMode::PostAlarmNotificationPlayerID(int PlayerId, const class FString& Title, const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.PostAlarmNotificationPlayerID");

	AShooterGameMode_PostAlarmNotificationPlayerID_Params params;
	params.PlayerId = PlayerId;
	params.Title = Title;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.PostAlarmNotification
// ()
// Parameters:
// class FString                  SteamID                        (Parm, ZeroConstructor)
// class FString                  Title                          (Parm, ZeroConstructor)
// class FString                  Message                        (Parm, ZeroConstructor)

void AShooterGameMode::PostAlarmNotification(const class FString& SteamID, const class FString& Title, const class FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.PostAlarmNotification");

	AShooterGameMode_PostAlarmNotification_Params params;
	params.SteamID = SteamID;
	params.Title = Title;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.OnLogout
// ()
// Parameters:
// class AController*             Exiting                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::OnLogout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.OnLogout");

	AShooterGameMode_OnLogout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.KickPlayerController
// ()
// Parameters:
// class APlayerController*       thePC                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  KickMessage                    (Parm, ZeroConstructor)

void AShooterGameMode::KickPlayerController(class APlayerController* thePC, const class FString& KickMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.KickPlayerController");

	AShooterGameMode_KickPlayerController_Params params;
	params.thePC = thePC;
	params.KickMessage = KickMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.KickAllPlayersAndReload
// ()

void AShooterGameMode::KickAllPlayersAndReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.KickAllPlayersAndReload");

	AShooterGameMode_KickAllPlayersAndReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.IsPlayerControllerAllowedToJoinNoCheck
// ()
// Parameters:
// class AShooterPlayerController* ForPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::IsPlayerControllerAllowedToJoinNoCheck(class AShooterPlayerController* ForPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.IsPlayerControllerAllowedToJoinNoCheck");

	AShooterGameMode_IsPlayerControllerAllowedToJoinNoCheck_Params params;
	params.ForPlayer = ForPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.IsPlayerControllerAllowedToExclusiveJoin
// ()
// Parameters:
// class AShooterPlayerController* ForPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::IsPlayerControllerAllowedToExclusiveJoin(class AShooterPlayerController* ForPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.IsPlayerControllerAllowedToExclusiveJoin");

	AShooterGameMode_IsPlayerControllerAllowedToExclusiveJoin_Params params;
	params.ForPlayer = ForPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.IsPlayerAllowedToCheat
// ()
// Parameters:
// class AShooterPlayerController* ForPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::IsPlayerAllowedToCheat(class AShooterPlayerController* ForPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.IsPlayerAllowedToCheat");

	AShooterGameMode_IsPlayerAllowedToCheat_Params params;
	params.ForPlayer = ForPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.InitOptionString
// ()
// Parameters:
// class FString                  Commandline                    (Parm, ZeroConstructor)
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  Option                         (Parm, ZeroConstructor)

void AShooterGameMode::InitOptionString(const class FString& Commandline, const class FString& Section, const class FString& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.InitOptionString");

	AShooterGameMode_InitOptionString_Params params;
	params.Commandline = Commandline;
	params.Section = Section;
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.InitOptionInteger
// ()
// Parameters:
// class FString                  Commandline                    (Parm, ZeroConstructor)
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  Option                         (Parm, ZeroConstructor)
// int                            CurrentValue                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::InitOptionInteger(const class FString& Commandline, const class FString& Section, const class FString& Option, int CurrentValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.InitOptionInteger");

	AShooterGameMode_InitOptionInteger_Params params;
	params.Commandline = Commandline;
	params.Section = Section;
	params.Option = Option;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.InitOptionFloat
// ()
// Parameters:
// class FString                  Commandline                    (Parm, ZeroConstructor)
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  Option                         (Parm, ZeroConstructor)
// float                          CurrentValue                   (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::InitOptionFloat(const class FString& Commandline, const class FString& Section, const class FString& Option, float CurrentValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.InitOptionFloat");

	AShooterGameMode_InitOptionFloat_Params params;
	params.Commandline = Commandline;
	params.Section = Section;
	params.Option = Option;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.InitOptionBool
// ()
// Parameters:
// class FString                  Commandline                    (Parm, ZeroConstructor)
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  Option                         (Parm, ZeroConstructor)
// bool                           bDefaultValue                  (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::InitOptionBool(const class FString& Commandline, const class FString& Section, const class FString& Option, bool bDefaultValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.InitOptionBool");

	AShooterGameMode_InitOptionBool_Params params;
	params.Commandline = Commandline;
	params.Section = Section;
	params.Option = Option;
	params.bDefaultValue = bDefaultValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.IncrementNumDeaths
// ()
// Parameters:
// class FString                  PlayerDataID                   (Parm, ZeroConstructor)

void AShooterGameMode::IncrementNumDeaths(const class FString& PlayerDataID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.IncrementNumDeaths");

	AShooterGameMode_IncrementNumDeaths_Params params;
	params.PlayerDataID = PlayerDataID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.HandleNewPlayer
// ()
// Parameters:
// class AShooterPlayerController* NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalPlayerData*       PlayerData                     (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       PlayerCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFromLogin                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::HandleNewPlayer(class AShooterPlayerController* NewPlayer, class UPrimalPlayerData* PlayerData, class AShooterCharacter* PlayerCharacter, bool bIsFromLogin)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.HandleNewPlayer");

	AShooterGameMode_HandleNewPlayer_Params params;
	params.NewPlayer = NewPlayer;
	params.PlayerData = PlayerData;
	params.PlayerCharacter = PlayerCharacter;
	params.bIsFromLogin = bIsFromLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetTribeDataBlueprint
// ()
// Parameters:
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FTribeData              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTribeData AShooterGameMode::GetTribeDataBlueprint(int TribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetTribeDataBlueprint");

	AShooterGameMode_GetTribeDataBlueprint_Params params;
	params.TribeID = TribeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetStringOption
// ()
// Parameters:
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  OptionName                     (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterGameMode::GetStringOption(const class FString& Section, const class FString& OptionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetStringOption");

	AShooterGameMode_GetStringOption_Params params;
	params.Section = Section;
	params.OptionName = OptionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetSessionTimeString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterGameMode::GetSessionTimeString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetSessionTimeString");

	AShooterGameMode_GetSessionTimeString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetServerSettingsFloat
// ()
// Parameters:
// class FString                  KeyValue                       (Parm, ZeroConstructor)
// float                          OutFloat                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::GetServerSettingsFloat(const class FString& KeyValue, float* OutFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetServerSettingsFloat");

	AShooterGameMode_GetServerSettingsFloat_Params params;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFloat != nullptr)
		*OutFloat = params.OutFloat;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetServerName
// ()
// Parameters:
// bool                           bNumbersAndLettersOnly         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterGameMode::GetServerName(bool bNumbersAndLettersOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetServerName");

	AShooterGameMode_GetServerName_Params params;
	params.bNumbersAndLettersOnly = bNumbersAndLettersOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetPlayerData
// ()
// Parameters:
// class FString                  PlayerDataID                   (Parm, ZeroConstructor)
// class UPrimalPlayerData*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalPlayerData* AShooterGameMode::GetPlayerData(const class FString& PlayerDataID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetPlayerData");

	AShooterGameMode_GetPlayerData_Params params;
	params.PlayerDataID = PlayerDataID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetOverlappingDinoCharactersOfTeamAndClass
// ()
// Parameters:
// struct FVector                 AtLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          OverlapRange                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            DinoTeam                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bExactClassMatch               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreClass                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalDinoCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APrimalDinoCharacter*> AShooterGameMode::GetOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int DinoTeam, bool bExactClassMatch, bool bIgnoreClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetOverlappingDinoCharactersOfTeamAndClass");

	AShooterGameMode_GetOverlappingDinoCharactersOfTeamAndClass_Params params;
	params.AtLocation = AtLocation;
	params.OverlapRange = OverlapRange;
	params.DinoClass = DinoClass;
	params.DinoTeam = DinoTeam;
	params.bExactClassMatch = bExactClassMatch;
	params.bIgnoreClass = bIgnoreClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetNumDeaths
// ()
// Parameters:
// class FString                  PlayerDataID                   (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterGameMode::GetNumDeaths(const class FString& PlayerDataID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetNumDeaths");

	AShooterGameMode_GetNumDeaths_Params params;
	params.PlayerDataID = PlayerDataID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetNumberOfLivePlayersOnTribe
// ()
// Parameters:
// class FString                  TribeName                      (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterGameMode::GetNumberOfLivePlayersOnTribe(const class FString& TribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetNumberOfLivePlayersOnTribe");

	AShooterGameMode_GetNumberOfLivePlayersOnTribe_Params params;
	params.TribeName = TribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetLaunchOptionFloat
// ()
// Parameters:
// class FString                  LaunchOptionKey                (Parm, ZeroConstructor)
// float                          ReturnVal                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::GetLaunchOptionFloat(const class FString& LaunchOptionKey, float* ReturnVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetLaunchOptionFloat");

	AShooterGameMode_GetLaunchOptionFloat_Params params;
	params.LaunchOptionKey = LaunchOptionKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ReturnVal != nullptr)
		*ReturnVal = params.ReturnVal;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetIntOptionIni
// ()
// Parameters:
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  OptionName                     (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterGameMode::GetIntOptionIni(const class FString& Section, const class FString& OptionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetIntOptionIni");

	AShooterGameMode_GetIntOptionIni_Params params;
	params.Section = Section;
	params.OptionName = OptionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetFloatOptionIni
// ()
// Parameters:
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  OptionName                     (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterGameMode::GetFloatOptionIni(const class FString& Section, const class FString& OptionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetFloatOptionIni");

	AShooterGameMode_GetFloatOptionIni_Params params;
	params.Section = Section;
	params.OptionName = OptionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.GetBoolOptionIni
// ()
// Parameters:
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  OptionName                     (Parm, ZeroConstructor)
// bool                           bDefaultValue                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::GetBoolOptionIni(const class FString& Section, const class FString& OptionName, bool bDefaultValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.GetBoolOptionIni");

	AShooterGameMode_GetBoolOptionIni_Params params;
	params.Section = Section;
	params.OptionName = OptionName;
	params.bDefaultValue = bDefaultValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.ForceRepopulateFoliageAtPoint
// ()
// Parameters:
// struct FVector                 AtPoint                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxRangeFromPoint              (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxNumFoliages                 (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  RepopulatedEmitter             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StructureDownTraceVector       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 StructureUpTraceVector         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bDontCheckForOverlaps          (Parm, ZeroConstructor, IsPlainOldData)
// int                            TriggeredByTeamID              (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::ForceRepopulateFoliageAtPoint(const struct FVector& AtPoint, float MaxRangeFromPoint, int MaxNumFoliages, class UClass* RepopulatedEmitter, const struct FVector& StructureDownTraceVector, const struct FVector& StructureUpTraceVector, bool bDontCheckForOverlaps, int TriggeredByTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.ForceRepopulateFoliageAtPoint");

	AShooterGameMode_ForceRepopulateFoliageAtPoint_Params params;
	params.AtPoint = AtPoint;
	params.MaxRangeFromPoint = MaxRangeFromPoint;
	params.MaxNumFoliages = MaxNumFoliages;
	params.RepopulatedEmitter = RepopulatedEmitter;
	params.StructureDownTraceVector = StructureDownTraceVector;
	params.StructureUpTraceVector = StructureUpTraceVector;
	params.bDontCheckForOverlaps = bDontCheckForOverlaps;
	params.TriggeredByTeamID = TriggeredByTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.ForceCreateTribe
// ()
// Parameters:
// class FString                  TribeName                      (Parm, ZeroConstructor)
// int                            TeamOverride                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterGameMode::ForceCreateTribe(const class FString& TribeName, int TeamOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.ForceCreateTribe");

	AShooterGameMode_ForceCreateTribe_Params params;
	params.TribeName = TribeName;
	params.TeamOverride = TeamOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.ForceAddPlayerToTribe
// ()
// Parameters:
// class AShooterPlayerState*     ForPlayerState                 (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  TribeName                      (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterGameMode::ForceAddPlayerToTribe(class AShooterPlayerState* ForPlayerState, const class FString& TribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.ForceAddPlayerToTribe");

	AShooterGameMode_ForceAddPlayerToTribe_Params params;
	params.ForPlayerState = ForPlayerState;
	params.TribeName = TribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.CountOverlappingDinoCharactersOfTeamAndClass
// ()
// Parameters:
// struct FVector                 AtLocation                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          OverlapRange                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DinoClass                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            DinoTeam                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bExactClassMatch               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreClass                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterGameMode::CountOverlappingDinoCharactersOfTeamAndClass(const struct FVector& AtLocation, float OverlapRange, class UClass* DinoClass, int DinoTeam, bool bExactClassMatch, bool bIgnoreClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.CountOverlappingDinoCharactersOfTeamAndClass");

	AShooterGameMode_CountOverlappingDinoCharactersOfTeamAndClass_Params params;
	params.AtLocation = AtLocation;
	params.OverlapRange = OverlapRange;
	params.DinoClass = DinoClass;
	params.DinoTeam = DinoTeam;
	params.bExactClassMatch = bExactClassMatch;
	params.bIgnoreClass = bIgnoreClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.CheckJoinInProgress
// ()
// Parameters:
// bool                           bIsFromLogin                   (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::CheckJoinInProgress(bool bIsFromLogin, class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.CheckJoinInProgress");

	AShooterGameMode_CheckJoinInProgress_Params params;
	params.bIsFromLogin = bIsFromLogin;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.BPPreSpawnedDino
// ()
// Parameters:
// class APrimalDinoCharacter*    theDino                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameMode::BPPreSpawnedDino(class APrimalDinoCharacter* theDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.BPPreSpawnedDino");

	AShooterGameMode_BPPreSpawnedDino_Params params;
	params.theDino = theDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameMode.AreTribesAllied
// ()
// Parameters:
// int                            TribeID1                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            TribeID2                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::AreTribesAllied(int TribeID1, int TribeID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.AreTribesAllied");

	AShooterGameMode_AreTribesAllied_Params params;
	params.TribeID1 = TribeID1;
	params.TribeID2 = TribeID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.AllowTaming
// ()
// Parameters:
// int                            ForTeam                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::AllowTaming(int ForTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.AllowTaming");

	AShooterGameMode_AllowTaming_Params params;
	params.ForTeam = ForTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.AllowDamage
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetingTeam1                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            TargetingTeam2                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreDamageIfAllied          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameMode::AllowDamage(class UWorld* ForWorld, int TargetingTeam1, int TargetingTeam2, bool bIgnoreDamageIfAllied)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.AllowDamage");

	AShooterGameMode_AllowDamage_Params params;
	params.ForWorld = ForWorld;
	params.TargetingTeam1 = TargetingTeam1;
	params.TargetingTeam2 = TargetingTeam2;
	params.bIgnoreDamageIfAllied = bIgnoreDamageIfAllied;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameMode.AddToTribeLog
// ()
// Parameters:
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  NewLog                         (Parm, ZeroConstructor)

void AShooterGameMode::AddToTribeLog(int TribeID, const class FString& NewLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameMode.AddToTribeLog");

	AShooterGameMode_AddToTribeLog_Params params;
	params.TribeID = TribeID;
	params.NewLog = NewLog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameMode.SaveIntToConfig
// ()
// Parameters:
// int                            IntValue                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  KeyValue                       (Parm, ZeroConstructor)

void ACustomGameMode::SaveIntToConfig(int IntValue, const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.SaveIntToConfig");

	ACustomGameMode_SaveIntToConfig_Params params;
	params.IntValue = IntValue;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameMode.SaveFloatToConfig
// ()
// Parameters:
// float                          IntValue                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  KeyValue                       (Parm, ZeroConstructor)

void ACustomGameMode::SaveFloatToConfig(float IntValue, const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.SaveFloatToConfig");

	ACustomGameMode_SaveFloatToConfig_Params params;
	params.IntValue = IntValue;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameMode.SaveBoolToConfig
// ()
// Parameters:
// bool                           IntValue                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  KeyValue                       (Parm, ZeroConstructor)

void ACustomGameMode::SaveBoolToConfig(bool IntValue, const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.SaveBoolToConfig");

	ACustomGameMode_SaveBoolToConfig_Params params;
	params.IntValue = IntValue;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameMode.OnUpdateTribeData
// ()
// Parameters:
// struct FTribeData              NewTribeData                   (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnUpdateTribeData(const struct FTribeData& NewTribeData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnUpdateTribeData");

	ACustomGameMode_OnUpdateTribeData_Params params;
	params.NewTribeData = NewTribeData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnRemoveTribe
// ()
// Parameters:
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnRemoveTribe(int TribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnRemoveTribe");

	ACustomGameMode_OnRemoveTribe_Params params;
	params.TribeID = TribeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnPlayerCanRestart
// ()
// Parameters:
// class APlayerController*       Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnPlayerCanRestart(class APlayerController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnPlayerCanRestart");

	ACustomGameMode_OnPlayerCanRestart_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnIsUsedSpawnPointStillSupported
// ()
// Parameters:
// class APlayerStart*            SpawnPoint                     (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnIsUsedSpawnPointStillSupported(class APlayerStart* SpawnPoint, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnIsUsedSpawnPointStillSupported");

	ACustomGameMode_OnIsUsedSpawnPointStillSupported_Params params;
	params.SpawnPoint = SpawnPoint;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnIsSpawnpointAllowed
// ()
// Parameters:
// class APlayerStart*            SpawnPoint                     (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             Player                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnIsSpawnpointAllowed(class APlayerStart* SpawnPoint, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnIsSpawnpointAllowed");

	ACustomGameMode_OnIsSpawnpointAllowed_Params params;
	params.SpawnPoint = SpawnPoint;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnInitOptionEvent
// ()
// Parameters:
// class FString                  Options                        (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnInitOptionEvent(const class FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnInitOptionEvent");

	ACustomGameMode_OnInitOptionEvent_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnInitGameState
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnInitGameState()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnInitGameState");

	ACustomGameMode_OnInitGameState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnInitGame
// ()
// Parameters:
// class FString                  Mapname                        (Parm, ZeroConstructor)
// class FString                  Options                        (Parm, ZeroConstructor)
// class FString                  ErrorMessage                   (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnInitGame(const class FString& Mapname, const class FString& Options, class FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnInitGame");

	ACustomGameMode_OnInitGame_Params params;
	params.Mapname = Mapname;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnHandleLeavingMap
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnHandleLeavingMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnHandleLeavingMap");

	ACustomGameMode_OnHandleLeavingMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnDoGameCommand
// ()
// Parameters:
// class FString                  TheCommand                     (Parm, ZeroConstructor)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString ACustomGameMode::OnDoGameCommand(const class FString& TheCommand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnDoGameCommand");

	ACustomGameMode_OnDoGameCommand_Params params;
	params.TheCommand = TheCommand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnAllowRenameTribe
// ()
// Parameters:
// class AShooterPlayerState*     ForPlayerState                 (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  TribeName                      (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnAllowRenameTribe(class AShooterPlayerState* ForPlayerState, const class FString& TribeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnAllowRenameTribe");

	ACustomGameMode_OnAllowRenameTribe_Params params;
	params.ForPlayerState = ForPlayerState;
	params.TribeName = TribeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnAllowNotifyRemotePlayerDeath
// ()
// Parameters:
// class AShooterCharacter*       forChar                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnAllowNotifyRemotePlayerDeath(class AShooterCharacter* forChar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnAllowNotifyRemotePlayerDeath");

	ACustomGameMode_OnAllowNotifyRemotePlayerDeath_Params params;
	params.forChar = forChar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnAllowModifyStatusValue
// ()
// Parameters:
// class UPrimalCharacterStatusComponent* forComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TEnumAsByte<EPrimalCharacterStatusValue> ValueType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          amount                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnAllowModifyStatusValue(class UPrimalCharacterStatusComponent* forComp, TEnumAsByte<EPrimalCharacterStatusValue> ValueType, float amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnAllowModifyStatusValue");

	ACustomGameMode_OnAllowModifyStatusValue_Params params;
	params.forComp = forComp;
	params.ValueType = ValueType;
	params.amount = amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnAllowClearTribe
// ()
// Parameters:
// class AShooterPlayerState*     ForPlayerState                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnAllowClearTribe(class AShooterPlayerState* ForPlayerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnAllowClearTribe");

	ACustomGameMode_OnAllowClearTribe_Params params;
	params.ForPlayerState = ForPlayerState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnAllowAddXP
// ()
// Parameters:
// class UPrimalCharacterStatusComponent* forComp                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnAllowAddXP(class UPrimalCharacterStatusComponent* forComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnAllowAddXP");

	ACustomGameMode_OnAllowAddXP_Params params;
	params.forComp = forComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnAllowAddToTribe
// ()
// Parameters:
// class AShooterPlayerState*     ForPlayerState                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FTribeData              MyNewTribe                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::OnAllowAddToTribe(class AShooterPlayerState* ForPlayerState, const struct FTribeData& MyNewTribe)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnAllowAddToTribe");

	ACustomGameMode_OnAllowAddToTribe_Params params;
	params.ForPlayerState = ForPlayerState;
	params.MyNewTribe = MyNewTribe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.OnAdjustDamage
// ()
// Parameters:
// class AActor*                  Victim                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DefaultDamage                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AController*             EventInstigator                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACustomGameMode::OnAdjustDamage(class AActor* Victim, float DefaultDamage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.OnAdjustDamage");

	ACustomGameMode_OnAdjustDamage_Params params;
	params.Victim = Victim;
	params.DefaultDamage = DefaultDamage;
	params.DamageEvent = DamageEvent;
	params.EventInstigator = EventInstigator;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.MakeTribeData
// ()
// Parameters:
// class FString                  TribeName                      (Parm, OutParm, ZeroConstructor)
// int                            OwnerPlayerDataID              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            TribeID                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          MembersPlayerName              (Parm, OutParm, ZeroConstructor)
// TArray<int>                    MembersPlayerDataID            (Parm, OutParm, ZeroConstructor)
// TArray<int>                    TribeAdmins                    (Parm, OutParm, ZeroConstructor)
// bool                           bSetGovernment                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FTribeGovernment        TribeGovernment                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<struct FPrimalPlayerCharacterConfigStructReplicated> MembersConfigs                 (Parm, OutParm, ZeroConstructor)
// struct FTribeData              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FTribeData ACustomGameMode::MakeTribeData(class FString* TribeName, int* OwnerPlayerDataID, int* TribeID, TArray<class FString>* MembersPlayerName, TArray<int>* MembersPlayerDataID, TArray<int>* TribeAdmins, bool* bSetGovernment, struct FTribeGovernment* TribeGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.MakeTribeData");

	ACustomGameMode_MakeTribeData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TribeName != nullptr)
		*TribeName = params.TribeName;
	if (OwnerPlayerDataID != nullptr)
		*OwnerPlayerDataID = params.OwnerPlayerDataID;
	if (TribeID != nullptr)
		*TribeID = params.TribeID;
	if (MembersPlayerName != nullptr)
		*MembersPlayerName = params.MembersPlayerName;
	if (MembersPlayerDataID != nullptr)
		*MembersPlayerDataID = params.MembersPlayerDataID;
	if (TribeAdmins != nullptr)
		*TribeAdmins = params.TribeAdmins;
	if (bSetGovernment != nullptr)
		*bSetGovernment = params.bSetGovernment;
	if (TribeGovernment != nullptr)
		*TribeGovernment = params.TribeGovernment;
	if (MembersConfigs != nullptr)
		*MembersConfigs = params.MembersConfigs;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.KickPlayer
// ()
// Parameters:
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)

void ACustomGameMode::KickPlayer(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.KickPlayer");

	ACustomGameMode_KickPlayer_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameMode.IsInAllowedToCheatList
// ()
// Parameters:
// class APlayerController*       NewPlayer                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::IsInAllowedToCheatList(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.IsInAllowedToCheatList");

	ACustomGameMode_IsInAllowedToCheatList_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.InitOptionFloatToINI
// ()
// Parameters:
// class FString                  Options                        (Parm, ZeroConstructor)
// float                          FloatValue                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  KeyValue                       (Parm, ZeroConstructor)

void ACustomGameMode::InitOptionFloatToINI(const class FString& Options, float FloatValue, const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.InitOptionFloatToINI");

	ACustomGameMode_InitOptionFloatToINI_Params params;
	params.Options = Options;
	params.FloatValue = FloatValue;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameMode.GetValueFromINI
// ()
// Parameters:
// class FString                  KeyValue                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACustomGameMode::GetValueFromINI(const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.GetValueFromINI");

	ACustomGameMode_GetValueFromINI_Params params;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.GetIntValueFromINI
// ()
// Parameters:
// class FString                  KeyValue                       (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ACustomGameMode::GetIntValueFromINI(const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.GetIntValueFromINI");

	ACustomGameMode_GetIntValueFromINI_Params params;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.GetIniFloatValue
// ()
// Parameters:
// class FString                  Section                        (Parm, ZeroConstructor)
// class FString                  KeyValue                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACustomGameMode::GetIniFloatValue(const class FString& Section, const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.GetIniFloatValue");

	ACustomGameMode_GetIniFloatValue_Params params;
	params.Section = Section;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.GetFloatValueFromINI
// ()
// Parameters:
// class FString                  KeyValue                       (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ACustomGameMode::GetFloatValueFromINI(const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.GetFloatValueFromINI");

	ACustomGameMode_GetFloatValueFromINI_Params params;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.GetBoolValueFromINI
// ()
// Parameters:
// class FString                  KeyValue                       (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::GetBoolValueFromINI(const class FString& KeyValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.GetBoolValueFromINI");

	ACustomGameMode_GetBoolValueFromINI_Params params;
	params.KeyValue = KeyValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.CleanUpSotfNotificationManager
// ()

void ACustomGameMode::CleanUpSotfNotificationManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.CleanUpSotfNotificationManager");

	ACustomGameMode_CleanUpSotfNotificationManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameMode.CheckForCommand
// ()
// Parameters:
// class FString                  CommandName                    (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameMode::CheckForCommand(const class FString& CommandName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.CheckForCommand");

	ACustomGameMode_CheckForCommand_Params params;
	params.CommandName = CommandName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameMode.BreakTribeData
// ()
// Parameters:
// struct FTribeData              Data                           (ConstParm, Parm)
// class FString                  TribeName                      (Parm, OutParm, ZeroConstructor)
// int                            OwnerPlayerDataID              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            TribeID                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          MembersPlayerName              (Parm, OutParm, ZeroConstructor)
// TArray<int>                    MembersPlayerDataID            (Parm, OutParm, ZeroConstructor)
// TArray<int>                    TribeAdmins                    (Parm, OutParm, ZeroConstructor)
// bool                           bSetGovernment                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FTribeGovernment        TribeGovernment                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<struct FPrimalPlayerCharacterConfigStructReplicated> MembersConfigs                 (Parm, OutParm, ZeroConstructor)

void ACustomGameMode::BreakTribeData(const struct FTribeData& Data, class FString* TribeName, int* OwnerPlayerDataID, int* TribeID, TArray<class FString>* MembersPlayerName, TArray<int>* MembersPlayerDataID, TArray<int>* TribeAdmins, bool* bSetGovernment, struct FTribeGovernment* TribeGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameMode.BreakTribeData");

	ACustomGameMode_BreakTribeData_Params params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TribeName != nullptr)
		*TribeName = params.TribeName;
	if (OwnerPlayerDataID != nullptr)
		*OwnerPlayerDataID = params.OwnerPlayerDataID;
	if (TribeID != nullptr)
		*TribeID = params.TribeID;
	if (MembersPlayerName != nullptr)
		*MembersPlayerName = params.MembersPlayerName;
	if (MembersPlayerDataID != nullptr)
		*MembersPlayerDataID = params.MembersPlayerDataID;
	if (TribeAdmins != nullptr)
		*TribeAdmins = params.TribeAdmins;
	if (bSetGovernment != nullptr)
		*bSetGovernment = params.bSetGovernment;
	if (TribeGovernment != nullptr)
		*TribeGovernment = params.TribeGovernment;
	if (MembersConfigs != nullptr)
		*MembersConfigs = params.MembersConfigs;
}


// Function ShooterGame.ShooterGameState.OnRep_SupportedSpawnRegions
// ()

void AShooterGameState::OnRep_SupportedSpawnRegions()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.OnRep_SupportedSpawnRegions");

	AShooterGameState_OnRep_SupportedSpawnRegions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.OnRep_ReplicateLocalizedChatRadius
// ()

void AShooterGameState::OnRep_ReplicateLocalizedChatRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.OnRep_ReplicateLocalizedChatRadius");

	AShooterGameState_OnRep_ReplicateLocalizedChatRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.OnHTTPPostResponse__DelegateSignature
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  StringResult                   (Parm, ZeroConstructor)

void AShooterGameState::OnHTTPPostResponse__DelegateSignature(bool bSuccess, const class FString& StringResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.OnHTTPPostResponse__DelegateSignature");

	AShooterGameState_OnHTTPPostResponse__DelegateSignature_Params params;
	params.bSuccess = bSuccess;
	params.StringResult = StringResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.OnHTTPGetProcessed__DelegateSignature
// ()
// Parameters:
// bool                           bSuccess                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  StringResult                   (Parm, ZeroConstructor)

void AShooterGameState::OnHTTPGetProcessed__DelegateSignature(bool bSuccess, const class FString& StringResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.OnHTTPGetProcessed__DelegateSignature");

	AShooterGameState_OnHTTPGetProcessed__DelegateSignature_Params params;
	params.bSuccess = bSuccess;
	params.StringResult = StringResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.NetUpdateOfflinePvPLiveTeams
// ()
// Parameters:
// TArray<int>                    NewPreventOfflinePvPLiveTeams  (ConstParm, Parm, ZeroConstructor)

void AShooterGameState::NetUpdateOfflinePvPLiveTeams(TArray<int> NewPreventOfflinePvPLiveTeams)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.NetUpdateOfflinePvPLiveTeams");

	AShooterGameState_NetUpdateOfflinePvPLiveTeams_Params params;
	params.NewPreventOfflinePvPLiveTeams = NewPreventOfflinePvPLiveTeams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.NetUpdateOfflinePvPExpiringTeams
// ()
// Parameters:
// TArray<int>                    NewPreventOfflinePvPExpiringTeams (ConstParm, Parm, ZeroConstructor)
// TArray<double>                 NewPreventOfflinePvPExpiringTimes (ConstParm, Parm, ZeroConstructor)

void AShooterGameState::NetUpdateOfflinePvPExpiringTeams(TArray<int> NewPreventOfflinePvPExpiringTeams, TArray<double> NewPreventOfflinePvPExpiringTimes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.NetUpdateOfflinePvPExpiringTeams");

	AShooterGameState_NetUpdateOfflinePvPExpiringTeams_Params params;
	params.NewPreventOfflinePvPExpiringTeams = NewPreventOfflinePvPExpiringTeams;
	params.NewPreventOfflinePvPExpiringTimes = NewPreventOfflinePvPExpiringTimes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.NetAddFloatingText
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FloatingTextString             (Parm, ZeroConstructor)
// struct FColor                  FloatingTextColor              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleX                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleY                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextLifeSpan                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TextVelocity                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinScale                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeInTime                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            OnlySendToTeamID               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameState::NetAddFloatingText(const struct FVector& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime, int OnlySendToTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.NetAddFloatingText");

	AShooterGameState_NetAddFloatingText_Params params;
	params.AtLocation = AtLocation;
	params.FloatingTextString = FloatingTextString;
	params.FloatingTextColor = FloatingTextColor;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.TextLifeSpan = TextLifeSpan;
	params.TextVelocity = TextVelocity;
	params.MinScale = MinScale;
	params.FadeInTime = FadeInTime;
	params.FadeOutTime = FadeOutTime;
	params.OnlySendToTeamID = OnlySendToTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.NetAddFloatingDamageText
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            FromTeamID                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            OnlySendToTeamID               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameState::NetAddFloatingDamageText(const struct FVector& AtLocation, int DamageAmount, int FromTeamID, int OnlySendToTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.NetAddFloatingDamageText");

	AShooterGameState_NetAddFloatingDamageText_Params params;
	params.AtLocation = AtLocation;
	params.DamageAmount = DamageAmount;
	params.FromTeamID = FromTeamID;
	params.OnlySendToTeamID = OnlySendToTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.IsTeamIDInvincible
// ()
// Parameters:
// int                            TargetingTeamID                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInvincibleOnlyWhenOffline     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameState::IsTeamIDInvincible(int TargetingTeamID, bool bInvincibleOnlyWhenOffline)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.IsTeamIDInvincible");

	AShooterGameState_IsTeamIDInvincible_Params params;
	params.TargetingTeamID = TargetingTeamID;
	params.bInvincibleOnlyWhenOffline = bInvincibleOnlyWhenOffline;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.IsEngramClassHidden
// ()
// Parameters:
// class UClass*                  ForItemClass                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameState::IsEngramClassHidden(class UClass* ForItemClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.IsEngramClassHidden");

	AShooterGameState_IsEngramClassHidden_Params params;
	params.ForItemClass = ForItemClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.HTTPPostRequest
// ()
// Parameters:
// class FString                  InURL                          (Parm, ZeroConstructor)
// class FString                  Content                        (Parm, ZeroConstructor)

void AShooterGameState::HTTPPostRequest(const class FString& InURL, const class FString& Content)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.HTTPPostRequest");

	AShooterGameState_HTTPPostRequest_Params params;
	params.InURL = InURL;
	params.Content = Content;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.HTTPGetRequest
// ()
// Parameters:
// class FString                  InURL                          (Parm, ZeroConstructor)

void AShooterGameState::HTTPGetRequest(const class FString& InURL)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.HTTPGetRequest");

	AShooterGameState_HTTPGetRequest_Params params;
	params.InURL = InURL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.GetOfflineDamagePreventionTime
// ()
// Parameters:
// int                            TargetingTeamID                (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double AShooterGameState::GetOfflineDamagePreventionTime(int TargetingTeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.GetOfflineDamagePreventionTime");

	AShooterGameState_GetOfflineDamagePreventionTime_Params params;
	params.TargetingTeamID = TargetingTeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.GetNetworkTimeDelta
// ()
// Parameters:
// class AShooterGameState*       GameState                      (Parm, ZeroConstructor, IsPlainOldData)
// double                         netTime                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTimeUntil                     (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double AShooterGameState::GetNetworkTimeDelta(class AShooterGameState* GameState, double netTime, bool bTimeUntil)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.GetNetworkTimeDelta");

	AShooterGameState_GetNetworkTimeDelta_Params params;
	params.GameState = GameState;
	params.netTime = netTime;
	params.bTimeUntil = bTimeUntil;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.GetItemMaxQuantityOverride
// ()
// Parameters:
// class UClass*                  ForClass                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FMaxItemQuantityOverride OutMaxQuantity                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameState::GetItemMaxQuantityOverride(class UClass* ForClass, struct FMaxItemQuantityOverride* OutMaxQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.GetItemMaxQuantityOverride");

	AShooterGameState_GetItemMaxQuantityOverride_Params params;
	params.ForClass = ForClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMaxQuantity != nullptr)
		*OutMaxQuantity = params.OutMaxQuantity;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.GetIniArray
// ()
// Parameters:
// class FString                  SectionName                    (Parm, ZeroConstructor)
// TArray<struct FGameIniData>    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FGameIniData> AShooterGameState::GetIniArray(const class FString& SectionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.GetIniArray");

	AShooterGameState_GetIniArray_Params params;
	params.SectionName = SectionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.GetDayTimeString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterGameState::GetDayTimeString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.GetDayTimeString");

	AShooterGameState_GetDayTimeString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.GetCleanServerSessionName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterGameState::GetCleanServerSessionName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.GetCleanServerSessionName");

	AShooterGameState_GetCleanServerSessionName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.DisplayWelcomeUI
// ()

void AShooterGameState::DisplayWelcomeUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.DisplayWelcomeUI");

	AShooterGameState_DisplayWelcomeUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.BaseSpawnBuffAndAttachToCharacter
// ()
// Parameters:
// class UClass*                  Buff                           (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        PrimalCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ExperiencePoints               (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalBuff*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalBuff* AShooterGameState::BaseSpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseSpawnBuffAndAttachToCharacter");

	AShooterGameState_BaseSpawnBuffAndAttachToCharacter_Params params;
	params.Buff = Buff;
	params.PrimalCharacter = PrimalCharacter;
	params.ExperiencePoints = ExperiencePoints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseProjectWorldToScreenPosition
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class APlayerController*       thePC                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D AShooterGameState::BaseProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseProjectWorldToScreenPosition");

	AShooterGameState_BaseProjectWorldToScreenPosition_Params params;
	params.WorldLocation = WorldLocation;
	params.thePC = thePC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseIsTribeID
// ()
// Parameters:
// int                            TeamId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameState::BaseIsTribeID(int TeamId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseIsTribeID");

	AShooterGameState_BaseIsTribeID_Params params;
	params.TeamId = TeamId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseGetCustomActors
// ()
// Parameters:
// struct FName                   SearchCustomTag                (Parm, ZeroConstructor, IsPlainOldData)
// class ACustomActorList*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACustomActorList* AShooterGameState::BaseGetCustomActors(const struct FName& SearchCustomTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseGetCustomActors");

	AShooterGameState_BaseGetCustomActors_Params params;
	params.SearchCustomTag = SearchCustomTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseGetAllShooterControllers
// ()
// Parameters:
// TArray<class AShooterPlayerController*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterPlayerController*> AShooterGameState::BaseGetAllShooterControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseGetAllShooterControllers");

	AShooterGameState_BaseGetAllShooterControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseGetAllShooterCharactersOfTeam
// ()
// Parameters:
// int                            KillerTeam                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AShooterCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterCharacter*> AShooterGameState::BaseGetAllShooterCharactersOfTeam(int KillerTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseGetAllShooterCharactersOfTeam");

	AShooterGameState_BaseGetAllShooterCharactersOfTeam_Params params;
	params.KillerTeam = KillerTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseGetAllShooterCharacters
// ()
// Parameters:
// TArray<class AShooterCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterCharacter*> AShooterGameState::BaseGetAllShooterCharacters()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseGetAllShooterCharacters");

	AShooterGameState_BaseGetAllShooterCharacters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseGetAllDinoCharactersOfTeam
// ()
// Parameters:
// int                            KillerTeam                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalDinoCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APrimalDinoCharacter*> AShooterGameState::BaseGetAllDinoCharactersOfTeam(int KillerTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseGetAllDinoCharactersOfTeam");

	AShooterGameState_BaseGetAllDinoCharactersOfTeam_Params params;
	params.KillerTeam = KillerTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.BaseDrawTileOnCanvas
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                Tex                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          XL                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          YL                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          U                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          UL                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          VL                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameState::BaseDrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.BaseDrawTileOnCanvas");

	AShooterGameState_BaseDrawTileOnCanvas_Params params;
	params.HUD = HUD;
	params.Tex = Tex;
	params.X = X;
	params.Y = Y;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.DrawColor = DrawColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterGameState.AllowDownloadDino
// ()
// Parameters:
// class UClass*                  TheDinoClass                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameState::AllowDownloadDino(class UClass* TheDinoClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.AllowDownloadDino");

	AShooterGameState_AllowDownloadDino_Params params;
	params.TheDinoClass = TheDinoClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.AllowDinoTame
// ()
// Parameters:
// class APrimalDinoCharacter*    dinoChar                       (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameState::AllowDinoTame(class APrimalDinoCharacter* dinoChar, class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.AllowDinoTame");

	AShooterGameState_AllowDinoTame_Params params;
	params.dinoChar = dinoChar;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.AllowDinoClassTame
// ()
// Parameters:
// class UClass*                  DinoCharClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterGameState::AllowDinoClassTame(class UClass* DinoCharClass, class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.AllowDinoClassTame");

	AShooterGameState_AllowDinoClassTame_Params params;
	params.DinoCharClass = DinoCharClass;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameState.AddFloatingText
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  FloatingTextString             (Parm, ZeroConstructor)
// struct FColor                  FloatingTextColor              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleX                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ScaleY                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          TextLifeSpan                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TextVelocity                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinScale                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeInTime                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          FadeOutTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterGameState::AddFloatingText(const struct FVector& AtLocation, const class FString& FloatingTextString, const struct FColor& FloatingTextColor, float ScaleX, float ScaleY, float TextLifeSpan, const struct FVector& TextVelocity, float MinScale, float FadeInTime, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameState.AddFloatingText");

	AShooterGameState_AddFloatingText_Params params;
	params.AtLocation = AtLocation;
	params.FloatingTextString = FloatingTextString;
	params.FloatingTextColor = FloatingTextColor;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.TextLifeSpan = TextLifeSpan;
	params.TextVelocity = TextVelocity;
	params.MinScale = MinScale;
	params.FadeInTime = FadeInTime;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.SpawnBuffAndAttachToCharacter
// ()
// Parameters:
// class UClass*                  Buff                           (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        PrimalCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// float                          ExperiencePoints               (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalBuff*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalBuff* ACustomGameState::SpawnBuffAndAttachToCharacter(class UClass* Buff, class APrimalCharacter* PrimalCharacter, float ExperiencePoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.SpawnBuffAndAttachToCharacter");

	ACustomGameState_SpawnBuffAndAttachToCharacter_Params params;
	params.Buff = Buff;
	params.PrimalCharacter = PrimalCharacter;
	params.ExperiencePoints = ExperiencePoints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.SetActionReportItem
// ()
// Parameters:
// struct FActionReportItem       Data                           (Parm, OutParm)
// class FString                  PlayerName                     (Parm, ZeroConstructor)
// class FString                  TribeName                      (Parm, ZeroConstructor)
// class FString                  TimeOfDeath                    (Parm, ZeroConstructor)
// class FString                  LevelOfDeath                   (Parm, ZeroConstructor)
// class FString                  DeathMessage                   (Parm, ZeroConstructor)

void ACustomGameState::SetActionReportItem(const class FString& PlayerName, const class FString& TribeName, const class FString& TimeOfDeath, const class FString& LevelOfDeath, const class FString& DeathMessage, struct FActionReportItem* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.SetActionReportItem");

	ACustomGameState_SetActionReportItem_Params params;
	params.PlayerName = PlayerName;
	params.TribeName = TribeName;
	params.TimeOfDeath = TimeOfDeath;
	params.LevelOfDeath = LevelOfDeath;
	params.DeathMessage = DeathMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function ShooterGame.CustomGameState.ProjectWorldToScreenPosition
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class APlayerController*       thePC                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D ACustomGameState::ProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.ProjectWorldToScreenPosition");

	ACustomGameState_ProjectWorldToScreenPosition_Params params;
	params.WorldLocation = WorldLocation;
	params.thePC = thePC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnSetHudEvent
// ()

void ACustomGameState::OnSetHudEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnSetHudEvent");

	ACustomGameState_OnSetHudEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.OnOverrideDynamicMusic
// ()
// Parameters:
// class APrimalCharacter*        forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// class USoundBase*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class USoundBase* ACustomGameState::OnOverrideDynamicMusic(class APrimalCharacter* forCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnOverrideDynamicMusic");

	ACustomGameState_OnOverrideDynamicMusic_Params params;
	params.forCharacter = forCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnNotifyPlayerDied
// ()
// Parameters:
// class AShooterCharacter*       theShooterChar                 (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* prevController                 (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)

void ACustomGameState::OnNotifyPlayerDied(class AShooterCharacter* theShooterChar, class AShooterPlayerController* prevController, class APawn* InstigatingPawn, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnNotifyPlayerDied");

	ACustomGameState_OnNotifyPlayerDied_Params params;
	params.theShooterChar = theShooterChar;
	params.prevController = prevController;
	params.InstigatingPawn = InstigatingPawn;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.OnHasGameModeMatchStarted
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnHasGameModeMatchStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnHasGameModeMatchStarted");

	ACustomGameState_OnHasGameModeMatchStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnHandleActorEvent
// ()
// Parameters:
// class AActor*                  forActor                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   NameParam                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 VecParam                       (Parm, ZeroConstructor, IsPlainOldData)

void ACustomGameState::OnHandleActorEvent(class AActor* forActor, const struct FName& NameParam, const struct FVector& VecParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnHandleActorEvent");

	ACustomGameState_OnHandleActorEvent_Params params;
	params.forActor = forActor;
	params.NameParam = NameParam;
	params.VecParam = VecParam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.OnForceOccludedFloatingHUD
// ()
// Parameters:
// class AActor*                  AnActor                        (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnForceOccludedFloatingHUD(class AActor* AnActor, class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnForceOccludedFloatingHUD");

	ACustomGameState_OnForceOccludedFloatingHUD_Params params;
	params.AnActor = AnActor;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnExtraShooterCharacterTick
// ()
// Parameters:
// class AShooterCharacter*       forChar                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void ACustomGameState::OnExtraShooterCharacterTick(class AShooterCharacter* forChar, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnExtraShooterCharacterTick");

	ACustomGameState_OnExtraShooterCharacterTick_Params params;
	params.forChar = forChar;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.OnDrawingHUDNotifications
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnDrawingHUDNotifications(class AShooterHUD* HUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnDrawingHUDNotifications");

	ACustomGameState_OnDrawingHUDNotifications_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnDrawHUD
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnDrawHUD(class AShooterHUD* HUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnDrawHUD");

	ACustomGameState_OnDrawHUD_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnDrawExtraPlayerFloatingHUD
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       theShooterChar                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLoc                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void ACustomGameState::OnDrawExtraPlayerFloatingHUD(class AShooterHUD* HUD, class AShooterCharacter* theShooterChar, const struct FVector& AtLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnDrawExtraPlayerFloatingHUD");

	ACustomGameState_OnDrawExtraPlayerFloatingHUD_Params params;
	params.HUD = HUD;
	params.theShooterChar = theShooterChar;
	params.AtLoc = AtLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.OnCheckGameStateIfCanRespawn
// ()
// Parameters:
// class APlayerController*       ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnCheckGameStateIfCanRespawn(class APlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnCheckGameStateIfCanRespawn");

	ACustomGameState_OnCheckGameStateIfCanRespawn_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowTribeManager
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowTribeManager(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowTribeManager");

	ACustomGameState_OnAllowTribeManager_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowTribeManagement
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowTribeManagement()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowTribeManagement");

	ACustomGameState_OnAllowTribeManagement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowStartSupplyCrateSpawns
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowStartSupplyCrateSpawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowStartSupplyCrateSpawns");

	ACustomGameState_OnAllowStartSupplyCrateSpawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowShowPlayerHudUI
// ()
// Parameters:
// class APrimalCharacter*        ForPawn                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowShowPlayerHudUI(class APrimalCharacter* ForPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowShowPlayerHudUI");

	ACustomGameState_OnAllowShowPlayerHudUI_Params params;
	params.ForPawn = ForPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowRemoveItems
// ()
// Parameters:
// class UPrimalInventoryComponent* ForInv                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AShooterPlayerController* PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalItem*             anItemToTransfer               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowRemoveItems(class UPrimalInventoryComponent* ForInv, class AShooterPlayerController* PC, class UPrimalItem* anItemToTransfer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowRemoveItems");

	ACustomGameState_OnAllowRemoveItems_Params params;
	params.ForInv = ForInv;
	params.PC = PC;
	params.anItemToTransfer = anItemToTransfer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowPopUps
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowPopUps()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowPopUps");

	ACustomGameState_OnAllowPopUps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowOrbitCamera
// ()
// Parameters:
// class APrimalCharacter*        forCharacter                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowOrbitCamera(class APrimalCharacter* forCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowOrbitCamera");

	ACustomGameState_OnAllowOrbitCamera_Params params;
	params.forCharacter = forCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowFastTravel
// ()
// Parameters:
// class APrimalStructureBed*     ForBed                         (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowFastTravel(class APrimalStructureBed* ForBed, class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowFastTravel");

	ACustomGameState_OnAllowFastTravel_Params params;
	params.ForBed = ForBed;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowDaytimeTransitionSounds
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowDaytimeTransitionSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowDaytimeTransitionSounds");

	ACustomGameState_OnAllowDaytimeTransitionSounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.OnAllowCreateSurvivor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::OnAllowCreateSurvivor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.OnAllowCreateSurvivor");

	ACustomGameState_OnAllowCreateSurvivor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.MakePlayerDeathNotification
// ()
// Parameters:
// class FString                  PlayerDeathStringEnemy         (Parm, ZeroConstructor)
// class FString                  PlayerDeathStringAlly          (Parm, ZeroConstructor)
// class FString                  PlayerDeathStringYou           (Parm, ZeroConstructor)
// class FString                  DeathReason                    (Parm, ZeroConstructor)
// TArray<class FString>          DeadPlayerNames                (Parm, ZeroConstructor)
// bool                           bIsTribeDeath                  (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  DeathTribeName                 (Parm, ZeroConstructor)
// int                            TargetingTeamID                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  LinkedPlayerID                 (Parm, ZeroConstructor)
// TArray<struct FPrimalPlayerCharacterConfigStructReplicated> PlayersData                    (Parm, ZeroConstructor)
// struct FPlayerDeathNotification ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPlayerDeathNotification ACustomGameState::MakePlayerDeathNotification(const class FString& PlayerDeathStringEnemy, const class FString& PlayerDeathStringAlly, const class FString& PlayerDeathStringYou, const class FString& DeathReason, TArray<class FString> DeadPlayerNames, bool bIsTribeDeath, const class FString& DeathTribeName, int TargetingTeamID, const class FString& LinkedPlayerID, TArray<struct FPrimalPlayerCharacterConfigStructReplicated> PlayersData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.MakePlayerDeathNotification");

	ACustomGameState_MakePlayerDeathNotification_Params params;
	params.PlayerDeathStringEnemy = PlayerDeathStringEnemy;
	params.PlayerDeathStringAlly = PlayerDeathStringAlly;
	params.PlayerDeathStringYou = PlayerDeathStringYou;
	params.DeathReason = DeathReason;
	params.DeadPlayerNames = DeadPlayerNames;
	params.bIsTribeDeath = bIsTribeDeath;
	params.DeathTribeName = DeathTribeName;
	params.TargetingTeamID = TargetingTeamID;
	params.LinkedPlayerID = LinkedPlayerID;
	params.PlayersData = PlayersData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.MakeBattleTribeData
// ()
// Parameters:
// class FString                  TribeName                      (Parm, ZeroConstructor)
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FBattleTribeData        ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBattleTribeData ACustomGameState::MakeBattleTribeData(const class FString& TribeName, int TribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.MakeBattleTribeData");

	ACustomGameState_MakeBattleTribeData_Params params;
	params.TribeName = TribeName;
	params.TribeID = TribeID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.MakeBattlePlayerData
// ()
// Parameters:
// class FString                  PlayerName                     (Parm, ZeroConstructor)
// bool                           bConnected                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlive                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  PlayerId                       (Parm, ZeroConstructor)
// struct FBattlePlayerData       ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBattlePlayerData ACustomGameState::MakeBattlePlayerData(const class FString& PlayerName, bool bConnected, bool bAlive, int TribeID, const class FString& PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.MakeBattlePlayerData");

	ACustomGameState_MakeBattlePlayerData_Params params;
	params.PlayerName = PlayerName;
	params.bConnected = bConnected;
	params.bAlive = bAlive;
	params.TribeID = TribeID;
	params.PlayerId = PlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.KickPlayer
// ()
// Parameters:
// class APlayerController*       Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  reason                         (Parm, ZeroConstructor)

void ACustomGameState::KickPlayer(class APlayerController* Controller, const class FString& reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.KickPlayer");

	ACustomGameState_KickPlayer_Params params;
	params.Controller = Controller;
	params.reason = reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.IsTribeID
// ()
// Parameters:
// int                            TeamId                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::IsTribeID(int TeamId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.IsTribeID");

	ACustomGameState_IsTribeID_Params params;
	params.TeamId = TeamId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.IsAuthorityRole
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::IsAuthorityRole()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.IsAuthorityRole");

	ACustomGameState_IsAuthorityRole_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.HideUIScene
// ()
// Parameters:
// class UClass*                  SceneClass                     (Parm, ZeroConstructor, IsPlainOldData)

void ACustomGameState::HideUIScene(class UClass* SceneClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.HideUIScene");

	ACustomGameState_HideUIScene_Params params;
	params.SceneClass = SceneClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.GetTimeSeconds
// ()
// Parameters:
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double ACustomGameState::GetTimeSeconds()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetTimeSeconds");

	ACustomGameState_GetTimeSeconds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetPlayerDatasForTribe
// ()
// Parameters:
// int                            TribeID                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FBattlePlayerData> AllPlayerDatas                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FBattlePlayerData> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FBattlePlayerData> ACustomGameState::GetPlayerDatasForTribe(int TribeID, TArray<struct FBattlePlayerData> AllPlayerDatas)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetPlayerDatasForTribe");

	ACustomGameState_GetPlayerDatasForTribe_Params params;
	params.TribeID = TribeID;
	params.AllPlayerDatas = AllPlayerDatas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetPawnName
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString ACustomGameState::GetPawnName(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetPawnName");

	ACustomGameState_GetPawnName_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetPawnKillerName
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString ACustomGameState::GetPawnKillerName(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetPawnKillerName");

	ACustomGameState_GetPawnKillerName_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetDeathNotificationText
// ()
// Parameters:
// class AShooterCharacter*       theShooterChar                 (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Killer                         (Parm, OutParm, ZeroConstructor)
// class FString                  KillerAndTribe                 (Parm, OutParm, ZeroConstructor)
// class FString                  theNotificationStringYou       (Parm, OutParm, ZeroConstructor)
// class FString                  theNotificationStringAlly      (Parm, OutParm, ZeroConstructor)
// class FString                  theNotificationStringEnemy     (Parm, OutParm, ZeroConstructor)

void ACustomGameState::GetDeathNotificationText(class AShooterCharacter* theShooterChar, class APawn* InstigatingPawn, class FString* Killer, class FString* KillerAndTribe, class FString* theNotificationStringYou, class FString* theNotificationStringAlly, class FString* theNotificationStringEnemy)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetDeathNotificationText");

	ACustomGameState_GetDeathNotificationText_Params params;
	params.theShooterChar = theShooterChar;
	params.InstigatingPawn = InstigatingPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Killer != nullptr)
		*Killer = params.Killer;
	if (KillerAndTribe != nullptr)
		*KillerAndTribe = params.KillerAndTribe;
	if (theNotificationStringYou != nullptr)
		*theNotificationStringYou = params.theNotificationStringYou;
	if (theNotificationStringAlly != nullptr)
		*theNotificationStringAlly = params.theNotificationStringAlly;
	if (theNotificationStringEnemy != nullptr)
		*theNotificationStringEnemy = params.theNotificationStringEnemy;
}


// Function ShooterGame.CustomGameState.GetCustomActors
// ()
// Parameters:
// struct FName                   SearchCustomTag                (Parm, ZeroConstructor, IsPlainOldData)
// class ACustomActorList*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACustomActorList* ACustomGameState::GetCustomActors(const struct FName& SearchCustomTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetCustomActors");

	ACustomGameState_GetCustomActors_Params params;
	params.SearchCustomTag = SearchCustomTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetAllShooterControllers
// ()
// Parameters:
// TArray<class AShooterPlayerController*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterPlayerController*> ACustomGameState::GetAllShooterControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetAllShooterControllers");

	ACustomGameState_GetAllShooterControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetAllShooterCharactersOfTeam
// ()
// Parameters:
// int                            KillerTeam                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AShooterCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterCharacter*> ACustomGameState::GetAllShooterCharactersOfTeam(int KillerTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetAllShooterCharactersOfTeam");

	ACustomGameState_GetAllShooterCharactersOfTeam_Params params;
	params.KillerTeam = KillerTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetAllShooterCharacters
// ()
// Parameters:
// TArray<class AShooterCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterCharacter*> ACustomGameState::GetAllShooterCharacters()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetAllShooterCharacters");

	ACustomGameState_GetAllShooterCharacters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.GetAllDinoCharactersOfTeam
// ()
// Parameters:
// int                            KillerTeam                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalDinoCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APrimalDinoCharacter*> ACustomGameState::GetAllDinoCharactersOfTeam(int KillerTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.GetAllDinoCharactersOfTeam");

	ACustomGameState_GetAllDinoCharactersOfTeam_Params params;
	params.KillerTeam = KillerTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.DrawTileOnCanvas
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                Tex                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          XL                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          YL                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          U                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          V                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          UL                             (Parm, ZeroConstructor, IsPlainOldData)
// float                          VL                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  DrawColor                      (Parm, ZeroConstructor, IsPlainOldData)

void ACustomGameState::DrawTileOnCanvas(class AShooterHUD* HUD, class UTexture* Tex, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FColor& DrawColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.DrawTileOnCanvas");

	ACustomGameState_DrawTileOnCanvas_Params params;
	params.HUD = HUD;
	params.Tex = Tex;
	params.X = X;
	params.Y = Y;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.DrawColor = DrawColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.CreateDeathNotification
// ()
// Parameters:
// class AShooterCharacter*       theShooterChar                 (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* prevController                 (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   InstigatingPawn                (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxNumberOfRespawns            (Parm, ZeroConstructor, IsPlainOldData)
// struct FPlayerDeathNotification ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPlayerDeathNotification ACustomGameState::CreateDeathNotification(class AShooterCharacter* theShooterChar, class AShooterPlayerController* prevController, class APawn* InstigatingPawn, int MaxNumberOfRespawns)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.CreateDeathNotification");

	ACustomGameState_CreateDeathNotification_Params params;
	params.theShooterChar = theShooterChar;
	params.prevController = prevController;
	params.InstigatingPawn = InstigatingPawn;
	params.MaxNumberOfRespawns = MaxNumberOfRespawns;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.CreateDamageEvent
// ()
// Parameters:
// struct FDamageEvent            ReturnValue                    (Parm, OutParm, ReturnParm)

struct FDamageEvent ACustomGameState::CreateDamageEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.CreateDamageEvent");

	ACustomGameState_CreateDamageEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.CheckTimeSince
// ()
// Parameters:
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ACustomGameState::CheckTimeSince(float Time, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.CheckTimeSince");

	ACustomGameState_CheckTimeSince_Params params;
	params.Time = Time;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.CustomGameState.BroadcastActorCustomEvent
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   EventCustomName                (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  EventCustomString              (Parm, ZeroConstructor)
// class AActor*                  InstigatorActor                (Parm, ZeroConstructor, IsPlainOldData)

void ACustomGameState::BroadcastActorCustomEvent(class AActor* Actor, const struct FName& EventCustomName, const class FString& EventCustomString, class AActor* InstigatorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.BroadcastActorCustomEvent");

	ACustomGameState_BroadcastActorCustomEvent_Params params;
	params.Actor = Actor;
	params.EventCustomName = EventCustomName;
	params.EventCustomString = EventCustomString;
	params.InstigatorActor = InstigatorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.CustomGameState.BreakTribeData
// ()
// Parameters:
// struct FTribeData              InData                         (ConstParm, Parm)
// class FString                  TribeName                      (Parm, OutParm, ZeroConstructor)
// int                            OwnerPlayerDataID              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            TribeID                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<class FString>          MembersPlayerName              (Parm, OutParm, ZeroConstructor)
// TArray<int>                    MembersPlayerDataID            (Parm, OutParm, ZeroConstructor)
// TArray<int>                    TribeAdmins                    (Parm, OutParm, ZeroConstructor)
// bool                           bSetGovernment                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// TArray<struct FPrimalPlayerCharacterConfigStructReplicated> MembersConfigs                 (Parm, OutParm, ZeroConstructor)

void ACustomGameState::BreakTribeData(const struct FTribeData& InData, class FString* TribeName, int* OwnerPlayerDataID, int* TribeID, TArray<class FString>* MembersPlayerName, TArray<int>* MembersPlayerDataID, TArray<int>* TribeAdmins, bool* bSetGovernment, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* MembersConfigs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.BreakTribeData");

	ACustomGameState_BreakTribeData_Params params;
	params.InData = InData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TribeName != nullptr)
		*TribeName = params.TribeName;
	if (OwnerPlayerDataID != nullptr)
		*OwnerPlayerDataID = params.OwnerPlayerDataID;
	if (TribeID != nullptr)
		*TribeID = params.TribeID;
	if (MembersPlayerName != nullptr)
		*MembersPlayerName = params.MembersPlayerName;
	if (MembersPlayerDataID != nullptr)
		*MembersPlayerDataID = params.MembersPlayerDataID;
	if (TribeAdmins != nullptr)
		*TribeAdmins = params.TribeAdmins;
	if (bSetGovernment != nullptr)
		*bSetGovernment = params.bSetGovernment;
	if (MembersConfigs != nullptr)
		*MembersConfigs = params.MembersConfigs;
}


// Function ShooterGame.CustomGameState.BreakPlayerDeathNotification
// ()
// Parameters:
// struct FPlayerDeathNotification Data                           (ConstParm, Parm)
// class FString                  PlayerDeathStringEnemy         (Parm, OutParm, ZeroConstructor)
// class FString                  PlayerDeathStringAlly          (Parm, OutParm, ZeroConstructor)
// class FString                  PlayerDeathStringYou           (Parm, OutParm, ZeroConstructor)
// class FString                  DeathReason                    (Parm, OutParm, ZeroConstructor)
// TArray<class FString>          DeadPlayerNames                (Parm, OutParm, ZeroConstructor)
// bool                           bIsTribeDeath                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class FString                  DeathTribeName                 (Parm, OutParm, ZeroConstructor)
// int                            TargetingTeamID                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class FString                  LinkedPlayerID                 (Parm, OutParm, ZeroConstructor)
// TArray<struct FPrimalPlayerCharacterConfigStructReplicated> PlayersData                    (Parm, OutParm, ZeroConstructor)

void ACustomGameState::BreakPlayerDeathNotification(const struct FPlayerDeathNotification& Data, class FString* PlayerDeathStringEnemy, class FString* PlayerDeathStringAlly, class FString* PlayerDeathStringYou, class FString* DeathReason, TArray<class FString>* DeadPlayerNames, bool* bIsTribeDeath, class FString* DeathTribeName, int* TargetingTeamID, class FString* LinkedPlayerID, TArray<struct FPrimalPlayerCharacterConfigStructReplicated>* PlayersData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.BreakPlayerDeathNotification");

	ACustomGameState_BreakPlayerDeathNotification_Params params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerDeathStringEnemy != nullptr)
		*PlayerDeathStringEnemy = params.PlayerDeathStringEnemy;
	if (PlayerDeathStringAlly != nullptr)
		*PlayerDeathStringAlly = params.PlayerDeathStringAlly;
	if (PlayerDeathStringYou != nullptr)
		*PlayerDeathStringYou = params.PlayerDeathStringYou;
	if (DeathReason != nullptr)
		*DeathReason = params.DeathReason;
	if (DeadPlayerNames != nullptr)
		*DeadPlayerNames = params.DeadPlayerNames;
	if (bIsTribeDeath != nullptr)
		*bIsTribeDeath = params.bIsTribeDeath;
	if (DeathTribeName != nullptr)
		*DeathTribeName = params.DeathTribeName;
	if (TargetingTeamID != nullptr)
		*TargetingTeamID = params.TargetingTeamID;
	if (LinkedPlayerID != nullptr)
		*LinkedPlayerID = params.LinkedPlayerID;
	if (PlayersData != nullptr)
		*PlayersData = params.PlayersData;
}


// Function ShooterGame.CustomGameState.BreakBattleTribeData
// ()
// Parameters:
// struct FBattleTribeData        InData                         (ConstParm, Parm)
// class FString                  TribeName                      (Parm, OutParm, ZeroConstructor)
// int                            TribeID                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void ACustomGameState::BreakBattleTribeData(const struct FBattleTribeData& InData, class FString* TribeName, int* TribeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.BreakBattleTribeData");

	ACustomGameState_BreakBattleTribeData_Params params;
	params.InData = InData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TribeName != nullptr)
		*TribeName = params.TribeName;
	if (TribeID != nullptr)
		*TribeID = params.TribeID;
}


// Function ShooterGame.CustomGameState.BreakBattlePlayerData
// ()
// Parameters:
// struct FBattlePlayerData       Data                           (ConstParm, Parm)
// class FString                  PlayerName                     (Parm, OutParm, ZeroConstructor)
// bool                           bConnected                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bAlive                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            TribeID                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class FString                  PlayerId                       (Parm, OutParm, ZeroConstructor)

void ACustomGameState::BreakBattlePlayerData(const struct FBattlePlayerData& Data, class FString* PlayerName, bool* bConnected, bool* bAlive, int* TribeID, class FString* PlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.BreakBattlePlayerData");

	ACustomGameState_BreakBattlePlayerData_Params params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerName != nullptr)
		*PlayerName = params.PlayerName;
	if (bConnected != nullptr)
		*bConnected = params.bConnected;
	if (bAlive != nullptr)
		*bAlive = params.bAlive;
	if (TribeID != nullptr)
		*TribeID = params.TribeID;
	if (PlayerId != nullptr)
		*PlayerId = params.PlayerId;
}


// Function ShooterGame.CustomGameState.BreakActionReportItem
// ()
// Parameters:
// struct FActionReportItem       Data                           (ConstParm, Parm, OutParm, ReferenceParm)
// class FString                  PlayerName                     (Parm, OutParm, ZeroConstructor)
// class FString                  TribeName                      (Parm, OutParm, ZeroConstructor)
// class FString                  TimeOfDeath                    (Parm, OutParm, ZeroConstructor)
// class FString                  LevelOfDeath                   (Parm, OutParm, ZeroConstructor)
// class FString                  DeathMessage                   (Parm, OutParm, ZeroConstructor)

void ACustomGameState::BreakActionReportItem(const struct FActionReportItem& Data, class FString* PlayerName, class FString* TribeName, class FString* TimeOfDeath, class FString* LevelOfDeath, class FString* DeathMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.CustomGameState.BreakActionReportItem");

	ACustomGameState_BreakActionReportItem_Params params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerName != nullptr)
		*PlayerName = params.PlayerName;
	if (TribeName != nullptr)
		*TribeName = params.TribeName;
	if (TimeOfDeath != nullptr)
		*TimeOfDeath = params.TimeOfDeath;
	if (LevelOfDeath != nullptr)
		*LevelOfDeath = params.LevelOfDeath;
	if (DeathMessage != nullptr)
		*DeathMessage = params.DeathMessage;
}


// Function ShooterGame.ShooterGameUserSettings.GetUserSettings
// ()
// Parameters:
// class UShooterGameUserSettings* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UShooterGameUserSettings* UShooterGameUserSettings::GetUserSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameUserSettings.GetUserSettings");

	UShooterGameUserSettings_GetUserSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameUserSettings.GetQualityLevelPostprocessing
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UShooterGameUserSettings::GetQualityLevelPostprocessing()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameUserSettings.GetQualityLevelPostprocessing");

	UShooterGameUserSettings_GetQualityLevelPostprocessing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameViewportClient.IsAnyUIConsumingInput
// ()
// Parameters:
// class UClass*                  PrimalUIClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalUI*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalUI* UShooterGameViewportClient::IsAnyUIConsumingInput(class UClass* PrimalUIClass, class AShooterPlayerController* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameViewportClient.IsAnyUIConsumingInput");

	UShooterGameViewportClient_IsAnyUIConsumingInput_Params params;
	params.PrimalUIClass = PrimalUIClass;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameViewportClient.GetViewportClient
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// class UShooterGameViewportClient* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UShooterGameViewportClient* UShooterGameViewportClient::GetViewportClient(class UWorld* ForWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameViewportClient.GetViewportClient");

	UShooterGameViewportClient_GetViewportClient_Params params;
	params.ForWorld = ForWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameViewportClient.GetUIScenesFromClass
// ()
// Parameters:
// class UClass*                  PrimalUIClass                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UPrimalUI*>       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class UPrimalUI*> UShooterGameViewportClient::GetUIScenesFromClass(class UClass* PrimalUIClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameViewportClient.GetUIScenesFromClass");

	UShooterGameViewportClient_GetUIScenesFromClass_Params params;
	params.PrimalUIClass = PrimalUIClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameViewportClient.GetUISceneFromClass
// ()
// Parameters:
// class UClass*                  PrimalUIClass                  (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterPlayerController* Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalUI*               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalUI* UShooterGameViewportClient::GetUISceneFromClass(class UClass* PrimalUIClass, class AShooterPlayerController* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameViewportClient.GetUISceneFromClass");

	UShooterGameViewportClient_GetUISceneFromClass_Params params;
	params.PrimalUIClass = PrimalUIClass;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameViewportClient.GetGameWorld
// ()
// Parameters:
// class UWorld*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWorld* UShooterGameViewportClient::GetGameWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameViewportClient.GetGameWorld");

	UShooterGameViewportClient_GetGameWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameViewportClient.AnyScenesWithMouseCapture
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UShooterGameViewportClient::AnyScenesWithMouseCapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameViewportClient.AnyScenesWithMouseCapture");

	UShooterGameViewportClient_AnyScenesWithMouseCapture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterGameViewportClient.AnyNonInventoryScenesWithMouseCapture
// ()
// Parameters:
// class AShooterPlayerController* ForPC                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UShooterGameViewportClient::AnyNonInventoryScenesWithMouseCapture(class AShooterPlayerController* ForPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterGameViewportClient.AnyNonInventoryScenesWithMouseCapture");

	UShooterGameViewportClient_AnyNonInventoryScenesWithMouseCapture_Params params;
	params.ForPC = ForPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterImpactEffect.StaticSpawnImpactEffects
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ImpactEffectClass              (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              SurfaceHit                     (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ShotDirection                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           useShotDirectionForImpactEffectActorClassRotation (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           attachImpactEffectActorToSurfaceHitActor (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystemComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UParticleSystemComponent* AShooterImpactEffect::StaticSpawnImpactEffects(class UObject* WorldContextObject, class UClass* ImpactEffectClass, const struct FHitResult& SurfaceHit, const struct FVector& ShotDirection, bool useShotDirectionForImpactEffectActorClassRotation, bool attachImpactEffectActorToSurfaceHitActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterImpactEffect.StaticSpawnImpactEffects");

	AShooterImpactEffect_StaticSpawnImpactEffects_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ImpactEffectClass = ImpactEffectClass;
	params.SurfaceHit = SurfaceHit;
	params.ShotDirection = ShotDirection;
	params.useShotDirectionForImpactEffectActorClassRotation = useShotDirectionForImpactEffectActorClassRotation;
	params.attachImpactEffectActorToSurfaceHitActor = attachImpactEffectActorToSurfaceHitActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerCameraManager.StartCameraTransition
// ()
// Parameters:
// float                          TransitionDuration             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterPlayerCameraManager::StartCameraTransition(float TransitionDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerCameraManager.StartCameraTransition");

	AShooterPlayerCameraManager_StartCameraTransition_Params params;
	params.TransitionDuration = TransitionDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterPlayerCameraManager.IsInFrustum
// ()
// Parameters:
// struct FVector                 BoxLocation                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 BoxExtents                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterPlayerCameraManager::IsInFrustum(const struct FVector& BoxLocation, const struct FVector& BoxExtents)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerCameraManager.IsInFrustum");

	AShooterPlayerCameraManager_IsInFrustum_Params params;
	params.BoxLocation = BoxLocation;
	params.BoxExtents = BoxExtents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerCameraManager.GetColorCodedStencil
// ()
// Parameters:
// TEnumAsByte<EStencilAlliance>  InAlliance                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          HealthPercent                  (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

unsigned char AShooterPlayerCameraManager::GetColorCodedStencil(TEnumAsByte<EStencilAlliance> InAlliance, float HealthPercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerCameraManager.GetColorCodedStencil");

	AShooterPlayerCameraManager_GetColorCodedStencil_Params params;
	params.InAlliance = InAlliance;
	params.HealthPercent = HealthPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerCameraManager.GetCameraStyle
// ()
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName AShooterPlayerCameraManager::GetCameraStyle()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerCameraManager.GetCameraStyle");

	AShooterPlayerCameraManager_GetCameraStyle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterPlayerCameraManager.GetBlendableFromMIC
// ()
// Parameters:
// class UMaterialInterface*      InInterface                    (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* AShooterPlayerCameraManager::GetBlendableFromMIC(class UMaterialInterface* InInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterPlayerCameraManager.GetBlendableFromMIC");

	AShooterPlayerCameraManager_GetBlendableFromMIC_Params params;
	params.InInterface = InInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.UseAmmo
// ()
// Parameters:
// int                            UseAmmoAmountOverride          (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::UseAmmo(int UseAmmoAmountOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.UseAmmo");

	AShooterWeapon_UseAmmo_Params params;
	params.UseAmmoAmountOverride = UseAmmoAmountOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ToggleAccessory
// ()

void AShooterWeapon::ToggleAccessory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ToggleAccessory");

	AShooterWeapon_ToggleAccessory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.StopWeaponAnimation
// ()
// Parameters:
// struct FWeaponAnim             Animation                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bReplicate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToInstigator         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::StopWeaponAnimation(const struct FWeaponAnim& Animation, bool bReplicate, bool bReplicateToInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.StopWeaponAnimation");

	AShooterWeapon_StopWeaponAnimation_Params params;
	params.Animation = Animation;
	params.bReplicate = bReplicate;
	params.bReplicateToInstigator = bReplicateToInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.StartUnequipEvent
// ()

void AShooterWeapon::StartUnequipEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.StartUnequipEvent");

	AShooterWeapon_StartUnequipEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.StartUnequip
// ()

void AShooterWeapon::StartUnequip()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.StartUnequip");

	AShooterWeapon_StartUnequip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.StartSecondaryActionEvent
// ()

void AShooterWeapon::StartSecondaryActionEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.StartSecondaryActionEvent");

	AShooterWeapon_StartSecondaryActionEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.SetAmmoInClip
// ()
// Parameters:
// int                            newAmmo                        (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::SetAmmoInClip(int newAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.SetAmmoInClip");

	AShooterWeapon_SetAmmoInClip_Params params;
	params.newAmmo = newAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.SetAccessoryEnabled
// ()
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::SetAccessoryEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.SetAccessoryEnabled");

	AShooterWeapon_SetAccessoryEnabled_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerToggleAccessory
// ()

void AShooterWeapon::ServerToggleAccessory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerToggleAccessory");

	AShooterWeapon_ServerToggleAccessory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerStopSecondaryAction
// ()

void AShooterWeapon::ServerStopSecondaryAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerStopSecondaryAction");

	AShooterWeapon_ServerStopSecondaryAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerStopFire
// ()

void AShooterWeapon::ServerStopFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerStopFire");

	AShooterWeapon_ServerStopFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerStopAltFire
// ()

void AShooterWeapon::ServerStopAltFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerStopAltFire");

	AShooterWeapon_ServerStopAltFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerStartSecondaryAction
// ()

void AShooterWeapon::ServerStartSecondaryAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerStartSecondaryAction");

	AShooterWeapon_ServerStartSecondaryAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerStartReload
// ()

void AShooterWeapon::ServerStartReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerStartReload");

	AShooterWeapon_ServerStartReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerStartFire
// ()

void AShooterWeapon::ServerStartFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerStartFire");

	AShooterWeapon_ServerStartFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerStartAltFire
// ()

void AShooterWeapon::ServerStartAltFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerStartAltFire");

	AShooterWeapon_ServerStartAltFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ServerSetColorizeRegion
// ()
// Parameters:
// int                            theRegion                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bValToUse                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::ServerSetColorizeRegion(int theRegion, bool bValToUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ServerSetColorizeRegion");

	AShooterWeapon_ServerSetColorizeRegion_Params params;
	params.theRegion = theRegion;
	params.bValToUse = bValToUse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.SelectMeleeAttackAnim
// ()
// Parameters:
// struct FWeaponAnim             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FWeaponAnim AShooterWeapon::SelectMeleeAttackAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.SelectMeleeAttackAnim");

	AShooterWeapon_SelectMeleeAttackAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.ReloadWeapon
// ()

void AShooterWeapon::ReloadWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ReloadWeapon");

	AShooterWeapon_ReloadWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.PlayWeaponSound
// ()
// Parameters:
// class USoundCue*               Sound                          (Parm, ZeroConstructor, IsPlainOldData)
// class UAudioComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UAudioComponent* AShooterWeapon::PlayWeaponSound(class USoundCue* Sound)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.PlayWeaponSound");

	AShooterWeapon_PlayWeaponSound_Params params;
	params.Sound = Sound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.PlayWeaponBreakAnimation
// ()

void AShooterWeapon::PlayWeaponBreakAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.PlayWeaponBreakAnimation");

	AShooterWeapon_PlayWeaponBreakAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.PlayWeaponAnimationEx
// ()
// Parameters:
// struct FWeaponAnim             Animation                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPlayBothFirstAndThirdPerson   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToInstigator         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPauseOnFinish1P               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseOnServer         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterWeapon::PlayWeaponAnimationEx(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.PlayWeaponAnimationEx");

	AShooterWeapon_PlayWeaponAnimationEx_Params params;
	params.Animation = Animation;
	params.InPlayRate = InPlayRate;
	params.bPlayBothFirstAndThirdPerson = bPlayBothFirstAndThirdPerson;
	params.bReplicate = bReplicate;
	params.bReplicateToInstigator = bReplicateToInstigator;
	params.bPauseOnFinish1P = bPauseOnFinish1P;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.bForceTickPoseOnServer = bForceTickPoseOnServer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.PlayWeaponAnimation
// ()
// Parameters:
// struct FWeaponAnim             Animation                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bPlayBothFirstAndThirdPerson   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToInstigator         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPauseOnFinish1P               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseOnServer         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterWeapon::PlayWeaponAnimation(const struct FWeaponAnim& Animation, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.PlayWeaponAnimation");

	AShooterWeapon_PlayWeaponAnimation_Params params;
	params.Animation = Animation;
	params.bPlayBothFirstAndThirdPerson = bPlayBothFirstAndThirdPerson;
	params.bReplicate = bReplicate;
	params.bReplicateToInstigator = bReplicateToInstigator;
	params.bPauseOnFinish1P = bPauseOnFinish1P;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.bForceTickPoseOnServer = bForceTickPoseOnServer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.PlayUseHarvestAnimation
// ()

void AShooterWeapon::PlayUseHarvestAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.PlayUseHarvestAnimation");

	AShooterWeapon_PlayUseHarvestAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.OnRep_NetLoopedWeaponFire
// ()

void AShooterWeapon::OnRep_NetLoopedWeaponFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.OnRep_NetLoopedWeaponFire");

	AShooterWeapon_OnRep_NetLoopedWeaponFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.OnRep_MyPawn
// ()

void AShooterWeapon::OnRep_MyPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.OnRep_MyPawn");

	AShooterWeapon_OnRep_MyPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.OnRep_CurrentAmmoInClip
// ()

void AShooterWeapon::OnRep_CurrentAmmoInClip()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.OnRep_CurrentAmmoInClip");

	AShooterWeapon_OnRep_CurrentAmmoInClip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.OnRep_AccessoryToggle
// ()

void AShooterWeapon::OnRep_AccessoryToggle()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.OnRep_AccessoryToggle");

	AShooterWeapon_OnRep_AccessoryToggle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.OnInstigatorPlayDyingEvent
// ()

void AShooterWeapon::OnInstigatorPlayDyingEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.OnInstigatorPlayDyingEvent");

	AShooterWeapon_OnInstigatorPlayDyingEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.IsLocallyOwned
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::IsLocallyOwned()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.IsLocallyOwned");

	AShooterWeapon_IsLocallyOwned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.IsFiring
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.IsFiring");

	AShooterWeapon_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.IsClimbing
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::IsClimbing()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.IsClimbing");

	AShooterWeapon_IsClimbing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.GetWeaponMesh
// ()
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* AShooterWeapon::GetWeaponMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.GetWeaponMesh");

	AShooterWeapon_GetWeaponMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.GetWeaponDamageMultiplier
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterWeapon::GetWeaponDamageMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.GetWeaponDamageMultiplier");

	AShooterWeapon_GetWeaponDamageMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.GetStandingAnimation
// ()
// Parameters:
// float                          OutBlendInTime                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutBlendOutTime                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* AShooterWeapon::GetStandingAnimation(float* OutBlendInTime, float* OutBlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.GetStandingAnimation");

	AShooterWeapon_GetStandingAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutBlendInTime != nullptr)
		*OutBlendInTime = params.OutBlendInTime;
	if (OutBlendOutTime != nullptr)
		*OutBlendOutTime = params.OutBlendOutTime;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.GetPawnOwner
// ()
// Parameters:
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* AShooterWeapon::GetPawnOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.GetPawnOwner");

	AShooterWeapon_GetPawnOwner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.GetMuzzleLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AShooterWeapon::GetMuzzleLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.GetMuzzleLocation");

	AShooterWeapon_GetMuzzleLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.GetMuzzleDirection
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AShooterWeapon::GetMuzzleDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.GetMuzzleDirection");

	AShooterWeapon_GetMuzzleDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.GetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterWeapon::GetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.GetDebugInfoString");

	AShooterWeapon_GetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.ForceTPVTargetingAnimation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::ForceTPVTargetingAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ForceTPVTargetingAnimation");

	AShooterWeapon_ForceTPVTargetingAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.ForcesTPVCameraOffset
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::ForcesTPVCameraOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ForcesTPVCameraOffset");

	AShooterWeapon_ForcesTPVCameraOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.FindComponentByName
// ()
// Parameters:
// struct FName                   ComponentName                  (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneComponent* AShooterWeapon::FindComponentByName(const struct FName& ComponentName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.FindComponentByName");

	AShooterWeapon_FindComponentByName_Params params;
	params.ComponentName = ComponentName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.DoMeleeAttack
// ()

void AShooterWeapon::DoMeleeAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.DoMeleeAttack");

	AShooterWeapon_DoMeleeAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.DoHandleFiring
// ()

void AShooterWeapon::DoHandleFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.DoHandleFiring");

	AShooterWeapon_DoHandleFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ClientStopSimulatingWeaponFire
// ()

void AShooterWeapon::ClientStopSimulatingWeaponFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ClientStopSimulatingWeaponFire");

	AShooterWeapon_ClientStopSimulatingWeaponFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ClientStartReload
// ()

void AShooterWeapon::ClientStartReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ClientStartReload");

	AShooterWeapon_ClientStartReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ClientStartMuzzleFX
// ()

void AShooterWeapon::ClientStartMuzzleFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ClientStartMuzzleFX");

	AShooterWeapon_ClientStartMuzzleFX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ClientSimulateWeaponFire
// ()

void AShooterWeapon::ClientSimulateWeaponFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ClientSimulateWeaponFire");

	AShooterWeapon_ClientSimulateWeaponFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ClientSetClipAmmo
// ()
// Parameters:
// int                            NewClipAmmo                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOnlyUpdateItem                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::ClientSetClipAmmo(int NewClipAmmo, bool bOnlyUpdateItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ClientSetClipAmmo");

	AShooterWeapon_ClientSetClipAmmo_Params params;
	params.NewClipAmmo = NewClipAmmo;
	params.bOnlyUpdateItem = bOnlyUpdateItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ClientPlayShieldHitAnim
// ()

void AShooterWeapon::ClientPlayShieldHitAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ClientPlayShieldHitAnim");

	AShooterWeapon_ClientPlayShieldHitAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.ClearClientReload
// ()

void AShooterWeapon::ClearClientReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.ClearClientReload");

	AShooterWeapon_ClearClientReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.CheckItemAssocation
// ()

void AShooterWeapon::CheckItemAssocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.CheckItemAssocation");

	AShooterWeapon_CheckItemAssocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.CanMeleeAttack
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::CanMeleeAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.CanMeleeAttack");

	AShooterWeapon_CanMeleeAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPWeaponZoom
// ()
// Parameters:
// bool                           bZoomingIn                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPWeaponZoom(bool bZoomingIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPWeaponZoom");

	AShooterWeapon_BPWeaponZoom_Params params;
	params.bZoomingIn = bZoomingIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPWeaponDealDamage
// ()
// Parameters:
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ShootDir                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// int                            DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  DamageType                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Impulse                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterWeapon::BPWeaponDealDamage(const struct FHitResult& Impact, const struct FVector& ShootDir, int DamageAmount, class UClass* DamageType, float Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPWeaponDealDamage");

	AShooterWeapon_BPWeaponDealDamage_Params params;
	params.Impact = Impact;
	params.ShootDir = ShootDir;
	params.DamageAmount = DamageAmount;
	params.DamageType = DamageType;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPWeaponCanFire
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPWeaponCanFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPWeaponCanFire");

	AShooterWeapon_BPWeaponCanFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPTryFireWeapon
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPTryFireWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPTryFireWeapon");

	AShooterWeapon_BPTryFireWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPToggleAccessoryFailed
// ()

void AShooterWeapon::BPToggleAccessoryFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPToggleAccessoryFailed");

	AShooterWeapon_BPToggleAccessoryFailed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPToggleAccessory
// ()

void AShooterWeapon::BPToggleAccessory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPToggleAccessory");

	AShooterWeapon_BPToggleAccessory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPStopMeleeAttack
// ()

void AShooterWeapon::BPStopMeleeAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPStopMeleeAttack");

	AShooterWeapon_BPStopMeleeAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPStartEquippedNotify
// ()

void AShooterWeapon::BPStartEquippedNotify()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPStartEquippedNotify");

	AShooterWeapon_BPStartEquippedNotify_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPShouldDealDamage
// ()
// Parameters:
// class AActor*                  TestActor                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPShouldDealDamage(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPShouldDealDamage");

	AShooterWeapon_BPShouldDealDamage_Params params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPRemainEquipped
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPRemainEquipped()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPRemainEquipped");

	AShooterWeapon_BPRemainEquipped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPPreventSwitchingWeapon
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPPreventSwitchingWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPPreventSwitchingWeapon");

	AShooterWeapon_BPPreventSwitchingWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPOverrideFPVMasterPoseComponent
// ()
// Parameters:
// class USkeletalMeshComponent*  ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkeletalMeshComponent* AShooterWeapon::BPOverrideFPVMasterPoseComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPOverrideFPVMasterPoseComponent");

	AShooterWeapon_BPOverrideFPVMasterPoseComponent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPOnWeaponAnimPlayedNotify
// ()
// Parameters:
// struct FWeaponAnim             Animation                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          InPlayRate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPlayBothFirstAndThirdPerson   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicate                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReplicateToInstigator         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPauseOnFinish1P               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseAndServerUpdateMesh (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTickPoseOnServer         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPOnWeaponAnimPlayedNotify(const struct FWeaponAnim& Animation, float InPlayRate, bool bPlayBothFirstAndThirdPerson, bool bReplicate, bool bReplicateToInstigator, bool bPauseOnFinish1P, bool bForceTickPoseAndServerUpdateMesh, bool bForceTickPoseOnServer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPOnWeaponAnimPlayedNotify");

	AShooterWeapon_BPOnWeaponAnimPlayedNotify_Params params;
	params.Animation = Animation;
	params.InPlayRate = InPlayRate;
	params.bPlayBothFirstAndThirdPerson = bPlayBothFirstAndThirdPerson;
	params.bReplicate = bReplicate;
	params.bReplicateToInstigator = bReplicateToInstigator;
	params.bPauseOnFinish1P = bPauseOnFinish1P;
	params.bForceTickPoseAndServerUpdateMesh = bForceTickPoseAndServerUpdateMesh;
	params.bForceTickPoseOnServer = bForceTickPoseOnServer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPOnStopTargeting
// ()
// Parameters:
// bool                           bFromGamepadLeft               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPOnStopTargeting(bool bFromGamepadLeft)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPOnStopTargeting");

	AShooterWeapon_BPOnStopTargeting_Params params;
	params.bFromGamepadLeft = bFromGamepadLeft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPOnStartTargeting
// ()
// Parameters:
// bool                           bFromGamepadLeft               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPOnStartTargeting(bool bFromGamepadLeft)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPOnStartTargeting");

	AShooterWeapon_BPOnStartTargeting_Params params;
	params.bFromGamepadLeft = bFromGamepadLeft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPOnScoped
// ()

void AShooterWeapon::BPOnScoped()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPOnScoped");

	AShooterWeapon_BPOnScoped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPModifyFOV
// ()
// Parameters:
// float                          inFOV                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterWeapon::BPModifyFOV(float inFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPModifyFOV");

	AShooterWeapon_BPModifyFOV_Params params;
	params.inFOV = inFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPLostController
// ()

void AShooterWeapon::BPLostController()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPLostController");

	AShooterWeapon_BPLostController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPIsValidUnStasisCaster
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPIsValidUnStasisCaster()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPIsValidUnStasisCaster");

	AShooterWeapon_BPIsValidUnStasisCaster_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPHandleMeleeAttack
// ()

void AShooterWeapon::BPHandleMeleeAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPHandleMeleeAttack");

	AShooterWeapon_BPHandleMeleeAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPGlobalFireWeapon
// ()

void AShooterWeapon::BPGlobalFireWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPGlobalFireWeapon");

	AShooterWeapon_BPGlobalFireWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPGetTargetingTooltipInfoLabel
// ()
// Parameters:
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FText AShooterWeapon::BPGetTargetingTooltipInfoLabel()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPGetTargetingTooltipInfoLabel");

	AShooterWeapon_BPGetTargetingTooltipInfoLabel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPGetSelectedMeleeAttackAnim
// ()
// Parameters:
// struct FWeaponAnim             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FWeaponAnim AShooterWeapon::BPGetSelectedMeleeAttackAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPGetSelectedMeleeAttackAnim");

	AShooterWeapon_BPGetSelectedMeleeAttackAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPGetSeatingAnimation
// ()
// Parameters:
// class UAnimSequence*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAnimSequence* AShooterWeapon::BPGetSeatingAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPGetSeatingAnimation");

	AShooterWeapon_BPGetSeatingAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPGetDebugInfoString
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString AShooterWeapon::BPGetDebugInfoString()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPGetDebugInfoString");

	AShooterWeapon_BPGetDebugInfoString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPGetActorForTargetingTooltip
// ()
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* AShooterWeapon::BPGetActorForTargetingTooltip()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPGetActorForTargetingTooltip");

	AShooterWeapon_BPGetActorForTargetingTooltip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPForceTPVTargetingAnimation
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPForceTPVTargetingAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPForceTPVTargetingAnimation");

	AShooterWeapon_BPForceTPVTargetingAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPFireWeapon
// ()

void AShooterWeapon::BPFireWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPFireWeapon");

	AShooterWeapon_BPFireWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPFiredWeapon
// ()

void AShooterWeapon::BPFiredWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPFiredWeapon");

	AShooterWeapon_BPFiredWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPDrawHud
// ()
// Parameters:
// class AShooterHUD*             HUD                            (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPDrawHud(class AShooterHUD* HUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPDrawHud");

	AShooterWeapon_BPDrawHud_Params params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPConstrainAspectRatio
// ()
// Parameters:
// float                          OutAspectRatio                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPConstrainAspectRatio(float* OutAspectRatio)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPConstrainAspectRatio");

	AShooterWeapon_BPConstrainAspectRatio_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAspectRatio != nullptr)
		*OutAspectRatio = params.OutAspectRatio;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPCanToggleAccessory
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPCanToggleAccessory()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPCanToggleAccessory");

	AShooterWeapon_BPCanToggleAccessory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPCanEquip
// ()
// Parameters:
// class AShooterCharacter*       ByCharacter                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPCanEquip(class AShooterCharacter* ByCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPCanEquip");

	AShooterWeapon_BPCanEquip_Params params;
	params.ByCharacter = ByCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPAppliedPrimalItemToWeapon
// ()

void AShooterWeapon::BPAppliedPrimalItemToWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPAppliedPrimalItemToWeapon");

	AShooterWeapon_BPAppliedPrimalItemToWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPAnimNotifyCustomState_End
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimNotifyState*        AnimNotifyObject               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPAnimNotifyCustomState_End(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotifyState* AnimNotifyObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPAnimNotifyCustomState_End");

	AShooterWeapon_BPAnimNotifyCustomState_End_Params params;
	params.CustomEventName = CustomEventName;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.AnimNotifyObject = AnimNotifyObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPAnimNotifyCustomState_Begin
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TotalDuration                  (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimNotifyState*        AnimNotifyObject               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPAnimNotifyCustomState_Begin(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration, class UAnimNotifyState* AnimNotifyObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPAnimNotifyCustomState_Begin");

	AShooterWeapon_BPAnimNotifyCustomState_Begin_Params params;
	params.CustomEventName = CustomEventName;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.TotalDuration = TotalDuration;
	params.AnimNotifyObject = AnimNotifyObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPAnimNotifyCustomEvent
// ()
// Parameters:
// struct FName                   CustomEventName                (Parm, ZeroConstructor, IsPlainOldData)
// class USkeletalMeshComponent*  MeshComp                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UAnimSequenceBase*       Animation                      (Parm, ZeroConstructor, IsPlainOldData)
// class UAnimNotify*             AnimNotifyObject               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon::BPAnimNotifyCustomEvent(const struct FName& CustomEventName, class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, class UAnimNotify* AnimNotifyObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPAnimNotifyCustomEvent");

	AShooterWeapon_BPAnimNotifyCustomEvent_Params params;
	params.CustomEventName = CustomEventName;
	params.MeshComp = MeshComp;
	params.Animation = Animation;
	params.AnimNotifyObject = AnimNotifyObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.BPAllowNativeFireWeapon
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::BPAllowNativeFireWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPAllowNativeFireWeapon");

	AShooterWeapon_BPAllowNativeFireWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BPAdjustAmmoPerShot
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterWeapon::BPAdjustAmmoPerShot()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BPAdjustAmmoPerShot");

	AShooterWeapon_BPAdjustAmmoPerShot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.BP_OnReloadNotify
// ()

void AShooterWeapon::BP_OnReloadNotify()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.BP_OnReloadNotify");

	AShooterWeapon_BP_OnReloadNotify_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon.AllowUnequip
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::AllowUnequip()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.AllowUnequip");

	AShooterWeapon_AllowUnequip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon.AllowTargeting
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon::AllowTargeting()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon.AllowTargeting");

	AShooterWeapon_AllowTargeting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Projectile.SetLockedTarget
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsLocked                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Projectile::SetLockedTarget(class AActor* Actor, bool bIsLocked)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.SetLockedTarget");

	AShooterWeapon_Projectile_SetLockedTarget_Params params;
	params.Actor = Actor;
	params.bIsLocked = bIsLocked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.ServerFireProjectileEx
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            RandomSeed                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Projectile::ServerFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int RandomSeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.ServerFireProjectileEx");

	AShooterWeapon_Projectile_ServerFireProjectileEx_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;
	params.Speed = Speed;
	params.RandomSeed = RandomSeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.ServerFireProjectile
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)

void AShooterWeapon_Projectile::ServerFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.ServerFireProjectile");

	AShooterWeapon_Projectile_ServerFireProjectile_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.OnUnHideProjectile
// ()

void AShooterWeapon_Projectile::OnUnHideProjectile()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.OnUnHideProjectile");

	AShooterWeapon_Projectile_OnUnHideProjectile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.OnHideProjectile
// ()

void AShooterWeapon_Projectile::OnHideProjectile()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.OnHideProjectile");

	AShooterWeapon_Projectile_OnHideProjectile_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.Listener_LockOn_Update
// ()
// Parameters:
// bool                           Reset                          (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Projectile::Listener_LockOn_Update(bool Reset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.Listener_LockOn_Update");

	AShooterWeapon_Projectile_Listener_LockOn_Update_Params params;
	params.Reset = Reset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.Listener_LockOn_Stop
// ()

void AShooterWeapon_Projectile::Listener_LockOn_Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.Listener_LockOn_Stop");

	AShooterWeapon_Projectile_Listener_LockOn_Stop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.GetTrajectoryTarget
// ()
// Parameters:
// int                            SubSteps                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          TotalTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FHitResult AShooterWeapon_Projectile::GetTrajectoryTarget(int SubSteps, float TotalTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.GetTrajectoryTarget");

	AShooterWeapon_Projectile_GetTrajectoryTarget_Params params;
	params.SubSteps = SubSteps;
	params.TotalTime = TotalTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Projectile.ClientsFireProjectileEx
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            RandomSeed                     (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Projectile::ClientsFireProjectileEx(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, float Speed, int RandomSeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.ClientsFireProjectileEx");

	AShooterWeapon_Projectile_ClientsFireProjectileEx_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;
	params.Speed = Speed;
	params.RandomSeed = RandomSeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.ClientsFireProjectile
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)

void AShooterWeapon_Projectile::ClientsFireProjectile(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.ClientsFireProjectile");

	AShooterWeapon_Projectile_ClientsFireProjectile_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Projectile.CheckRefireTimer
// ()

void AShooterWeapon_Projectile::CheckRefireTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Projectile.CheckRefireTimer");

	AShooterWeapon_Projectile_CheckRefireTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.UpdateTargetPhysics
// ()

void AShooterProjectile::UpdateTargetPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.UpdateTargetPhysics");

	AShooterProjectile_UpdateTargetPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.StopProjectileMovement
// ()

void AShooterProjectile::StopProjectileMovement()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.StopProjectileMovement");

	AShooterProjectile_StopProjectileMovement_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.SpawnImpactEffect
// ()
// Parameters:
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm)

void AShooterProjectile::SpawnImpactEffect(const struct FHitResult& Impact)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.SpawnImpactEffect");

	AShooterProjectile_SpawnImpactEffect_Params params;
	params.Impact = Impact;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.Reset
// ()

void AShooterProjectile::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.Reset");

	AShooterProjectile_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.ProjectileBounced
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ImpactVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AShooterProjectile::ProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.ProjectileBounced");

	AShooterProjectile_ProjectileBounced_Params params;
	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.PreventExplosionEmitter
// ()
// Parameters:
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterProjectile::PreventExplosionEmitter(const struct FHitResult& Impact)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.PreventExplosionEmitter");

	AShooterProjectile_PreventExplosionEmitter_Params params;
	params.Impact = Impact;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterProjectile.OnTouch
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile::OnTouch(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.OnTouch");

	AShooterProjectile_OnTouch_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.OnProjectileStop
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)

void AShooterProjectile::OnProjectileStop(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.OnProjectileStop");

	AShooterProjectile_OnProjectileStop_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.OnImpact
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bFromReplication               (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile::OnImpact(const struct FHitResult& HitResult, bool bFromReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.OnImpact");

	AShooterProjectile_OnImpact_Params params;
	params.HitResult = HitResult;
	params.bFromReplication = bFromReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.OnExplode
// ()
// Parameters:
// struct FHitResult              Result                         (ConstParm, Parm, OutParm, ReferenceParm)

void AShooterProjectile::OnExplode(const struct FHitResult& Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.OnExplode");

	AShooterProjectile_OnExplode_Params params;
	params.Result = Result;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.NetUpdateTimer
// ()

void AShooterProjectile::NetUpdateTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.NetUpdateTimer");

	AShooterProjectile_NetUpdateTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.NetResetTransformAndVelocity
// ()
// Parameters:
// struct FVector                 NewLocation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                NewRotation                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 NewVelocity                    (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          NewMoveIgnoreActors            (ConstParm, Parm, ZeroConstructor)

void AShooterProjectile::NetResetTransformAndVelocity(const struct FVector& NewLocation, const struct FRotator& NewRotation, const struct FVector& NewVelocity, TArray<class AActor*> NewMoveIgnoreActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.NetResetTransformAndVelocity");

	AShooterProjectile_NetResetTransformAndVelocity_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;
	params.NewVelocity = NewVelocity;
	params.NewMoveIgnoreActors = NewMoveIgnoreActors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.ExplodeAtLocation
// ()
// Parameters:
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtNormal                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile::ExplodeAtLocation(const struct FVector& AtLocation, const struct FVector& AtNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.ExplodeAtLocation");

	AShooterProjectile_ExplodeAtLocation_Params params;
	params.AtLocation = AtLocation;
	params.AtNormal = AtNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.Explode
// ()
// Parameters:
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm)

void AShooterProjectile::Explode(const struct FHitResult& Impact)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.Explode");

	AShooterProjectile_Explode_Params params;
	params.Impact = Impact;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.DisableAndDestroy
// ()

void AShooterProjectile::DisableAndDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.DisableAndDestroy");

	AShooterProjectile_DisableAndDestroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.DeactivateProjectileEffects
// ()

void AShooterProjectile::DeactivateProjectileEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.DeactivateProjectileEffects");

	AShooterProjectile_DeactivateProjectileEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.Colorize
// ()

void AShooterProjectile::Colorize()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.Colorize");

	AShooterProjectile_Colorize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.ClientOnImpact
// ()
// Parameters:
// struct FVector                 ProjectileLocation             (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ProjectileRotation             (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm)

void AShooterProjectile::ClientOnImpact(const struct FVector& ProjectileLocation, const struct FRotator& ProjectileRotation, const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.ClientOnImpact");

	AShooterProjectile_ClientOnImpact_Params params;
	params.ProjectileLocation = ProjectileLocation;
	params.ProjectileRotation = ProjectileRotation;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.ClientNetImpactFX
// ()
// Parameters:
// struct FHitResult              HitResult                      (Parm)

void AShooterProjectile::ClientNetImpactFX(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.ClientNetImpactFX");

	AShooterProjectile_ClientNetImpactFX_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.ClientNetExplode
// ()
// Parameters:
// struct FHitResult              HitResult                      (Parm)

void AShooterProjectile::ClientNetExplode(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.ClientNetExplode");

	AShooterProjectile_ClientNetExplode_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.ClientNetDestroy
// ()

void AShooterProjectile::ClientNetDestroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.ClientNetDestroy");

	AShooterProjectile_ClientNetDestroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.ClearHomingTarget
// ()

void AShooterProjectile::ClearHomingTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.ClearHomingTarget");

	AShooterProjectile_ClearHomingTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.BPProjectileBounced
// ()
// Parameters:
// struct FHitResult              ImpactResult                   (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ImpactVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AShooterProjectile::BPProjectileBounced(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.BPProjectileBounced");

	AShooterProjectile_BPProjectileBounced_Params params;
	params.ImpactResult = ImpactResult;
	params.ImpactVelocity = ImpactVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.BPInitVelocity
// ()
// Parameters:
// struct FVector                 ShootDirection                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile::BPInitVelocity(const struct FVector& ShootDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.BPInitVelocity");

	AShooterProjectile_BPInitVelocity_Params params;
	params.ShootDirection = ShootDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.BPInitializedVelocity
// ()
// Parameters:
// struct FVector                 InVelocity                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          CustomSpeed                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile::BPInitializedVelocity(const struct FVector& InVelocity, float CustomSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.BPInitializedVelocity");

	AShooterProjectile_BPInitializedVelocity_Params params;
	params.InVelocity = InVelocity;
	params.CustomSpeed = CustomSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.BPIgnoreRadialDamageVictim
// ()
// Parameters:
// class AActor*                  Victim                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterProjectile::BPIgnoreRadialDamageVictim(class AActor* Victim)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.BPIgnoreRadialDamageVictim");

	AShooterProjectile_BPIgnoreRadialDamageVictim_Params params;
	params.Victim = Victim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterProjectile.BPApplyExplosionDamageAndVFX
// ()
// Parameters:
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bForceSpawnExplosionEmitter    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile::BPApplyExplosionDamageAndVFX(const struct FHitResult& Impact, bool bForceSpawnExplosionEmitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.BPApplyExplosionDamageAndVFX");

	AShooterProjectile_BPApplyExplosionDamageAndVFX_Params params;
	params.Impact = Impact;
	params.bForceSpawnExplosionEmitter = bForceSpawnExplosionEmitter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile.BP_IgnoreProjectileImpact
// ()
// Parameters:
// struct FHitResult              ImpactHit                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterProjectile::BP_IgnoreProjectileImpact(const struct FHitResult& ImpactHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.BP_IgnoreProjectileImpact");

	AShooterProjectile_BP_IgnoreProjectileImpact_Params params;
	params.ImpactHit = ImpactHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterProjectile.AddMoveIgnoreActor
// ()
// Parameters:
// class AActor*                  IgnoreActor                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile::AddMoveIgnoreActor(class AActor* IgnoreActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile.AddMoveIgnoreActor");

	AShooterProjectile_AddMoveIgnoreActor_Params params;
	params.IgnoreActor = IgnoreActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalProjectileArrow.PickUpCheck
// ()

void APrimalProjectileArrow::PickUpCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalProjectileArrow.PickUpCheck");

	APrimalProjectileArrow_PickUpCheck_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalProjectileNetGun.GetManagedBoneLocation
// ()
// Parameters:
// struct FName                   InBoneName                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector APrimalProjectileNetGun::GetManagedBoneLocation(const struct FName& InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalProjectileNetGun.GetManagedBoneLocation");

	APrimalProjectileNetGun_GetManagedBoneLocation_Params params;
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalProjectileNetGun.CalculateBonePositions
// ()

void APrimalProjectileNetGun::CalculateBonePositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalProjectileNetGun.CalculateBonePositions");

	APrimalProjectileNetGun_CalculateBonePositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.VTraceSphereBP
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FHitResult              HitOut                         (Parm, OutParm)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorToIgnore                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            CollisionGroups                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReturnPhysMaterial            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TraceTag                       (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActorToIgnore             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  AnotherActorToIgnore           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::VTraceSphereBP(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, float Radius, class AActor* ActorToIgnore, TEnumAsByte<ECollisionChannel> Channel, int CollisionGroups, bool bReturnPhysMaterial, bool bTraceComplex, const struct FName& TraceTag, class AActor* OtherActorToIgnore, class AActor* AnotherActorToIgnore, struct FHitResult* HitOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VTraceSphereBP");

	UVictoryCore_VTraceSphereBP_Params params;
	params.TheWorld = TheWorld;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.ActorToIgnore = ActorToIgnore;
	params.Channel = Channel;
	params.CollisionGroups = CollisionGroups;
	params.bReturnPhysMaterial = bReturnPhysMaterial;
	params.bTraceComplex = bTraceComplex;
	params.TraceTag = TraceTag;
	params.OtherActorToIgnore = OtherActorToIgnore;
	params.AnotherActorToIgnore = AnotherActorToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitOut != nullptr)
		*HitOut = params.HitOut;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VTraceSingleBP
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            CollisionGroups                (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TraceTag                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorToIgnore                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::VTraceSingleBP(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, int CollisionGroups, const struct FName& TraceTag, bool bTraceComplex, class AActor* ActorToIgnore, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VTraceSingleBP");

	UVictoryCore_VTraceSingleBP_Params params;
	params.TheWorld = TheWorld;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.CollisionGroups = CollisionGroups;
	params.TraceTag = TraceTag;
	params.bTraceComplex = bTraceComplex;
	params.ActorToIgnore = ActorToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VTraceMultiBP
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AActor*                  InIgnoreActor                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            CollisionGroups                (Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bReturnPhysMaterial            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TraceTag                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceChannelForceOverlap      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDoSort                        (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  AdditionalIgnoreActor          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  AnotherIgnoreActor             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bJustDoSphereOverlapAtStartLoc (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::VTraceMultiBP(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, class AActor* InIgnoreActor, int CollisionGroups, float SphereRadius, const struct FVector& BoxExtent, bool bReturnPhysMaterial, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, const struct FName& TraceTag, bool bTraceChannelForceOverlap, bool bDoSort, class AActor* AdditionalIgnoreActor, class AActor* AnotherIgnoreActor, bool bJustDoSphereOverlapAtStartLoc, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VTraceMultiBP");

	UVictoryCore_VTraceMultiBP_Params params;
	params.TheWorld = TheWorld;
	params.Start = Start;
	params.End = End;
	params.InIgnoreActor = InIgnoreActor;
	params.CollisionGroups = CollisionGroups;
	params.SphereRadius = SphereRadius;
	params.BoxExtent = BoxExtent;
	params.bReturnPhysMaterial = bReturnPhysMaterial;
	params.TraceChannel = TraceChannel;
	params.bTraceComplex = bTraceComplex;
	params.TraceTag = TraceTag;
	params.bTraceChannelForceOverlap = bTraceChannelForceOverlap;
	params.bDoSort = bDoSort;
	params.AdditionalIgnoreActor = AdditionalIgnoreActor;
	params.AnotherIgnoreActor = AnotherIgnoreActor;
	params.bJustDoSphereOverlapAtStartLoc = bJustDoSphereOverlapAtStartLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VTraceAgainstActorExpensive
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FHitResult              HitOut                         (Parm, OutParm)
// class AActor*                  ActorToTraceAgainst            (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            CollisionGroups                (Parm, ZeroConstructor, IsPlainOldData)
// float                          SphereRadius                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReturnPhysMaterial            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxExtent                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FName                   TraceTag                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSort                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::VTraceAgainstActorExpensive(class UWorld* TheWorld, const struct FVector& Start, const struct FVector& End, class AActor* ActorToTraceAgainst, TEnumAsByte<ECollisionChannel> Channel, int CollisionGroups, float SphereRadius, bool bReturnPhysMaterial, bool bTraceComplex, const struct FVector& BoxExtent, const struct FName& TraceTag, bool bSort, struct FHitResult* HitOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VTraceAgainstActorExpensive");

	UVictoryCore_VTraceAgainstActorExpensive_Params params;
	params.TheWorld = TheWorld;
	params.Start = Start;
	params.End = End;
	params.ActorToTraceAgainst = ActorToTraceAgainst;
	params.Channel = Channel;
	params.CollisionGroups = CollisionGroups;
	params.SphereRadius = SphereRadius;
	params.bReturnPhysMaterial = bReturnPhysMaterial;
	params.bTraceComplex = bTraceComplex;
	params.BoxExtent = BoxExtent;
	params.TraceTag = TraceTag;
	params.bSort = bSort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitOut != nullptr)
		*HitOut = params.HitOut;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VNewObjectTransient
// ()
// Parameters:
// class UClass*                  classToUse                     (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::VNewObjectTransient(class UClass* classToUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VNewObjectTransient");

	UVictoryCore_VNewObjectTransient_Params params;
	params.classToUse = classToUse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VNewObjectFromBlueprintOuter
// ()
// Parameters:
// class UObject*                 OuterObject                    (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  classToUse                     (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::VNewObjectFromBlueprintOuter(class UObject* OuterObject, class UClass* classToUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VNewObjectFromBlueprintOuter");

	UVictoryCore_VNewObjectFromBlueprintOuter_Params params;
	params.OuterObject = OuterObject;
	params.classToUse = classToUse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VNewObjectFromBlueprint
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  classToUse                     (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::VNewObjectFromBlueprint(class UObject* WorldContextObject, class UClass* classToUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VNewObjectFromBlueprint");

	UVictoryCore_VNewObjectFromBlueprint_Params params;
	params.WorldContextObject = WorldContextObject;
	params.classToUse = classToUse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VisualLog_Print
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)
// bool                           bIsError                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::VisualLog_Print(class AActor* Actor, const class FString& Message, bool bIsError)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VisualLog_Print");

	UVictoryCore_VisualLog_Print_Params params;
	params.Actor = Actor;
	params.Message = Message;
	params.bIsError = bIsError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.VisualLog_Location
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)
// bool                           bIsError                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PointColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlsoPrintMessage              (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::VisualLog_Location(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& Location, const struct FLinearColor& PointColor, float Size, bool bAlsoPrintMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VisualLog_Location");

	UVictoryCore_VisualLog_Location_Params params;
	params.Actor = Actor;
	params.Message = Message;
	params.bIsError = bIsError;
	params.Location = Location;
	params.PointColor = PointColor;
	params.Size = Size;
	params.bAlsoPrintMessage = bAlsoPrintMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.VisualLog_LineSegment
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)
// bool                           bIsError                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlsoPrintMessage              (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::VisualLog_LineSegment(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& LineColor, float Thickness, bool bAlsoPrintMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VisualLog_LineSegment");

	UVictoryCore_VisualLog_LineSegment_Params params;
	params.Actor = Actor;
	params.Message = Message;
	params.bIsError = bIsError;
	params.Start = Start;
	params.End = End;
	params.LineColor = LineColor;
	params.Thickness = Thickness;
	params.bAlsoPrintMessage = bAlsoPrintMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.VisualLog_Histogram
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               DataSample                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   GraphName                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   DataName                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::VisualLog_Histogram(class AActor* Actor, const struct FVector2D& DataSample, const struct FName& GraphName, const struct FName& DataName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VisualLog_Histogram");

	UVictoryCore_VisualLog_Histogram_Params params;
	params.Actor = Actor;
	params.DataSample = DataSample;
	params.GraphName = GraphName;
	params.DataName = DataName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.VisualLog_AxisAlignedBox
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)
// bool                           bIsError                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxMin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 BoxMax                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            BoxColor                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAlsoPrintMessage              (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::VisualLog_AxisAlignedBox(class AActor* Actor, const class FString& Message, bool bIsError, const struct FVector& BoxMin, const struct FVector& BoxMax, const struct FLinearColor& BoxColor, bool bAlsoPrintMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VisualLog_AxisAlignedBox");

	UVictoryCore_VisualLog_AxisAlignedBox_Params params;
	params.Actor = Actor;
	params.Message = Message;
	params.bIsError = bIsError;
	params.BoxMin = BoxMin;
	params.BoxMax = BoxMax;
	params.BoxColor = BoxColor;
	params.bAlsoPrintMessage = bAlsoPrintMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.ViewDirectionAngleOffset
// ()
// Parameters:
// struct FVector                 ViewDirection                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RightVector                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleOffsetDegrees             (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxAngleDegreesBeforeInterpToUp (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::ViewDirectionAngleOffset(const struct FVector& ViewDirection, const struct FVector& RightVector, float AngleOffsetDegrees, float MaxAngleDegreesBeforeInterpToUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ViewDirectionAngleOffset");

	UVictoryCore_ViewDirectionAngleOffset_Params params;
	params.ViewDirection = ViewDirection;
	params.RightVector = RightVector;
	params.AngleOffsetDegrees = AngleOffsetDegrees;
	params.MaxAngleDegreesBeforeInterpToUp = MaxAngleDegreesBeforeInterpToUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.VectorDistance
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::VectorDistance(const struct FVector& A, const struct FVector& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.VectorDistance");

	UVictoryCore_VectorDistance_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.UseCooldown
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// double                         CooldownClock                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UVictoryCore::UseCooldown(class UObject* WorldContextObject, double* CooldownClock)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.UseCooldown");

	UVictoryCore_UseCooldown_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CooldownClock != nullptr)
		*CooldownClock = params.CooldownClock;
}


// Function ShooterGame.VictoryCore.UnRegisterComponentBP
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UVictoryCore::UnRegisterComponentBP(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.UnRegisterComponentBP");

	UVictoryCore_UnRegisterComponentBP_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.TrimArray_Vector
// ()
// Parameters:
// TArray<struct FVector>         Array                          (Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            MaxLength                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRemoveFromEnd                 (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::TrimArray_Vector(int MaxLength, bool bRemoveFromEnd, TArray<struct FVector>* Array)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.TrimArray_Vector");

	UVictoryCore_TrimArray_Vector_Params params;
	params.MaxLength = MaxLength;
	params.bRemoveFromEnd = bRemoveFromEnd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Array != nullptr)
		*Array = params.Array;
}


// Function ShooterGame.VictoryCore.TrimArray_Float
// ()
// Parameters:
// TArray<float>                  Array                          (Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            MaxLength                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRemoveFromEnd                 (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::TrimArray_Float(int MaxLength, bool bRemoveFromEnd, TArray<float>* Array)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.TrimArray_Float");

	UVictoryCore_TrimArray_Float_Params params;
	params.MaxLength = MaxLength;
	params.bRemoveFromEnd = bRemoveFromEnd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Array != nullptr)
		*Array = params.Array;
}


// Function ShooterGame.VictoryCore.TransformVectorByScreenProjectionGlobalTransform
// ()
// Parameters:
// struct FVector2D               outVec                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UVictoryCore::TransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& outVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.TransformVectorByScreenProjectionGlobalTransform");

	UVictoryCore_TransformVectorByScreenProjectionGlobalTransform_Params params;
	params.outVec = outVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.TraceProjectileArc
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FProjectileArc          Arc                            (ConstParm, Parm, OutParm, ReferenceParm)
// struct FHitResult              HitResult                      (Parm, OutParm)
// struct FVector                 EndLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          EndArcTime                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ArcPeakLocation                (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxArcLength                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ArcTimeStep                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> CollisionChannel               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceObjectTypeOnly           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::TraceProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float MaxArcLength, TArray<class AActor*> ActorsToIgnore, float ArcTimeStep, TEnumAsByte<ECollisionChannel> CollisionChannel, bool bTraceObjectTypeOnly, bool bDrawDebug, float DebugDrawDuration, struct FHitResult* HitResult, struct FVector* EndLocation, float* EndArcTime, struct FVector* ArcPeakLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.TraceProjectileArc");

	UVictoryCore_TraceProjectileArc_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Arc = Arc;
	params.MaxArcLength = MaxArcLength;
	params.ActorsToIgnore = ActorsToIgnore;
	params.ArcTimeStep = ArcTimeStep;
	params.CollisionChannel = CollisionChannel;
	params.bTraceObjectTypeOnly = bTraceObjectTypeOnly;
	params.bDrawDebug = bDrawDebug;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;
	if (EndLocation != nullptr)
		*EndLocation = params.EndLocation;
	if (EndArcTime != nullptr)
		*EndArcTime = params.EndArcTime;
	if (ArcPeakLocation != nullptr)
		*ArcPeakLocation = params.ArcPeakLocation;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.TimeSince_Network
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// double                         OldTime                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::TimeSince_Network(class UWorld* ForWorld, double OldTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.TimeSince_Network");

	UVictoryCore_TimeSince_Network_Params params;
	params.ForWorld = ForWorld;
	params.OldTime = OldTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.TimeSince
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// double                         OldTime                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::TimeSince(class UWorld* ForWorld, double OldTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.TimeSince");

	UVictoryCore_TimeSince_Params params;
	params.ForWorld = ForWorld;
	params.OldTime = OldTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.TimeSeconds
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UVictoryCore::TimeSeconds(class UWorld* ForWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.TimeSeconds");

	UVictoryCore_TimeSeconds_Params params;
	params.ForWorld = ForWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SupportsShaderModel5
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::SupportsShaderModel5()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SupportsShaderModel5");

	UVictoryCore_SupportsShaderModel5_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.StringToIntAscii
// ()
// Parameters:
// class FString                  SourceString                   (Parm, ZeroConstructor)
// int                            StringIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UVictoryCore::StringToIntAscii(const class FString& SourceString, int StringIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.StringToIntAscii");

	UVictoryCore_StringToIntAscii_Params params;
	params.SourceString = SourceString;
	params.StringIndex = StringIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.StopMusic
// ()

void UVictoryCore::StopMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.StopMusic");

	UVictoryCore_StopMusic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.SteamOverlayOpenURL
// ()
// Parameters:
// class FString                  ToURL                          (Parm, ZeroConstructor)

void UVictoryCore::SteamOverlayOpenURL(const class FString& ToURL)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SteamOverlayOpenURL");

	UVictoryCore_SteamOverlayOpenURL_Params params;
	params.ToURL = ToURL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.StaticGetTimeSince
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// double                         Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::StaticGetTimeSince(class UWorld* TheWorld, double Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.StaticGetTimeSince");

	UVictoryCore_StaticGetTimeSince_Params params;
	params.TheWorld = TheWorld;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.StaticCheckForCommand
// ()
// Parameters:
// class FString                  CommandName                    (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::StaticCheckForCommand(const class FString& CommandName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.StaticCheckForCommand");

	UVictoryCore_StaticCheckForCommand_Params params;
	params.CommandName = CommandName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SphereOverlapFast
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Loc                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::SphereOverlapFast(class UObject* WorldContextObject, const struct FVector& Loc, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SphereOverlapFast");

	UVictoryCore_SphereOverlapFast_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Loc = Loc;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SpawnCustomDino
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpawnLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                SpawnRotation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FDinoSetup              DinoSetup                      (ConstParm, Parm, OutParm, ReferenceParm)
// class AShooterPlayerController* OwnerPlayerController          (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRotationToSpawnOffset    (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* UVictoryCore::SpawnCustomDino(class UWorld* World, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, class AShooterPlayerController* OwnerPlayerController, float DebugDrawDuration, bool bApplyRotationToSpawnOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SpawnCustomDino");

	UVictoryCore_SpawnCustomDino_Params params;
	params.World = World;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.DinoSetup = DinoSetup;
	params.OwnerPlayerController = OwnerPlayerController;
	params.DebugDrawDuration = DebugDrawDuration;
	params.bApplyRotationToSpawnOffset = bApplyRotationToSpawnOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SpawnActorInWorld
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  anActorClass                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLocation                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AtRotation                     (Parm, ZeroConstructor, IsPlainOldData)
// class USceneComponent*         attachToComponent              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            dataIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   attachSocketName               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OwnerActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   InstigatorPawn                 (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UVictoryCore::SpawnActorInWorld(class UWorld* ForWorld, class UClass* anActorClass, const struct FVector& AtLocation, const struct FRotator& AtRotation, class USceneComponent* attachToComponent, int dataIndex, const struct FName& attachSocketName, class AActor* OwnerActor, class APawn* InstigatorPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SpawnActorInWorld");

	UVictoryCore_SpawnActorInWorld_Params params;
	params.ForWorld = ForWorld;
	params.anActorClass = anActorClass;
	params.AtLocation = AtLocation;
	params.AtRotation = AtRotation;
	params.attachToComponent = attachToComponent;
	params.dataIndex = dataIndex;
	params.attachSocketName = attachSocketName;
	params.OwnerActor = OwnerActor;
	params.InstigatorPawn = InstigatorPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SpawnActorDeferred
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData)
// class UWorld*                  inWorld                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class AActor*                  Owner                          (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   Instigator                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNoCollisionFail               (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UVictoryCore::SpawnActorDeferred(class UClass* Class, class UWorld* inWorld, const struct FVector& Location, const struct FRotator& Rotation, class AActor* Owner, class APawn* Instigator, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SpawnActorDeferred");

	UVictoryCore_SpawnActorDeferred_Params params;
	params.Class = Class;
	params.inWorld = inWorld;
	params.Location = Location;
	params.Rotation = Rotation;
	params.Owner = Owner;
	params.Instigator = Instigator;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SortActorsByTag
// ()
// Parameters:
// int                            tagIndex                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> UVictoryCore::SortActorsByTag(int tagIndex, TArray<class AActor*> actors)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SortActorsByTag");

	UVictoryCore_SortActorsByTag_Params params;
	params.tagIndex = tagIndex;
	params.actors = actors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SortActorsByDistance
// ()
// Parameters:
// struct FVector                 fromLoc                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TArray<class AActor*>          actors                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> UVictoryCore::SortActorsByDistance(const struct FVector& fromLoc, TArray<class AActor*> actors)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SortActorsByDistance");

	UVictoryCore_SortActorsByDistance_Params params;
	params.fromLoc = fromLoc;
	params.actors = actors;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SimpleFloatString
// ()
// Parameters:
// float                          inputVal                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::SimpleFloatString(float inputVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SimpleFloatString");

	UVictoryCore_SimpleFloatString_Params params;
	params.inputVal = inputVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SimpleCurveInterpClampedVector
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::SimpleCurveInterpClampedVector(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SimpleCurveInterpClampedVector");

	UVictoryCore_SimpleCurveInterpClampedVector_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SimpleCurveInterpClampedTransform
// ()
// Parameters:
// struct FTransform              A                              (Parm, IsPlainOldData)
// struct FTransform              B                              (Parm, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UVictoryCore::SimpleCurveInterpClampedTransform(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SimpleCurveInterpClampedTransform");

	UVictoryCore_SimpleCurveInterpClampedTransform_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SimpleCurveInterpClampedRotator
// ()
// Parameters:
// struct FRotator                A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShortestPath                  (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UVictoryCore::SimpleCurveInterpClampedRotator(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SimpleCurveInterpClampedRotator");

	UVictoryCore_SimpleCurveInterpClampedRotator_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.bShortestPath = bShortestPath;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SimpleCurveInterpClampedLinearColor
// ()
// Parameters:
// struct FLinearColor            A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UVictoryCore::SimpleCurveInterpClampedLinearColor(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SimpleCurveInterpClampedLinearColor");

	UVictoryCore_SimpleCurveInterpClampedLinearColor_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SimpleCurveInterpClamped
// ()
// Parameters:
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Alpha                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::SimpleCurveInterpClamped(float A, float B, float Alpha, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SimpleCurveInterpClamped");

	UVictoryCore_SimpleCurveInterpClamped_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SimpleCurveEval
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::SimpleCurveEval(float Value, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SimpleCurveEval");

	UVictoryCore_SimpleCurveEval_Params params;
	params.Value = Value;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ShowEditorNotification
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)
// TEnumAsByte<EEditorMessageLogLevel> LogLevel                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bServerOnly                    (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::ShowEditorNotification(class UObject* WorldContextObject, const class FString& Message, TEnumAsByte<EEditorMessageLogLevel> LogLevel, float Duration, bool bServerOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ShowEditorNotification");

	UVictoryCore_ShowEditorNotification_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Message = Message;
	params.LogLevel = LogLevel;
	params.Duration = Duration;
	params.bServerOnly = bServerOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.SetTickGroupBP
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TEnumAsByte<ETickingGroup>     TickGroup                      (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::SetTickGroupBP(class UActorComponent* Component, TEnumAsByte<ETickingGroup> TickGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SetTickGroupBP");

	UVictoryCore_SetTickGroupBP_Params params;
	params.Component = Component;
	params.TickGroup = TickGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.SetSessionPrefix
// ()
// Parameters:
// class FString                  InPrefix                       (Parm, ZeroConstructor)

void UVictoryCore::SetSessionPrefix(const class FString& InPrefix)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SetSessionPrefix");

	UVictoryCore_SetSessionPrefix_Params params;
	params.InPrefix = InPrefix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.SetMultiUseEntryPriority
// ()
// Parameters:
// TArray<struct FMultiUseEntry>  Entries                        (Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bFindByUseIndexInsteadOfArrayIndex (Parm, ZeroConstructor, IsPlainOldData)
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewPriority                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::SetMultiUseEntryPriority(bool bFindByUseIndexInsteadOfArrayIndex, int index, int NewPriority, TArray<struct FMultiUseEntry>* Entries)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SetMultiUseEntryPriority");

	UVictoryCore_SetMultiUseEntryPriority_Params params;
	params.bFindByUseIndexInsteadOfArrayIndex = bFindByUseIndexInsteadOfArrayIndex;
	params.index = index;
	params.NewPriority = NewPriority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Entries != nullptr)
		*Entries = params.Entries;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SetDinoSetupPointsPerStat
// ()
// Parameters:
// struct FDinoSetup              DinoSetup                      (Parm, OutParm, ReferenceParm)
// TEnumAsByte<EPrimalCharacterStatusValue> StatusType                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsPlayerAdded                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddInsteadOfSet               (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::SetDinoSetupPointsPerStat(TEnumAsByte<EPrimalCharacterStatusValue> StatusType, int Value, bool bIsPlayerAdded, bool bAddInsteadOfSet, struct FDinoSetup* DinoSetup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SetDinoSetupPointsPerStat");

	UVictoryCore_SetDinoSetupPointsPerStat_Params params;
	params.StatusType = StatusType;
	params.Value = Value;
	params.bIsPlayerAdded = bIsPlayerAdded;
	params.bAddInsteadOfSet = bAddInsteadOfSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DinoSetup != nullptr)
		*DinoSetup = params.DinoSetup;
}


// Function ShooterGame.VictoryCore.SetBoolArrayElemTrue
// ()
// Parameters:
// TArray<bool>                   TheArray                       (Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            TheIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::SetBoolArrayElemTrue(int TheIndex, TArray<bool>* TheArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SetBoolArrayElemTrue");

	UVictoryCore_SetBoolArrayElemTrue_Params params;
	params.TheIndex = TheIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TheArray != nullptr)
		*TheArray = params.TheArray;
}


// Function ShooterGame.VictoryCore.SetBoolArrayElemFalse
// ()
// Parameters:
// TArray<bool>                   TheArray                       (Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            TheIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::SetBoolArrayElemFalse(int TheIndex, TArray<bool>* TheArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SetBoolArrayElemFalse");

	UVictoryCore_SetBoolArrayElemFalse_Params params;
	params.TheIndex = TheIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TheArray != nullptr)
		*TheArray = params.TheArray;
}


// Function ShooterGame.VictoryCore.SetAllowControllerInputWithCursor
// ()
// Parameters:
// bool                           bAllow                         (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::SetAllowControllerInputWithCursor(bool bAllow)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SetAllowControllerInputWithCursor");

	UVictoryCore_SetAllowControllerInputWithCursor_Params params;
	params.bAllow = bAllow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.ServerOctreeOverlapActorsClassBitMask
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            OctreeTypeBitMask              (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceActorLocationDistanceCheck (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> UVictoryCore::ServerOctreeOverlapActorsClassBitMask(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, int OctreeTypeBitMask, class UClass* ActorClass, bool bForceActorLocationDistanceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ServerOctreeOverlapActorsClassBitMask");

	UVictoryCore_ServerOctreeOverlapActorsClassBitMask_Params params;
	params.TheWorld = TheWorld;
	params.AtLoc = AtLoc;
	params.Radius = Radius;
	params.OctreeTypeBitMask = OctreeTypeBitMask;
	params.ActorClass = ActorClass;
	params.bForceActorLocationDistanceCheck = bForceActorLocationDistanceCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ServerOctreeOverlapActorsClass
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EServerOctreeGroup> OctreeType                     (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ActorClass                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceActorLocationDistanceCheck (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> UVictoryCore::ServerOctreeOverlapActorsClass(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, TEnumAsByte<EServerOctreeGroup> OctreeType, class UClass* ActorClass, bool bForceActorLocationDistanceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ServerOctreeOverlapActorsClass");

	UVictoryCore_ServerOctreeOverlapActorsClass_Params params;
	params.TheWorld = TheWorld;
	params.AtLoc = AtLoc;
	params.Radius = Radius;
	params.OctreeType = OctreeType;
	params.ActorClass = ActorClass;
	params.bForceActorLocationDistanceCheck = bForceActorLocationDistanceCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ServerOctreeOverlapActorsBitMask
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            OctreeTypeBitMask              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceActorLocationDistanceCheck (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> UVictoryCore::ServerOctreeOverlapActorsBitMask(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, int OctreeTypeBitMask, bool bForceActorLocationDistanceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ServerOctreeOverlapActorsBitMask");

	UVictoryCore_ServerOctreeOverlapActorsBitMask_Params params;
	params.TheWorld = TheWorld;
	params.AtLoc = AtLoc;
	params.Radius = Radius;
	params.OctreeTypeBitMask = OctreeTypeBitMask;
	params.bForceActorLocationDistanceCheck = bForceActorLocationDistanceCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ServerOctreeOverlapActors
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLoc                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EServerOctreeGroup> OctreeType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceActorLocationDistanceCheck (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AActor*> UVictoryCore::ServerOctreeOverlapActors(class UWorld* TheWorld, const struct FVector& AtLoc, float Radius, TEnumAsByte<EServerOctreeGroup> OctreeType, bool bForceActorLocationDistanceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ServerOctreeOverlapActors");

	UVictoryCore_ServerOctreeOverlapActors_Params params;
	params.TheWorld = TheWorld;
	params.AtLoc = AtLoc;
	params.Radius = Radius;
	params.OctreeType = OctreeType;
	params.bForceActorLocationDistanceCheck = bForceActorLocationDistanceCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ServerCheckMeshingOnActor
// ()
// Parameters:
// class AActor*                  OnActor                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUseActorCenterBounds     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::ServerCheckMeshingOnActor(class AActor* OnActor, bool bForceUseActorCenterBounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ServerCheckMeshingOnActor");

	UVictoryCore_ServerCheckMeshingOnActor_Params params;
	params.OnActor = OnActor;
	params.bForceUseActorCenterBounds = bForceUseActorCenterBounds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SelectVectorIfWithinRange
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           PickedA                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::SelectVectorIfWithinRange(const struct FVector& A, const struct FVector& B, float MaxDistance, bool* PickedA)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SelectVectorIfWithinRange");

	UVictoryCore_SelectVectorIfWithinRange_Params params;
	params.A = A;
	params.B = B;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PickedA != nullptr)
		*PickedA = params.PickedA;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.SelectCloserVector
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           PickedA                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::SelectCloserVector(const struct FVector& Origin, const struct FVector& A, const struct FVector& B, bool* PickedA)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.SelectCloserVector");

	UVictoryCore_SelectCloserVector_Params params;
	params.Origin = Origin;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PickedA != nullptr)
		*PickedA = params.PickedA;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ReupdateCaptures
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::ReupdateCaptures(class UWorld* ForWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ReupdateCaptures");

	UVictoryCore_ReupdateCaptures_Params params;
	params.ForWorld = ForWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.ResetCooldown
// ()
// Parameters:
// double                         CooldownClock                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void UVictoryCore::ResetCooldown(double* CooldownClock)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ResetCooldown");

	UVictoryCore_ResetCooldown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CooldownClock != nullptr)
		*CooldownClock = params.CooldownClock;
}


// Function ShooterGame.VictoryCore.RemoveInvalidObjectsInContainer
// ()
// Parameters:
// TArray<TWeakObjectPtr<class APrimalDinoCharacter>> fContainer                     (Parm, ZeroConstructor)
// TArray<TWeakObjectPtr<class APrimalDinoCharacter>> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<TWeakObjectPtr<class APrimalDinoCharacter>> UVictoryCore::RemoveInvalidObjectsInContainer(TArray<TWeakObjectPtr<class APrimalDinoCharacter>> fContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.RemoveInvalidObjectsInContainer");

	UVictoryCore_RemoveInvalidObjectsInContainer_Params params;
	params.fContainer = fContainer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.RemoveFromActorList
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ActorListNum                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorRef                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::RemoveFromActorList(class UWorld* ForWorld, int ActorListNum, class AActor* ActorRef)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.RemoveFromActorList");

	UVictoryCore_RemoveFromActorList_Params params;
	params.ForWorld = ForWorld;
	params.ActorListNum = ActorListNum;
	params.ActorRef = ActorRef;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.RegisterComponentBP
// ()
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UVictoryCore::RegisterComponentBP(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.RegisterComponentBP");

	UVictoryCore_RegisterComponentBP_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.RefreshApplySoundVolumes
// ()

void UVictoryCore::RefreshApplySoundVolumes()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.RefreshApplySoundVolumes");

	UVictoryCore_RefreshApplySoundVolumes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.RefreshApplySoundAndMusicVolumes
// ()

void UVictoryCore::RefreshApplySoundAndMusicVolumes()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.RefreshApplySoundAndMusicVolumes");

	UVictoryCore_RefreshApplySoundAndMusicVolumes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.ReallySupportsShaderModel5
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::ReallySupportsShaderModel5()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ReallySupportsShaderModel5");

	UVictoryCore_ReallySupportsShaderModel5_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PureDefaultObject
// ()
// Parameters:
// class UObject*                 FromObjectInstance             (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::PureDefaultObject(class UObject* FromObjectInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PureDefaultObject");

	UVictoryCore_PureDefaultObject_Params params;
	params.FromObjectInstance = FromObjectInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PureClassDefaultObject
// ()
// Parameters:
// class UClass*                  FromClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::PureClassDefaultObject(class UClass* FromClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PureClassDefaultObject");

	UVictoryCore_PureClassDefaultObject_Params params;
	params.FromClass = FromClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ProjectWorldLocationToScreenOrScreenEdgePosition
// ()
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WorldLocation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ScreenPosition                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          screenMarginPercent            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           widgetSpace                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           OnScreen                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::ProjectWorldLocationToScreenOrScreenEdgePosition(class APlayerController* PlayerController, const struct FVector& WorldLocation, float screenMarginPercent, bool widgetSpace, struct FVector2D* ScreenPosition, bool* OnScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ProjectWorldLocationToScreenOrScreenEdgePosition");

	UVictoryCore_ProjectWorldLocationToScreenOrScreenEdgePosition_Params params;
	params.PlayerController = PlayerController;
	params.WorldLocation = WorldLocation;
	params.screenMarginPercent = screenMarginPercent;
	params.widgetSpace = widgetSpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenPosition != nullptr)
		*ScreenPosition = params.ScreenPosition;
	if (OnScreen != nullptr)
		*OnScreen = params.OnScreen;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PrintMessageInShippingBuild
// ()
// Parameters:
// class FString                  Msg                            (Parm, ZeroConstructor)

void UVictoryCore::PrintMessageInShippingBuild(const class FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PrintMessageInShippingBuild");

	UVictoryCore_PrintMessageInShippingBuild_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.PrecisionRound
// ()
// Parameters:
// float                          inputVal                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Precision                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::PrecisionRound(float inputVal, int Precision)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PrecisionRound");

	UVictoryCore_PrecisionRound_Params params;
	params.inputVal = inputVal;
	params.Precision = Precision;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PointOnSphere
// ()
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DegreesI                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DegreesJ                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::PointOnSphere(float Radius, float DegreesI, float DegreesJ)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PointOnSphere");

	UVictoryCore_PointOnSphere_Params params;
	params.Radius = Radius;
	params.DegreesI = DegreesI;
	params.DegreesJ = DegreesJ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PointOnCircle
// ()
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AngleDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UVictoryCore::PointOnCircle(float Radius, float AngleDegrees)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PointOnCircle");

	UVictoryCore_PointOnCircle_Params params;
	params.Radius = Radius;
	params.AngleDegrees = AngleDegrees;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PlayMusic
// ()
// Parameters:
// class FString                  MusicFile                      (Parm, ZeroConstructor)
// float                          OverrideVolume                 (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::PlayMusic(const class FString& MusicFile, float OverrideVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PlayMusic");

	UVictoryCore_PlayMusic_Params params;
	params.MusicFile = MusicFile;
	params.OverrideVolume = OverrideVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.PlayerOwnsScorchedEarthServer
// ()
// Parameters:
// class AShooterPlayerController* Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::PlayerOwnsScorchedEarthServer(class AShooterPlayerController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PlayerOwnsScorchedEarthServer");

	UVictoryCore_PlayerOwnsScorchedEarthServer_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PlayerOwnsGenesisSeasonPassServer
// ()
// Parameters:
// class AShooterPlayerController* Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::PlayerOwnsGenesisSeasonPassServer(class AShooterPlayerController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PlayerOwnsGenesisSeasonPassServer");

	UVictoryCore_PlayerOwnsGenesisSeasonPassServer_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PlayerOwnsExtinctionServer
// ()
// Parameters:
// class AShooterPlayerController* Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::PlayerOwnsExtinctionServer(class AShooterPlayerController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PlayerOwnsExtinctionServer");

	UVictoryCore_PlayerOwnsExtinctionServer_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.PlayerOwnsAberrationServer
// ()
// Parameters:
// class AShooterPlayerController* Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::PlayerOwnsAberrationServer(class AShooterPlayerController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.PlayerOwnsAberrationServer");

	UVictoryCore_PlayerOwnsAberrationServer_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OwnsSteamAppID
// ()
// Parameters:
// int                            AppID                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OwnsSteamAppID(int AppID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OwnsSteamAppID");

	UVictoryCore_OwnsSteamAppID_Params params;
	params.AppID = AppID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OwnsScorchedEarth
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OwnsScorchedEarth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OwnsScorchedEarth");

	UVictoryCore_OwnsScorchedEarth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OwnsGenesisSeasonPass
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OwnsGenesisSeasonPass()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OwnsGenesisSeasonPass");

	UVictoryCore_OwnsGenesisSeasonPass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OwnsExtinction
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OwnsExtinction()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OwnsExtinction");

	UVictoryCore_OwnsExtinction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OwnsDLC
// ()
// Parameters:
// class FString                  DLCName                        (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OwnsDLC(const class FString& DLCName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OwnsDLC");

	UVictoryCore_OwnsDLC_Params params;
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OwnsAberration
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OwnsAberration()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OwnsAberration");

	UVictoryCore_OwnsAberration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OverlappingStationaryObjectsTraceBP
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        SourceCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FOverlapResult>  Overlaps                       (Parm, OutParm, ZeroConstructor)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InIgnoreActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TraceName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bComplexOverlapTest            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OverlappingStationaryObjectsTraceBP(class UWorld* TheWorld, class APrimalCharacter* SourceCharacter, const struct FVector& Origin, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, class AActor* InIgnoreActor, const struct FName& TraceName, bool bComplexOverlapTest, TArray<struct FOverlapResult>* Overlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OverlappingStationaryObjectsTraceBP");

	UVictoryCore_OverlappingStationaryObjectsTraceBP_Params params;
	params.TheWorld = TheWorld;
	params.SourceCharacter = SourceCharacter;
	params.Origin = Origin;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.InIgnoreActor = InIgnoreActor;
	params.TraceName = TraceName;
	params.bComplexOverlapTest = bComplexOverlapTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Overlaps != nullptr)
		*Overlaps = params.Overlaps;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OverlappingActorsTraceBP
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FOverlapResult>  Overlaps                       (Parm, OutParm, ZeroConstructor)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InIgnoreActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TraceName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bComplexOverlapTest            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OverlappingActorsTraceBP(class UWorld* TheWorld, const struct FVector& Origin, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, class AActor* InIgnoreActor, const struct FName& TraceName, bool bComplexOverlapTest, TArray<struct FOverlapResult>* Overlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OverlappingActorsTraceBP");

	UVictoryCore_OverlappingActorsTraceBP_Params params;
	params.TheWorld = TheWorld;
	params.Origin = Origin;
	params.Radius = Radius;
	params.TraceChannel = TraceChannel;
	params.InIgnoreActor = InIgnoreActor;
	params.TraceName = TraceName;
	params.bComplexOverlapTest = bComplexOverlapTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Overlaps != nullptr)
		*Overlaps = params.Overlaps;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OverlappingActorsBP
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FOverlapResult>  Overlaps                       (Parm, OutParm, ZeroConstructor)
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            CollisionGroups                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InIgnoreActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TraceName                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bComplexOverlapTest            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::OverlappingActorsBP(class UWorld* TheWorld, const struct FVector& Origin, float Radius, int CollisionGroups, class AActor* InIgnoreActor, const struct FName& TraceName, bool bComplexOverlapTest, TArray<struct FOverlapResult>* Overlaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OverlappingActorsBP");

	UVictoryCore_OverlappingActorsBP_Params params;
	params.TheWorld = TheWorld;
	params.Origin = Origin;
	params.Radius = Radius;
	params.CollisionGroups = CollisionGroups;
	params.InIgnoreActor = InIgnoreActor;
	params.TraceName = TraceName;
	params.bComplexOverlapTest = bComplexOverlapTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Overlaps != nullptr)
		*Overlaps = params.Overlaps;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.OpenStorePageForDLC
// ()
// Parameters:
// class FString                  DLCName                        (Parm, ZeroConstructor)

void UVictoryCore::OpenStorePageForDLC(const class FString& DLCName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.OpenStorePageForDLC");

	UVictoryCore_OpenStorePageForDLC_Params params;
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.ObjectRefToClassRef
// ()
// Parameters:
// class UObject*                 InObject                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UVictoryCore::ObjectRefToClassRef(class UObject* InObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ObjectRefToClassRef");

	UVictoryCore_ObjectRefToClassRef_Params params;
	params.InObject = InObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.MultiTraceProjectSphere
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutResults                     (Parm, OutParm, ZeroConstructor)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            HorizResolution                (Parm, ZeroConstructor, IsPlainOldData)
// int                            VertResolution                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          StartDistance                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          EndDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          NorthConeSubtractAngle         (Parm, ZeroConstructor, IsPlainOldData)
// float                          SouthConeSubtractAngle         (Parm, ZeroConstructor, IsPlainOldData)
// int                            PctChanceToTrace               (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxTraceCount                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebugLines                (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MultiTraceProjectSphere(class UObject* WorldContextObject, const struct FVector& Origin, TEnumAsByte<ECollisionChannel> TraceChannel, int HorizResolution, int VertResolution, float StartDistance, float EndDistance, float NorthConeSubtractAngle, float SouthConeSubtractAngle, int PctChanceToTrace, int MaxTraceCount, bool bDrawDebugLines, float DebugDrawDuration, TArray<struct FHitResult>* OutResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MultiTraceProjectSphere");

	UVictoryCore_MultiTraceProjectSphere_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.TraceChannel = TraceChannel;
	params.HorizResolution = HorizResolution;
	params.VertResolution = VertResolution;
	params.StartDistance = StartDistance;
	params.EndDistance = EndDistance;
	params.NorthConeSubtractAngle = NorthConeSubtractAngle;
	params.SouthConeSubtractAngle = SouthConeSubtractAngle;
	params.PctChanceToTrace = PctChanceToTrace;
	params.MaxTraceCount = MaxTraceCount;
	params.bDrawDebugLines = bDrawDebugLines;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResults != nullptr)
		*OutResults = params.OutResults;
}


// Function ShooterGame.VictoryCore.MultiLinePenetrationTraceByChannel
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FPenetrationTraceHit> OutResults                     (Parm, OutParm, ZeroConstructor)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> TraceChannel                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebugLines                (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MultiLinePenetrationTraceByChannel(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, TArray<class AActor*> ActorsToIgnore, bool bTraceComplex, bool bIgnoreSelf, bool bDrawDebugLines, float DebugDrawDuration, TArray<struct FPenetrationTraceHit>* OutResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MultiLinePenetrationTraceByChannel");

	UVictoryCore_MultiLinePenetrationTraceByChannel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.TraceChannel = TraceChannel;
	params.ActorsToIgnore = ActorsToIgnore;
	params.bTraceComplex = bTraceComplex;
	params.bIgnoreSelf = bIgnoreSelf;
	params.bDrawDebugLines = bDrawDebugLines;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResults != nullptr)
		*OutResults = params.OutResults;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugString
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TextLocation                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Text                           (Parm, ZeroConstructor)
// class AActor*                  TestBaseActor                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            TextColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugString(class AActor* ReplicatedActor, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugString");

	UVictoryCore_MulticastDrawDebugString_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugSphere
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugSphere(class AActor* ReplicatedActor, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugSphere");

	UVictoryCore_MulticastDrawDebugSphere_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugPoint
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Size                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            PointColor                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugPoint(class AActor* ReplicatedActor, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugPoint");

	UVictoryCore_MulticastDrawDebugPoint_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugLine
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Thickness                      (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugLine(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugLine");

	UVictoryCore_MulticastDrawDebugLine_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.LineColor = LineColor;
	params.Duration = Duration;
	params.Thickness = Thickness;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugCylinder
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Start                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            Segments                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugCylinder(class AActor* ReplicatedActor, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugCylinder");

	UVictoryCore_MulticastDrawDebugCylinder_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.LineColor = LineColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugCoordinateSystem
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AxisLoc                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                AxisRot                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugCoordinateSystem(class AActor* ReplicatedActor, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugCoordinateSystem");

	UVictoryCore_MulticastDrawDebugCoordinateSystem_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugCapsule
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugCapsule(class AActor* ReplicatedActor, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugCapsule");

	UVictoryCore_MulticastDrawDebugCapsule_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.Center = Center;
	params.HalfHeight = HalfHeight;
	params.Radius = Radius;
	params.Rotation = Rotation;
	params.LineColor = LineColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugCamera
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class ACameraActor*            CameraActor                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            CameraColor                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugCamera(class AActor* ReplicatedActor, class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugCamera");

	UVictoryCore_MulticastDrawDebugCamera_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.CameraActor = CameraActor;
	params.CameraColor = CameraColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugBox
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Center                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugBox(class AActor* ReplicatedActor, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugBox");

	UVictoryCore_MulticastDrawDebugBox_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.Center = Center;
	params.Extent = Extent;
	params.LineColor = LineColor;
	params.Rotation = Rotation;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MulticastDrawDebugArrow
// ()
// Parameters:
// class AActor*                  ReplicatedActor                (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineStart                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 LineEnd                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ArrowSize                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::MulticastDrawDebugArrow(class AActor* ReplicatedActor, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MulticastDrawDebugArrow");

	UVictoryCore_MulticastDrawDebugArrow_Params params;
	params.ReplicatedActor = ReplicatedActor;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.ArrowSize = ArrowSize;
	params.LineColor = LineColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.MapRangeToCurveClamped
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::MapRangeToCurveClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MapRangeToCurveClamped");

	UVictoryCore_MapRangeToCurveClamped_Params params;
	params.Value = Value;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.MapAngleRangeToCurveClamped
// ()
// Parameters:
// float                          AngleDegrees                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeA                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRangeB                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeA                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutRangeB                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ESimpleCurve>      CurveType                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::MapAngleRangeToCurveClamped(float AngleDegrees, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB, TEnumAsByte<ESimpleCurve> CurveType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MapAngleRangeToCurveClamped");

	UVictoryCore_MapAngleRangeToCurveClamped_Params params;
	params.AngleDegrees = AngleDegrees;
	params.InRangeA = InRangeA;
	params.InRangeB = InRangeB;
	params.OutRangeA = OutRangeA;
	params.OutRangeB = OutRangeB;
	params.CurveType = CurveType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.MakeHitResult
// ()
// Parameters:
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Normal                         (Parm, ZeroConstructor, IsPlainOldData)
// class UPhysicalMaterial*       PhysMat                        (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  HitActor                       (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   HitBoneName                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            HitItem                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBlockingHit                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FHitResult UVictoryCore::MakeHitResult(const struct FVector& Location, const struct FVector& Normal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, bool bBlockingHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.MakeHitResult");

	UVictoryCore_MakeHitResult_Params params;
	params.Location = Location;
	params.Normal = Normal;
	params.PhysMat = PhysMat;
	params.HitActor = HitActor;
	params.HitComponent = HitComponent;
	params.HitBoneName = HitBoneName;
	params.HitItem = HitItem;
	params.bBlockingHit = bBlockingHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.LeadTargetPosition
// ()
// Parameters:
// struct FVector                 ProjLocation                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ProjSpeed                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TargetLocation                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 TargetVelocity                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::LeadTargetPosition(const struct FVector& ProjLocation, float ProjSpeed, const struct FVector& TargetLocation, const struct FVector& TargetVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.LeadTargetPosition");

	UVictoryCore_LeadTargetPosition_Params params;
	params.ProjLocation = ProjLocation;
	params.ProjSpeed = ProjSpeed;
	params.TargetLocation = TargetLocation;
	params.TargetVelocity = TargetVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.KillTargetCharacterOrStructure
// ()
// Parameters:
// class AActor*                  ActorToKill                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTryDestroyActor               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::KillTargetCharacterOrStructure(class AActor* ActorToKill, bool bTryDestroyActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.KillTargetCharacterOrStructure");

	UVictoryCore_KillTargetCharacterOrStructure_Params params;
	params.ActorToKill = ActorToKill;
	params.bTryDestroyActor = bTryDestroyActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.JoinStringArrayWithNewlines
// ()
// Parameters:
// TArray<class FString>          SourceArray                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::JoinStringArrayWithNewlines(TArray<class FString> SourceArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.JoinStringArrayWithNewlines");

	UVictoryCore_JoinStringArrayWithNewlines_Params params;
	params.SourceArray = SourceArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsXboxOneBuild
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsXboxOneBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsXboxOneBuild");

	UVictoryCore_IsXboxOneBuild_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsWorkshopIDSubscribed
// ()
// Parameters:
// class FString                  WorkshopID                     (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsWorkshopIDSubscribed(const class FString& WorkshopID)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsWorkshopIDSubscribed");

	UVictoryCore_IsWorkshopIDSubscribed_Params params;
	params.WorkshopID = WorkshopID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsUnderMesh
// ()
// Parameters:
// class APrimalCharacter*        Character                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CheckSevenHitLocation          (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bOverlapping                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class UActorComponent*         CheckSevenResult               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           DebugDraw                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawSeconds               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsUnderMesh(class APrimalCharacter* Character, bool DebugDraw, float DebugDrawSeconds, struct FVector* CheckSevenHitLocation, bool* bOverlapping, class UActorComponent** CheckSevenResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsUnderMesh");

	UVictoryCore_IsUnderMesh_Params params;
	params.Character = Character;
	params.DebugDraw = DebugDraw;
	params.DebugDrawSeconds = DebugDrawSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CheckSevenHitLocation != nullptr)
		*CheckSevenHitLocation = params.CheckSevenHitLocation;
	if (bOverlapping != nullptr)
		*bOverlapping = params.bOverlapping;
	if (CheckSevenResult != nullptr)
		*CheckSevenResult = params.CheckSevenResult;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsTimeSince_Network
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// double                         OldTime                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          CheckTimeSince                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTrueAtZeroTime           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsTimeSince_Network(class UWorld* ForWorld, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsTimeSince_Network");

	UVictoryCore_IsTimeSince_Network_Params params;
	params.ForWorld = ForWorld;
	params.OldTime = OldTime;
	params.CheckTimeSince = CheckTimeSince;
	params.bForceTrueAtZeroTime = bForceTrueAtZeroTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsTimeSince
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// double                         OldTime                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          CheckTimeSince                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceTrueAtZeroTime           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsTimeSince(class UWorld* ForWorld, double OldTime, float CheckTimeSince, bool bForceTrueAtZeroTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsTimeSince");

	UVictoryCore_IsTimeSince_Params params;
	params.ForWorld = ForWorld;
	params.OldTime = OldTime;
	params.CheckTimeSince = CheckTimeSince;
	params.bForceTrueAtZeroTime = bForceTrueAtZeroTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsSplitscreen
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsSplitscreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsSplitscreen");

	UVictoryCore_IsSplitscreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsShipping
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsShipping()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsShipping");

	UVictoryCore_IsShipping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsSavingSaveGame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsSavingSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsSavingSaveGame");

	UVictoryCore_IsSavingSaveGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsPVEServer
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsPVEServer(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsPVEServer");

	UVictoryCore_IsPVEServer_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsPS4Build
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsPS4Build()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsPS4Build");

	UVictoryCore_IsPS4Build_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsPointStuckWithinMesh
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TestPoint                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            hemisphereSubdivisions         (Parm, ZeroConstructor, IsPlainOldData)
// float                          rayDistance                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          percentageConsideredStuck      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorToIgnore                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsPointStuckWithinMesh(class UWorld* TheWorld, const struct FVector& TestPoint, int hemisphereSubdivisions, float rayDistance, float percentageConsideredStuck, class AActor* ActorToIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsPointStuckWithinMesh");

	UVictoryCore_IsPointStuckWithinMesh_Params params;
	params.TheWorld = TheWorld;
	params.TestPoint = TestPoint;
	params.hemisphereSubdivisions = hemisphereSubdivisions;
	params.rayDistance = rayDistance;
	params.percentageConsideredStuck = percentageConsideredStuck;
	params.ActorToIgnore = ActorToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsLoadingSaveGame
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsLoadingSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsLoadingSaveGame");

	UVictoryCore_IsLoadingSaveGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsGameWorld
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsGameWorld(class UWorld* TheWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsGameWorld");

	UVictoryCore_IsGameWorld_Params params;
	params.TheWorld = TheWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsGamePadConnected
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsGamePadConnected()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsGamePadConnected");

	UVictoryCore_IsGamePadConnected_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsEditor
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsEditor");

	UVictoryCore_IsEditor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsDistanceLessThan
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsDistanceLessThan(const struct FVector& A, const struct FVector& B, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsDistanceLessThan");

	UVictoryCore_IsDistanceLessThan_Params params;
	params.A = A;
	params.B = B;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsDistanceGreaterThan
// ()
// Parameters:
// struct FVector                 A                              (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsDistanceGreaterThan(const struct FVector& A, const struct FVector& B, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsDistanceGreaterThan");

	UVictoryCore_IsDistanceGreaterThan_Params params;
	params.A = A;
	params.B = B;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsDinoDuped
// ()
// Parameters:
// class UWorld*                  WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ID1                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ID2                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsDinoDuped(class UWorld* WorldContext, uint32_t ID1, uint32_t ID2)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsDinoDuped");

	UVictoryCore_IsDinoDuped_Params params;
	params.WorldContext = WorldContext;
	params.ID1 = ID1;
	params.ID2 = ID2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsCooldownComplete
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// double                         CooldownClock                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          CooldownDuration               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsCooldownComplete(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsCooldownComplete");

	UVictoryCore_IsCooldownComplete_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CooldownClock = CooldownClock;
	params.CooldownDuration = CooldownDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsConsoleBuild
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::IsConsoleBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsConsoleBuild");

	UVictoryCore_IsConsoleBuild_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IsChildOfClasses
// ()
// Parameters:
// class UClass*                  childClass                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UClass*>          ParentClassesArray             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UVictoryCore::IsChildOfClasses(class UClass* childClass, TArray<class UClass*> ParentClassesArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IsChildOfClasses");

	UVictoryCore_IsChildOfClasses_Params params;
	params.childClass = childClass;
	params.ParentClassesArray = ParentClassesArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.InverseTransformVectorByScreenProjectionGlobalTransform
// ()
// Parameters:
// struct FVector2D               outVec                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UVictoryCore::InverseTransformVectorByScreenProjectionGlobalTransform(const struct FVector2D& outVec)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.InverseTransformVectorByScreenProjectionGlobalTransform");

	UVictoryCore_InverseTransformVectorByScreenProjectionGlobalTransform_Params params;
	params.outVec = outVec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.InverseTransform
// ()
// Parameters:
// struct FTransform              TransformIn                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UVictoryCore::InverseTransform(const struct FTransform& TransformIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.InverseTransform");

	UVictoryCore_InverseTransform_Params params;
	params.TransformIn = TransformIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.IntToStringAscii
// ()
// Parameters:
// int                            CharValue                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::IntToStringAscii(int CharValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.IntToStringAscii");

	UVictoryCore_IntToStringAscii_Params params;
	params.CharValue = CharValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.Helix
// ()
// Parameters:
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::Helix(float Radius, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.Helix");

	UVictoryCore_Helix_Params params;
	params.Radius = Radius;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetWorldSublevels
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class ULevelStreaming*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class ULevelStreaming*> UVictoryCore::GetWorldSublevels(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetWorldSublevels");

	UVictoryCore_GetWorldSublevels_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetWeightedRandomIndexFromArray
// ()
// Parameters:
// TArray<float>                  pArray                         (Parm, ZeroConstructor)
// float                          ForceRand                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UVictoryCore::GetWeightedRandomIndexFromArray(TArray<float> pArray, float ForceRand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetWeightedRandomIndexFromArray");

	UVictoryCore_GetWeightedRandomIndexFromArray_Params params;
	params.pArray = pArray;
	params.ForceRand = ForceRand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetTwoLetterISOLanguageName
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetTwoLetterISOLanguageName()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetTwoLetterISOLanguageName");

	UVictoryCore_GetTwoLetterISOLanguageName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetTimeSince
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetTimeSince(class APawn* Pawn, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetTimeSince");

	UVictoryCore_GetTimeSince_Params params;
	params.Pawn = Pawn;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetTimeSeconds
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetTimeSeconds(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetTimeSeconds");

	UVictoryCore_GetTimeSeconds_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetTeamColor
// ()
// Parameters:
// int                            TargetingTeam                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FColor                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FColor UVictoryCore::GetTeamColor(int TargetingTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetTeamColor");

	UVictoryCore_GetTeamColor_Params params;
	params.TargetingTeam = TargetingTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetSpecialActorList
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EActorListsBP>     ActorListType                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void UVictoryCore::GetSpecialActorList(class UWorld* ForWorld, TEnumAsByte<EActorListsBP> ActorListType, TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetSpecialActorList");

	UVictoryCore_GetSpecialActorList_Params params;
	params.ForWorld = ForWorld;
	params.ActorListType = ActorListType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function ShooterGame.VictoryCore.GetShooterGameUserSettings
// ()
// Parameters:
// class UShooterGameUserSettings* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UShooterGameUserSettings* UVictoryCore::GetShooterGameUserSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetShooterGameUserSettings");

	UVictoryCore_GetShooterGameUserSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetShooterCharacterFromPawn
// ()
// Parameters:
// class APawn*                   Pawn                           (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* UVictoryCore::GetShooterCharacterFromPawn(class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetShooterCharacterFromPawn");

	UVictoryCore_GetShooterCharacterFromPawn_Params params;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetShooterCharacterFromController
// ()
// Parameters:
// class AController*             Controller                     (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* UVictoryCore::GetShooterCharacterFromController(class AController* Controller)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetShooterCharacterFromController");

	UVictoryCore_GetShooterCharacterFromController_Params params;
	params.Controller = Controller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetSecondsIntoDay
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UVictoryCore::GetSecondsIntoDay()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetSecondsIntoDay");

	UVictoryCore_GetSecondsIntoDay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetScreenPercentage
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetScreenPercentage()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetScreenPercentage");

	UVictoryCore_GetScreenPercentage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetRealWorldUtcTimeInSeconds
// ()
// Parameters:
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UVictoryCore::GetRealWorldUtcTimeInSeconds()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetRealWorldUtcTimeInSeconds");

	UVictoryCore_GetRealWorldUtcTimeInSeconds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetProjectileArcPeakTime
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FProjectileArc          Arc                            (ConstParm, Parm, OutParm, ReferenceParm)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetProjectileArcPeakTime(class UObject* WorldContextObject, const struct FProjectileArc& Arc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetProjectileArcPeakTime");

	UVictoryCore_GetProjectileArcPeakTime_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Arc = Arc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetPrimaryWorld
// ()
// Parameters:
// class UWorld*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWorld* UVictoryCore::GetPrimaryWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetPrimaryWorld");

	UVictoryCore_GetPrimaryWorld_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetPlayerCharacterByIndex
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* UVictoryCore::GetPlayerCharacterByIndex(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetPlayerCharacterByIndex");

	UVictoryCore_GetPlayerCharacterByIndex_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetPlayerCharacterByController
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class AShooterCharacter*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AShooterCharacter* UVictoryCore::GetPlayerCharacterByController(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetPlayerCharacterByController");

	UVictoryCore_GetPlayerCharacterByController_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetOverlappedHarvestActors
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtLoc                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          AtRadius                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          OutHarvestActors               (Parm, OutParm, ZeroConstructor)
// TArray<class UActorComponent*> OutHarvestComponents           (Parm, OutParm, ZeroConstructor)
// TArray<struct FVector>         OutHarvestLocations            (Parm, OutParm, ZeroConstructor)
// TArray<int>                    OutHitBodyIndices              (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::GetOverlappedHarvestActors(class UWorld* ForWorld, const struct FVector& AtLoc, float AtRadius, TArray<class AActor*>* OutHarvestActors, TArray<class UActorComponent*>* OutHarvestComponents, TArray<struct FVector>* OutHarvestLocations, TArray<int>* OutHitBodyIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetOverlappedHarvestActors");

	UVictoryCore_GetOverlappedHarvestActors_Params params;
	params.ForWorld = ForWorld;
	params.AtLoc = AtLoc;
	params.AtRadius = AtRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHarvestActors != nullptr)
		*OutHarvestActors = params.OutHarvestActors;
	if (OutHarvestComponents != nullptr)
		*OutHarvestComponents = params.OutHarvestComponents;
	if (OutHarvestLocations != nullptr)
		*OutHarvestLocations = params.OutHarvestLocations;
	if (OutHitBodyIndices != nullptr)
		*OutHitBodyIndices = params.OutHitBodyIndices;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetObjectString
// ()
// Parameters:
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetObjectString(class UObject* ForObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetObjectString");

	UVictoryCore_GetObjectString_Params params;
	params.ForObject = ForObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetObjectsReferencedBy
// ()
// Parameters:
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UObject*>         OutReferencedObjects           (Parm, OutParm, ZeroConstructor)
// bool                           bIgnoreTransient               (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::GetObjectsReferencedBy(class UObject* ForObject, bool bIgnoreTransient, TArray<class UObject*>* OutReferencedObjects)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetObjectsReferencedBy");

	UVictoryCore_GetObjectsReferencedBy_Params params;
	params.ForObject = ForObject;
	params.bIgnoreTransient = bIgnoreTransient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutReferencedObjects != nullptr)
		*OutReferencedObjects = params.OutReferencedObjects;
}


// Function ShooterGame.VictoryCore.GetObjectPathName
// ()
// Parameters:
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetObjectPathName(class UObject* ForObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetObjectPathName");

	UVictoryCore_GetObjectPathName_Params params;
	params.ForObject = ForObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetObjectName
// ()
// Parameters:
// class UObject*                 ForObject                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UVictoryCore::GetObjectName(class UObject* ForObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetObjectName");

	UVictoryCore_GetObjectName_Params params;
	params.ForObject = ForObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetObjectFName
// ()
// Parameters:
// class UObject*                 ForObject                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UVictoryCore::GetObjectFName(class UObject* ForObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetObjectFName");

	UVictoryCore_GetObjectFName_Params params;
	params.ForObject = ForObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetNewlineCharacter
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetNewlineCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetNewlineCharacter");

	UVictoryCore_GetNewlineCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetNetworkTimeInSeconds
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UVictoryCore::GetNetworkTimeInSeconds(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetNetworkTimeInSeconds");

	UVictoryCore_GetNetworkTimeInSeconds_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetLocaleSpecificAudio
// ()
// Parameters:
// TArray<struct FLocalizedSoundCueEntry> LocalizedSoundCues             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FLocalizedSoundCueEntry OutLocalizedAudio              (Parm, OutParm)
// class FString                  LanguageOverride               (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::GetLocaleSpecificAudio(TArray<struct FLocalizedSoundCueEntry> LocalizedSoundCues, const class FString& LanguageOverride, struct FLocalizedSoundCueEntry* OutLocalizedAudio)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetLocaleSpecificAudio");

	UVictoryCore_GetLocaleSpecificAudio_Params params;
	params.LocalizedSoundCues = LocalizedSoundCues;
	params.LanguageOverride = LanguageOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocalizedAudio != nullptr)
		*OutLocalizedAudio = params.OutLocalizedAudio;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetLastMapPlayed
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetLastMapPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetLastMapPlayed");

	UVictoryCore_GetLastMapPlayed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetLastHostedMapPlayed
// ()
// Parameters:
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetLastHostedMapPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetLastHostedMapPlayed");

	UVictoryCore_GetLastHostedMapPlayed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetKeyNameFromActionName
// ()
// Parameters:
// struct FName                   ActionName                     (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetKeyNameFromActionName(const struct FName& ActionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetKeyNameFromActionName");

	UVictoryCore_GetKeyNameFromActionName_Params params;
	params.ActionName = ActionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetKeyName
// ()
// Parameters:
// struct FKey                    Key                            (Parm)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetKeyName(const struct FKey& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetKeyName");

	UVictoryCore_GetKeyName_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetItemClassFromItemSetup
// ()
// Parameters:
// struct FItemSetup              ItemSetup                      (ConstParm, Parm, OutParm, ReferenceParm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UVictoryCore::GetItemClassFromItemSetup(const struct FItemSetup& ItemSetup)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetItemClassFromItemSetup");

	UVictoryCore_GetItemClassFromItemSetup_Params params;
	params.ItemSetup = ItemSetup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetHitBoneNameFromDamageEvent
// ()
// Parameters:
// class APrimalCharacter*        Character                      (Parm, ZeroConstructor, IsPlainOldData)
// class AController*             HitInstigator                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FDamageEvent            DamageEvent                    (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsPointDamage                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              PointHitResult                 (ConstParm, Parm, OutParm, ReferenceParm)
// struct FName                   MatchCollisionPresetName       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UVictoryCore::GetHitBoneNameFromDamageEvent(class APrimalCharacter* Character, class AController* HitInstigator, const struct FDamageEvent& DamageEvent, bool bIsPointDamage, const struct FHitResult& PointHitResult, const struct FName& MatchCollisionPresetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetHitBoneNameFromDamageEvent");

	UVictoryCore_GetHitBoneNameFromDamageEvent_Params params;
	params.Character = Character;
	params.HitInstigator = HitInstigator;
	params.DamageEvent = DamageEvent;
	params.bIsPointDamage = bIsPointDamage;
	params.PointHitResult = PointHitResult;
	params.MatchCollisionPresetName = MatchCollisionPresetName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetGroundLocation
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 theGroundLoc                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartLoc                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 OffsetUp                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 OffsetDown                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::GetGroundLocation(class UWorld* ForWorld, const struct FVector& StartLoc, const struct FVector& OffsetUp, const struct FVector& OffsetDown, struct FVector* theGroundLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetGroundLocation");

	UVictoryCore_GetGroundLocation_Params params;
	params.ForWorld = ForWorld;
	params.StartLoc = StartLoc;
	params.OffsetUp = OffsetUp;
	params.OffsetDown = OffsetDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (theGroundLoc != nullptr)
		*theGroundLoc = params.theGroundLoc;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetFirstDirectionalLight
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// class ADirectionalLight*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ADirectionalLight* UVictoryCore::GetFirstDirectionalLight(class UWorld* World)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetFirstDirectionalLight");

	UVictoryCore_GetFirstDirectionalLight_Params params;
	params.World = World;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetDistanceToCollision
// ()
// Parameters:
// class UPrimitiveComponent*     Comp                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Point                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 closestPoint                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetDistanceToCollision(class UPrimitiveComponent* Comp, const struct FVector& Point, struct FVector* closestPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetDistanceToCollision");

	UVictoryCore_GetDistanceToCollision_Params params;
	params.Comp = Comp;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (closestPoint != nullptr)
		*closestPoint = params.closestPoint;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetDinoSetupPointsPerStat
// ()
// Parameters:
// struct FDinoSetup              DinoSetup                      (ConstParm, Parm, OutParm, ReferenceParm)
// TEnumAsByte<EPrimalCharacterStatusValue> StatusType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bGetPlayerAdded                (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UVictoryCore::GetDinoSetupPointsPerStat(const struct FDinoSetup& DinoSetup, TEnumAsByte<EPrimalCharacterStatusValue> StatusType, bool bGetPlayerAdded)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetDinoSetupPointsPerStat");

	UVictoryCore_GetDinoSetupPointsPerStat_Params params;
	params.DinoSetup = DinoSetup;
	params.StatusType = StatusType;
	params.bGetPlayerAdded = bGetPlayerAdded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetDinoCharacterByID
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            DinoID1                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            DinoID2                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSearchTamedOnly               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class APrimalDinoCharacter*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APrimalDinoCharacter* UVictoryCore::GetDinoCharacterByID(class UObject* WorldContextObject, int DinoID1, int DinoID2, bool bSearchTamedOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetDinoCharacterByID");

	UVictoryCore_GetDinoCharacterByID_Params params;
	params.WorldContextObject = WorldContextObject;
	params.DinoID1 = DinoID1;
	params.DinoID2 = DinoID2;
	params.bSearchTamedOnly = bSearchTamedOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetDefaultObject
// ()
// Parameters:
// class UObject*                 FromObjectInstance             (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::GetDefaultObject(class UObject* FromObjectInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetDefaultObject");

	UVictoryCore_GetDefaultObject_Params params;
	params.FromObjectInstance = FromObjectInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetCustomDinoSpawnLocation
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpawnLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                SpawnRotation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FDinoSetup              DinoSetup                      (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bApplyRotationToSpawnOffset    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::GetCustomDinoSpawnLocation(class UWorld* World, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, bool bApplyRotationToSpawnOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetCustomDinoSpawnLocation");

	UVictoryCore_GetCustomDinoSpawnLocation_Params params;
	params.World = World;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.DinoSetup = DinoSetup;
	params.DebugDrawDuration = DebugDrawDuration;
	params.bApplyRotationToSpawnOffset = bApplyRotationToSpawnOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetCustomActorList
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SearchCustomTag                (Parm, ZeroConstructor, IsPlainOldData)
// class ACustomActorList*        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ACustomActorList* UVictoryCore::GetCustomActorList(class UWorld* ForWorld, const struct FName& SearchCustomTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetCustomActorList");

	UVictoryCore_GetCustomActorList_Params params;
	params.ForWorld = ForWorld;
	params.SearchCustomTag = SearchCustomTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetCurrentCameraExposure
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetCurrentCameraExposure()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetCurrentCameraExposure");

	UVictoryCore_GetCurrentCameraExposure_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetClosestActorArray
// ()
// Parameters:
// struct FVector                 ToPoint                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorArray                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UVictoryCore::GetClosestActorArray(const struct FVector& ToPoint, TArray<class AActor*> ActorArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetClosestActorArray");

	UVictoryCore_GetClosestActorArray_Params params;
	params.ToPoint = ToPoint;
	params.ActorArray = ActorArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetClassString
// ()
// Parameters:
// class UClass*                  ForClass                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetClassString(class UClass* ForClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetClassString");

	UVictoryCore_GetClassString_Params params;
	params.ForClass = ForClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetClassPathName
// ()
// Parameters:
// class UObject*                 ForClass                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::GetClassPathName(class UObject* ForClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetClassPathName");

	UVictoryCore_GetClassPathName_Params params;
	params.ForClass = ForClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetClassFName
// ()
// Parameters:
// class UClass*                  ForClass                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UVictoryCore::GetClassFName(class UClass* ForClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetClassFName");

	UVictoryCore_GetClassFName_Params params;
	params.ForClass = ForClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetClassDefaultObject
// ()
// Parameters:
// class UClass*                  FromClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::GetClassDefaultObject(class UClass* FromClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetClassDefaultObject");

	UVictoryCore_GetClassDefaultObject_Params params;
	params.FromClass = FromClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetCharacterCapsuleSize
// ()
// Parameters:
// class UClass*                  CharClass                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          CapsuleRadius                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          CapsuleHalfHeight              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::GetCharacterCapsuleSize(class UClass* CharClass, float* CapsuleRadius, float* CapsuleHalfHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetCharacterCapsuleSize");

	UVictoryCore_GetCharacterCapsuleSize_Params params;
	params.CharClass = CharClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CapsuleRadius != nullptr)
		*CapsuleRadius = params.CapsuleRadius;
	if (CapsuleHalfHeight != nullptr)
		*CapsuleHalfHeight = params.CapsuleHalfHeight;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetArrayIndicesSorted_Int
// ()
// Parameters:
// TArray<int>                    Array                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bSortLowToHigh                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> UVictoryCore::GetArrayIndicesSorted_Int(TArray<int> Array, bool bSortLowToHigh)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetArrayIndicesSorted_Int");

	UVictoryCore_GetArrayIndicesSorted_Int_Params params;
	params.Array = Array;
	params.bSortLowToHigh = bSortLowToHigh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetArrayIndicesSorted_Float
// ()
// Parameters:
// TArray<float>                  Array                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bSortLowToHigh                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> UVictoryCore::GetArrayIndicesSorted_Float(TArray<float> Array, bool bSortLowToHigh)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetArrayIndicesSorted_Float");

	UVictoryCore_GetArrayIndicesSorted_Float_Params params;
	params.Array = Array;
	params.bSortLowToHigh = bSortLowToHigh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetArrayIndicesSorted_Double
// ()
// Parameters:
// TArray<double>                 Array                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bSortLowToHigh                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<int> UVictoryCore::GetArrayIndicesSorted_Double(TArray<double> Array, bool bSortLowToHigh)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetArrayIndicesSorted_Double");

	UVictoryCore_GetArrayIndicesSorted_Double_Params params;
	params.Array = Array;
	params.bSortLowToHigh = bSortLowToHigh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetAngleBetweenVectorsPure
// ()
// Parameters:
// struct FVector                 VectorA                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 VectorB                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AroundAxis                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetAngleBetweenVectorsPure(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetAngleBetweenVectorsPure");

	UVictoryCore_GetAngleBetweenVectorsPure_Params params;
	params.VectorA = VectorA;
	params.VectorB = VectorB;
	params.AroundAxis = AroundAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetAngleBetweenVectors
// ()
// Parameters:
// struct FVector                 VectorA                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 VectorB                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 AroundAxis                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::GetAngleBetweenVectors(const struct FVector& VectorA, const struct FVector& VectorB, const struct FVector& AroundAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetAngleBetweenVectors");

	UVictoryCore_GetAngleBetweenVectors_Params params;
	params.VectorA = VectorA;
	params.VectorB = VectorB;
	params.AroundAxis = AroundAxis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetAllLocalPlayerControllers
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AShooterPlayerController*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterPlayerController*> UVictoryCore::GetAllLocalPlayerControllers(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetAllLocalPlayerControllers");

	UVictoryCore_GetAllLocalPlayerControllers_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetAllLocalPlayerCharacters
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AShooterCharacter*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AShooterCharacter*> UVictoryCore::GetAllLocalPlayerCharacters(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetAllLocalPlayerCharacters");

	UVictoryCore_GetAllLocalPlayerCharacters_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.GetAllClassesOfType
// ()
// Parameters:
// TArray<class UClass*>          Subclasses                     (Parm, OutParm, ZeroConstructor)
// class UClass*                  ParentClass                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAllowAbstract                 (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Path                           (Parm, ZeroConstructor)

void UVictoryCore::GetAllClassesOfType(class UClass* ParentClass, bool bAllowAbstract, const class FString& Path, TArray<class UClass*>* Subclasses)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.GetAllClassesOfType");

	UVictoryCore_GetAllClassesOfType_Params params;
	params.ParentClass = ParentClass;
	params.bAllowAbstract = bAllowAbstract;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Subclasses != nullptr)
		*Subclasses = params.Subclasses;
}


// Function ShooterGame.VictoryCore.FormatAsTimeLong
// ()
// Parameters:
// int                            InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::FormatAsTimeLong(int InTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FormatAsTimeLong");

	UVictoryCore_FormatAsTimeLong_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FormatAsTime
// ()
// Parameters:
// int                            InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UseLeadingZero                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceLeadingZeroHour          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::FormatAsTime(int InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FormatAsTime");

	UVictoryCore_FormatAsTime_Params params;
	params.InTime = InTime;
	params.UseLeadingZero = UseLeadingZero;
	params.bForceLeadingZeroHour = bForceLeadingZeroHour;
	params.bShowSeconds = bShowSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FloatToDouble
// ()
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// double                         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

double UVictoryCore::FloatToDouble(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FloatToDouble");

	UVictoryCore_FloatToDouble_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FlattenDirectionVectorInLocalSpace
// ()
// Parameters:
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::FlattenDirectionVectorInLocalSpace(const struct FVector& Direction, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FlattenDirectionVectorInLocalSpace");

	UVictoryCore_FlattenDirectionVectorInLocalSpace_Params params;
	params.Direction = Direction;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FlattenDirectionVector
// ()
// Parameters:
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::FlattenDirectionVector(const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FlattenDirectionVector");

	UVictoryCore_FlattenDirectionVector_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FinishSpawning
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::FinishSpawning(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FinishSpawning");

	UVictoryCore_FinishSpawning_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.FindWorldActors
// ()
// Parameters:
// class UWorld*                  fWorld                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          fContainer                     (Parm, OutParm, ZeroConstructor)
// class UClass*                  fType                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   fTag                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::FindWorldActors(class UWorld* fWorld, class UClass* fType, const struct FName& fTag, TArray<class AActor*>* fContainer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FindWorldActors");

	UVictoryCore_FindWorldActors_Params params;
	params.fWorld = fWorld;
	params.fType = fType;
	params.fTag = fTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fContainer != nullptr)
		*fContainer = params.fContainer;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FindValidLocationNextToTarget
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        SourceCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalCharacter*        TargetCharacter                (Parm, ZeroConstructor, IsPlainOldData)
// float                          DistanceMargin                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxTraceCount                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorToIgnore                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::FindValidLocationNextToTarget(class UObject* WorldContextObject, class APrimalCharacter* SourceCharacter, class APrimalCharacter* TargetCharacter, float DistanceMargin, int MaxTraceCount, class AActor* ActorToIgnore, bool bTraceComplex, bool bDrawDebug, float DebugDrawDuration, struct FVector* OutLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FindValidLocationNextToTarget");

	UVictoryCore_FindValidLocationNextToTarget_Params params;
	params.WorldContextObject = WorldContextObject;
	params.SourceCharacter = SourceCharacter;
	params.TargetCharacter = TargetCharacter;
	params.DistanceMargin = DistanceMargin;
	params.MaxTraceCount = MaxTraceCount;
	params.ActorToIgnore = ActorToIgnore;
	params.bTraceComplex = bTraceComplex;
	params.bDrawDebug = bDrawDebug;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FindSocketClosestToDirection
// ()
// Parameters:
// class USkeletalMeshComponent*  Mesh                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 TargetDirection                (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FName>           Sockets                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<float>                  DotProducts                    (Parm, OutParm, ZeroConstructor)
// bool                           bOnlySocketsWithPrefix         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  SocketPrefix                   (Parm, ZeroConstructor)
// struct FName                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FName UVictoryCore::FindSocketClosestToDirection(class USkeletalMeshComponent* Mesh, const struct FVector& TargetDirection, TArray<struct FName> Sockets, bool bOnlySocketsWithPrefix, const class FString& SocketPrefix, TArray<float>* DotProducts)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FindSocketClosestToDirection");

	UVictoryCore_FindSocketClosestToDirection_Params params;
	params.Mesh = Mesh;
	params.TargetDirection = TargetDirection;
	params.Sockets = Sockets;
	params.bOnlySocketsWithPrefix = bOnlySocketsWithPrefix;
	params.SocketPrefix = SocketPrefix;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DotProducts != nullptr)
		*DotProducts = params.DotProducts;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.FindActorAIState
// ()
// Parameters:
// class UClass*                  fStateType                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FDinoAttackInfo> fContainerOfStates             (Parm, ZeroConstructor)
// class UPrimalAIState*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UPrimalAIState* UVictoryCore::FindActorAIState(class UClass* fStateType, TArray<struct FDinoAttackInfo> fContainerOfStates)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.FindActorAIState");

	UVictoryCore_FindActorAIState_Params params;
	params.fStateType = fStateType;
	params.fContainerOfStates = fContainerOfStates;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.EvalProjectileArc
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FProjectileArc          Arc                            (ConstParm, Parm, OutParm, ReferenceParm)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::EvalProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.EvalProjectileArc");

	UVictoryCore_EvalProjectileArc_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Arc = Arc;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.DebugDrawProjectileArc
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FProjectileArc          Arc                            (ConstParm, Parm, OutParm, ReferenceParm)
// float                          MaxArcTime                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          ArcTimeStep                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            LineColor                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          LineThickness                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::DebugDrawProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, float MaxArcTime, float ArcTimeStep, const struct FLinearColor& LineColor, float LineThickness, float DebugDrawDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.DebugDrawProjectileArc");

	UVictoryCore_DebugDrawProjectileArc_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Arc = Arc;
	params.MaxArcTime = MaxArcTime;
	params.ArcTimeStep = ArcTimeStep;
	params.LineColor = LineColor;
	params.LineThickness = LineThickness;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.CooldownTimeRemaining
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// double                         CooldownClock                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          CooldownDuration               (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::CooldownTimeRemaining(class UObject* WorldContextObject, double CooldownClock, float CooldownDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.CooldownTimeRemaining");

	UVictoryCore_CooldownTimeRemaining_Params params;
	params.WorldContextObject = WorldContextObject;
	params.CooldownClock = CooldownClock;
	params.CooldownDuration = CooldownDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ConstructObjectBP
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Outer                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   Name                           (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::ConstructObjectBP(class UClass* Class, class UObject* Outer, const struct FName& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ConstructObjectBP");

	UVictoryCore_ConstructObjectBP_Params params;
	params.Class = Class;
	params.Outer = Outer;
	params.Name = Name;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ConstructObjectAutoNameBP
// ()
// Parameters:
// class UClass*                  Class                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 Outer                          (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::ConstructObjectAutoNameBP(class UClass* Class, class UObject* Outer)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ConstructObjectAutoNameBP");

	UVictoryCore_ConstructObjectAutoNameBP_Params params;
	params.Class = Class;
	params.Outer = Outer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ComponentBoundsEncompassesPoint
// ()
// Parameters:
// class UPrimitiveComponent*     Comp                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 Point                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          BoundsMultiplier               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::ComponentBoundsEncompassesPoint(class UPrimitiveComponent* Comp, const struct FVector& Point, float BoundsMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ComponentBoundsEncompassesPoint");

	UVictoryCore_ComponentBoundsEncompassesPoint_Params params;
	params.Comp = Comp;
	params.Point = Point;
	params.BoundsMultiplier = BoundsMultiplier;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ClassRefToObjectRef
// ()
// Parameters:
// class UClass*                  InClass                        (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::ClassRefToObjectRef(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ClassRefToObjectRef");

	UVictoryCore_ClassRefToObjectRef_Params params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ClampRotAxis
// ()
// Parameters:
// float                          BaseAxis                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          DesiredAxis                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxDiff                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::ClampRotAxis(float BaseAxis, float DesiredAxis, float MaxDiff)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ClampRotAxis");

	UVictoryCore_ClampRotAxis_Params params;
	params.BaseAxis = BaseAxis;
	params.DesiredAxis = DesiredAxis;
	params.MaxDiff = MaxDiff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ClampLocation
// ()
// Parameters:
// struct FVector                 BaseLocation                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DesiredLocation                (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxDiff                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceClampLocation            (Parm, ZeroConstructor, IsPlainOldData)
// class UWorld*                  TraceWorld                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceFromLocation              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector UVictoryCore::ClampLocation(const struct FVector& BaseLocation, const struct FVector& DesiredLocation, float MaxDiff, bool bTraceClampLocation, class UWorld* TraceWorld, const struct FVector& TraceFromLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ClampLocation");

	UVictoryCore_ClampLocation_Params params;
	params.BaseLocation = BaseLocation;
	params.DesiredLocation = DesiredLocation;
	params.MaxDiff = MaxDiff;
	params.bTraceClampLocation = bTraceClampLocation;
	params.TraceWorld = TraceWorld;
	params.TraceFromLocation = TraceFromLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.ChangeSaturation
// ()
// Parameters:
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          NewSaturation                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UVictoryCore::ChangeSaturation(const struct FLinearColor& InColor, float NewSaturation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.ChangeSaturation");

	UVictoryCore_ChangeSaturation_Params params;
	params.InColor = InColor;
	params.NewSaturation = NewSaturation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.CapsuleSweepProjectileArc
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FProjectileArc          Arc                            (ConstParm, Parm, OutParm, ReferenceParm)
// struct FRotator                CapsuleRotation                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          CapsuleRadius                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          CapsuleHalfHeight              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRotateCapsuleAlongPath        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              HitResult                      (Parm, OutParm)
// struct FVector                 EndLocation                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          EndArcTime                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          MaxArcLength                   (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ArcTimeStep                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> CollisionChannel               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::CapsuleSweepProjectileArc(class UObject* WorldContextObject, const struct FProjectileArc& Arc, const struct FRotator& CapsuleRotation, float CapsuleRadius, float CapsuleHalfHeight, bool bRotateCapsuleAlongPath, bool bTraceComplex, float MaxArcLength, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, float ArcTimeStep, TEnumAsByte<ECollisionChannel> CollisionChannel, bool bDrawDebug, float DebugDrawDuration, struct FHitResult* HitResult, struct FVector* EndLocation, float* EndArcTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.CapsuleSweepProjectileArc");

	UVictoryCore_CapsuleSweepProjectileArc_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Arc = Arc;
	params.CapsuleRotation = CapsuleRotation;
	params.CapsuleRadius = CapsuleRadius;
	params.CapsuleHalfHeight = CapsuleHalfHeight;
	params.bRotateCapsuleAlongPath = bRotateCapsuleAlongPath;
	params.bTraceComplex = bTraceComplex;
	params.MaxArcLength = MaxArcLength;
	params.ActorsToIgnore = ActorsToIgnore;
	params.bIgnoreSelf = bIgnoreSelf;
	params.ArcTimeStep = ArcTimeStep;
	params.CollisionChannel = CollisionChannel;
	params.bDrawDebug = bDrawDebug;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;
	if (EndLocation != nullptr)
		*EndLocation = params.EndLocation;
	if (EndArcTime != nullptr)
		*EndArcTime = params.EndArcTime;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.CapsuleSweepMulti
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      OutHits                        (Parm, OutParm, ZeroConstructor)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                CapsuleRot                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AActor*>          ActorsToIgnore                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> CollisionChannel               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFindInitialOverlaps           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::CapsuleSweepMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, TArray<class AActor*> ActorsToIgnore, bool bIgnoreSelf, TEnumAsByte<ECollisionChannel> CollisionChannel, bool bTraceComplex, bool bDebugDraw, float DebugDrawDuration, bool bFindInitialOverlaps, TArray<struct FHitResult>* OutHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.CapsuleSweepMulti");

	UVictoryCore_CapsuleSweepMulti_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.CapsuleRot = CapsuleRot;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.ActorsToIgnore = ActorsToIgnore;
	params.bIgnoreSelf = bIgnoreSelf;
	params.CollisionChannel = CollisionChannel;
	params.bTraceComplex = bTraceComplex;
	params.bDebugDraw = bDebugDraw;
	params.DebugDrawDuration = DebugDrawDuration;
	params.bFindInitialOverlaps = bFindInitialOverlaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHits != nullptr)
		*OutHits = params.OutHits;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.CapsuleSweepFast
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OutHit                         (Parm, OutParm)
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                CapsuleRot                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> CollisionChannel               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  IgnoreActor                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::CapsuleSweepFast(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FRotator& CapsuleRot, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration, struct FHitResult* OutHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.CapsuleSweepFast");

	UVictoryCore_CapsuleSweepFast_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Start = Start;
	params.End = End;
	params.CapsuleRot = CapsuleRot;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.CollisionChannel = CollisionChannel;
	params.bTraceComplex = bTraceComplex;
	params.bIgnoreSelf = bIgnoreSelf;
	params.IgnoreActor = IgnoreActor;
	params.bDebugDraw = bDebugDraw;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHit != nullptr)
		*OutHit = params.OutHit;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.CapsuleOverlapFast
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  FirstOverlappedActor           (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Origin                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                CapsuleRotation                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          HalfHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> CollisionChannel               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTraceComplex                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreSelf                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  IgnoreActor                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBlockingOnly                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::CapsuleOverlapFast(class UObject* WorldContextObject, const struct FVector& Origin, const struct FRotator& CapsuleRotation, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> CollisionChannel, bool bTraceComplex, bool bIgnoreSelf, class AActor* IgnoreActor, bool bDebugDraw, float DebugDrawDuration, bool bBlockingOnly, class AActor** FirstOverlappedActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.CapsuleOverlapFast");

	UVictoryCore_CapsuleOverlapFast_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Origin = Origin;
	params.CapsuleRotation = CapsuleRotation;
	params.Radius = Radius;
	params.HalfHeight = HalfHeight;
	params.CollisionChannel = CollisionChannel;
	params.bTraceComplex = bTraceComplex;
	params.bIgnoreSelf = bIgnoreSelf;
	params.IgnoreActor = IgnoreActor;
	params.bDebugDraw = bDebugDraw;
	params.DebugDrawDuration = DebugDrawDuration;
	params.bBlockingOnly = bBlockingOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FirstOverlappedActor != nullptr)
		*FirstOverlappedActor = params.FirstOverlappedActor;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.CanSpawnCustomDino
// ()
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 CalculatedSpawnLocation        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PlayerLocation                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 SpawnLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                SpawnRotation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FDinoSetup              DinoSetup                      (ConstParm, Parm, OutParm, ReferenceParm)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::CanSpawnCustomDino(class UWorld* World, const struct FVector& PlayerLocation, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, const struct FDinoSetup& DinoSetup, float DebugDrawDuration, struct FVector* CalculatedSpawnLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.CanSpawnCustomDino");

	UVictoryCore_CanSpawnCustomDino_Params params;
	params.World = World;
	params.PlayerLocation = PlayerLocation;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.DinoSetup = DinoSetup;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CalculatedSpawnLocation != nullptr)
		*CalculatedSpawnLocation = params.CalculatedSpawnLocation;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.CallGlobalLevelEvent
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   EventName                      (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::CallGlobalLevelEvent(class UWorld* ForWorld, const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.CallGlobalLevelEvent");

	UVictoryCore_CallGlobalLevelEvent_Params params;
	params.ForWorld = ForWorld;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.BPRTransformInverse
// ()
// Parameters:
// struct FRotator                R                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                RBasis                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UVictoryCore::BPRTransformInverse(const struct FRotator& R, const struct FRotator& RBasis)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPRTransformInverse");

	UVictoryCore_BPRTransformInverse_Params params;
	params.R = R;
	params.RBasis = RBasis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPRTransform
// ()
// Parameters:
// struct FRotator                R                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                RBasis                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UVictoryCore::BPRTransform(const struct FRotator& R, const struct FRotator& RBasis)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPRTransform");

	UVictoryCore_BPRTransform_Params params;
	params.R = R;
	params.RBasis = RBasis;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPRotatorLerp
// ()
// Parameters:
// struct FRotator                A                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                B                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          Alpha                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FRotator UVictoryCore::BPRotatorLerp(const struct FRotator& A, const struct FRotator& B, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPRotatorLerp");

	UVictoryCore_BPRotatorLerp_Params params;
	params.A = A;
	params.B = B;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPProjectWorldToScreenPosition
// ()
// Parameters:
// struct FVector                 WorldLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class APlayerController*       thePC                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector2D UVictoryCore::BPProjectWorldToScreenPosition(const struct FVector& WorldLocation, class APlayerController* thePC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPProjectWorldToScreenPosition");

	UVictoryCore_BPProjectWorldToScreenPosition_Params params;
	params.WorldLocation = WorldLocation;
	params.thePC = thePC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPLoadObject
// ()
// Parameters:
// class FString                  PathName                       (Parm, ZeroConstructor)
// class UObject*                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UObject* UVictoryCore::BPLoadObject(const class FString& PathName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPLoadObject");

	UVictoryCore_BPLoadObject_Params params;
	params.PathName = PathName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPLoadClass
// ()
// Parameters:
// class FString                  PathName                       (Parm, ZeroConstructor)
// class UClass*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UClass* UVictoryCore::BPLoadClass(const class FString& PathName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPLoadClass");

	UVictoryCore_BPLoadClass_Params params;
	params.PathName = PathName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPIsTemplate
// ()
// Parameters:
// class UObject*                 AnObject                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::BPIsTemplate(class UObject* AnObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPIsTemplate");

	UVictoryCore_BPIsTemplate_Params params;
	params.AnObject = AnObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPGetWeightedRandomIndex
// ()
// Parameters:
// TArray<float>                  pArray                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          ForceRand                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UVictoryCore::BPGetWeightedRandomIndex(TArray<float> pArray, float ForceRand)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPGetWeightedRandomIndex");

	UVictoryCore_BPGetWeightedRandomIndex_Params params;
	params.pArray = pArray;
	params.ForceRand = ForceRand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPGetPrimaryMapName
// ()
// Parameters:
// class UWorld*                  WorldContext                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::BPGetPrimaryMapName(class UWorld* WorldContext)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPGetPrimaryMapName");

	UVictoryCore_BPGetPrimaryMapName_Params params;
	params.WorldContext = WorldContext;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPFormatAsTimeLong
// ()
// Parameters:
// int                            InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::BPFormatAsTimeLong(int InTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPFormatAsTimeLong");

	UVictoryCore_BPFormatAsTimeLong_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPFormatAsTime
// ()
// Parameters:
// int                            InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           UseLeadingZero                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceLeadingZeroHour          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShowSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

class FString UVictoryCore::BPFormatAsTime(int InTime, bool UseLeadingZero, bool bForceLeadingZeroHour, bool bShowSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPFormatAsTime");

	UVictoryCore_BPFormatAsTime_Params params;
	params.InTime = InTime;
	params.UseLeadingZero = UseLeadingZero;
	params.bForceLeadingZeroHour = bForceLeadingZeroHour;
	params.bShowSeconds = bShowSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPFLerpFastPure
// ()
// Parameters:
// float                          InMin                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMax                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPercent                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::BPFLerpFastPure(float InMin, float InMax, float InPercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPFLerpFastPure");

	UVictoryCore_BPFLerpFastPure_Params params;
	params.InMin = InMin;
	params.InMax = InMax;
	params.InPercent = InPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPFLerpFast
// ()
// Parameters:
// float                          InMin                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMax                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPercent                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::BPFLerpFast(float InMin, float InMax, float InPercent)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPFLerpFast");

	UVictoryCore_BPFLerpFast_Params params;
	params.InMin = InMin;
	params.InMax = InMax;
	params.InPercent = InPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPFLerp
// ()
// Parameters:
// float                          InMin                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMax                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPercent                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClampToMin                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClampToMax                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UVictoryCore::BPFLerp(float InMin, float InMax, float InPercent, bool bClampToMin, bool bClampToMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPFLerp");

	UVictoryCore_BPFLerp_Params params;
	params.InMin = InMin;
	params.InMax = InMax;
	params.InPercent = InPercent;
	params.bClampToMin = bClampToMin;
	params.bClampToMax = bClampToMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BPFastTrace
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceEnd                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 TraceStart                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorToIgnore                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::BPFastTrace(class UWorld* TheWorld, const struct FVector& TraceEnd, const struct FVector& TraceStart, class AActor* ActorToIgnore, float DebugDrawDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BPFastTrace");

	UVictoryCore_BPFastTrace_Params params;
	params.TheWorld = TheWorld;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.ActorToIgnore = ActorToIgnore;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.BoxFromOriginAndExtent
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Extent                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutBoxMin                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OutBoxMax                      (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::BoxFromOriginAndExtent(const struct FVector& Origin, const struct FVector& Extent, const struct FVector& OutBoxMax, struct FVector* OutBoxMin)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.BoxFromOriginAndExtent");

	UVictoryCore_BoxFromOriginAndExtent_Params params;
	params.Origin = Origin;
	params.Extent = Extent;
	params.OutBoxMax = OutBoxMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutBoxMin != nullptr)
		*OutBoxMin = params.OutBoxMin;
}


// Function ShooterGame.VictoryCore.AreVectorsNearlyEqual
// ()
// Parameters:
// struct FVector                 VectorA                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 VectorB                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          WithinError                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::AreVectorsNearlyEqual(const struct FVector& VectorA, const struct FVector& VectorB, float WithinError)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.AreVectorsNearlyEqual");

	UVictoryCore_AreVectorsNearlyEqual_Params params;
	params.VectorA = VectorA;
	params.VectorB = VectorB;
	params.WithinError = WithinError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.AreRotatorsNearlyEqual
// ()
// Parameters:
// struct FRotator                RotatorA                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FRotator                RotatorB                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// float                          WithinError                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVictoryCore::AreRotatorsNearlyEqual(const struct FRotator& RotatorA, const struct FRotator& RotatorB, float WithinError)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.AreRotatorsNearlyEqual");

	UVictoryCore_AreRotatorsNearlyEqual_Params params;
	params.RotatorA = RotatorA;
	params.RotatorB = RotatorB;
	params.WithinError = WithinError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.VictoryCore.AddToEditorMessageLog
// ()
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)
// TEnumAsByte<EEditorMessageLogLevel> LogLevel                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bServerOnly                    (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::AddToEditorMessageLog(class UObject* WorldContextObject, const class FString& Message, TEnumAsByte<EEditorMessageLogLevel> LogLevel, bool bServerOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.AddToEditorMessageLog");

	UVictoryCore_AddToEditorMessageLog_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Message = Message;
	params.LogLevel = LogLevel;
	params.bServerOnly = bServerOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.VictoryCore.AddToActorList
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            ActorListNum                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorRef                       (Parm, ZeroConstructor, IsPlainOldData)

void UVictoryCore::AddToActorList(class UWorld* ForWorld, int ActorListNum, class AActor* ActorRef)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.VictoryCore.AddToActorList");

	UVictoryCore_AddToActorList_Params params;
	params.ForWorld = ForWorld;
	params.ActorListNum = ActorListNum;
	params.ActorRef = ActorRef;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile_Swarm.TimeSinceProjectileSpawn
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AShooterProjectile_Swarm::TimeSinceProjectileSpawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.TimeSinceProjectileSpawn");

	AShooterProjectile_Swarm_TimeSinceProjectileSpawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterProjectile_Swarm.SpawnSwarm
// ()

void AShooterProjectile_Swarm::SpawnSwarm()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.SpawnSwarm");

	AShooterProjectile_Swarm_SpawnSwarm_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile_Swarm.MultiSyncSwarm
// ()
// Parameters:
// TArray<struct FBoid>           ServerSwarmData                (ConstParm, Parm, ZeroConstructor)

void AShooterProjectile_Swarm::MultiSyncSwarm(TArray<struct FBoid> ServerSwarmData)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.MultiSyncSwarm");

	AShooterProjectile_Swarm_MultiSyncSwarm_Params params;
	params.ServerSwarmData = ServerSwarmData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile_Swarm.MultiPrimaryProjectileDestroyed
// ()
// Parameters:
// struct FVector                 ImpactLocation                 (Parm, ZeroConstructor, IsPlainOldData)
// double                         DestroyNetworkTime             (Parm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile_Swarm::MultiPrimaryProjectileDestroyed(const struct FVector& ImpactLocation, double DestroyNetworkTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.MultiPrimaryProjectileDestroyed");

	AShooterProjectile_Swarm_MultiPrimaryProjectileDestroyed_Params params;
	params.ImpactLocation = ImpactLocation;
	params.DestroyNetworkTime = DestroyNetworkTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile_Swarm.GetNumberOfBoidsInFlight
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterProjectile_Swarm::GetNumberOfBoidsInFlight()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.GetNumberOfBoidsInFlight");

	AShooterProjectile_Swarm_GetNumberOfBoidsInFlight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterProjectile_Swarm.DoSwarmSync
// ()

void AShooterProjectile_Swarm::DoSwarmSync()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.DoSwarmSync");

	AShooterProjectile_Swarm_DoSwarmSync_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile_Swarm.BPOnBoidExplode
// ()
// Parameters:
// int                            BoidIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// class UParticleSystemComponent* BoidParticles                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm)

void AShooterProjectile_Swarm::BPOnBoidExplode(int BoidIndex, class UParticleSystemComponent* BoidParticles, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.BPOnBoidExplode");

	AShooterProjectile_Swarm_BPOnBoidExplode_Params params;
	params.BoidIndex = BoidIndex;
	params.BoidParticles = BoidParticles;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterProjectile_Swarm.BPGetBoidSpawnLocationAndVelocity
// ()
// Parameters:
// int                            BoidIndex                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FBoid                   BoidData                       (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 SpawnLocation                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpawnVelocity                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AShooterProjectile_Swarm::BPGetBoidSpawnLocationAndVelocity(int BoidIndex, const struct FBoid& BoidData, struct FVector* SpawnLocation, struct FVector* SpawnVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterProjectile_Swarm.BPGetBoidSpawnLocationAndVelocity");

	AShooterProjectile_Swarm_BPGetBoidSpawnLocationAndVelocity_Params params;
	params.BoidIndex = BoidIndex;
	params.BoidData = BoidData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpawnLocation != nullptr)
		*SpawnLocation = params.SpawnLocation;
	if (SpawnVelocity != nullptr)
		*SpawnVelocity = params.SpawnVelocity;
}


// Function ShooterGame.ShooterWeapon_ChainSaw.ServerStopFireAnim
// ()

void AShooterWeapon_ChainSaw::ServerStopFireAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_ChainSaw.ServerStopFireAnim");

	AShooterWeapon_ChainSaw_ServerStopFireAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_ChainSaw.ServerReloadWeapon
// ()

void AShooterWeapon_ChainSaw::ServerReloadWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_ChainSaw.ServerReloadWeapon");

	AShooterWeapon_ChainSaw_ServerReloadWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_ChainSaw.ServerHit
// ()

void AShooterWeapon_ChainSaw::ServerHit()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_ChainSaw.ServerHit");

	AShooterWeapon_ChainSaw_ServerHit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_ChainSaw.ClientSimulateChangeFireAnim
// ()

void AShooterWeapon_ChainSaw::ClientSimulateChangeFireAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_ChainSaw.ClientSimulateChangeFireAnim");

	AShooterWeapon_ChainSaw_ClientSimulateChangeFireAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.SimulateInstantHit
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal ShootDir                       (Parm)
// bool                           bForceOnLocal                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ShotIndex                      (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Instant::SimulateInstantHit(const struct FVector& Origin, const struct FVector_NetQuantizeNormal& ShootDir, bool bForceOnLocal, int ShotIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.SimulateInstantHit");

	AShooterWeapon_Instant_SimulateInstantHit_Params params;
	params.Origin = Origin;
	params.ShootDir = ShootDir;
	params.bForceOnLocal = bForceOnLocal;
	params.ShotIndex = ShotIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.ServerNotifyShotOrigin
// ()
// Parameters:
// struct FVector                 Origin                         (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      Impacts                        (ConstParm, Parm, ZeroConstructor)
// TArray<struct FVector_NetQuantizeNormal> ShootDirs                      (ConstParm, Parm, ZeroConstructor)

void AShooterWeapon_Instant::ServerNotifyShotOrigin(const struct FVector& Origin, TArray<struct FHitResult> Impacts, TArray<struct FVector_NetQuantizeNormal> ShootDirs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.ServerNotifyShotOrigin");

	AShooterWeapon_Instant_ServerNotifyShotOrigin_Params params;
	params.Origin = Origin;
	params.Impacts = Impacts;
	params.ShootDirs = ShootDirs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.ServerNotifyShot
// ()
// Parameters:
// TArray<struct FHitResult>      Impacts                        (ConstParm, Parm, ZeroConstructor)
// TArray<struct FVector_NetQuantizeNormal> ShootDirs                      (ConstParm, Parm, ZeroConstructor)

void AShooterWeapon_Instant::ServerNotifyShot(TArray<struct FHitResult> Impacts, TArray<struct FVector_NetQuantizeNormal> ShootDirs)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.ServerNotifyShot");

	AShooterWeapon_Instant_ServerNotifyShot_Params params;
	params.Impacts = Impacts;
	params.ShootDirs = ShootDirs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.ServerForceShot
// ()
// Parameters:
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 StartShotLoc                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 EndShotLoc                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AShooterWeapon_Instant::ServerForceShot(const struct FHitResult& Impact, const struct FVector& StartShotLoc, const struct FVector& EndShotLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.ServerForceShot");

	AShooterWeapon_Instant_ServerForceShot_Params params;
	params.Impact = Impact;
	params.StartShotLoc = StartShotLoc;
	params.EndShotLoc = EndShotLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.NetSimulateForceShot
// ()
// Parameters:
// struct FVector                 ShotOrigin                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ShootDir                       (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Instant::NetSimulateForceShot(const struct FVector& ShotOrigin, const struct FVector& ShootDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.NetSimulateForceShot");

	AShooterWeapon_Instant_NetSimulateForceShot_Params params;
	params.ShotOrigin = ShotOrigin;
	params.ShootDir = ShootDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.GetFireLocationAndDirection
// ()
// Parameters:
// struct FVector                 Location                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Instant::GetFireLocationAndDirection(struct FVector* Location, struct FVector* Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.GetFireLocationAndDirection");

	AShooterWeapon_Instant_GetFireLocationAndDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Location != nullptr)
		*Location = params.Location;
	if (Direction != nullptr)
		*Direction = params.Direction;
}


// Function ShooterGame.ShooterWeapon_Instant.CheckRefireTimer
// ()

void AShooterWeapon_Instant::CheckRefireTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.CheckRefireTimer");

	AShooterWeapon_Instant_CheckRefireTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.BPSpawnImpactEffects
// ()
// Parameters:
// struct FHitResult              Impact                         (ConstParm, Parm, OutParm, ReferenceParm)
// struct FVector                 ShootDir                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bIsEntryHit                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          WeaponMaxRange                 (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Instant::BPSpawnImpactEffects(const struct FHitResult& Impact, const struct FVector& ShootDir, bool bIsEntryHit, float WeaponMaxRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.BPSpawnImpactEffects");

	AShooterWeapon_Instant_BPSpawnImpactEffects_Params params;
	params.Impact = Impact;
	params.ShootDir = ShootDir;
	params.bIsEntryHit = bIsEntryHit;
	params.WeaponMaxRange = WeaponMaxRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Instant.BPPostSpawnTrailEffect
// ()
// Parameters:
// class UParticleSystemComponent* TrailPSC                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 StartPoint                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 EndPoint                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)

void AShooterWeapon_Instant::BPPostSpawnTrailEffect(class UParticleSystemComponent* TrailPSC, const struct FVector& StartPoint, const struct FVector& EndPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Instant.BPPostSpawnTrailEffect");

	AShooterWeapon_Instant_BPPostSpawnTrailEffect_Params params;
	params.TrailPSC = TrailPSC;
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_FlameThrower.TickShootFX
// ()

void AShooterWeapon_FlameThrower::TickShootFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_FlameThrower.TickShootFX");

	AShooterWeapon_FlameThrower_TickShootFX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_FlameThrower.StopShootFX
// ()

void AShooterWeapon_FlameThrower::StopShootFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_FlameThrower.StopShootFX");

	AShooterWeapon_FlameThrower_StopShootFX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_FlameThrower.ServerTickShootFX
// ()

void AShooterWeapon_FlameThrower::ServerTickShootFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_FlameThrower.ServerTickShootFX");

	AShooterWeapon_FlameThrower_ServerTickShootFX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_FlameThrower.ServerStopShootFX
// ()

void AShooterWeapon_FlameThrower::ServerStopShootFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_FlameThrower.ServerStopShootFX");

	AShooterWeapon_FlameThrower_ServerStopShootFX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_FlameThrower.ServerBeginShootFX
// ()

void AShooterWeapon_FlameThrower::ServerBeginShootFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_FlameThrower.ServerBeginShootFX");

	AShooterWeapon_FlameThrower_ServerBeginShootFX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_FlameThrower.BeginShootFX
// ()

void AShooterWeapon_FlameThrower::BeginShootFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_FlameThrower.BeginShootFX");

	AShooterWeapon_FlameThrower_BeginShootFX_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_InstantPenetrating.WeaponPenetrationTrace
// ()
// Parameters:
// struct FVector                 Start                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 End                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           FilterVisuals                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDraw                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          DebugDrawDuration              (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FHitResult>      HitResults                     (Parm, OutParm, ZeroConstructor)
// TArray<bool>                   IsEntryHit                     (Parm, OutParm, ZeroConstructor)
// float                          MaxDistance                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_InstantPenetrating::WeaponPenetrationTrace(const struct FVector& Start, const struct FVector& End, bool FilterVisuals, bool bDebugDraw, float DebugDrawDuration, TArray<struct FHitResult>* HitResults, TArray<bool>* IsEntryHit, float* MaxDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_InstantPenetrating.WeaponPenetrationTrace");

	AShooterWeapon_InstantPenetrating_WeaponPenetrationTrace_Params params;
	params.Start = Start;
	params.End = End;
	params.FilterVisuals = FilterVisuals;
	params.bDebugDraw = bDebugDraw;
	params.DebugDrawDuration = DebugDrawDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResults != nullptr)
		*HitResults = params.HitResults;
	if (IsEntryHit != nullptr)
		*IsEntryHit = params.IsEntryHit;
	if (MaxDistance != nullptr)
		*MaxDistance = params.MaxDistance;
}


// Function ShooterGame.ShooterWeapon_InstantPenetrating.PassiveUseAmmo
// ()
// Parameters:
// int                            amount                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AShooterWeapon_InstantPenetrating::PassiveUseAmmo(int amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_InstantPenetrating.PassiveUseAmmo");

	AShooterWeapon_InstantPenetrating_PassiveUseAmmo_Params params;
	params.amount = amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_InstantPenetrating.BPStopPenetratingAtHit
// ()
// Parameters:
// struct FHitResult              CurrentHit                     (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           bIsEntryHit                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentDistance                (Parm, ZeroConstructor, IsPlainOldData)
// float                          CurrentMaxDistance             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_InstantPenetrating::BPStopPenetratingAtHit(const struct FHitResult& CurrentHit, bool bIsEntryHit, float CurrentDistance, float CurrentMaxDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_InstantPenetrating.BPStopPenetratingAtHit");

	AShooterWeapon_InstantPenetrating_BPStopPenetratingAtHit_Params params;
	params.CurrentHit = CurrentHit;
	params.bIsEntryHit = bIsEntryHit;
	params.CurrentDistance = CurrentDistance;
	params.CurrentMaxDistance = CurrentMaxDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.PrimalWeaponElectronicBinoculars.ServerSetActivateNightVision
// ()
// Parameters:
// int8_t                         bActive                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalWeaponElectronicBinoculars::ServerSetActivateNightVision(int8_t bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponElectronicBinoculars.ServerSetActivateNightVision");

	APrimalWeaponElectronicBinoculars_ServerSetActivateNightVision_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponElectronicBinoculars.ClientSetActivateNightVision
// ()
// Parameters:
// int8_t                         bActive                        (Parm, ZeroConstructor, IsPlainOldData)

void APrimalWeaponElectronicBinoculars::ClientSetActivateNightVision(int8_t bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponElectronicBinoculars.ClientSetActivateNightVision");

	APrimalWeaponElectronicBinoculars_ClientSetActivateNightVision_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGPS.ServerShowNone
// ()

void APrimalWeaponGPS::ServerShowNone()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGPS.ServerShowNone");

	APrimalWeaponGPS_ServerShowNone_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGPS.ServerShowMapOnly
// ()

void APrimalWeaponGPS::ServerShowMapOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGPS.ServerShowMapOnly");

	APrimalWeaponGPS_ServerShowMapOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGPS.ServerShowGPSOnly
// ()

void APrimalWeaponGPS::ServerShowGPSOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGPS.ServerShowGPSOnly");

	APrimalWeaponGPS_ServerShowGPSOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGPS.ServerShowBoth
// ()

void APrimalWeaponGPS::ServerShowBoth()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGPS.ServerShowBoth");

	APrimalWeaponGPS_ServerShowBoth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGPS.ServerSetUseCompassInsteadOfGPS
// ()
// Parameters:
// bool                           bUseCompass                    (Parm, ZeroConstructor, IsPlainOldData)

void APrimalWeaponGPS::ServerSetUseCompassInsteadOfGPS(bool bUseCompass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGPS.ServerSetUseCompassInsteadOfGPS");

	APrimalWeaponGPS_ServerSetUseCompassInsteadOfGPS_Params params;
	params.bUseCompass = bUseCompass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGPS.RefreshUseCompass
// ()

void APrimalWeaponGPS::RefreshUseCompass()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGPS.RefreshUseCompass");

	APrimalWeaponGPS_RefreshUseCompass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.ShouldShowTargetingArray
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_Climb::ShouldShowTargetingArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ShouldShowTargetingArray");

	AShooterWeapon_Climb_ShouldShowTargetingArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.SetClimbingAnchorPoint
// ()
// Parameters:
// unsigned char                  Type                           (Parm, ZeroConstructor, IsPlainOldData)
// unsigned char                  Mode                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantize100  Direction                      (Parm)
// struct FVector_NetQuantize100  Position                       (Parm)
// struct FVector_NetQuantizeNormal Normal                         (Parm)

void AShooterWeapon_Climb::SetClimbingAnchorPoint(unsigned char Type, unsigned char Mode, const struct FVector_NetQuantize100& Direction, const struct FVector_NetQuantize100& Position, const struct FVector_NetQuantizeNormal& Normal)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.SetClimbingAnchorPoint");

	AShooterWeapon_Climb_SetClimbingAnchorPoint_Params params;
	params.Type = Type;
	params.Mode = Mode;
	params.Direction = Direction;
	params.Position = Position;
	params.Normal = Normal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.ServerSetClimbingLeftArm
// ()
// Parameters:
// bool                           ClimbingLeftArm                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Climb::ServerSetClimbingLeftArm(bool ClimbingLeftArm)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ServerSetClimbingLeftArm");

	AShooterWeapon_Climb_ServerSetClimbingLeftArm_Params params;
	params.ClimbingLeftArm = ClimbingLeftArm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.ServerRequestClimbMove
// ()
// Parameters:
// unsigned char                  Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ClimbingLeftArm                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Climb::ServerRequestClimbMove(unsigned char Type, const struct FVector& Direction, bool ClimbingLeftArm)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ServerRequestClimbMove");

	AShooterWeapon_Climb_ServerRequestClimbMove_Params params;
	params.Type = Type;
	params.Direction = Direction;
	params.ClimbingLeftArm = ClimbingLeftArm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.ServerReleaseClimbingAnchor
// ()
// Parameters:
// bool                           bWithJump                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector_NetQuantizeNormal InputDir                       (Parm)
// bool                           bForceMinTimeCheckBeforeReleasing (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Climb::ServerReleaseClimbingAnchor(bool bWithJump, const struct FVector_NetQuantizeNormal& InputDir, bool bForceMinTimeCheckBeforeReleasing)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ServerReleaseClimbingAnchor");

	AShooterWeapon_Climb_ServerReleaseClimbingAnchor_Params params;
	params.bWithJump = bWithJump;
	params.InputDir = InputDir;
	params.bForceMinTimeCheckBeforeReleasing = bForceMinTimeCheckBeforeReleasing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.ServerPerformTurn
// ()
// Parameters:
// bool                           ClimbingLeftArm                (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Climb::ServerPerformTurn(bool ClimbingLeftArm)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ServerPerformTurn");

	AShooterWeapon_Climb_ServerPerformTurn_Params params;
	params.ClimbingLeftArm = ClimbingLeftArm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.ReleaseClimbingAnchor
// ()
// Parameters:
// bool                           bWithJump                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InputDir                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceMinTimeCheckBeforeReleasing (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Climb::ReleaseClimbingAnchor(bool bWithJump, const struct FVector& InputDir, bool bForceMinTimeCheckBeforeReleasing)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ReleaseClimbingAnchor");

	AShooterWeapon_Climb_ReleaseClimbingAnchor_Params params;
	params.bWithJump = bWithJump;
	params.InputDir = InputDir;
	params.bForceMinTimeCheckBeforeReleasing = bForceMinTimeCheckBeforeReleasing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.IsClimbingUp
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_Climb::IsClimbingUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.IsClimbingUp");

	AShooterWeapon_Climb_IsClimbingUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.IsClimbingHanging
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_Climb::IsClimbingHanging()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.IsClimbingHanging");

	AShooterWeapon_Climb_IsClimbingHanging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.GetViewLocation
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AShooterWeapon_Climb::GetViewLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.GetViewLocation");

	AShooterWeapon_Climb_GetViewLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.GetViewDirection
// ()
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FVector AShooterWeapon_Climb::GetViewDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.GetViewDirection");

	AShooterWeapon_Climb_GetViewDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.ClimbTrace
// ()
// Parameters:
// struct FHitResult              HitResult                      (Parm, OutParm)
// unsigned char                  Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Direction                      (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ECollisionChannel> Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_Climb::ClimbTrace(unsigned char Type, const struct FVector& Direction, TEnumAsByte<ECollisionChannel> Channel, struct FHitResult* HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ClimbTrace");

	AShooterWeapon_Climb_ClimbTrace_Params params;
	params.Type = Type;
	params.Direction = Direction;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitResult != nullptr)
		*HitResult = params.HitResult;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.ClientNotifyNoClimbSurface
// ()

void AShooterWeapon_Climb::ClientNotifyNoClimbSurface()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.ClientNotifyNoClimbSurface");

	AShooterWeapon_Climb_ClientNotifyNoClimbSurface_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Climb.CanLandOnSurface
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_Climb::CanLandOnSurface(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.CanLandOnSurface");

	AShooterWeapon_Climb_CanLandOnSurface_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.CanClimbOnSurface
// ()
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_Climb::CanClimbOnSurface(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.CanClimbOnSurface");

	AShooterWeapon_Climb_CanClimbOnSurface_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Climb.BPUpdateClimbTarget
// ()
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bClimbing                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AnchorPosition                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 AnchorNormal                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bCanClimb                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCanLand                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 ClimbLocation                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// struct FVector                 ClimbNormal                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bHudVisible                    (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Climb::BPUpdateClimbTarget(float DeltaSeconds, bool bClimbing, const struct FVector& AnchorPosition, const struct FVector& AnchorNormal, bool bCanClimb, bool bCanLand, const struct FVector& ClimbLocation, const struct FVector& ClimbNormal, bool bHudVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Climb.BPUpdateClimbTarget");

	AShooterWeapon_Climb_BPUpdateClimbTarget_Params params;
	params.DeltaSeconds = DeltaSeconds;
	params.bClimbing = bClimbing;
	params.AnchorPosition = AnchorPosition;
	params.AnchorNormal = AnchorNormal;
	params.bCanClimb = bCanClimb;
	params.bCanLand = bCanLand;
	params.ClimbLocation = ClimbLocation;
	params.ClimbNormal = ClimbNormal;
	params.bHudVisible = bHudVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Placer.ServerDetonateExplosives
// ()

void AShooterWeapon_Placer::ServerDetonateExplosives()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Placer.ServerDetonateExplosives");

	AShooterWeapon_Placer_ServerDetonateExplosives_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Placer.PlaceStructureWithSecondaryAction
// ()

void AShooterWeapon_Placer::PlaceStructureWithSecondaryAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Placer.PlaceStructureWithSecondaryAction");

	AShooterWeapon_Placer_PlaceStructureWithSecondaryAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_Placer.GetPlacementOrigin
// ()
// Parameters:
// struct FVector                 OriginLocation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FRotator                OriginRotation                 (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_Placer::GetPlacementOrigin(struct FVector* OriginLocation, struct FRotator* OriginRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Placer.GetPlacementOrigin");

	AShooterWeapon_Placer_GetPlacementOrigin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OriginLocation != nullptr)
		*OriginLocation = params.OriginLocation;
	if (OriginRotation != nullptr)
		*OriginRotation = params.OriginRotation;
}


// Function ShooterGame.ShooterWeapon_Placer.BPSecondaryAction
// ()
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AShooterWeapon_Placer::BPSecondaryAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Placer.BPSecondaryAction");

	AShooterWeapon_Placer_BPSecondaryAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.ShooterWeapon_Placer.BPPrefireAction
// ()

void AShooterWeapon_Placer::BPPrefireAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_Placer.BPPrefireAction");

	AShooterWeapon_Placer_BPPrefireAction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_PlacerTransGPS.ServerSetFrequency
// ()
// Parameters:
// float                          Freq                           (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_PlacerTransGPS::ServerSetFrequency(float Freq)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_PlacerTransGPS.ServerSetFrequency");

	AShooterWeapon_PlacerTransGPS_ServerSetFrequency_Params params;
	params.Freq = Freq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_PlacerTransGPS.ServerAttachToSelf
// ()

void AShooterWeapon_PlacerTransGPS::ServerAttachToSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_PlacerTransGPS.ServerAttachToSelf");

	AShooterWeapon_PlacerTransGPS_ServerAttachToSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.ShooterWeapon_PlacerTransGPS.ClientShowTransponders
// ()
// Parameters:
// bool                           bValue                         (Parm, ZeroConstructor, IsPlainOldData)

void AShooterWeapon_PlacerTransGPS::ClientShowTransponders(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.ShooterWeapon_PlacerTransGPS.ClientShowTransponders");

	AShooterWeapon_PlacerTransGPS_ClientShowTransponders_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponBow.UpdateTPVBowAnimation
// ()

void APrimalWeaponBow::UpdateTPVBowAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponBow.UpdateTPVBowAnimation");

	APrimalWeaponBow_UpdateTPVBowAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponBow.ServerSetPullString
// ()
// Parameters:
// bool                           bIsPulling                     (Parm, ZeroConstructor, IsPlainOldData)

void APrimalWeaponBow::ServerSetPullString(bool bIsPulling)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponBow.ServerSetPullString");

	APrimalWeaponBow_ServerSetPullString_Params params;
	params.bIsPulling = bIsPulling;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponBoomerang.OnRep_ClientHideBoomerang
// ()

void APrimalWeaponBoomerang::OnRep_ClientHideBoomerang()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponBoomerang.OnRep_ClientHideBoomerang");

	APrimalWeaponBoomerang_OnRep_ClientHideBoomerang_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGrenade.UnHidePin
// ()

void APrimalWeaponGrenade::UnHidePin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGrenade.UnHidePin");

	APrimalWeaponGrenade_UnHidePin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGrenade.UnHideGrenade
// ()

void APrimalWeaponGrenade::UnHideGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGrenade.UnHideGrenade");

	APrimalWeaponGrenade_UnHideGrenade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGrenade.HidePin
// ()

void APrimalWeaponGrenade::HidePin()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGrenade.HidePin");

	APrimalWeaponGrenade_HidePin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGrenade.HideGrenade
// ()

void APrimalWeaponGrenade::HideGrenade()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGrenade.HideGrenade");

	APrimalWeaponGrenade_HideGrenade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.PrimalWeaponGrenade.BPGetProjectileSpeed
// ()
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APrimalWeaponGrenade::BPGetProjectileSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.PrimalWeaponGrenade.BPGetProjectileSpeed");

	APrimalWeaponGrenade_BPGetProjectileSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.SkyBoxLoader.SetSkyTextureIndices
// ()
// Parameters:
// int                            Texture0                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            Texture1                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASkyBoxLoader::SetSkyTextureIndices(int Texture0, int Texture1)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SkyBoxLoader.SetSkyTextureIndices");

	ASkyBoxLoader_SetSkyTextureIndices_Params params;
	params.Texture0 = Texture0;
	params.Texture1 = Texture1;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.SkyBoxLoader.LoadSkyTextureIndexArray
// ()
// Parameters:
// TArray<int>                    TextureInices                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASkyBoxLoader::LoadSkyTextureIndexArray(TArray<int> TextureInices)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SkyBoxLoader.LoadSkyTextureIndexArray");

	ASkyBoxLoader_LoadSkyTextureIndexArray_Params params;
	params.TextureInices = TextureInices;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.SkyBoxLoader.LoadSkyTextureIndex
// ()
// Parameters:
// int                            TextureIdx                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASkyBoxLoader::LoadSkyTextureIndex(int TextureIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SkyBoxLoader.LoadSkyTextureIndex");

	ASkyBoxLoader_LoadSkyTextureIndex_Params params;
	params.TextureIdx = TextureIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.SkyBoxLoader.K2_OnTextureIndicesLoaded
// ()
// Parameters:
// TArray<int>                    TextureIndices                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ASkyBoxLoader::K2_OnTextureIndicesLoaded(TArray<int> TextureIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SkyBoxLoader.K2_OnTextureIndicesLoaded");

	ASkyBoxLoader_K2_OnTextureIndicesLoaded_Params params;
	params.TextureIndices = TextureIndices;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.StatWidget.ClickedButton
// ()
// Parameters:
// class UWidget*                 clickedWidget                  (Parm, ZeroConstructor, IsPlainOldData)

void UStatWidget::ClickedButton(class UWidget* clickedWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StatWidget.ClickedButton");

	UStatWidget_ClickedButton_Params params;
	params.clickedWidget = clickedWidget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.StructurePaintingComponent.ClientPaint
// ()
// Parameters:
// class AShooterPlayerController* Painter                        (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FPaintItem>      Paints                         (ConstParm, Parm, ZeroConstructor)

void UStructurePaintingComponent::ClientPaint(class AShooterPlayerController* Painter, TArray<struct FPaintItem> Paints)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructurePaintingComponent.ClientPaint");

	UStructurePaintingComponent_ClientPaint_Params params;
	params.Painter = Painter;
	params.Paints = Paints;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.StructurePreventionZoneVolume.BPIsWithinAnyStructurePreventionVolume
// ()
// Parameters:
// class UWorld*                  ForWorld                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 AtPoint                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           bCheckDisabled                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsForDamageCheck              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreOptionalVolumes         (Parm, ZeroConstructor, IsPlainOldData)
// class AStructurePreventionZoneVolume* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AStructurePreventionZoneVolume* AStructurePreventionZoneVolume::BPIsWithinAnyStructurePreventionVolume(class UWorld* ForWorld, const struct FVector& AtPoint, bool bCheckDisabled, bool bIsForDamageCheck, bool bIgnoreOptionalVolumes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructurePreventionZoneVolume.BPIsWithinAnyStructurePreventionVolume");

	AStructurePreventionZoneVolume_BPIsWithinAnyStructurePreventionVolume_Params params;
	params.ForWorld = ForWorld;
	params.AtPoint = AtPoint;
	params.bCheckDisabled = bCheckDisabled;
	params.bIsForDamageCheck = bIsForDamageCheck;
	params.bIgnoreOptionalVolumes = bIgnoreOptionalVolumes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_SetGlassModelEdgeVisibility
// ()
// Parameters:
// int                            index                          (Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMeshComponent*    Top                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UStaticMeshComponent*    Bottom                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UStaticMeshComponent*    Left                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UStaticMeshComponent*    Right                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bIsTriangle                    (Parm, ZeroConstructor, IsPlainOldData)

void UStructuresPlus::SP_SetGlassModelEdgeVisibility(int index, class UStaticMeshComponent* Top, class UStaticMeshComponent* Bottom, class UStaticMeshComponent* Left, class UStaticMeshComponent* Right, bool bIsTriangle)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_SetGlassModelEdgeVisibility");

	UStructuresPlus_SP_SetGlassModelEdgeVisibility_Params params;
	params.index = index;
	params.Top = Top;
	params.Bottom = Bottom;
	params.Left = Left;
	params.Right = Right;
	params.bIsTriangle = bIsTriangle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.StructuresPlus.SP_SafeRemoveFromInventory
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalInventoryComponent* Inventory                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            ToRemove                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bExactClassMatch               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreHotbar                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UStructuresPlus::SP_SafeRemoveFromInventory(class UClass* ItemClass, class UPrimalInventoryComponent* Inventory, int ToRemove, bool bExactClassMatch, bool bIgnoreHotbar)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_SafeRemoveFromInventory");

	UStructuresPlus_SP_SafeRemoveFromInventory_Params params;
	params.ItemClass = ItemClass;
	params.Inventory = Inventory;
	params.ToRemove = ToRemove;
	params.bExactClassMatch = bExactClassMatch;
	params.bIgnoreHotbar = bIgnoreHotbar;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_MessageClient
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  Message                        (Parm, ZeroConstructor)
// TEnumAsByte<ESPMessageType>    MsgType                        (Parm, ZeroConstructor, IsPlainOldData)

void UStructuresPlus::SP_MessageClient(class APlayerController* PC, const class FString& Message, TEnumAsByte<ESPMessageType> MsgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_MessageClient");

	UStructuresPlus_SP_MessageClient_Params params;
	params.PC = PC;
	params.Message = Message;
	params.MsgType = MsgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.StructuresPlus.SP_IsValidStructureForConnection
// ()
// Parameters:
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UClass*>          StructureTypes                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStructuresPlus::SP_IsValidStructureForConnection(class APrimalStructure* Structure, TArray<class UClass*> StructureTypes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_IsValidStructureForConnection");

	UStructuresPlus_SP_IsValidStructureForConnection_Params params;
	params.Structure = Structure;
	params.StructureTypes = StructureTypes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_IsSuitablePullTarget
// ()
// Parameters:
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStructuresPlus::SP_IsSuitablePullTarget(class AActor* TargetActor, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_IsSuitablePullTarget");

	UStructuresPlus_SP_IsSuitablePullTarget_Params params;
	params.TargetActor = TargetActor;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_IsLinkedToPowerOrWater
// ()
// Parameters:
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStructuresPlus::SP_IsLinkedToPowerOrWater(class APrimalStructure* Structure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_IsLinkedToPowerOrWater");

	UStructuresPlus_SP_IsLinkedToPowerOrWater_Params params;
	params.Structure = Structure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_IsFuel
// ()
// Parameters:
// class UPrimalInventoryComponent* Inventory                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStructuresPlus::SP_IsFuel(class UPrimalInventoryComponent* Inventory, class UClass* ItemClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_IsFuel");

	UStructuresPlus_SP_IsFuel_Params params;
	params.Inventory = Inventory;
	params.ItemClass = ItemClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_IsFlexibleConnectionLinked
// ()
// Parameters:
// TArray<class APrimalStructure*> Structures                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class APrimalStructure*        NewStructure                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStructuresPlus::SP_IsFlexibleConnectionLinked(TArray<class APrimalStructure*> Structures, class APrimalStructure* NewStructure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_IsFlexibleConnectionLinked");

	UStructuresPlus_SP_IsFlexibleConnectionLinked_Params params;
	params.Structures = Structures;
	params.NewStructure = NewStructure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_IsConnectedToInfiniteWaterSource
// ()
// Parameters:
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStructuresPlus::SP_IsConnectedToInfiniteWaterSource(class APrimalStructure* Structure)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_IsConnectedToInfiniteWaterSource");

	UStructuresPlus_SP_IsConnectedToInfiniteWaterSource_Params params;
	params.Structure = Structure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetSpecialMenuColor
// ()
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UStructuresPlus::SP_GetSpecialMenuColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetSpecialMenuColor");

	UStructuresPlus_SP_GetSpecialMenuColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetNearbyStructuresForFlexibleConnection
// ()
// Parameters:
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  SearchClass                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Range                          (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalStructure*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APrimalStructure*> UStructuresPlus::SP_GetNearbyStructuresForFlexibleConnection(class APrimalStructure* Structure, class UClass* SearchClass, float Range)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetNearbyStructuresForFlexibleConnection");

	UStructuresPlus_SP_GetNearbyStructuresForFlexibleConnection_Params params;
	params.Structure = Structure;
	params.SearchClass = SearchClass;
	params.Range = Range;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetMessageTypeColor
// ()
// Parameters:
// TEnumAsByte<ESPMessageType>    MsgType                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

struct FLinearColor UStructuresPlus::SP_GetMessageTypeColor(TEnumAsByte<ESPMessageType> MsgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetMessageTypeColor");

	UStructuresPlus_SP_GetMessageTypeColor_Params params;
	params.MsgType = MsgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetInventoryWeightMultiplier
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimalInventoryComponent* Inventory                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UStructuresPlus::SP_GetInventoryWeightMultiplier(class UClass* ItemClass, class UPrimalInventoryComponent* Inventory)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetInventoryWeightMultiplier");

	UStructuresPlus_SP_GetInventoryWeightMultiplier_Params params;
	params.ItemClass = ItemClass;
	params.Inventory = Inventory;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetInventoryCapacityForItem
// ()
// Parameters:
// class UClass*                  ItemClass                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TargetActor                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UStructuresPlus::SP_GetInventoryCapacityForItem(class UClass* ItemClass, class AActor* TargetActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetInventoryCapacityForItem");

	UStructuresPlus_SP_GetInventoryCapacityForItem_Params params;
	params.ItemClass = ItemClass;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetFloatOption
// ()
// Parameters:
// class AGameMode*               GameMode                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  OptionName                     (Parm, ZeroConstructor)
// float                          Default                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Max                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UStructuresPlus::SP_GetFloatOption(class AGameMode* GameMode, const class FString& OptionName, float Default, float Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetFloatOption");

	UStructuresPlus_SP_GetFloatOption_Params params;
	params.GameMode = GameMode;
	params.OptionName = OptionName;
	params.Default = Default;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetEmptyInventorySlotCount
// ()
// Parameters:
// class UPrimalInventoryComponent* Inventory                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bIsDino                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UStructuresPlus::SP_GetEmptyInventorySlotCount(class UPrimalInventoryComponent* Inventory, bool bIsDino)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetEmptyInventorySlotCount");

	UStructuresPlus_SP_GetEmptyInventorySlotCount_Params params;
	params.Inventory = Inventory;
	params.bIsDino = bIsDino;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetCharacterWeights
// ()
// Parameters:
// class APrimalCharacter*        Character                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxWeight                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          CurrentWeight                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UStructuresPlus::SP_GetCharacterWeights(class APrimalCharacter* Character, float* MaxWeight, float* CurrentWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetCharacterWeights");

	UStructuresPlus_SP_GetCharacterWeights_Params params;
	params.Character = Character;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MaxWeight != nullptr)
		*MaxWeight = params.MaxWeight;
	if (CurrentWeight != nullptr)
		*CurrentWeight = params.CurrentWeight;
}


// Function ShooterGame.StructuresPlus.SP_GetCentralPointForFlexibleConnection
// ()
// Parameters:
// TArray<class APrimalStructure*> Structures                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class APrimalStructure*        ThisStructure                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDrawDebug                     (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FVector>         ConnectionPoints               (Parm, OutParm, ZeroConstructor)
// struct FVector                 CentralPoint                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UStructuresPlus::SP_GetCentralPointForFlexibleConnection(TArray<class APrimalStructure*> Structures, class APrimalStructure* ThisStructure, bool bDrawDebug, TArray<struct FVector>* ConnectionPoints, struct FVector* CentralPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetCentralPointForFlexibleConnection");

	UStructuresPlus_SP_GetCentralPointForFlexibleConnection_Params params;
	params.Structures = Structures;
	params.ThisStructure = ThisStructure;
	params.bDrawDebug = bDrawDebug;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ConnectionPoints != nullptr)
		*ConnectionPoints = params.ConnectionPoints;
	if (CentralPoint != nullptr)
		*CentralPoint = params.CentralPoint;
}


// Function ShooterGame.StructuresPlus.SP_GetBoolOption
// ()
// Parameters:
// class AGameMode*               GameMode                       (Parm, ZeroConstructor, IsPlainOldData)
// class FString                  OptionName                     (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UStructuresPlus::SP_GetBoolOption(class AGameMode* GameMode, const class FString& OptionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetBoolOption");

	UStructuresPlus_SP_GetBoolOption_Params params;
	params.GameMode = GameMode;
	params.OptionName = OptionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetAllConnectedStructuresOfTypes
// ()
// Parameters:
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class UClass*>          StructureTypes                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class APrimalStructure*> ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class APrimalStructure*> UStructuresPlus::SP_GetAllConnectedStructuresOfTypes(class APrimalStructure* Structure, TArray<class UClass*> StructureTypes)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetAllConnectedStructuresOfTypes");

	UStructuresPlus_SP_GetAllConnectedStructuresOfTypes_Params params;
	params.Structure = Structure;
	params.StructureTypes = StructureTypes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.StructuresPlus.SP_GetAccessibleInventoriesInRange
// ()
// Parameters:
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          PullRange                      (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ActorToIgnore                  (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class APrimalDinoCharacter*> Dinos                          (Parm, OutParm, ZeroConstructor)
// TArray<class APrimalStructureItemContainer*> Structures                     (Parm, OutParm, ZeroConstructor)

void UStructuresPlus::SP_GetAccessibleInventoriesInRange(class APlayerController* PC, const struct FVector& Location, float PullRange, class AActor* ActorToIgnore, TArray<class APrimalDinoCharacter*>* Dinos, TArray<class APrimalStructureItemContainer*>* Structures)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_GetAccessibleInventoriesInRange");

	UStructuresPlus_SP_GetAccessibleInventoriesInRange_Params params;
	params.PC = PC;
	params.Location = Location;
	params.PullRange = PullRange;
	params.ActorToIgnore = ActorToIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Dinos != nullptr)
		*Dinos = params.Dinos;
	if (Structures != nullptr)
		*Structures = params.Structures;
}


// Function ShooterGame.StructuresPlus.SP_AlterGlassTransparency
// ()
// Parameters:
// TEnumAsByte<EGlassTransparencyType> GlassSettingsTransparencyType  (Parm, ZeroConstructor, IsPlainOldData)
// float                          GlassSettingsTransparency      (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* InsideMIC                      (Parm, ZeroConstructor, IsPlainOldData)
// class UMaterialInstanceDynamic* OutsideMIC                     (Parm, ZeroConstructor, IsPlainOldData)

void UStructuresPlus::SP_AlterGlassTransparency(TEnumAsByte<EGlassTransparencyType> GlassSettingsTransparencyType, float GlassSettingsTransparency, class UMaterialInstanceDynamic* InsideMIC, class UMaterialInstanceDynamic* OutsideMIC)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_AlterGlassTransparency");

	UStructuresPlus_SP_AlterGlassTransparency_Params params;
	params.GlassSettingsTransparencyType = GlassSettingsTransparencyType;
	params.GlassSettingsTransparency = GlassSettingsTransparency;
	params.InsideMIC = InsideMIC;
	params.OutsideMIC = OutsideMIC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.StructuresPlus.SP_AddMenuEntries
// ()
// Parameters:
// TArray<struct FMultiUseEntry>  EntriesIn                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class APlayerController*       PC                             (Parm, ZeroConstructor, IsPlainOldData)
// class APrimalStructure*        Structure                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsGlass                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<struct FMultiUseEntry>  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FMultiUseEntry> UStructuresPlus::SP_AddMenuEntries(TArray<struct FMultiUseEntry> EntriesIn, class APlayerController* PC, class APrimalStructure* Structure, bool bIsGlass)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.StructuresPlus.SP_AddMenuEntries");

	UStructuresPlus_SP_AddMenuEntries_Params params;
	params.EntriesIn = EntriesIn;
	params.PC = PC;
	params.Structure = Structure;
	params.bIsGlass = bIsGlass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function ShooterGame.SupplyCrateSpawningVolume.SpawnCratesFromAllVolumes
// ()
// Parameters:
// class UWorld*                  TheWorld                       (Parm, ZeroConstructor, IsPlainOldData)

void ASupplyCrateSpawningVolume::SpawnCratesFromAllVolumes(class UWorld* TheWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SupplyCrateSpawningVolume.SpawnCratesFromAllVolumes");

	ASupplyCrateSpawningVolume_SpawnCratesFromAllVolumes_Params params;
	params.TheWorld = TheWorld;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.SupplyCrateSpawningVolume.SpawnCratesFromAllPoints
// ()

void ASupplyCrateSpawningVolume::SpawnCratesFromAllPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SupplyCrateSpawningVolume.SpawnCratesFromAllPoints");

	ASupplyCrateSpawningVolume_SpawnCratesFromAllPoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.SupplyCrateSpawningVolume.SetSpawnEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASupplyCrateSpawningVolume::SetSpawnEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SupplyCrateSpawningVolume.SetSpawnEnabled");

	ASupplyCrateSpawningVolume_SetSpawnEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.SupplyCrateSpawningVolume.CheckForSupplyCrateStart
// ()

void ASupplyCrateSpawningVolume::CheckForSupplyCrateStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SupplyCrateSpawningVolume.CheckForSupplyCrateStart");

	ASupplyCrateSpawningVolume_CheckForSupplyCrateStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.SupplyCrateSpawningVolume.CheckCrateSpawn
// ()

void ASupplyCrateSpawningVolume::CheckCrateSpawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.SupplyCrateSpawningVolume.CheckCrateSpawn");

	ASupplyCrateSpawningVolume_CheckCrateSpawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TogglePainVolume.TogglePainVolumeEvent__DelegateSignature
// ()
// Parameters:
// class ATogglePainVolume*       ForPainVolume                  (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  VictimActor                    (Parm, ZeroConstructor, IsPlainOldData)

void ATogglePainVolume::TogglePainVolumeEvent__DelegateSignature(class ATogglePainVolume* ForPainVolume, class AActor* VictimActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TogglePainVolume.TogglePainVolumeEvent__DelegateSignature");

	ATogglePainVolume_TogglePainVolumeEvent__DelegateSignature_Params params;
	params.ForPainVolume = ForPainVolume;
	params.VictimActor = VictimActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TogglePainVolume.SetPainVolumeEnabled
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ATogglePainVolume::SetPainVolumeEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TogglePainVolume.SetPainVolumeEnabled");

	ATogglePainVolume_SetPainVolumeEnabled_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TogglePainVolume.OnInterpToggle
// ()
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ATogglePainVolume::OnInterpToggle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TogglePainVolume.OnInterpToggle");

	ATogglePainVolume_OnInterpToggle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TogglePainVolume.OnEndOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ATogglePainVolume::OnEndOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TogglePainVolume.OnEndOverlap");

	ATogglePainVolume_OnEndOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TogglePainVolume.OnBeginOverlap
// ()
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void ATogglePainVolume::OnBeginOverlap(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TogglePainVolume.OnBeginOverlap");

	ATogglePainVolume_OnBeginOverlap_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function ShooterGame.TogglePainVolume.GetOverlappedActors
// ()
// Parameters:
// TArray<class AActor*>          OutActors                      (Parm, OutParm, ZeroConstructor)

void ATogglePainVolume::GetOverlappedActors(TArray<class AActor*>* OutActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TogglePainVolume.GetOverlappedActors");

	ATogglePainVolume_GetOverlappedActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActors != nullptr)
		*OutActors = params.OutActors;
}


// Function ShooterGame.TogglePainVolume.GetOverlappedActorNum
// ()
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ATogglePainVolume::GetOverlappedActorNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function ShooterGame.TogglePainVolume.GetOverlappedActorNum");

	ATogglePainVolume_GetOverlappedActorNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
